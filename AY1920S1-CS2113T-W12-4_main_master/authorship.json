[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    archiveBaseName \u003d \"\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    archiveVersion \u003d \"v1.3\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.5.0\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    compile group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u002711.0.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "lionlim97": 16,
      "-": 46
    }
  },
  {
    "path": "src/main/java/Commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import UserInterface.AlertBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the command to add a Task object to a TaskList object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private final Assignment task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task The Task object to be added"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public AddCommand(Assignment task) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the adding of a Task object to a TaskList object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and displaying the add task response."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the add task message"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display add task message"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(LookupTable LT, TaskList events, TaskList deadlines, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String out \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        AlertBox alertBox \u003d new AlertBox();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        ArrayList\u003cString\u003e conflict \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (task.getType().equals(\"[E]\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e eventsMap \u003d events.getMap();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            if(eventsMap.containsKey(task.getModCode()) \u0026\u0026 eventsMap.get(task.getModCode()).containsKey(task.getDate())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                ArrayList\u003cAssignment\u003e temp \u003d eventsMap.get(task.getModCode()).get(task.getDate());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for (Assignment task : temp) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        if (task.getTime().equals(this.task.getTime())) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            conflict.add(task.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            int size \u003d events.taskListSize();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            if (conflict.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                events.addTask(this.task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                out \u003d ui.showAdd(this.task,size);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                storage.updateEventList(events);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                out \u003d \"Sorry, you have similar events at the same time and on the same day \\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                String show \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                for (int i \u003d 0; i\u003c conflict.size();i++){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    show +\u003d conflict.get(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                alertBox.display(\"Warning\", out, show, Alert.AlertType.WARNING);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } else if (task.getType().equals(\"[D]\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            deadlines.addTask(this.task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            out \u003d ui.showAdd(this.task, deadlines.taskListSize());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 23,
      "lionlim97": 23,
      "-": 32
    }
  },
  {
    "path": "src/main/java/Commands/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the command to end the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the updating of the file with current list of tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the TaskList object and displays the goodbye message"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the goodbye message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display goodbye message"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String execute(LookupTable LT, TaskList events, TaskList deadlines, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showBye();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "lionlim97": 8,
      "-": 18
    }
  },
  {
    "path": "src/main/java/Commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Abstract class Command with methods representing all the Command subclasses to be"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * carried out when an input is entered by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public abstract String execute(LookupTable LT, TaskList events, TaskList deadlines, Ui ui, Storage storage) throws Exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "lionlim97": 6,
      "-": 7
    }
  },
  {
    "path": "src/main/java/Commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import DukeExceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the command to delete a Task object from a TaskList object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Assignment task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList listToChange;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a DeleteCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param task The task to be deleted"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param list The name of the TaskList that requires changing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public DeleteCommand(String list, Assignment task){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the deletion of a task inside the TaskList object with the given index."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the delete task message"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display delete task message"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException On ArrayList out of bound error"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(LookupTable LT, TaskList events, TaskList deadlines, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "       try{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (list.equals(\"event\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                events.removeTask(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                storage.updateEventList(events);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                listToChange \u003d events;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else if (list.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                deadlines.removeTask(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                listToChange \u003d deadlines;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return ui.showDelete(task, listToChange.taskListSize());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } catch(ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeException(\"\\u2639\" + \" OOPS!!! I\u0027m sorry, but we cannot find the input task  :-(\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 7,
      "lionlim97": 25,
      "hwbjerry": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/Commands/DoWithinPeriodTasksCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import UserInterface.AlertBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Represents the command that deals with tasks that need to be done within a certain period"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class DoWithinPeriodTasksCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String taskDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final boolean isValid;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Creates a DoWithinPeriodTasksCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param taskDescription The task description given"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param startDate The start date given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param endDate The end date given"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param isValid is used to store the validity of user\u0027s input date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public DoWithinPeriodTasksCommand (String taskDescription, String startDate, String endDate, boolean isValid) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.isValid \u003d isValid;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Executes the adding of Do Within Period Tasks object into TaskList object and displays."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * AlertBox to show reminder."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param events The events TaskList object that contain event tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param deadlines The deadlines TaskList object that contain deadline tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param ui The Ui object to display the add task message"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display reminder message"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String execute(LookupTable LT,TaskList events, TaskList deadlines, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (isValid) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "            AlertBox.display(\"Reminder Alert\", \"You have a task to do within a period.\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    taskDescription + \" (from \" + startDate + \" to \" + endDate + \")\", Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return ui.showReminder(taskDescription, startDate, endDate, isValid);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "lionlim97": 5,
      "0325961": 46
    }
  },
  {
    "path": "src/main/java/Commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import DukeExceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " * Represents the command to done a Task object from a TaskList object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Assignment task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String list;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a DoneCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param task The task to be mask as done"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param list The name of the TaskList that requires changing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public DoneCommand(String list, Assignment task){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Executes the mark as done of a task inside the TaskList object with the given index."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param ui The Ui object to display the mark as done task message"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display delete task message"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException On ArrayList out of bound error"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String execute(LookupTable LT,TaskList events, TaskList deadlines, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (list.equals(\"event\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                events.updateTask(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                storage.updateEventList(events);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (list.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                deadlines.updateTask(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            task.setDone(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return ui.showDone(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch(ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            throw new DukeException(\"\\u2639\" + \" OOPS!!! I\u0027m sorry, but we cannot find the input task  :-(\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 17,
      "hwbjerry": 19,
      "-": 18
    }
  },
  {
    "path": "src/main/java/Commands/FilterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " * Represents the command to show the list of tasks corresponding to a keyword"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class FilterCommand extends Command{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates FilterCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param Command The full command that calls FilterCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public FilterCommand(String Command)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.keyword \u003d Command.trim().substring(7);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * Execute the displaying of all task the contains a certain keyword"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param ui The Ui object to display the list message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display list message"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String execute(LookupTable LT, TaskList events, TaskList deadlines, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        ArrayList\u003cString\u003e out \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e emap \u003d events.getMap();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        Set\u003cString\u003e allMods \u003d emap.keySet();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        for (String mod : allMods) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            Set\u003cString\u003e allDates \u003d emap.get(mod).keySet();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            for (String date : allDates) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                ArrayList\u003cAssignment\u003e temp \u003d emap.get(mod).get(date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for(Assignment task : temp) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    if (task.toString().toLowerCase().contains(keyword)|"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            task.toString().toUpperCase().contains(keyword) ){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        out.add(task.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e dmap \u003d deadlines.getMap();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        Set\u003cString\u003e allMods1 \u003d dmap.keySet();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        for (String mod : allMods1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            Set\u003cString\u003e allDates \u003d dmap.get(mod).keySet();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            for (String date : allDates) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                ArrayList\u003cAssignment\u003e temp \u003d dmap.get(mod).get(date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for(Assignment task : temp) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    if (task.toString().toLowerCase().contains(keyword)|"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            task.toString().toUpperCase().contains(keyword) ){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        out.add(task.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return ui.showFilter(out,this.keyword);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 55,
      "lionlim97": 15
    }
  },
  {
    "path": "src/main/java/Commands/FindFreeTimesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindFreeTimesCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final int HALF_HOUR_MARK \u003d 30;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final int HOUR_MARK \u003d 60;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final SimpleDateFormat timeFormat12 \u003d new SimpleDateFormat(\"hh:mm aa\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final SimpleDateFormat timeFormat24 \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final SimpleDateFormat dateDayFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final SimpleDateFormat dateTimeFormat12 \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final SimpleDateFormat dateTimeFormat24 \u003d new SimpleDateFormat(\"E dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final Integer options \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final Integer duration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ArrayList\u003cPair\u003cDate, Date\u003e\u003e freeTimeData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final NavigableMap\u003cString, ArrayList\u003cPair\u003cString, String\u003e\u003e\u003e dataMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String message \u003d new String();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public FindFreeTimesCommand(Integer duration) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method generates a increased a dateTime given by days or hours based on given duration and returns the new dateTime."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param inDate The dateTime given"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param duration The duration given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The new dateTime after increasing the inDate"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Date increaseDateTime(Date inDate, int duration){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.setTime(inDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.add(Calendar.HOUR, duration);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return c.getTime();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method updates the dateTime to same date with time 2359 as upper Boundary."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param inDate The date given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The updated date"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Date increaseToTwoThreeFiveNine(Date inDate){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.setTime(inDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.add(Calendar.HOUR, 23);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.add(Calendar.MINUTE, 59);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return c.getTime();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method updates the dateTime to same date with time 0700 as lower Boundary."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param inDate The date given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The updated date"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Date increaseZeroSevenZeroZero(Date inDate){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.setTime(inDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.add(Calendar.HOUR, 7);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return c.getTime();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function rounds ups the time to the nearest half hour or hour mark."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param date The date given to round up"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The round up date"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Date roundByHalfHourMark(Date date) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        long minuteToIncrease \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        long diff \u003d date.getTime();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        long diffMinutes \u003d diff / (60 * 1000) % 60;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(diffMinutes \u003e HALF_HOUR_MARK) minuteToIncrease \u003d HOUR_MARK - diffMinutes;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        else if(diffMinutes \u003c HALF_HOUR_MARK) minuteToIncrease \u003d HALF_HOUR_MARK - diffMinutes;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.setTime((date));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.add(Calendar.MINUTE, (int)minuteToIncrease);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return c.getTime();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method generates a comparator to compare the key of two pairs of date based on 12 clock format."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final Comparator\u003cPair\u003cString, String\u003e\u003e compareByTime \u003d (o1, o2) -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String left \u003d o1.getKey();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String right \u003d o2.getKey();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] leftTimeSplit \u003d left.split(\" \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] rightTimeSplit \u003d right.split(\" \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(leftTimeSplit[1].equals(\"AM\") \u0026\u0026 rightTimeSplit[1].equals(\"AM\")){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[]leftTimeSplitHourMinute \u003d leftTimeSplit[0].split(\":\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[]rightTimeSplitHourMinute \u003d rightTimeSplit[0].split(\":\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if(leftTimeSplitHourMinute[0].equals(\"12\") \u0026\u0026 rightTimeSplitHourMinute[0].equals(\"12\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return leftTimeSplitHourMinute[1].compareTo(rightTimeSplitHourMinute[1]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if(leftTimeSplitHourMinute[0].equals(\"12\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (rightTimeSplitHourMinute[0].equals(\"12\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return leftTimeSplit[0].compareTo(rightTimeSplit[0]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (leftTimeSplit[1].equals(\"AM\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (rightTimeSplit[1].equals(\"AM\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return left.compareTo(right);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    };"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Executes the finding of earliest available block period inside the given TaskList objects with the given duration."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param ui The Ui object to display the done task message"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display freeTimes message"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws Exception On date parsing error"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String execute(LookupTable LT, TaskList events, TaskList deadlines, Ui ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(duration \u003c 1 || duration \u003e 16) return ui.showFreeTimesInvalidDuration(duration.toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        mapDataMap(events);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        findFindTime();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        setOutput();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return ui.showFreeTimes(message);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method maps the list of events that is after current date and time into dataMap."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param events The list of event tasks in storage"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws ParseException The error when the data provided in invalid"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void mapDataMap(TaskList events) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date currDate \u003d new Date();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String strCurrDateDay \u003d dateDayFormat.format(currDate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String strCurrTime \u003d timeFormat12.format(currDate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        ArrayList\u003cPair\u003cString, String\u003e\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        temp.add(new Pair\u003c\u003e(strCurrTime, strCurrTime));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        dataMap.put(strCurrDateDay, temp);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for(String module: events.getMap().keySet()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e moduleValues \u003d events.getMap().get(module);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            for (String strDate : moduleValues.keySet()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Date date \u003d dateDayFormat.parse(strDate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                date \u003d increaseToTwoThreeFiveNine(date);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                ArrayList\u003cPair\u003cString, String\u003e\u003e timeArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if(strDate.equals(strCurrDateDay)) timeArray.add(new Pair\u003c\u003e(strCurrTime, strCurrTime));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if(date.after(currDate)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    ArrayList\u003cAssignment\u003e data \u003d moduleValues.get(strDate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    for (Assignment task : data) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        String startAndEnd \u003d task.getTime();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        String[] spiltStartAndEnd \u003d startAndEnd.split(\"to\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        Date startDateTime \u003d dateTimeFormat12.parse(strDate + \" \" + spiltStartAndEnd[0]);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        if(startDateTime.after(currDate)) timeArray.add(new Pair\u003c\u003e(spiltStartAndEnd[0].trim(), spiltStartAndEnd[1].trim()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    if(dataMap.containsKey(strDate)) timeArray \u003d mergeTimeArray(dataMap.get(strDate), timeArray);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    timeArray.sort(compareByTime);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    dataMap.put(strDate, timeArray);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method merges to arrayList and removes duplicated values."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param left The list of start and end times"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param right The list of start and end times"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The combines list"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ArrayList\u003cPair\u003cString, String\u003e\u003e mergeTimeArray(ArrayList\u003cPair\u003cString, String\u003e\u003e left, ArrayList\u003cPair\u003cString, String\u003e\u003e right) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for(Pair\u003cString, String\u003e c: right) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if(!left.contains(c)) left.add(c);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return left;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method returns true is command completed."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return True if freeTimeData has 5 options"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private boolean checkFreeTimeOptions () {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(freeTimeData.size() \u003d\u003d options) return true;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        else return false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    This checks if there are 5 options generated after going through the data in the event list"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void generateFreeTime() throws ParseException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (!checkFreeTimeOptions()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Integer size \u003d freeTimeData.size();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Pair\u003cDate, Date\u003e last;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if(size \u003d\u003d 0) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Date currDate \u003d new Date();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String strCurrDateDay \u003d dateDayFormat.format(currDate) + \" 12:00 AM\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                currDate \u003d dateTimeFormat12.parse(strCurrDateDay);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                currDate \u003d increaseZeroSevenZeroZero(currDate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                currDate \u003d increaseDateTime(currDate, 24);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                last \u003d new Pair\u003c\u003e(currDate, increaseDateTime(currDate, duration));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                freeTimeData.add(last);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                size \u003d 1;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                last \u003d freeTimeData.get(size-1);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            generateFreeTimeUntilFiveOptions(size, last);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method extends generateFreeTime generates free time slot by an hour difference"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param size The size of the freeTimeData"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param last The last Pair found in freeTimeData"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws ParseException The error when parsing data error is found"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void generateFreeTimeUntilFiveOptions(Integer size, Pair\u003cDate, Date\u003e last) throws ParseException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for(int i \u003d size; i \u003c options; i++){"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date tempStart \u003d last.getKey();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date tempEnd \u003d last.getValue();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String currDate \u003d dateDayFormat.format(tempStart) + \" 12:00 AM\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateBoundary \u003d dateTimeFormat12.parse(currDate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateUpperBoundary \u003d increaseToTwoThreeFiveNine(dateBoundary);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateLowerBoundary \u003d increaseZeroSevenZeroZero(dateBoundary);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Pair\u003cDate, Date\u003e newFreeTime \u003d null;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateTimeStart \u003d increaseDateTime(tempStart, 1);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateTimeEnd \u003d increaseDateTime(tempEnd, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if(dateTimeStart.after(dateLowerBoundary) \u0026\u0026 dateTimeEnd.before(dateUpperBoundary)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                newFreeTime \u003d new Pair\u003c\u003e(dateTimeStart, dateTimeEnd);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if(dateTimeStart.before(dateLowerBoundary) \u0026\u0026 dateTimeEnd.before(dateUpperBoundary)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                dateTimeStart \u003d dateLowerBoundary;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                dateTimeEnd \u003d increaseDateTime(dateTimeStart, duration);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if(dateTimeEnd.before(dateUpperBoundary)) newFreeTime \u003d new Pair\u003c\u003e(dateTimeStart, dateTimeEnd);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            else if (dateTimeEnd.after(dateUpperBoundary)){"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                dateTimeStart \u003d increaseDateTime(dateLowerBoundary, 24);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                dateTimeEnd \u003d increaseDateTime(dateTimeStart, duration);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                newFreeTime \u003d new Pair\u003c\u003e(dateTimeStart, dateTimeEnd);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            last \u003d newFreeTime;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            freeTimeData.add(last);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method Finds the best time available with the list of events in dataMap"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws ParseException The error when the data provided in invalid"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void findFindTime() throws ParseException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (String date: dataMap.keySet()) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            ArrayList\u003cPair\u003cString, String \u003e\u003e startAndEndTimes \u003d dataMap.get(date);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            for(int i \u003d 0; i \u003c startAndEndTimes.size(); i++){"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Date dateBoundary \u003d dateTimeFormat12.parse(date + \" 12:00 AM\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Date dateUpperBoundary \u003d increaseToTwoThreeFiveNine(dateBoundary);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Date dateLowerBoundary \u003d increaseZeroSevenZeroZero(dateBoundary);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if(i \u003c startAndEndTimes.size() - 1) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String dateTime \u003d date + \" \" + startAndEndTimes.get(i).getValue();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String dateTimeNextEvent \u003d date + \" \" + startAndEndTimes.get(i+1).getKey();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Date dateTimeStart \u003d dateTimeFormat12.parse(dateTime);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    dateTimeStart \u003d roundByHalfHourMark(dateTimeStart);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Date dateNextEvent \u003d dateTimeFormat12.parse(dateTimeNextEvent);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Date dateTimeEnd \u003d increaseDateTime(dateTimeStart, duration);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    if(dateTimeEnd.after(dateUpperBoundary)) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        i \u003d (startAndEndTimes.size() - 1);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    } else if(dateTimeEnd.before(dateNextEvent)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        if(dateTimeStart.before(dateLowerBoundary)) dateTimeStart \u003d dateLowerBoundary;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        dateTimeEnd \u003d increaseDateTime(dateTimeStart, duration);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        if(dateTimeEnd.before(dateUpperBoundary)) freeTimeData.add(new Pair\u003c\u003e(dateTimeStart, dateTimeEnd));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        else i \u003d (startAndEndTimes.size() - 1);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        if(checkFreeTimeOptions()) return;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                else if(i \u003d\u003d (startAndEndTimes.size() - 1)){"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String dateTime \u003d date + \" \" + startAndEndTimes.get(i).getValue();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Date dateTimeStart \u003d dateTimeFormat12.parse(dateTime);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    dateTimeStart \u003d roundByHalfHourMark(dateTimeStart);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Date dateTimeEnd \u003d increaseDateTime(dateTimeStart, duration);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    if(dateTimeStart.after(dateLowerBoundary) \u0026\u0026 dateTimeEnd.before(dateUpperBoundary)) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        freeTimeData.add(new Pair\u003c\u003e(dateTimeStart, dateTimeEnd));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        if(checkFreeTimeOptions()) return;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    } else if(dateTimeStart.before(dateLowerBoundary) \u0026\u0026 dateTimeEnd.before(dateUpperBoundary)) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        dateTimeStart \u003d dateLowerBoundary;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        dateTimeEnd \u003d increaseDateTime(dateTimeStart, duration);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        if(dateTimeEnd.before(dateUpperBoundary)) freeTimeData.add(new Pair\u003c\u003e(dateTimeStart, dateTimeEnd));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        if(checkFreeTimeOptions()) return;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    } else {//dateTimeEnd.after(dateBoundary)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        String nextKey \u003d dataMap.higherKey(date);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        if(nextKey \u003d\u003d null) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            Date nextDay \u003d dateTimeFormat12.parse(date + \" 12:00 AM\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            nextDay \u003d increaseDateTime(nextDay, 24);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            Date nextDayStartTime \u003d increaseDateTime(nextDay, 7);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            Date nextDayEndTime \u003d increaseDateTime(nextDayStartTime, duration);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            freeTimeData.add(new Pair\u003c\u003e(nextDayStartTime, nextDayEndTime));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            if(checkFreeTimeOptions()) return;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            ArrayList\u003cPair\u003cString, String \u003e\u003e nextDayStartAndEndTimes \u003d dataMap.get(nextKey);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            String nextDateTime \u003d nextKey + \" \" + nextDayStartAndEndTimes.get(0).getKey(); //Just need to check first item of next day start time"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            Date nextDateTimeStart \u003d dateTimeFormat12.parse(nextDateTime);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            Date dateLowerBoundaryPlusDuration \u003d increaseDateTime(dateLowerBoundary, duration);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            if(dateLowerBoundary.before(nextDateTimeStart) \u0026\u0026 dateLowerBoundaryPlusDuration.before(nextDateTimeStart)) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                freeTimeData.add(new Pair\u003c\u003e(dateLowerBoundary, dateLowerBoundaryPlusDuration));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                if(checkFreeTimeOptions()) return;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        generateFreeTime();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final ArrayList\u003cString\u003e compiledFreeTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method generates the output to be shown"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void setOutput(){"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        compiledFreeTimes.clear();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (int i \u003d 0; i \u003c freeTimeData.size(); i++) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String compiledFreeTimeToShow;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String compiledFreeTime;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            compiledFreeTimeToShow \u003d dateTimeFormat12.format(freeTimeData.get(i).getKey()) + \" until \" + timeFormat12.format(freeTimeData.get(i).getValue());"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            message +\u003d (i+1) + \". \" + compiledFreeTimeToShow + \"\\n\";"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String dateTime \u003d dateTimeFormat24.format(freeTimeData.get(i).getKey());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[] spiltDateTime \u003d dateTime.split(\" \", 3);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            compiledFreeTime \u003d  \"/at \" + spiltDateTime[1]+ \" /from \" + spiltDateTime[2] + \" /to \"+ timeFormat24.format(freeTimeData.get(i).getValue());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            compiledFreeTimes.add(compiledFreeTime);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static ArrayList\u003cString\u003e getCompiledFreeTimesList() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return compiledFreeTimes;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 7,
      "hwbjerry": 327,
      "-": 13
    }
  },
  {
    "path": "src/main/java/Commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " * Represents the command to display a guide to all commands"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class HelpCommand extends Command{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * Executes the displaying of guide to all commands"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param ui The Ui object to display the delete task message"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display delete task message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String execute(LookupTable LT,TaskList events, TaskList deadlines, Ui ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String help;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        help \u003d \"Here is a guide of how to use the different commands\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        help +\u003d \"1) To add events, enter command in the format below\\n \" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                \"add/e modCode Description /at (date) /from HHmm /to HHmm\\n\\n\"+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                \"2) To add deadlines, enter command in the format below\\n \" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                \"add/d modCode Description /by (date) HHmm\\n\\n\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                \"3) To delete events, enter command in the format below\\n \" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                \"delete/e modCode Description /at (date) /from HHmm /to HHmm\\n\\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                \"4) To delete deadlines, enter command in the format below\\n \" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                \"delete/d modCode Description /by (date) HHmm\\n\\n\" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                \"5) To filter keywords, enter command in the format below\\n \" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                \"filter (keyword) \\n\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "         help +\u003d \"date format can be in the form dd/mm/yyyy or week X day according to NUS academic calender\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return ui.showHelp(help);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 36,
      "lionlim97": 3
    }
  },
  {
    "path": "src/main/java/Commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the command to show the list of tasks on a TaskList object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList listToView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public ListCommand(String list){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the display of all the task in the TaskList object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the list message"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display list message"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String execute(LookupTable LT,TaskList events, TaskList deadlines, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if(list.equals(\"event\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            listToView \u003d events;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if(list.equals(\"deadline\")){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            listToView \u003d deadlines;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return ui.showList(listToView);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "lionlim97": 18,
      "hwbjerry": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/Commands/RecurringCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Represents the command to add recurring tasks to the events TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "public class RecurringCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private final String startTimeString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private final String endTimeString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private final String endDateString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private String startDateString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates RecurringCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param description Description of a task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param startDateString Start date of a task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param endDateString End date of a task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param startTimeString Start time of a task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param endTimeString End time of a task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public RecurringCommand(String description, String startDateString, String endDateString, String startTimeString, String endTimeString) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.startDateString \u003d startDateString;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.endDateString \u003d endDateString;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.startTimeString \u003d startTimeString;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.endTimeString \u003d endTimeString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private Date getNextWeekDate (Date inDate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date nextWeek \u003d new Date(inDate.getTime() + 7 * 24 * 60 * 60 * 1000);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return nextWeek;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public String execute(LookupTable LT,TaskList events, TaskList deadlines, Ui ui, Storage storage) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date startDate \u003d dateFormat.parse(startDateString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date endDate \u003d dateFormat.parse(endDateString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String oldStartDateString \u003d startDateString;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date startOfFollowingWeek;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            events.addTask(new Event(description, startDateString, startTimeString, endTimeString));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            storage.updateEventList(events);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            startOfFollowingWeek \u003d getNextWeekDate(startDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            startDateString \u003d dateFormat.format(startOfFollowingWeek);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            startDate \u003d startOfFollowingWeek;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        while (startOfFollowingWeek.before(endDate) || startOfFollowingWeek.equals(endDate));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return ui.showRecurring(description, oldStartDateString, endDateString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 7,
      "darrenoje": 56
    }
  },
  {
    "path": "src/main/java/Commands/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import DukeExceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import DukeExceptions.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Reminder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Parser.DateTimeParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Represents the command to set a reminder for the user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Assignment task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Date time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private boolean remind;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Reminder reminder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(RemindCommand.class.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates RemindCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param task Task to have a reminder set"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param time Time for the reminder to be set at"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param remind Whether a reminder needs to be set"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public RemindCommand (Assignment task, Date time, boolean remind) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.remind \u003d remind;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Sets a reminder pop-up for task user wants to set a reminder to."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the done task message"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display remind message"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws DukeException On invalid task and time input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(LookupTable LT, TaskList events, TaskList deadlines, Ui ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminder \u003d storage.getReminderObject();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminder.setDeadlines(deadlines);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e deadlineMap \u003d deadlines.getMap();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        HashMap\u003cDate, Assignment\u003e remindMap \u003d reminder.getRemindMap();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String reminderTime \u003d dateFormat.format(time);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String taskDateTimeString \u003d task.getDateTime();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date taskDateTime \u003d DateTimeParser.deadlineTaskStringToDate(taskDateTimeString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if(taskDateTime.before(currentDate)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeInvalidDateTimeException(\"Sorry, your selected task has already passed!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (!remind) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (!remindMap.containsKey(time)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                throw new DukeInvalidDateTimeException(\"Sorry, you have no such reminder at that inputted time.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else if (!remindMap.get(time).getDescription().equals(task.getDescription())) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                throw new DukeInvalidDateTimeException(\"Sorry, you have no such reminder with inputted description at that time\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            reminder.removeTimerTask(task, time, reminderTime);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return ui.showCancelReminder(task, reminderTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (this.time.before(currentDate)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeInvalidDateTimeException(\"Sorry, you cannot set a time that has already passed!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (remindMap.containsKey(time)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Assignment remindedTask \u003d remindMap.get(time);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeInvalidDateTimeException(\"Sorry, you have a reminder set for \" + remindedTask.getDescription() + \" at: \" + task.getDateTime());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if (!deadlineMap.containsKey(task.getModCode())) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeException(\"Sorry, you have no such mod entered in your deadline table!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if (!deadlineMap.get(task.getModCode()).containsKey(task.getDate())) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeException(\"Sorry, you have no such timing entered in your deadline table!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            ArrayList\u003cAssignment\u003e allTaskInDate \u003d deadlineMap.get(task.getModCode()).get(task.getDate());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            boolean hasTask \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            for (Assignment taskInList : allTaskInDate) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (taskInList.getDescription().equals(task.getDescription())) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    hasTask \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (!hasTask) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                throw new DukeException(\"Sorry, there are no such task description in your deadline table!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminder.setReminderThread(time, task);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return ui.showReminder(task, reminderTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 77,
      "-": 25
    }
  },
  {
    "path": "src/main/java/Commands/RetrieveFreeTimesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class RetrieveFreeTimesCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Integer option;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String selectedOption;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public RetrieveFreeTimesCommand(Integer option) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.option \u003d option;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private boolean checkIsEmpty (ArrayList\u003cString\u003e retrievedFreeTimes){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return (retrievedFreeTimes.size() \u003d\u003d 0) ? true : false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private boolean checkIfInvalidOption (){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return (option \u003c 1 || option \u003e 5) ? true : false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Executes the retriever of earliest available block period generated by FindFreeTimesCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param ui The Ui object to display the done task message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display freeTimes message"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String execute(LookupTable LT, TaskList events, TaskList deadlines, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        ArrayList\u003cString\u003e retrievedFreeTimes \u003d FindFreeTimesCommand.getCompiledFreeTimesList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (checkIsEmpty(retrievedFreeTimes))return \"Please find free times\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        else if(checkIfInvalidOption()) return \"Please select options between 1 - 5\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        selectedOption \u003d retrievedFreeTimes.get(option-1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return \"Selected option \" + option + \"\\n\" + selectedOption;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static String getSelectedOption() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return selectedOption;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 3,
      "hwbjerry": 43
    }
  },
  {
    "path": "src/main/java/Commands/RetrievePreviousCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import DukeExceptions.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class RetrievePreviousCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static String retrievedOutput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Creates a RetrievePreviousCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param fullCommand The user\u0027s input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public RetrievePreviousCommand(String fullCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Retrieves the chosen input that the user wish to get."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param ui The Ui object to display the message for chosen input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display retrieve"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * previous message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @throws DukeInvalidCommandException on emtpy list and invalid index input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public String execute(LookupTable LT, TaskList events, TaskList deadlines, Ui ui, Storage storage) throws DukeInvalidCommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": "        fullCommand \u003d fullCommand.replace(\"retrieve/previous\", \"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "        ArrayList\u003cString\u003e retrievedList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "        retrievedList \u003d ShowPreviousCommand.getOutputList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int size \u003d retrievedList.size();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (size \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "            throw new DukeInvalidCommandException(\"You did not enter Show Previous Command yet. \\n\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    \"Format: show previous \u003cnum\u003e or show previous \u003ctype\u003e \u003cnum\u003e\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int intFullCommand \u003d Integer.parseInt(fullCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (intFullCommand \u003e size) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "            throw new DukeInvalidCommandException(\"There are only \" + size + \" of previous commands.\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    \"Please enter a valid number less than or equal to \" + size + \" .\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int index \u003d intFullCommand - 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "        retrievedOutput \u003d retrievedList.get(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return ui.showChosenPreviousChoice(retrievedOutput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static String getChosenOutput() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return retrievedOutput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 3,
      "0325961": 55
    }
  },
  {
    "path": "src/main/java/Commands/ShowPreviousCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import DukeExceptions.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class ShowPreviousCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Creates ShowPreviousCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param fullCommand The user\u0027s input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public ShowPreviousCommand(String fullCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method adds previous command into the outputList base on user\u0027s choice/keyword."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param userInputList The list that contains all user inputs"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param outputList The list that contains the inputs the user requested"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param string The user\u0027s keyword for adding into outputList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return outputList which contains the inputs requested by user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public ArrayList\u003cString\u003e previousCommandsHandler(ArrayList\u003cString\u003e userInputList, ArrayList\u003cString\u003e outputList, String string) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int size \u003d userInputList.size() - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "        for (int j \u003d 0; j \u003c size; j ++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "            userInput \u003d userInputList.get(j);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "            if (userInput.contains(string)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "                outputList.add(userInput + \" \\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return outputList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public ArrayList\u003cString\u003e userInputsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public ArrayList\u003cString\u003e updatedUserInputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Shows the previous user inputs that user requested."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param ui The Ui object to display the message to display all the inputs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display the lists"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * of user inputs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public String execute(LookupTable LT, TaskList events, TaskList deadlines, Ui ui, Storage storage) throws DukeInvalidCommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0325961"
        },
        "content": "        fullCommand \u003d fullCommand.replace(\"show/previous\", \"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0325961"
        },
        "content": "        boolean isNumber \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int number \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0325961"
        },
        "content": "            number \u003d Integer.parseInt(fullCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0325961"
        },
        "content": "            isNumber \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0325961"
        },
        "content": "        ArrayList\u003cString\u003e outputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0325961"
        },
        "content": "        userInputsList \u003d Duke.getUserInputs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int size \u003d userInputsList.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0325961"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i ++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0325961"
        },
        "content": "            if (i % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String userInput \u003d userInputsList.get(i);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0325961"
        },
        "content": "                updatedUserInputList.add(userInput);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int sizeOfUpdatedList \u003d updatedUserInputList.size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int sizeOfPreviousList \u003d sizeOfUpdatedList - 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (sizeOfPreviousList \u003c number) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0325961"
        },
        "content": "            throw new DukeInvalidCommandException(\"There are only \" + sizeOfPreviousList + \" of previous commands.\" +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    \"Please enter a valid number less than or equal to \" + sizeOfPreviousList + \" .\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (isNumber) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0325961"
        },
        "content": "            int startIndex \u003d sizeOfPreviousList - 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0325961"
        },
        "content": "            for (int i \u003d 0; i \u003c number; i ++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0325961"
        },
        "content": "                outputList.add(updatedUserInputList.get(startIndex) + \" \\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0325961"
        },
        "content": "                startIndex -\u003d 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d outputList;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(\"add/d\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList,\"add/d\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(\"add/e\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList,\"add/e\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(\"delete/d\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList,\"delete/d\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(\"delete/e\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, \"delete/e\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(\"recur/e\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, \"recur/e\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(\"remind/set\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, \"remind/set\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(\"remind/rm\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, \"remind/rm\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(\"/show\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, \"/show\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(\"filter\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, \"filter\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(\"help\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, \"help\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(\"list\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, \"list\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(\"done\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, \"done\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(\"Available\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, \"Available\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(\"show previous\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, \"show previous\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(\"Week\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, \"Week\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return ui.showPrevious(result);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static ArrayList\u003cString\u003e getOutputList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 4,
      "0325961": 127
    }
  },
  {
    "path": "src/main/java/Commands/ShowWorkloadCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "public class ShowWorkloadCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private String week;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * Show recommended weekly workload"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param week week to see workload"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public ShowWorkloadCommand(String week) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.week \u003d week;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String execute (LookupTable LT,TaskList events, TaskList deadlines, Ui ui, Storage storage) throws ParseException, FileNotFoundException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String workloadWeek \u003d LT.getValue(week);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e eventMap \u003d events.getMap();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e deadlineMap \u003d deadlines.getMap();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e workloadMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String nextWeekMon \u003d LT.getValue(workloadWeek + \" mon\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String nextWeekTue \u003d LT.getValue(workloadWeek + \" tue\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String nextWeekWed \u003d LT.getValue(workloadWeek + \" wed\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date followingDate \u003d new Date((formatter.parse(week).getTime()) + 7 * 24 * 60 * 60 * 1000);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String followingWeekDate \u003d formatter.format(followingDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String followingWeek \u003d LT.getValue(followingWeekDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String followingWeekMon \u003d LT.getValue(followingWeek + \" mon\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String followingWeekTue \u003d LT.getValue(followingWeek + \" tue\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String followingWeekWed \u003d LT.getValue(followingWeek + \" wed\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Map.Entry\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e eventModule: eventMap.entrySet()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e eventModuleValue \u003d eventModule.getValue();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            for (Map.Entry\u003cString, ArrayList\u003cAssignment\u003e\u003e eventItem: eventModuleValue.entrySet()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                String[] strDayDate \u003d eventItem.getKey().trim().split(\" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                String strDate \u003d strDayDate[1].trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String selectedWeek \u003d LT.getValue(strDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                if (selectedWeek.equals(workloadWeek)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    workloadMap.put(strDate, eventItem.getValue());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Map.Entry\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e deadlineModule: deadlineMap.entrySet()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e deadlineModuleValue \u003d deadlineModule.getValue();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            for (Map.Entry\u003cString, ArrayList\u003cAssignment\u003e\u003e deadlineItem: deadlineModuleValue.entrySet()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                String[] strDayDate \u003d deadlineItem.getKey().trim().split(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                String strDate \u003d strDayDate[1].trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String selectedWeek \u003d LT.getValue(strDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                if (selectedWeek.equals(workloadWeek) || strDate.equals(followingWeekMon) ||"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        strDate.equals(followingWeekTue) || strDate.equals(followingWeekWed)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    if (!strDate.equals(nextWeekMon) || !strDate.equals(nextWeekTue) || !strDate.equals(nextWeekWed)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        Date tempDate \u003d formatter.parse(strDate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        tempDate \u003d new Date(tempDate.getTime() - 3 * 24 * 60 * 60 * 1000); //put all deadline 3 days before"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        String newDate \u003d formatter.format(tempDate).trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        if (workloadMap.containsKey(newDate)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            for (int i \u003d 0; i \u003c deadlineItem.getValue().size(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                                workloadMap.get(newDate).add(deadlineItem.getValue().get(i));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            workloadMap.put(newDate, deadlineItem.getValue());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cAssignment\u003e\u003e sortedWorkLoadMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        sortedWorkLoadMap.putAll(workloadMap);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return ui.showWorkload(sortedWorkLoadMap);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "lionlim97": 20,
      "darrenoje": 58,
      "hwbjerry": 10
    }
  },
  {
    "path": "src/main/java/Commands/UpdateProgressIndicatorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import UserInterface.ProgressController;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class UpdateProgressIndicatorCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "    TaskList eventList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "    TaskList deadlineList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public UpdateProgressIndicatorCommand(TaskList eventList, TaskList deadlineList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.deadlineList \u003d deadlineList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public Pair\u003cHashMap\u003cString, String\u003e, ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e\u003e getWholeDate (TaskList eventList, TaskList deadlineList) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/ProgressIndicator.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "        fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Pair\u003cHashMap\u003cString, String\u003e, ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e\u003e result \u003d fxmlLoader.\u003cProgressController\u003egetController().getProgressIndicatorMap(eventList.getMap(), deadlineList.getMap());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public HashMap\u003cString, String\u003e getModuleMap (Pair\u003cHashMap\u003cString, String\u003e, ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e\u003e wholeData) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d wholeData.getKey();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public HashMap\u003cString, Pair\u003cInteger, Integer\u003e\u003e getValues(HashMap\u003cString, String\u003e moduleMap, Pair\u003cHashMap\u003cString, String\u003e, ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e\u003e wholeData) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": "        HashMap\u003cString, Pair\u003cInteger, Integer\u003e\u003e moduleCodeAndTotalNumOfTasksAndCompletedValue \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "        for (String module : moduleMap.keySet()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "            int totalNumTasks \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "            int completedValue \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "            ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e tasks \u003d wholeData.getValue();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "            for (Pair\u003cString, Pair\u003cString, String\u003e\u003e as : tasks) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "                if (as.getKey().equals(module)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    totalNumTasks +\u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    if (as.getValue().getKey().equals(\"\\u2713\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        completedValue +\u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "            moduleCodeAndTotalNumOfTasksAndCompletedValue.put(module, new Pair(totalNumTasks, completedValue));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return moduleCodeAndTotalNumOfTasksAndCompletedValue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 1,
      "0325961": 49
    }
  },
  {
    "path": "src/main/java/Commands/WeekCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Commons.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class WeekCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(WeekCommand.class.getName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String week;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e monList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e tueList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e wedList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e thuList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e friList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e satList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e sunList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static WeekList weekList \u003d new WeekList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public WeekCommand(String fullCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.week \u003d fullCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ArrayList\u003cString\u003e generateDateDay(String date, LookupTable LT){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] days \u003d {\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        ArrayList\u003cString\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (String day : days) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String dateOut \u003d day + \" \" + LT.getValue(date + \" \" + day);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            temp.add(dateOut);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ArrayList\u003cString\u003e checkIfExist(HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e map, ArrayList\u003cString\u003e dates) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        ArrayList\u003cString\u003e newDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for(String s: dates){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if(map.containsKey(s) \u003d\u003d true) newDates.add(s);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return newDates;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void updateList(String day, Text toShow){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        switch (day){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            case \"Mon\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                monList.add(toShow);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            case  \"Tue\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                tueList.add(toShow);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            case \"Wed\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                wedList.add(toShow);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            case \"Thu\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                thuList.add(toShow);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            case \"Fri\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                friList.add(toShow);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            case \"Sat\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                satList.add(toShow);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            case \"Sun\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                sunList.add(toShow);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void sortList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(monList.size() !\u003d 0 ) monList.sort(WeekCommand::compareByTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(tueList.size() !\u003d 0 ) tueList.sort(WeekCommand::compareByTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(wedList.size() !\u003d 0 ) wedList.sort(WeekCommand::compareByTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(thuList.size() !\u003d 0 ) thuList.sort(WeekCommand::compareByTime);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(friList.size() !\u003d 0 ) friList.sort(WeekCommand::compareByTime);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(satList.size() !\u003d 0 ) satList.sort(WeekCommand::compareByTime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(sunList.size() !\u003d 0 ) sunList.sort(WeekCommand::compareByTime);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Text generateToShow(Assignment task) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Text toShow \u003d new Text(task.toShow() + task.getModCode() + \"\\n\" + task.getDescription());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        toShow.setFont(Font.font(10));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (task.getStatus()){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            toShow.setFill(Color.GAINSBORO);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            toShow.setStrikethrough(true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return toShow;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method generates data in day GridPane ListViews based on the week selected"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void setListView(LookupTable LT, TaskList eventsList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        ArrayList\u003cString\u003e weekDates \u003d generateDateDay(week, LT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for(String module: eventsList.getMap().keySet()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e moduleValue \u003d eventsList.getMap().get(module);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            ArrayList\u003cString\u003e dates \u003d checkIfExist(moduleValue, weekDates);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            for(String strDate : dates) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String[] spilt \u003d strDate.split(\" \", 2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                ArrayList\u003cAssignment\u003e data \u003d moduleValue.get(strDate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for(Assignment task: data){"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Text toShow \u003d generateToShow(task);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String day \u003d spilt[0];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    updateList(day, toShow);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method creates a comparator for a 12 hour time to be sorted by timeline."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param lhs First item compared"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param rhs Second item compared"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The result of the comparison"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static int compareByTime(Text lhs, Text rhs) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String left \u003d lhs.getText().replaceFirst(\"Start: \", \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] leftSplit \u003d left.split(\"\\n\",2);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] leftTimeSplit \u003d leftSplit[0].split(\" \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String right \u003d rhs.getText().replaceFirst(\"Start: \", \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] rightSplit \u003d right.split(\"\\n\",2);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] rightTimeSplit \u003d rightSplit[0].split(\" \");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(leftTimeSplit[1].equals(\"AM\") \u0026\u0026 rightTimeSplit[1].equals(\"AM\")){"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[]leftTimeSplitHourMinute \u003d leftTimeSplit[0].split(\":\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[]rightTimeSplitHourMinute \u003d rightTimeSplit[0].split(\":\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if(leftTimeSplitHourMinute[0].equals(\"12\") \u0026\u0026 rightTimeSplitHourMinute[0].equals(\"12\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return leftTimeSplitHourMinute[1].compareTo(rightTimeSplitHourMinute[1]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if(leftTimeSplitHourMinute[0].equals(\"12\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (rightTimeSplitHourMinute[0].equals(\"12\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return leftTimeSplit[0].compareTo(rightTimeSplit[0]);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (leftTimeSplit[1].equals(\"AM\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (rightTimeSplit[1].equals(\"AM\")) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return leftSplit[0].compareTo(rightSplit[0]);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static WeekList getWeekList(){"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return weekList;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String execute(LookupTable LT, TaskList events, TaskList deadlines, Ui ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String intWeek \u003d week.replaceFirst(\"Week\", \"\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        intWeek \u003d intWeek.trim();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Integer duration \u003d Integer.parseInt(intWeek);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(duration \u003c 1 || duration \u003e 13) return ui.showWeeksInvalidEntry(intWeek);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        setListView(LT, events);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        sortList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        weekList \u003d new WeekList(monList, tueList, wedList, thuList, friList, satList, sunList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 6,
      "hwbjerry": 161
    }
  },
  {
    "path": "src/main/java/Commons/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package Commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commands.RetrieveFreeTimesCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commands.RetrievePreviousCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Parser.MainParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * A program that manages tasks input by user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * with commands that includes adding, deleting, displaying list of tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * and to mark completion of a task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class Duke  {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final TaskList events;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final TaskList deadlines;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private final Reminder reminder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Duke.class.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static LookupTable LT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static ArrayList\u003cString\u003e userInputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates Duke object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        events \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminder \u003d new Reminder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.setReminderObject(reminder);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            storage.readDeadlineList(deadlines);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            storage.readEventList(events);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            reminder.setDeadlines(deadlines);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            storage.setReminderOnStart();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            LT \u003d new LookupTable();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            ui.showLoadingError(e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            LOGGER.log(Level.SEVERE, e.toString(), e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * This method runs the Duke program."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param input The user\u0027s input to the Duke program"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return This returns the string to respond to user\u0027s input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String run(String input) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Command c \u003d MainParser.parse(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            return c.execute(LT,events, deadlines, ui, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            LOGGER.severe(e.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return ui.getError(e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0325961"
        },
        "content": "        userInputs.add(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return run(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static ArrayList\u003cString\u003e getUserInputs() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return userInputs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static String getPreviousInput() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String previousInput \u003d RetrievePreviousCommand.getChosenOutput();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return previousInput;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    This method retrieves the free time option selected by the user"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static String getSelectedOption() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String selectedOption \u003d RetrieveFreeTimesCommand.getSelectedOption();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return selectedOption;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public LookupTable getLT() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.LT;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 3,
      "lionlim97": 61,
      "0325961": 16,
      "hwbjerry": 10,
      "-": 2
    }
  },
  {
    "path": "src/main/java/Commons/LookupTable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package Commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " * Lookup table that provides date given week and day"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class LookupTable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(LookupTable.class.getName());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * Creates a lookup table object and read from Lookup.txt file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public LookupTable() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            InputStream is \u003d this.getClass().getClassLoader().getResourceAsStream(\"documents/Lookup.txt\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            InputStreamReader isr \u003d new InputStreamReader(is);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(isr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                String[] parts \u003d line.split(\":\", 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (parts.length \u003e\u003d 2) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String key \u003d parts[0].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String value \u003d parts[1].trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    this.map.put(key.trim().toLowerCase(), value);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            isr.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            is.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            LOGGER.log(Level.SEVERE, e.toString(), e);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * Translate week,day to date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param week_day week and day of activity in academic calender"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @return date of activity"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String getValue(String week_day){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "       return map.get(week_day.toLowerCase().trim());//week_day in the format of (week x day x)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 31,
      "lionlim97": 17,
      "hwbjerry": 4
    }
  },
  {
    "path": "src/main/java/Commons/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package Commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commands.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import DukeExceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import UserInterface.AlertBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Deals with the input of the user and tries to understand the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * user\u0027s input with fixed commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String[] split;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String[] split1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String[] split2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String[] split3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String[] split4;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static LookupTable LT \u003d new LookupTable();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * This method breaks apart the user\u0027s input and tries to make sense with it."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param fullCommand The user\u0027s input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return This returns a Command object based on user\u0027s input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws DukeException On invalid input or when wrong input format is entered"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException, ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (fullCommand.trim().equals(\"bye\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                return new ByeCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }else if(fullCommand.trim().equalsIgnoreCase(\"help\")){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "            } else if (fullCommand.trim().contains(\"show previous\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "                return new ShowPreviousCommand(fullCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": "            } else if (fullCommand.trim().contains(\"retrieve previous\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "                return new RetrievePreviousCommand(fullCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else if (fullCommand.trim().substring(0, 4).equals(\"list\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String list \u003d fullCommand.trim().substring(5);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if (list.trim().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! Please do not leave name of list blank.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    } else if (list.trim().equals(\"todo\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        return new ListCommand(list);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    } else if (list.trim().equals(\"event\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        return new ListCommand(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    } else if (list.trim().equals(\"deadline\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        return new ListCommand(list);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! Please enter name of list\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please enter list as follows:\\n\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            \"list name_of_list_to_view\\n\" +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            \"For example: list todo\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if(fullCommand.startsWith(\"Week\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String week \u003d fullCommand.replaceFirst(\"Week\", \"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                week.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "//                try{"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "//                    Integer digit \u003d Integer.parseInt(week);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "//                    if(digit \u003c 1 || digit \u003e 13 ) throw new DukeException(\"Invalid week command\\n\" + \"Format: Week \u0027x\u0027, where \u0027x\u0027 is a digit.\" );"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "//                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "//                    throw new DukeException(\"Invalid week command\\n\" + \"Format: Week \u0027x\u0027, where \u0027x\u0027 is a digit.\" );"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "//                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return new WeekCommand(fullCommand.trim());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if(fullCommand.trim().startsWith(\"done/e\")){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                try { //add/e module_code description /at date from time to time"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String activity \u003d fullCommand.replaceFirst(\"done/e\", \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    split \u003d activity.split(\"/at\"); //split[0] is \" module_code description\", split[1] is \"date from time to time\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    if (split[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    split1 \u003d split[1].split(\"/from\"); //split1[0] is \"date\", split1[1] is \"time to time\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String weekDate;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    split2 \u003d split1[0].trim().split(\" \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    weekDate \u003d split2[0];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    if(weekDate.equalsIgnoreCase(\"reading\") || weekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            || weekDate.equalsIgnoreCase(\"week\") || weekDate.equalsIgnoreCase(\"recess\")){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        weekDate \u003d LT.getValue(split1[0].trim());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    }else{"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        weekDate \u003d split1[0].trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\"); //format date"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Date date \u003d formatter.parse(weekDate.trim());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    split2 \u003d split1[1].split(\"/to\"); //split2[0] is (start) \"time\", split2[1] is (end) \"time\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    SimpleDateFormat formatter1 \u003d new SimpleDateFormat(\"HHmm\"); //format time"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Date startTime \u003d formatter1.parse(split2[0].trim());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Date endTime \u003d formatter1.parse(split2[1].trim());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String dateString \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String startTimeString \u003d timeFormat.format(startTime);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String endTimeString \u003d timeFormat.format(endTime);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    return new DoneCommand(\"event\",new Event(split[0].trim(), dateString, startTimeString, endTimeString));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please enter in the format as follows:\\n\" +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            \"done/e mod_code name_of_event /at dd/MM/yyyy /from HHmm /to HHmm\\n\" +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            \"or done/e mod_code name_of_event /at week x day /from HHmm /to HHmm\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }  else if (fullCommand.trim().startsWith(\"done/d\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String activity \u003d fullCommand.trim().replaceFirst(\"done/d\", \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    split \u003d activity.split(\"/by\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    if (split[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String weekDate \u003d\"\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    split2 \u003d split[1].trim().split(\" \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    weekDate \u003d split2[0];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    if(weekDate.equalsIgnoreCase(\"reading\") || weekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            || weekDate.equalsIgnoreCase(\"week\") || weekDate.equalsIgnoreCase(\"recess\")){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        weekDate \u003d split[1].substring(0,split[1].length()- 4); // week x day y"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        String time \u003d split[1].substring(split[1].length()- 4); // time E.g 0300"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        weekDate \u003d LT.getValue(weekDate) + \" \" + time;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    }else{"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        weekDate \u003d split[1];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Date date \u003d formatter.parse(weekDate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String dateString \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String timeString \u003d timeFormat.format(date);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    return new DoneCommand(\"deadline\",new Deadline(split[0].trim(), dateString, timeString));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please enter in the format as follows:\\n\" +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            \"done/d mod_code name_of_event /by dd/MM/yyyy HHmm\\n\" +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            \"or done/d mod_code name_of_event /by week x day HHmm\\n\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            } else if (fullCommand.trim().substring(0, 5).equals(\"add/e\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                try { //add/e module_code description /at date /from time /to time"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String activity \u003d fullCommand.trim().substring(5);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    split \u003d activity.split(\"/at\"); //split[0] is \" module_code description\", split[1] is \"date /from time /to time\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if (split[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    split1 \u003d split[1].split(\"/from\"); //split1[0] is \"date\", split1[1] is \"time to time\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String weekDate \u003d\"\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split2 \u003d split1[0].trim().split(\" \");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    weekDate \u003d split2[0];"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if(weekDate.equalsIgnoreCase(\"reading\") || weekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            || weekDate.equalsIgnoreCase(\"week\") || weekDate.equalsIgnoreCase(\"recess\")){"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        weekDate \u003d LT.getValue(split1[0].trim());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }else{"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d split1[0].trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\"); //format date"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date date \u003d formatter.parse(weekDate.trim());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    split2 \u003d split1[1].split(\"/to\"); //split2[0] is (start) \"time\", split2[1] is (end) \"time\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat formatter1 \u003d new SimpleDateFormat(\"HHmm\"); //format time"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date startTime \u003d formatter1.parse(split2[0].trim());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date endTime \u003d formatter1.parse(split2[1].trim());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String dateString \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String startTimeString \u003d timeFormat.format(startTime);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String endTimeString \u003d timeFormat.format(endTime);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    return new AddCommand(new Event(split[0].trim(), dateString, startTimeString, endTimeString));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please enter event as follows:\\n\" +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"add/e modCode name_of_event /at dd/MM/yyyy from HHmm to HHmm\\n\" +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"For example: add/e CS1231 project meeting /at 1/1/2020 /from 1500 /to 1700\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            } else if (fullCommand.trim().substring(0,7).equals(\"recur/e\")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String activity \u003d fullCommand.trim().substring(7);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String startWeekDate;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String endWeekDate;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split \u003d activity.split(\"/start\"); //split[0] is \" module_code description\", split[1] is \"date to date from time to time\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if (split[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split1 \u003d split[1].split(\"/from\"); //split1[0] is \"date to date\" or \"week X mon to week X mon\", split1[1] is \"time to time\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split3 \u003d split1[0].split(\"/to\"); //split3[0] is (start) \"date\", split3[1] is (end) \"date\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split4 \u003d split3[0].trim().split(\" \"); //split the start date"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    //recess week mon / week 3 mon / exam week mon / reading week tue"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    startWeekDate \u003d split4[0].trim();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    if (startWeekDate.equalsIgnoreCase(\"reading\") || startWeekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            || startWeekDate.equalsIgnoreCase(\"week\") || startWeekDate.equalsIgnoreCase(\"recess\")) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        startWeekDate \u003d LT.getValue(split3[0].trim());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        startWeekDate \u003d split3[0].trim();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split4 \u003d split3[1].trim().split(\" \"); //split the end date"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    endWeekDate \u003d split4[0].trim();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    if (endWeekDate.equalsIgnoreCase(\"reading\") || endWeekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            || endWeekDate.equalsIgnoreCase(\"week\") || endWeekDate.equalsIgnoreCase(\"recess\")) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        endWeekDate \u003d LT.getValue(split3[1].trim());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        endWeekDate \u003d split3[1].trim();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\"); //format date"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    Date startDate \u003d formatter.parse(startWeekDate);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    Date endDate \u003d formatter.parse(endWeekDate);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split2 \u003d split1[1].split(\"/to\"); //split2[0] is (start) \"time\", split2[1] is (end) \"time\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat formatter1 \u003d new SimpleDateFormat(\"HHmm\"); //format time"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date startTime \u003d formatter1.parse(split2[0].trim());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date endTime \u003d formatter1.parse(split2[1].trim());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String startTimeString \u003d timeFormat.format(startTime);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String endTimeString \u003d timeFormat.format(endTime);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    return new HelpCommand();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    // return new RecurringCommand(split[0].trim(),startDate, endDate, startTimeString, endTimeString);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please enter recurring event as follows:\\n\" +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"recur/e modCode name_of_event /start dd/MM/yyyy to dd/MM/yyyy /from HHmm /to HHmm\\n\" +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"For example: recur/e CS1231 project meeting /start 1/10/2019 to 15/11/2019 /from 1500 /to 1700\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }else if(fullCommand.trim().substring(0,8).equals(\"delete/e\")){"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                try { //add/e module_code description /at date from time to time"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String activity \u003d fullCommand.trim().substring(8);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split \u003d activity.split(\"/at\"); //split[0] is \" module_code description\", split[1] is \"date from time to time\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if (split[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    split1 \u003d split[1].split(\"/from\"); //split1[0] is \"date\", split1[1] is \"time to time\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String weekDate \u003d\"\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split2 \u003d split1[0].trim().split(\" \");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    weekDate \u003d split2[0];"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if(weekDate.equalsIgnoreCase(\"reading\") || weekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            || weekDate.equalsIgnoreCase(\"week\") || weekDate.equalsIgnoreCase(\"recess\")){"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        weekDate \u003d LT.getValue(split1[0].trim());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }else{"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d split1[0].trim();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\"); //format date"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date date \u003d formatter.parse(weekDate.trim());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    split2 \u003d split1[1].split(\"/to\"); //split2[0] is (start) \"time\", split2[1] is (end) \"time\""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    SimpleDateFormat formatter1 \u003d new SimpleDateFormat(\"HHmm\"); //format time"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date startTime \u003d formatter1.parse(split2[0].trim());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date endTime \u003d formatter1.parse(split2[1].trim());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String dateString \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String startTimeString \u003d timeFormat.format(startTime);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String endTimeString \u003d timeFormat.format(endTime);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    return new DeleteCommand(\"event\",new Event(split[0].trim(), dateString, startTimeString, endTimeString));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please enter in the format as follows:\\n\" +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"delete/e mod_code name_of_event /at dd/MM/yyyy /from HHmm /to HHmm\\n\" +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"or delete/e mod_code name_of_event /at week x day /from HHmm /to HHmm\\n\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (fullCommand.trim().substring(0,6).equals(\"remind\")) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    boolean set \u003d false;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String description \u003d \"\";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String activity \u003d fullCommand.trim().substring(6);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split \u003d activity.trim().split(\"/by\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if(split[0].contains(\"/set\")){"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        description \u003d split[0].substring(4).trim();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        set \u003d true;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        description \u003d split[0].substring(3).trim();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split1 \u003d split[1].trim().split(\" /to \");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String weekDate \u003d \"\";"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String reminderDate \u003d \"\";"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split2 \u003d split1[0].trim().split(\" \");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    weekDate \u003d split2[0];"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split3 \u003d split1[1].trim().split(\" \");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    reminderDate \u003d split3[0];"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if (weekDate.equalsIgnoreCase(\"reading\") || weekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            || weekDate.equalsIgnoreCase(\"week\") || weekDate.equalsIgnoreCase(\"recess\")"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            || reminderDate.equalsIgnoreCase(\"reading\") || reminderDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            || reminderDate.equalsIgnoreCase(\"week\") || reminderDate.equalsIgnoreCase(\"recess\")) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d split1[0].substring(0,split1[0].length()- 4);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        reminderDate \u003d split1[1].substring(0,split1[1].length()- 4);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        String time \u003d split1[0].substring(split1[0].length()- 4);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        weekDate \u003d LT.getValue(weekDate) + \" \" + time;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        time \u003d split1[1].substring(split1[1].length()- 4);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        reminderDate \u003d LT.getValue(reminderDate) + \" \" + time;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d split1[0];"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        reminderDate \u003d split1[1];"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date dateOfTask \u003d formatter.parse(weekDate);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date dateOfReminder \u003d formatter.parse(reminderDate);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String dateString \u003d dateFormat.format(dateOfTask);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String timeString \u003d timeFormat.format(dateOfTask);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    return new RemindCommand(new Deadline(description, dateString, timeString), dateOfReminder, set);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please enter remind as follows:\\n\" +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            \"remind/(set/rm) mod_code description /by week n.o day time /to week n.o day time\\n\" +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            \"For example: remind/set cs2100 hand in homework /by week 9 fri 1500 /to week 9 thu 1500\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            } else if (fullCommand.trim().equals(\"/show workload\")) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    Date today \u003d Calendar.getInstance().getTime();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    Date nextWeek \u003d new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String nextWeekDate \u003d formatter.format(nextWeek);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    return new ShowWorkloadCommand(nextWeekDate);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please enter show workload as follows:\\n\" +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"/show workload\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } else if (fullCommand.trim().substring(0,8).equals(\"delete/d\")) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String activity \u003d fullCommand.trim().substring(8);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split \u003d activity.split(\"/by\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if (split[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String weekDate \u003d\"\";"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split2 \u003d split[1].trim().split(\" \");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    weekDate \u003d split2[0];"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if(weekDate.equalsIgnoreCase(\"reading\") || weekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            || weekDate.equalsIgnoreCase(\"week\") || weekDate.equalsIgnoreCase(\"recess\")){"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d split[1].substring(0,split[1].length()- 4); // week x day y"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        String time \u003d split[1].substring(split[1].length()- 4); // time E.g 0300"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        weekDate \u003d LT.getValue(weekDate) + \" \" + time;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }else{"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d split[1];"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date date \u003d formatter.parse(weekDate);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String dateString \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String timeString \u003d timeFormat.format(date);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    return new DeleteCommand(\"deadline\",new Deadline(split[0].trim(), dateString, timeString));"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please enter in the format as follows:\\n\" +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            \"delete/d mod_code name_of_event /by dd/MM/yyyy HHmm\\n\" +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            \"or delete/d mod_code name_of_event /by week x day HHmm\\n\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } else if (fullCommand.trim().substring(0, 5).equals(\"add/d\")) {//deadline"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String activity \u003d fullCommand.trim().substring(5);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split \u003d activity.split(\"/by\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if (split[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String weekDate \u003d\"\";"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    split2 \u003d split[1].trim().split(\" \"); //date time"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    weekDate \u003d split2[0];"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if(weekDate.equalsIgnoreCase(\"reading\") || weekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            || weekDate.equalsIgnoreCase(\"week\") || weekDate.equalsIgnoreCase(\"recess\")){"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d split[1].substring(0,split[1].length()- 4); // week x day y"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        String time \u003d split[1].substring(split[1].length()- 4); // time E.g 0300"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        weekDate \u003d LT.getValue(weekDate) + \" \" + time;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }else{"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d split[1];"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date date \u003d formatter.parse(weekDate);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String dateString \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String timeString \u003d timeFormat.format(date);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    return new AddCommand(new Deadline(split[0].trim(), dateString, timeString));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    throw new DukeException(\" OOPS!!! Please enter deadline as follows:\\n\" +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            \"add/d mod_code name_of_event /by dd/MM/yyyy HHmm\\n\" +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            \"or add/d mod_code name_of_event /by week x day HHmm\\n\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } else if(fullCommand.trim().substring(0,6).equalsIgnoreCase(\"filter\")){"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                String keyword \u003d \"\";"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                keyword \u003d fullCommand.trim().substring(7);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                return new FilterCommand(keyword);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "0325961"
        },
        "content": "            } else if (fullCommand.contains(\"(from\") \u0026\u0026 fullCommand.contains(\"to\")) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "0325961"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    boolean isValid \u003d true;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    Date date \u003d new Date();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    String currentDate \u003d formatter.format(date);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    int index \u003d fullCommand.indexOf(\"(from\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    String taskDescription \u003d fullCommand.substring(0, index);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    fullCommand \u003d fullCommand.replace(taskDescription, \"\");"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    fullCommand \u003d fullCommand.replace(\"(from\", \"\").trim();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    String[] startAndEndDate \u003d fullCommand.split(\" to \", 2);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    String startDate \u003d startAndEndDate[0];"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    String endDate \u003d startAndEndDate[1].replace(\")\", \"\").trim();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    Date beginDate \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(startDate);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    Date newCurrentDate \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(currentDate);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    if (beginDate.compareTo(newCurrentDate) \u003c 0) { //date is wrong"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        AlertBox.display(\"Warning message\", \"Invalid date\", \"Please enter another valid date\","
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "0325961"
        },
        "content": "                                Alert.AlertType.WARNING);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        isValid \u003d false;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    System.out.println(\"value of isValid: \" + isValid);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    System.out.println(\"start date: \" + startDate + \" Current date: \" + currentDate);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    return new DoWithinPeriodTasksCommand(taskDescription, startDate, endDate, isValid);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "0325961"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeException(\" OOPS!!! Please enter Do Within Period Task as follows:\\n\" +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            \" \u0027Task Description\u0027 \u0027(from DD/MM/yyyy to DD/MM/yyyy)\u0027\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if(fullCommand.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                fullCommand \u003d fullCommand.replaceFirst(\"find\", \"\");"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                fullCommand \u003d fullCommand.replaceFirst(\"hours\", \"\");"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return new FindFreeTimesCommand(Integer.parseInt(fullCommand));"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "//            } else if (fullCommand.trim().startsWith(\"retrieve free time \")) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "//                fullCommand \u003d fullCommand.replaceFirst(\"retrieve free time \", \"\");"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "//                fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                //return new RetrieveFreeTimesCommand(fullCommand);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                throw new DukeException(\"\\u2639\" + \" OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeException(\"\\u2639\" + \" OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 54,
      "lionlim97": 201,
      "0325961": 33,
      "darrenoje": 54,
      "hwbjerry": 95
    }
  },
  {
    "path": "src/main/java/Commons/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package Commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import DukeExceptions.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import DukeExceptions.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import UserInterface.AlertBox;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import org.controlsfx.control.Notifications;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class sets or removes a reminder thread."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Timer timer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cDate, Timer\u003e timerMap;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cDate, Assignment\u003e remindMap;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Image img;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList deadlines;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Reminder.class.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates reminder object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Reminder() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timerMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        remindMap \u003d storage.getReminderMap();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Removes thread and sets the reminder to false for update."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param task Task with reminder set"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param date Date of reminder"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param reminderTime String version of the date of reminder"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void removeTimerTask(Assignment task, Date date, String reminderTime) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timerMap.get(date).cancel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timerMap.remove(date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlines.setReminder(task , reminderTime, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setDeadlines(TaskList deadlines) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public HashMap\u003cDate, Assignment\u003e getRemindMap(){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.remindMap;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates a new thread when a reminder is set."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param date The time set for the thread to run"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param task The task where the reminder would be set"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws DukeException On invalid date parameter"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setReminderThread(Date date, Assignment task) throws DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (timerMap.containsKey(date)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeInvalidDateTimeException(\"You already have a reminder set at that time. Please remove reminder and set again\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        img \u003d new Image(\"/images/DaDuke.png\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String reminderTime \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        long seconds \u003d date.getTime() - currentDate.getTime();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlines.setReminder(task , reminderTime, true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timer \u003d new Timer();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timer.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    AlertBox.display(\"Reminder!!!\", \"\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            \"Please be reminded you have this task: \" + task.getDescription() + \" For mod: \" + task.getModCode() + \" by: \" + task.getDateTime(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Stage owner \u003d new Stage(StageStyle.TRANSPARENT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    StackPane root \u003d new StackPane();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    root.setStyle(\"-fx-background-color: TRANSPARENT\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Scene scene \u003d new Scene(root, 1, 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    scene.setFill(Color.TRANSPARENT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    owner.setScene(scene);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    owner.setWidth(1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    owner.setHeight(1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    owner.toBack();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    owner.show();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Notifications notificationBuilder \u003d Notifications.create()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .title(\"REMINDER!!!\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .graphic(new ImageView(img))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .text(task.getModCode() + \" \" + task.getDescription() + \"\\n\" + task.getDateTime())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .darkStyle()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .position(Pos.BOTTOM_RIGHT)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .hideAfter(Duration.seconds(20))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .onAction(event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                                owner.close();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            });"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    notificationBuilder.show();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    timer.cancel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    deadlines.setReminder(task , reminderTime, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    remindMap.remove(date);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }, seconds);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timerMap.put(date, timer);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        remindMap.put(date, task);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 127
    }
  },
  {
    "path": "src/main/java/Commons/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package Commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import DukeExceptions.DukeIOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import DukeExceptions.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Deals with loading or saving tasks to and from a file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private File filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String filePathEvent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String filePathDeadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Reminder reminder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Storage.class.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e map;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cDate, Assignment\u003e reminderMap;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates Storage object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Storage(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        filePath \u003d new File(System.getProperty(\"user.dir\") + File.separator + \"data\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        filePath.mkdir();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        filePathEvent \u003d System.getProperty(\"user.dir\") + File.separator + \"data\" + File.separator + \"event.txt\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        filePathDeadline \u003d System.getProperty(\"user.dir\") + File.separator + \"data\" + File.separator + \"deadline.txt\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminderMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Sets the reminder object in Storage as the one in Duke."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param reminder reminder object from duke"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setReminderObject(Reminder reminder) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Retrieves the reminder object from Storage, which is the same as reminder object in Duke."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Reminder getReminderObject() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.reminder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void updateEventList(TaskList list) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        PrintWriter outputStream \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            outputStream \u003d new PrintWriter(filePathEvent);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            LOGGER.log(Level.SEVERE, e.toString(), e);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        map \u003d list.getMap();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Set\u003cString\u003e allMods \u003d map.keySet();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (String mod : allMods) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Set\u003cString\u003e allDates \u003d map.get(mod).keySet();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            for (String date : allDates) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                ArrayList\u003cAssignment\u003e temp \u003d map.get(mod).get(date);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for(Assignment task : temp) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    outputStream.println(task.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        outputStream.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void readEventList(TaskList list) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cString\u003e temp \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            File eventFile \u003d new File(filePathEvent);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            eventFile.createNewFile();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            temp \u003d new ArrayList\u003c\u003e(Files.readAllLines(Paths.get(filePathEvent)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            LOGGER.log(Level.SEVERE, e.toString(), e);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (String string : temp) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (string.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Assignment task \u003d stringToTask(string);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            list.addTask(task);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void updateDeadlineList(TaskList list) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        PrintWriter outputStream \u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            outputStream \u003d new PrintWriter(filePathDeadline);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            LOGGER.log(Level.SEVERE, e.toString(), e);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        map \u003d list.getMap();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Set\u003cString\u003e allMods \u003d map.keySet();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (String mod : allMods) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Set\u003cString\u003e allDates \u003d map.get(mod).keySet();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            for (String date : allDates) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                ArrayList\u003cAssignment\u003e temp \u003d map.get(mod).get(date);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for(Assignment task : temp) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    outputStream.println(task.toString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        outputStream.close();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void readDeadlineList(TaskList list) throws DukeIOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cString\u003e temp;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            File deadlineFile \u003d new File(filePathDeadline);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            deadlineFile.createNewFile();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            temp \u003d new ArrayList\u003c\u003e(Files.readAllLines(Paths.get(filePathDeadline)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            LOGGER.log(Level.SEVERE, e.toString(), e);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeIOException(\"There is no deadline.txt file to read from. Please create one.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (String string : temp) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Assignment task \u003d stringToTask(string);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            list.addTask(task);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (task.getIsReminder()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Date date \u003d null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    date \u003d dateFormat.parse(task.getRemindTime());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    LOGGER.log(Level.SEVERE, e.toString(), e);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                reminderMap.put(date, task);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public HashMap\u003cDate, Assignment\u003e getReminderMap() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.reminderMap;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Assignment stringToTask(String string) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Assignment line \u003d null;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (string.contains(\"[D]\")) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                DateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String dateFromData \u003d string.substring(string.indexOf(\"by:\") + 4, string.indexOf(\u0027)\u0027)).trim();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String remindTime \u003d string.substring(string.indexOf(\"[\u003cR\") + 3, string.indexOf(\"/R\u003e]\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Date date \u003d format.parse(dateFromData);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String dateString \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String timeString \u003d timeFormat.format(date);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String modCode \u003d string.substring(0, string.indexOf(\"[D]\") - 1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String description \u003d string.substring(string.indexOf(\"/R\u003e]\") + 5, string.indexOf(\"by:\") - 2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                line \u003d new Deadline(modCode + \" \" + description, dateString, timeString);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                line.setRemindTime(remindTime);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String dateFromData \u003d string.substring(string.indexOf(\"at:\") + 4, string.indexOf(\"time:\")).trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String startTimeFromData \u003d string.substring(string.indexOf(\"time:\") + 6, string.indexOf(\"to\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String endTimeFromData \u003d string.substring(string.indexOf(\"to\") + 3, string.indexOf(\u0027)\u0027)).trim();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Date startTime \u003d timeFormat.parse(startTimeFromData);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Date endTime \u003d timeFormat.parse(endTimeFromData);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Date date \u003d format.parse(dateFromData);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String dateString \u003d format.format(date);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                String startTimeString \u003d timeFormat.format(startTime);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                String endTimeString \u003d timeFormat.format(endTime);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String modCode \u003d string.substring(0, string.indexOf(\"[E]\") - 1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String description \u003d string.substring(string.indexOf(\"/R\u003e]\") + 5, string.indexOf(\"at:\") - 2);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                line \u003d new Event( modCode+ \" \" + description, dateString, startTimeString, endTimeString);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (string.contains(\"\\u2713\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                line.setDone(true);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (string.contains(\"[HR]\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                line.setReminder(true);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (ParseException | StringIndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            LOGGER.log(Level.SEVERE, e.toString(), e);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Starts the thread on existing reminders set from deadline.txt"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws DukeInvalidDateTimeException On setReminderThread invalid date parameter"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setReminderOnStart() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Set\u003cDate\u003e dateKey \u003d reminderMap.keySet();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for(Date date : dateKey) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Date remindDate \u003d new Date();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Assignment task \u003d reminderMap.get(date);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String remindTime \u003d task.getRemindTime();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                remindDate \u003d dateFormat.parse(remindTime);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                LOGGER.log(Level.SEVERE, e.toString(), e);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if(remindDate.after(currentDate)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                reminder.setReminderThread(remindDate, task);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 2,
      "lionlim97": 213,
      "darrenoje": 4
    }
  },
  {
    "path": "src/main/java/Commons/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package Commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Assignment;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Represents the user interface which displays the messages to"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * respond to the user based on the user\u0027s input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String NO_FIELD \u003d \"void\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String byeMessage \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays the exit message when Duke Program ends."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showBye(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return byeMessage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays the list message when user inputs list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showList(TaskList list){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String listMessage \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.taskListSize(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            listMessage \u003d listMessage + i + \".\" + list.taskToString(i-1) + \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return listMessage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays add task message when user wants to add a task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showAdd(Assignment task, int listSize){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                + \"Now you have \" + listSize + (listSize \u003e 1 ? \" tasks in the list.\\n\" : \" task in the list.\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays done task message when user marks a task as done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showDone(Assignment task){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays the delete task message when user wants to delete a task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showDelete(Assignment task, int listSize){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "        listSize -\u003d 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\" + task.toString() + \"\\n\" + \"Now you have \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                + listSize  + (listSize \u003e 1 ? \" tasks in the list.\\n\" : \" task in the list.\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Displays the free time found with the template to be shown."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param message The free times found"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The output to be shown to the user"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String showFreeTimes(String message){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return (\"You are available at: \\n\" + message);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Displays the invalid chosen duration message."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param message The chosen free time"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The invalid free time with the proper format"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String showFreeTimesInvalidDuration(String message){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return \"Invalid duration\\n\" + \"Please enter the command in the format:\\n\" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \"find \u0027x\u0027 hours, where \u0027x\u0027 is between 1 - 16\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Displays the invalid chosen week message."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param message The chosen week"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The invalid week entry with the proper format"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String showWeeksInvalidEntry(String message){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return \"Invalid week\\n\" + \"Please enter the command in the format:\\n\" +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \"Week \u0027x\u0027, where \u0027x\u0027 is a digit between 1 - 13\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays the show reminder message when user sets a reminder for a task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showReminder(Assignment task, String time) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"Reminder has been set for \" + task.getModCode() + \" \" + task.getDescription() + \"at: \" + time;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays the show cancel reminder message when user sets a reminder for a task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showCancelReminder(Assignment task, String time) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"Reminder has been removed for \" + task.getModCode() + \" \" + task.getDescription() + \"at: \" + time;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays the error message if a file is not found."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showLoadingError(Exception e){"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"File not found\" + e.getMessage() + \"\\n\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays any of the DukeException error message caught throughout the program."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getError(Exception e){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return e.getMessage() + \"\\n\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Displays the show reminder message when user enter a task with a period to do within"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param TaskDescription The description of the task entered"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param startDate The start date for task"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param endDate The end date for task"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param isValid determine if user\u0027s input date is entered correctly"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return This returns the reminder message which contain the task description and the start"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * and end date"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public String showReminder(String TaskDescription, String startDate, String endDate, boolean isValid) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (!isValid) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return \"Please enter another valid date in format of DD/MM/yyyy\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return \"Reminder have been set for: \" + TaskDescription + \".\" + \" Start Date: \" + startDate +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    \" End Date: \" + endDate + \"\\n\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * Display recurring tasks that are added"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param description description of recurring task"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param startDate  start of recurrence"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param endDate   end of recurrence"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public String showRecurring(String description, String startDate, String endDate) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return \"Recurring task: \" + description + \" has been added between \" + startDate + \" and \" + endDate + \"\\n\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * Display task with instance of keyword"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param list List of task with keyword"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param keyword keyword entered by user"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String showFilter(ArrayList\u003cString\u003e list,String keyword){"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        if(list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            return \"There are no task(s) matching your keyword.\\n\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            String message \u003d \"Here are the following events/deadline with the keyword \" + keyword + \"\\n\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                message \u003d message + i + \".\" + list.get(i - 1) + \"\\n\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     *Display a guide to commands"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String showHelp(String help){"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return help;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * Display recommended weekly workload"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param workloadMap map of weekly workload"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @return This returns the string of workload"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showWorkload(TreeMap\u003cString, ArrayList\u003cAssignment\u003e\u003e workloadMap) throws ParseException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        SimpleDateFormat formatter1 \u003d new SimpleDateFormat(\"E\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String workloadSchedule \u003d \"Here is your recommended schedule for next week:\\n\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (workloadMap.isEmpty()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return \"You have no tasks scheduled for next week! \\n\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            for (Map.Entry\u003cString, ArrayList\u003cAssignment\u003e\u003e workload: workloadMap.entrySet()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                Date tempDay \u003d formatter.parse(workload.getKey());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                String day \u003d formatter1.format(tempDay);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                workloadSchedule \u003d workloadSchedule + day + \": \\n\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for (Assignment task: workload.getValue()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    workloadSchedule \u003d workloadSchedule + task.getType() + \" \" + task.getModCode() + \" \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            + task.getDescription() + \"\\n\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return workloadSchedule;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public String showPrevious(ArrayList\u003cString\u003e outputList) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int size \u003d outputList.size();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0325961"
        },
        "content": "        System.out.println(size);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (size \u003d\u003d 0) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0325961"
        },
        "content": "            String message \u003d \"There are no such input type in previous command\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0325961"
        },
        "content": "            String output \u003d \"\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0325961"
        },
        "content": "            for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0325961"
        },
        "content": "                output +\u003d (i + 1) + \". \" + outputList.get(i);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public String showChosenPreviousChoice(String chosenInput) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String message \u003d \"Your chosen previous input is: \\n\" + chosenInput;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 33,
      "lionlim97": 85,
      "0325961": 39,
      "hwbjerry": 33,
      "darrenoje": 29
    }
  },
  {
    "path": "src/main/java/Commons/WeekList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package Commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class WeekList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ObservableList\u003cText\u003e monList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ObservableList\u003cText\u003e tueList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ObservableList\u003cText\u003e wedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ObservableList\u003cText\u003e thuList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ObservableList\u003cText\u003e friList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ObservableList\u003cText\u003e satList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ObservableList\u003cText\u003e sunList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public WeekList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public WeekList(ObservableList\u003cText\u003e monList, ObservableList\u003cText\u003e tueList, ObservableList\u003cText\u003e wedList,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    ObservableList\u003cText\u003e thuList, ObservableList\u003cText\u003e friList, ObservableList\u003cText\u003e satList,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    ObservableList\u003cText\u003e sunList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.monList \u003d monList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.tueList \u003d tueList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.wedList \u003d wedList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.thuList \u003d thuList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.friList \u003d friList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.satList \u003d satList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.sunList \u003d sunList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public ObservableList\u003cText\u003e getMonList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return monList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public ObservableList\u003cText\u003e getTueList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return tueList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public ObservableList\u003cText\u003e getWedList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return wedList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public ObservableList\u003cText\u003e getThuList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return thuList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public ObservableList\u003cText\u003e getFriList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return friList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public ObservableList\u003cText\u003e getSatList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return satList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public ObservableList\u003cText\u003e getSunList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return sunList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lionlim97": 1,
      "hwbjerry": 57
    }
  },
  {
    "path": "src/main/java/DukeExceptions/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package DukeExceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the exception specifically catered to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Duke program should any error occur"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/java/DukeExceptions/DukeIOException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package DukeExceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Represents the exception specifically catered to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * IO exception occurring in Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DukeIOException extends IOException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public DukeIOException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 14
    }
  },
  {
    "path": "src/main/java/DukeExceptions/DukeInvalidCommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package DukeExceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Represents the exception specifically catered to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * invalid command input by user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DukeInvalidCommandException extends DukeException{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public DukeInvalidCommandException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 12
    }
  },
  {
    "path": "src/main/java/DukeExceptions/DukeInvalidDateTimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package DukeExceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Represents the exception specifically catered to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * invalid date and time input by user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DukeInvalidDateTimeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public DukeInvalidDateTimeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 11
    }
  },
  {
    "path": "src/main/java/DukeExceptions/DukeInvalidFormatException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package DukeExceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Represents the exception specifically catered to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * wrong command format input by user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DukeInvalidFormatException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public DukeInvalidFormatException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 12
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import UserInterface.Main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * To launch the GUI application for Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/Parser/AddParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import DukeExceptions.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import DukeExceptions.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import DukeExceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " * Parse Addcommand for event and deadline and return formatted command to Parser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class AddParse extends Parse {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static String[] split;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static String[] split1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static String fullCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates AddParse object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param fullCommand The entire command that calls for AddParse."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public AddParse(String fullCommand)  {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @return Command which represents the parsed Addcommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @throws Exception Returned if command does not adhere to format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Command parse() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        if (fullCommand.trim().substring(0, 5).equals(\"add/d\")) {//deadline"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                String activity \u003d fullCommand.trim().substring(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                split \u003d activity.split(\"/by\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                split1 \u003d split[0].trim().split(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                if(!super.isModCode(split1[0])){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    throw new DukeInvalidFormatException(\"\\u2639\" + \" OOPS!!! The ModCode is invalid\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                if (split[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    throw new DukeInvalidFormatException(\"\\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                String[] out \u003d DateTimeParser.DeadlineParse(split[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                return new AddCommand(new Deadline(split[0].trim(), out[0], out[1]));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidFormatException(\" OOPS!!! Please enter deadline as follows:\\n\" +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        \"add/d mod_code name_of_event /by dd/MM/yyyy HHmm\\n\" +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \"or add/d mod_code name_of_event /by week x day HHmm\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidDateTimeException(\" OOPS!!! Please enter deadline as follows:\\n\" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        \"add/d mod_code name_of_event /by dd/MM/yyyy HHmm\\n\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \"or add/d mod_code name_of_event /by week x day HHmm\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } else if (fullCommand.trim().substring(0, 5).equals(\"add/e\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            try { //add/e module_code description /at date from time to time"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                String activity \u003d fullCommand.trim().substring(5);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                split \u003d activity.split(\"/at\"); //split[0] is \" module_code description\", split[1] is \"date /from time /to time\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                split1 \u003d split[0].trim().split(\" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                if(!super.isModCode(split1[0])){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    throw new DukeInvalidFormatException(\"\\u2639\" + \" OOPS!!! The ModCode is invalid\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                if (split[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    throw new DukeInvalidFormatException(\"\\u2639\" + \" OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                String[] out \u003d DateTimeParser.EventParse(split[1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                return new AddCommand(new Event(split[0].trim(),out[0],out[1],out[2]));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } catch (ParseException | ArrayIndexOutOfBoundsException e ) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                throw new DukeInvalidFormatException(\"OOPS!!! Please enter event as follows:\\n\" +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        \"add/e modCode name_of_event /at dd/MM/yyyy from HHmm to HHmm\\n\" +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        \"For example: add/e CS1231 project meeting /at 1/1/2020 /from 1500 /to 1700\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeInvalidCommandException(\"\\u2639\" + \" OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 78,
      "lionlim97": 10
    }
  },
  {
    "path": "src/main/java/Parser/DateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class parses all date and time for BetterDuke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " **/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String[] dateTimeStringSplit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String[] dateStringSplit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String[] timeStringSplit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static LookupTable LT \u003d new LookupTable();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static SimpleDateFormat eventDateInputFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\"); //format date for event"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static SimpleDateFormat eventTimeInputFormat \u003d new SimpleDateFormat(\"HHmm\"); //format time for event"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static SimpleDateFormat dateOutputFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static SimpleDateFormat timeOutputFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static SimpleDateFormat deadlineInputFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static SimpleDateFormat deadlineDateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Parses any date that is tagged with event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param input The date input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return The String array containing all the dates."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws ParseException On wrong date format to parse."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static String[] EventParse(String input) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        // date from time /to time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateTimeStringSplit \u003d input.trim().split(\"/from\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        //dateTimeStringSplit[0] is \"date\" or \"week X day\", dateTimeStringSplit[1] is \"time /to time\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String weekDate \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateStringSplit \u003d dateTimeStringSplit[0].trim().split(\" \"); //dateStringSplit[0] can be week"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        weekDate \u003d dateStringSplit[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        weekDate \u003d WeekFormatParse.acadWeekToString(weekDate,dateTimeStringSplit[0]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date date \u003d eventDateInputFormat.parse(weekDate.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        timeStringSplit \u003d dateTimeStringSplit[1].split(\"/to\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date startTime \u003d eventTimeInputFormat.parse(timeStringSplit[0].trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date endTime \u003d eventTimeInputFormat.parse(timeStringSplit[1].trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String dateString \u003d dateOutputFormat.format(date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String startTimeString \u003d timeOutputFormat.format(startTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String endTimeString \u003d timeOutputFormat.format(endTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String[] out \u003d {dateString,startTimeString,endTimeString};"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return  out;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Parses any date that is tagged with deadline."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param input The date input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return The String array containing all the dates."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws ParseException On wrong date format to parse."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static String[] DeadlineParse(String input) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        // date time"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        dateTimeStringSplit \u003d input.trim().split(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String weekDate \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateStringSplit \u003d dateTimeStringSplit[0].trim().split(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        weekDate \u003d dateStringSplit[0];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        weekDate \u003d WeekFormatParse.acadWeekToString(weekDate,input.substring(0,input.length()-4));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String time \u003d input.substring(input.length()- 4).trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        weekDate \u003d weekDate + time;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date date \u003d deadlineInputFormat.parse(weekDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String dateString \u003d dateOutputFormat.format(date);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String timeString \u003d timeOutputFormat.format(date);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String[] out \u003d {dateString,timeString};"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Parses any date that is tagged as recurring."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param input The date input"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return The String array containing all the dates."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws ParseException On wrong date format to parse."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public static String[] recurringEventParse(String input) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        //1/10/2019 /to 15/11/2019 /from 1500 /to 1700\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateTimeStringSplit \u003d input.trim().split(\"/from\"); //dateTimeStringSplit[0] \u003d startDate to endDate"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateStringSplit \u003d dateTimeStringSplit[0].split(\"/to\"); //dateStringSplit[0] \u003d startDate (2/2/2019 or week X day)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] startDateStringSplit \u003d dateStringSplit[0].trim().split(\" \"); //startDateStringSplit[0] \u003d week"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String startWeekDate \u003d startDateStringSplit[0].trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (startWeekDate.equalsIgnoreCase(\"reading\") || startWeekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                || startWeekDate.equalsIgnoreCase(\"week\") || startWeekDate.equalsIgnoreCase(\"recess\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0325961"
        },
        "content": "            startWeekDate \u003d LT.getValue(dateStringSplit[0].trim());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            startWeekDate \u003d dateStringSplit[0].trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] endDateStringSplit \u003d dateStringSplit[1].trim().split(\" \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String endWeekDate \u003d endDateStringSplit[0].trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (endWeekDate.equalsIgnoreCase(\"reading\") || endWeekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                || endWeekDate.equalsIgnoreCase(\"week\") || endWeekDate.equalsIgnoreCase(\"recess\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0325961"
        },
        "content": "            endWeekDate \u003d LT.getValue(dateStringSplit[1].trim());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            endWeekDate \u003d dateStringSplit[1].trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date startDate \u003d eventDateInputFormat.parse(startWeekDate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date endDate \u003d eventDateInputFormat.parse(endWeekDate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String startDateString \u003d dateOutputFormat.format(startDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String endDateString \u003d dateOutputFormat.format(endDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        timeStringSplit \u003d dateTimeStringSplit[1].split(\"/to\"); //timeStringSplit[0] \u003d startTime"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date startTime \u003d eventTimeInputFormat.parse(timeStringSplit[0].trim());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date endTime \u003d eventTimeInputFormat.parse(timeStringSplit[1].trim());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String startTimeString \u003d timeOutputFormat.format(startTime);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String endTimeString \u003d timeOutputFormat.format(endTime);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] out \u003d {startDateString, endDateString, startTimeString, endTimeString};"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Parses any date that is tagged with reminder."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param input The date input"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return The String array containing all the dates."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws ParseException On wrong date format to parse."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static String[] remindDateParse(String input) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        // week 9 fri 1500 /to week 9 thu 1500\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateTimeStringSplit \u003d input.trim().split(\"/to\"); //dateTimeStringSplit[0] \u003d week 9 fri 1500"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] taskDateTimeStringSplit \u003d dateTimeStringSplit[0].trim().split(\" \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String weekDate \u003d taskDateTimeStringSplit[0].trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (weekDate.equalsIgnoreCase(\"reading\") || weekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                || weekDate.equalsIgnoreCase(\"week\") || weekDate.equalsIgnoreCase(\"recess\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            weekDate \u003d dateTimeStringSplit[0].substring(0,dateTimeStringSplit[0].length()- 4);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String time \u003d dateTimeStringSplit[0].substring(dateTimeStringSplit[0].length()- 4);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0325961"
        },
        "content": "            weekDate \u003d LT.getValue(weekDate) + \" \" + time;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            weekDate \u003d dateTimeStringSplit[0];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] reminderDateTimeStringSplit \u003d dateTimeStringSplit[1].trim().split(\" \"); //dateTimeStringSplit[1] \u003d week 9 thu 1500"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String reminderDate \u003d reminderDateTimeStringSplit[0].trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (reminderDate.equalsIgnoreCase(\"reading\") || reminderDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                || reminderDate.equalsIgnoreCase(\"week\") || reminderDate.equalsIgnoreCase(\"recess\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            reminderDate \u003d dateTimeStringSplit[1].substring(0,dateTimeStringSplit[1].length()- 4);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String time \u003d dateTimeStringSplit[1].substring(dateTimeStringSplit[1].length()- 4);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0325961"
        },
        "content": "            reminderDate \u003d LT.getValue(reminderDate) + \" \" + time;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            reminderDate \u003d dateTimeStringSplit[1];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date dateOfTask \u003d deadlineInputFormat.parse(weekDate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String dateString \u003d dateOutputFormat.format(dateOfTask);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String timeString \u003d timeOutputFormat.format(dateOfTask);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String[] dateTime \u003d {dateString, timeString, reminderDate};"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static Date deadlineInputStringToDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return deadlineInputFormat.parse(date);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static Date deadlineTaskStringToDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return deadlineDateFormat.parse(date);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 14,
      "lionlim97": 46,
      "0325961": 4,
      "darrenoje": 96
    }
  },
  {
    "path": "src/main/java/Parser/DeleteParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Commands.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import DukeExceptions.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import DukeExceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class parses the full command that calls for DeleteParse"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class DeleteParse extends Parse {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static String[] split;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static String[] split1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static String fullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates a DeleteParse object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param fullCommand The full command that calls for DeleteParse"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public DeleteParse(String fullCommand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return Command which represents the parsed DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @throws Exception Returned if command does not adhere to format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Command parse() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        if (fullCommand.trim().substring(0, 8).equals(\"delete/e\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            try { //add/e module_code description /at date from time to time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                String activity \u003d fullCommand.trim().substring(8);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                split \u003d activity.split(\"/at\"); //split[0] is \" module_code description\", split[1] is \"date from time to time\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                split1 \u003d split[0].trim().split(\" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                if(!super.isModCode(split1[0])){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    throw new DukeInvalidFormatException(\"\\u2639\" + \" OOPS!!! The ModCode is invalid\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                if (split[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    throw new DukeInvalidFormatException(\"\\u2639\" + \" OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                String[] out \u003d DateTimeParser.EventParse(split[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                return new DeleteCommand(\"event\", new Event(split[0].trim(), out[0],out[1],out[2]));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                throw new DukeInvalidFormatException(\"OOPS!!! Please enter in the format as follows:\\n\" +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        \"delete/e mod_code name_of_event /at dd/MM/yyyy /from HHmm /to HHmm\\n\" +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        \"or delete/e mod_code name_of_event /at week x day /from HHmm /to HHmm\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } else if (fullCommand.trim().substring(0, 8).equals(\"delete/d\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                String activity \u003d fullCommand.trim().substring(8);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                split \u003d activity.split(\"/by\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                split1 \u003d split[0].trim().split(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                if(!super.isModCode(split1[0])){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    throw new DukeInvalidFormatException(\"\\u2639\" + \" OOPS!!! The ModCode is invalid\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                if (split[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    throw new DukeInvalidFormatException(\"\\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                String[] out \u003d DateTimeParser.DeadlineParse(split[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                return new DeleteCommand(\"deadline\", new Deadline(split[0].trim(), out[0],out[1]));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                throw new DukeInvalidFormatException(\"OOPS!!! Please enter in the format as follows:\\n\" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        \"delete/d mod_code name_of_event /by dd/MM/yyyy HHmm\\n\" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        \"or delete/d mod_code name_of_event /by week x day HHmm\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeInvalidCommandException(\"\\u2639\" + \" OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 64,
      "lionlim97": 16
    }
  },
  {
    "path": "src/main/java/Parser/DoneParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Commands.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import DukeExceptions.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import DukeExceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class parses the full command that calls for DoneParse."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class DoneParse extends Parse {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String[] split;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String[] split1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String fullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates DoneParse object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param fullCommand The full command that calls DoneParse."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public DoneParse(String fullCommand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return Command which represents the parsed DoneCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws Exception Returned if command does not adhere to format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Command parse() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (fullCommand.trim().startsWith(\"done/e\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            try { //add/e module_code description /at date from time to time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String activity \u003d fullCommand.trim().replaceFirst(\"done/e\", \"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                split \u003d activity.split(\"/at\"); //split[0] is \" module_code description\", split[1] is \"date from time to time\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                split1 \u003d split[0].trim().split(\" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if(!super.isModCode(split1[0])){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    throw new DukeInvalidFormatException(\"\\u2639\" + \" OOPS!!! The ModCode is invalid\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if (split[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    throw new DukeInvalidFormatException(\"\\u2639\" + \" OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String[] out \u003d DateTimeParser.EventParse(split[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return new DoneCommand(\"event\", new Event(split[0].trim(), out[0],out[1],out[2]));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                throw new DukeInvalidFormatException(\"OOPS!!! Please enter in the format as follows:\\n\" +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \"done/e mod_code name_of_event /at dd/MM/yyyy /from HHmm /to HHmm\\n\" +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \"or done/e mod_code name_of_event /at week x day /from HHmm /to HHmm\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if (fullCommand.trim().startsWith(\"done/d\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String activity \u003d fullCommand.trim().replaceFirst((\"done/d\"), \"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                split \u003d activity.split(\"/by\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                split1 \u003d split[0].trim().split(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if(!super.isModCode(split1[0])){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    throw new DukeInvalidFormatException(\"\\u2639\" + \" OOPS!!! The ModCode is invalid\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if (split[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    throw new DukeInvalidFormatException(\"\\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String[] out \u003d DateTimeParser.DeadlineParse(split[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return new DoneCommand(\"deadline\", new Deadline(split[0].trim(), out[0],out[1]));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                throw new DukeInvalidFormatException(\"OOPS!!! Please enter in the format as follows:\\n\" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \"done/d mod_code name_of_event /by dd/MM/yyyy HHmm\\n\" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \"or done/d mod_code name_of_event /by week x day HHmm\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeInvalidCommandException(\"\\u2639\" + \" OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 18,
      "hwbjerry": 62
    }
  },
  {
    "path": "src/main/java/Parser/FindFreeTimesParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Commands.FindFreeTimesCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import DukeExceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class parses the full command that calls for FindFreeTimesParse."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class FindFreeTimesParse extends Parse {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates FindFreeTimesParse object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param fullCommand The input by the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public FindFreeTimesParse(String fullCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Command parse() throws DukeInvalidFormatException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        fullCommand \u003d fullCommand.replaceFirst(\"find\", \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        fullCommand \u003d fullCommand.replaceFirst(\"hours\", \"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(fullCommand.isEmpty()){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeInvalidFormatException(\"Invalid input. Please enter the command as follows. \\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \"Find \u0027x\u0027 hours , where \u0027x\u0027 is a digit\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Integer duration \u003d Integer.parseInt(fullCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return new FindFreeTimesCommand(duration);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lionlim97": 9,
      "hwbjerry": 27
    }
  },
  {
    "path": "src/main/java/Parser/MainParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Commands.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import DukeExceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import DukeExceptions.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class distinguishes the main command and calls for methods with respect to the main command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class MainParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static Command parse(String fullCommand) throws Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String [] stringSplit \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String command \u003d stringSplit[0];"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": "            case \"add/e\":"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "            case \"add/d\":"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                return new AddParse(fullCommand).parse();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "            case \"delete/e\":"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "            case \"delete/d\":"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                return new DeleteParse(fullCommand).parse();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "            case \"recur/e\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                return new RecurParse(fullCommand).parse();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "            case \"remind/set\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "            case \"remind/rm\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                return new RemindParse(fullCommand).parse();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "            case \"/show\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                return new WorkloadParse(fullCommand).parse();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "            case \"filter\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": "                return new FilterCommand(fullCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            case \"done/e\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            case \"done/d\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                return new DoneParse(fullCommand).parse();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                return new FindFreeTimesParse(fullCommand).parse();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "            case \"show/previous\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "                return new ShowPreviousCommand(fullCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": "            "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            case \"retrieve/ft\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return new RetrieveFreeTimesParse(fullCommand).parse();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "            case \"retrieve/previous\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0325961"
        },
        "content": "                return new RetrievePreviousCommand(fullCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            case \"Week\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return new WeekCommand(fullCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0325961"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0325961"
        },
        "content": "                return new ByeCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0325961"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                throw new DukeInvalidCommandException(\"Invalid input. Please type help to see all commands\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 15,
      "0325961": 44,
      "hwbjerry": 6
    }
  },
  {
    "path": "src/main/java/Parser/Parse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Abstract class Parse with methods representing all the Command subclasses to be"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * carried out when an input is entered by the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public abstract class Parse {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public abstract Command parse() throws Exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * This method checks if user input mod code actually fits the characteristic of a mod code"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param string The string of mod code"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return true if it matches the characteristics of a mod code."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public boolean isModCode(String string) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (string.length() \u003c 6){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            return  false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if (string.substring(0, 1).matches(\"\\\\w+\") \u0026\u0026 string.substring(2, 5).matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if (string.substring(0, 2).matches(\"\\\\w+\") \u0026\u0026 string.substring(3, 6).matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 12,
      "lionlim97": 16
    }
  },
  {
    "path": "src/main/java/Parser/RecurParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Commands.RecurringCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import DukeExceptions.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import DukeExceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class parses the full command that calls for RecurParse."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class RecurParse extends Parse {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static String fullCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static String[] split1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static LookupTable LT \u003d new LookupTable();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates RecurParse object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param fullCommand The full command that calls for RecurParse."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public RecurParse(String fullCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Command parse() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            // recur/e (CS1231 project meeting) /start (1/10/2019 to 15/11/2019 /from 1500 /to 1700)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            String activity \u003d fullCommand.trim().substring(7);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String[] fullCommandSplit \u003d activity.split(\"/start\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String modCodeAndDescription \u003d fullCommandSplit[0].trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            split1 \u003d modCodeAndDescription.trim().split(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            if(!super.isModCode(split1[0])){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidFormatException(\"\\u2639\" + \" OOPS!!! The ModCode is invalid\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String dateAndTime \u003d fullCommandSplit[1].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            if (modCodeAndDescription.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                throw new DukeInvalidCommandException(\"\\u2639\" + \" OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String[] in \u003d DateTimeParser.recurringEventParse(dateAndTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String startDateString \u003d in[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String endDateString \u003d in[1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String startTimeString \u003d in[2];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String endTimeString \u003d in[3];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return new RecurringCommand(modCodeAndDescription, startDateString, endDateString, startTimeString, endTimeString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeInvalidFormatException(\"OOPS!!! Please enter recurring event as follows:\\n\" +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    \"recur/e modCode name_of_event /start dd/MM/yyyy to dd/MM/yyyy /from HHmm /to HHmm\\n\" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    \"For example: recur/e CS1231 project meeting /start 1/10/2019 to 15/11/2019 /from 1500 /to 1700\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 32,
      "lionlim97": 13,
      "darrenoje": 16
    }
  },
  {
    "path": "src/main/java/Parser/RemindParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commands.RemindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import DukeExceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import DukeExceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class parses the full command that calls for RemindParse."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class RemindParse extends Parse {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final String NO_FIELD \u003d \"void\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private String[] modDescriptionsplit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String[] dateDescriptionSplit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(RemindCommand.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates RemindParse object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param fullCommand The full Command that calls for RemindParse."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public RemindParse(String fullCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Parses the entire input to see if it is to remove or set reminder."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return Returns RemindCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws Exception On invalid format that called for RemindParse"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Command parse() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            boolean isRemind \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String description \u003d NO_FIELD;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String activity \u003d fullCommand.trim().substring(6);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            dateDescriptionSplit \u003d activity.trim().split(\"/by\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            modDescriptionsplit \u003d dateDescriptionSplit[0].trim().split(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if(!super.isModCode(modDescriptionsplit[1])){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidFormatException(\"\\u2639\" + \" OOPS!!! The ModCode is invalid\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if(dateDescriptionSplit[0].contains(\"/set\")){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                description \u003d dateDescriptionSplit[0].substring(4).trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (description.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    throw new DukeInvalidFormatException(\"\\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                isRemind \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                description \u003d dateDescriptionSplit[0].substring(3).trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (description.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    throw new DukeInvalidFormatException(\"\\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String[] dateTime \u003d DateTimeParser.remindDateParse(dateDescriptionSplit[1].trim());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Date remindDate \u003d DateTimeParser.deadlineInputStringToDate(dateTime[2]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return new RemindCommand(new Deadline(description, dateTime[0], dateTime[1]), remindDate, isRemind);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            LOGGER.log(Level.INFO, e.toString(), e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeInvalidFormatException(\"OOPS!!! Please enter remind as follows:\\n\" +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    \"remind/(set/rm) mod_code description /by week n.o day time /to week n.o day time\\n\" +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    \"For example: remind/set cs2100 hand in homework /by week 9 fri 1500 /to week 9 thu 1500\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 5,
      "lionlim97": 66
    }
  },
  {
    "path": "src/main/java/Parser/RetrieveFreeTimesParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Commands.RetrieveFreeTimesCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import DukeExceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " * This class parses the full command that calls for RetrieveFreeTimesParse."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class RetrieveFreeTimesParse extends Parse {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Creates RetrieveFreeTimesParse object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param fullCommand The input by the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public RetrieveFreeTimesParse(String fullCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public Command parse() throws DukeInvalidFormatException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        fullCommand \u003d fullCommand.replaceFirst(\"retrieve/ft \", \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(fullCommand.isEmpty()){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            throw new DukeInvalidFormatException(\"Invalid input. Please enter the command as follows. \\n\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \"Find \u0027x\u0027 hours , where \u0027x\u0027 is a digit\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Integer duration \u003d Integer.parseInt(fullCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return new RetrieveFreeTimesCommand(duration);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hwbjerry": 34
    }
  },
  {
    "path": "src/main/java/Parser/WeekFormatParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class WeekFormatParse {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static LookupTable LT \u003d new LookupTable();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static String acadWeekToString  (String weekDate,String date){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        if (weekDate.equalsIgnoreCase(\"reading\") || weekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                || weekDate.equalsIgnoreCase(\"week\") || weekDate.equalsIgnoreCase(\"recess\")) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            weekDate \u003d LT.getValue(date) + \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            weekDate \u003d date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return weekDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 22,
      "lionlim97": 1
    }
  },
  {
    "path": "src/main/java/Parser/WorkloadParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Commands.ShowWorkloadCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import DukeExceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class parses the full command that calls for WorkloadParse."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class WorkloadParse extends Parse{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static String fullCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(Parser.class.getName());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static LookupTable LT \u003d new LookupTable();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates a WorkloadParse object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param fullCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public WorkloadParse(String fullCommand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private Date getNextWeekDate (Date inDate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date nextWeek \u003d new Date(inDate.getTime() + 7 * 24 * 60 * 60 * 1000);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return nextWeek;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Command parse() throws DukeInvalidFormatException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            Date today \u003d Calendar.getInstance().getTime();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            Date nextWeek \u003d getNextWeekDate(today);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            String nextWeekDate \u003d formatter.format(nextWeek);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            return new ShowWorkloadCommand(nextWeekDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeInvalidFormatException(\"OOPS!!! Please enter show workload as follows:\\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    \"/show workload\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 27,
      "lionlim97": 14,
      "darrenoje": 8
    }
  },
  {
    "path": "src/main/java/Tasks/Assignment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Abstract class Assignment with methods representing all the Command subclasses to be"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * carried out when an input is entered by the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public abstract class Assignment {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private boolean isReminder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String remindTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private String modCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates Task object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param description The description of the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Assignment(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.isReminder \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.remindTime \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.modCode \u003d\"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public abstract String getDateTime();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public abstract String getDate();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public abstract String getTime();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Checks whether the task is completed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return This returns a tick or cross depending on the boolean value of isDone"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String getReminderStatus() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return (isReminder ? \"[HR]\" : \"[NR]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String[] split \u003d description.split(\" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String taskDescription \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (int i \u003d 0; i \u003c split.length; i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            if (!split[i].toUpperCase().equals(getModCode())) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                taskDescription +\u003d split[i] + \" \";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return taskDescription;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String remindTimeToString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"[\u003cR\" + remindTime + \"/R\u003e] \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + getReminderStatus()  + remindTimeToString() + getDescription();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getModCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String[] split \u003d description.trim().split(\" \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String modcode \u003d split[0].toUpperCase();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return modcode;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Sets the time of reminder."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param time The time of reminder input by user"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setRemindTime(String time) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        remindTime \u003d time;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Retrieves the time of reminder."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getRemindTime() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.remindTime;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Sets true if there is a reminder set, false otherwise."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setReminder(boolean isReminder) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.isReminder \u003d isReminder;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Retrieves the boolean value of whether a reminder was set for this particular assignment."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public boolean getIsReminder() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.isReminder;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String toShow() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return modCode + \"\\n\" + description;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 5,
      "lionlim97": 93,
      "0325961": 4,
      "hwbjerry": 9
    }
  },
  {
    "path": "src/main/java/Tasks/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a task called deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class Deadline extends Assignment {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Deadline object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description of a task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param by Date of when a task should be done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Deadline(String description, String by, String time) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return super.getModCode() + \" \" + \"[D]\" + super.toString() + \"(by: \" + getDateTime() + \")\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"[D]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return by + \" \" + time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 19,
      "0325961": 1,
      "hwbjerry": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/Tasks/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a task called event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class Event extends Assignment{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String start;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String end;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an Event object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description of a task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param by Date of when a task should be done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param start Start time"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param end End time"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Event(String description, String by, String start, String end) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"[E]\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return super.getModCode() + \" \" + \"[E]\" + super.toString() + \"(at: \" + by + \" time: \" + start + \" to \" + end + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return by + \" \" + start + \" to \" + end;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String toShow() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return \"Start: \" + start + \"\\nEnd: \" + end + \"\\n\";// + super.toShow();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return start + \" to \" + end;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 20,
      "hwbjerry": 8,
      "darrenoje": 4,
      "-": 23
    }
  },
  {
    "path": "src/main/java/Tasks/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * To keep track of the list of task input by user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String NO_FIELD \u003d \"void\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ArrayList\u003cAssignment\u003e list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e deadlineArrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e eventArrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a TaskList object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public ArrayList\u003cAssignment\u003e getList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e getMap(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.map;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void addTask(Assignment task){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.list.add(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (this.map.containsKey(task.getModCode())) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (!this.map.get(task.getModCode()).containsKey(task.getDate())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                map.get(task.getModCode()).put(task.getDate(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            this.map.put(task.getModCode(), new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            this.map.get(task.getModCode()).put(task.getDate(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.map.get(task.getModCode()).get(task.getDate()).add(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void removeTask(Assignment task) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for(Assignment taskInList : this.map.get(task.getModCode()).get(task.getDate())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if(taskInList.getDescription().equals(task.getDescription())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                this.map.get(task.getModCode()).get(task.getDate()).remove(taskInList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void updateTask(Assignment task) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for(Assignment taskInList : this.map.get(task.getModCode()).get(task.getDate())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if(taskInList.getDateTime().equals(task.getDateTime())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Integer index \u003d this.map.get(task.getModCode()).get(task.getDate()).indexOf(taskInList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Assignment temp \u003d this.map.get(task.getModCode()).get(task.getDate()).get(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                temp.setDone(true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                this.map.get(task.getModCode()).get(task.getDate()).remove(taskInList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                this.map.get(task.getModCode()).get(task.getDate()).add(temp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    //Do not use this: User will input the task in the CLI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Assignment getTask(int index){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.list.get(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    //Do not use this: Use toString method in Task"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String taskToString(int index){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return list.get(index).toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public int taskListSize() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        int size \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        for (String modCode : map.keySet()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            for (String date : map.get(modCode).keySet()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for (Assignment task : map.get(modCode).get(date))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    size++;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return size;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setReminder(Assignment task, String time, boolean isReminder){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Assignment taskInList : this.map.get(task.getModCode()).get(task.getDate())) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (taskInList.getDescription().equals(task.getDescription())) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (isReminder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    taskInList.setRemindTime(time);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    taskInList.setReminder(true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    taskInList.setRemindTime(\"\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    taskInList.setReminder(false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 6,
      "lionlim97": 49,
      "hwbjerry": 8,
      "-": 43
    }
  },
  {
    "path": "src/main/java/UserInterface/AlertBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package UserInterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.control.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " * Controller for user prompt. Provides the layout for different alert types."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class AlertBox {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function generates a alert box based on alert type"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param title The title of alert"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param header The header of the alert"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param message The body of the alert"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param alertType The alert type"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return This returns the option chosen by the user input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static boolean display(String title, String header, String message, Alert.AlertType alertType){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        boolean isOk \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Alert alert \u003d new Alert(alertType);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        alert.setHeaderText(header);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        alert.setContentText(message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(alertType \u003d\u003d Alert.AlertType.CONFIRMATION) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Optional\u003cButtonType\u003e result \u003d alert.showAndWait();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (result.get() \u003d\u003d ButtonType.OK) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                isOk \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (result.get() \u003d\u003d ButtonType.CANCEL){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                isOk \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (alertType \u003d\u003d Alert.AlertType.INFORMATION || alertType \u003d\u003d Alert.AlertType.WARNING){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            alert.showAndWait();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        alert.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return isOk;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 1,
      "hwbjerry": 39
    }
  },
  {
    "path": "src/main/java/UserInterface/DeadlineView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package UserInterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DeadlineView {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * This creates DeadlineView object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public DeadlineView(String date, String task){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setDate(String date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setTask(String task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 30
    }
  },
  {
    "path": "src/main/java/UserInterface/DukeResponseView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package UserInterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DukeResponseView {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final Text response;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public DukeResponseView(String index, Text response) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String getIndex() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public Text getResponse() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 3,
      "hwbjerry": 18
    }
  },
  {
    "path": "src/main/java/UserInterface/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package UserInterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Duke;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method sets the platform of the GUI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param stage The window on which the Duke program will appear on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            BorderPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setTitle(\"BetterDuke\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 4,
      "hwbjerry": 1,
      "-": 30
    }
  },
  {
    "path": "src/main/java/UserInterface/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package UserInterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Commands.ShowPreviousCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Commands.WeekCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Commands.UpdateProgressIndicatorCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Duke;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Commons.WeekList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import DukeExceptions.DukeIOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Assignment;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.fxml.Initializable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.control.*;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.FontPosture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class MainWindow extends BorderPane implements Initializable {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String NO_FIELD \u003d \"void\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Text currentTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Label currentWeek;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private HBox progressContainer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e sunEventView;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e monEventView;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e tueEventView;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e wedEventView;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e thuEventView;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e friEventView;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e satEventView;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableView\u003cDeadlineView\u003e overdueTable;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableColumn\u003cDeadlineView, String\u003e overdueDateColumn;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableColumn\u003cDeadlineView, String\u003e overdueTaskColumn;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableView\u003cDukeResponseView\u003e dukeResponseTable;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private TableColumn\u003cDukeResponseView, String\u003e dukeResponseColumn;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ArrayList\u003cAssignment\u003e events;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ArrayList\u003cAssignment\u003e deadlines;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ArrayList\u003cAssignment\u003e todos;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ArrayList\u003cAssignment\u003e overdue;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList eventsList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList deadlinesList;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static LookupTable LT;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static ArrayList\u003cString\u003e outputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static WeekList outputWeekList \u003d new WeekList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(MainWindow.class.getName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        LT \u003d new LookupTable();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * This method initializes the display in the window of the GUI."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void initialize(URL location, ResourceBundle resources) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            todos \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            deadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            setWeek(true, NO_FIELD);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0325961"
        },
        "content": "            displayQuoteOfTheDay();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            retrieveList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0325961"
        },
        "content": "            openReminderBox();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            setDeadlineTable();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            overdueDateColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"date\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            overdueTaskColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"task\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            overdueTable.setItems(setOverdueTable());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0325961"
        },
        "content": "            setProgressContainer();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (NullPointerException | IOException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            LOGGER.log(Level.SEVERE, e.toString(), e);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private void displayQuoteOfTheDay(){"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            ArrayList\u003cString\u003e listOfQuotes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            InputStream inputStream \u003d this.getClass().getClassLoader().getResourceAsStream(\"documents/quotes.txt\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            StringBuffer sb \u003d new StringBuffer();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String firstLine;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null){"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                listOfQuotes.add(line);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Random random \u003d new Random();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            int result \u003d random.nextInt(68);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            firstLine \u003d listOfQuotes.get(result);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0325961"
        },
        "content": "            AlertBox.display(\"Quote of the day\", \"Quote of the day !!\", firstLine, Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            inputStreamReader.close();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            inputStream.close();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0325961"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method creates the progress indicator for the different modules."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @throws IOException On reading error in the lines of the file"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private void setProgressContainer() throws IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0325961"
        },
        "content": "        progressContainer.getChildren().clear();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0325961"
        },
        "content": "        UpdateProgressIndicatorCommand updateProgressIndicatorCommand \u003d new UpdateProgressIndicatorCommand(eventsList, deadlinesList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Pair\u003cHashMap\u003cString, String\u003e, ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e\u003e wholeData \u003d updateProgressIndicatorCommand.getWholeDate(eventsList, deadlinesList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0325961"
        },
        "content": "        HashMap\u003cString, String\u003e moduleMap \u003d updateProgressIndicatorCommand.getModuleMap(wholeData);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0325961"
        },
        "content": "        HashMap\u003cString, Pair\u003cInteger, Integer\u003e\u003e progressIndicatorValues \u003d updateProgressIndicatorCommand.getValues(moduleMap, wholeData);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0325961"
        },
        "content": "        for (String module : progressIndicatorValues.keySet()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0325961"
        },
        "content": "            FXMLLoader fxmlLoad \u003d new FXMLLoader(getClass().getResource(\"/view/ProgressIndicator.fxml\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Parent loads \u003d null;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                loads \u003d fxmlLoad.load();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                LOGGER.log(Level.SEVERE, e.toString(), e);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0325961"
        },
        "content": "            int totalNumOfTasks \u003d progressIndicatorValues.get(module).getKey();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0325961"
        },
        "content": "            int completedValue \u003d progressIndicatorValues.get(module).getValue();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0325961"
        },
        "content": "            fxmlLoad.\u003cProgressController\u003egetController().getData(module, totalNumOfTasks, completedValue);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0325961"
        },
        "content": "            progressContainer.getChildren().add(loads);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Initialize Duke object in MainWindow controller with Duke object from Main."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param d Duke object from Main bridge"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0325961"
        },
        "content": "    static ArrayList\u003cString\u003e filteredInput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Pulls the list from storage data and stores here."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws IOException On input error reading lines in the file"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws ParseException On conversion error from string to Task object"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void retrieveList() throws DukeIOException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        eventsList \u003d new TaskList();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlinesList \u003d new TaskList();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        overdue \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.readEventList(eventsList);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.readDeadlineList(deadlinesList);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        events \u003d eventsList.getList();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlines \u003d deadlinesList.getList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ObservableList\u003cDukeResponseView\u003e betterDukeResponse \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ObservableList\u003cDeadlineView\u003e setDeadlineTable()  {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String to;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String activity;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ObservableList\u003cDeadlineView\u003e deadlineViews \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Assignment task : deadlines) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            activity \u003d task.toString();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            DateFormat timeFormat\u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Date date \u003d null;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                date \u003d dateFormat.parse(activity.substring(activity.indexOf(\"by:\") + 4, activity.indexOf(\u0027)\u0027)));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                LOGGER.log(Level.SEVERE, e.toString(), e);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            to \u003d timeFormat.format(date);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            description \u003d task.getDescription();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (overdueCheck(date) \u0026\u0026 activity.contains(\"\\u2718\")) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                overdue.add(task);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                deadlineViews.add(new DeadlineView(to, description));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return deadlineViews;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ObservableList\u003cDeadlineView\u003e setOverdueTable() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String daysDue;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String activity;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ObservableList\u003cDeadlineView\u003e overdueViews \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Assignment task : overdue) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            activity \u003d task.toString();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Date date \u003d null;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                date \u003d dateFormat.parse(activity.substring(activity.indexOf(\"by:\") + 4, activity.indexOf(\u0027)\u0027)));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                LOGGER.log(Level.SEVERE, e.toString(), e);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            daysDue \u003d String.valueOf(daysBetween(date));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            description \u003d task.getDescription();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            overdueViews.add(new DeadlineView(daysDue, description));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return overdueViews;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private void openReminderBox() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0325961"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0325961"
        },
        "content": "        for (int i \u003d 0; i \u003c todos.size(); i++) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "0325961"
        },
        "content": "            if (todos.get(i).getDescription().contains(\"(from\") \u0026\u0026 todos.get(i).getDescription().contains(\"to\")) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String description \u003d todos.get(i).getDescription();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "0325961"
        },
        "content": "                int index \u003d description.indexOf(\"(from\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String taskDescription \u003d description.substring(0, index);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "0325961"
        },
        "content": "                description \u003d description.replace(taskDescription, \"\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "0325961"
        },
        "content": "                description \u003d description.replace(\"(from\", \"\").trim();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String[] dateString \u003d description.split(\" to \", 2);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String startDate \u003d dateString[0];"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String endDate \u003d dateString[1].replace(\")\", \"\").trim();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "0325961"
        },
        "content": "                if (formatter.format(date).equals(startDate)) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    AlertBox.display(\"Reminder Alert\", \" To Do Within Period Task: \" + taskDescription,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            \"Reminder starts today. On: \" + startDate, Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "0325961"
        },
        "content": "                } else if(formatter.format(date).equals(endDate)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    AlertBox.display(\"Reminder Alert\", \"To Do Within Period Task: \" + taskDescription,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            \"Reminder ends today. On: \" + endDate, Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void setDukeResponse() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        dukeResponseTable.getColumns().clear();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "//        TableColumn dukeIndexColumn \u003d new TableColumn\u003c\u003e();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "//        dukeIndexColumn.setText(\"Index\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "//        dukeIndexColumn.setMinWidth(35);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "//        dukeIndexColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"index\"));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        dukeResponseColumn \u003d new TableColumn\u003c\u003e();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        dukeResponseColumn.setText(\"Duke Response\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        dukeResponseColumn.setSortable(false);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        dukeResponseColumn.setCellValueFactory(new PropertyValueFactory(\"response\"));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        dukeResponseTable.setItems(betterDukeResponse);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        dukeResponseTable.getColumns().add(dukeResponseColumn);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private void handleUserInput() throws IOException {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(input.startsWith(\"Week\")) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Integer digit \u003d -1;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            boolean isDigit \u003d true;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String strInput \u003d input.replaceFirst(\"Week\", \"\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if(!strInput.isEmpty()) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    if(strInput.charAt(0) \u003d\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        strInput \u003d strInput.trim();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        digit \u003d Integer.parseInt(strInput);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        isDigit \u003d false;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } catch (NumberFormatException e){"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                isDigit \u003d false;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                userInput.clear();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                throw new NumberFormatException(\"Invalid Week\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if (isDigit \u0026\u0026 digit \u003e 0 \u0026\u0026 digit \u003c 14) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    week \u003d \"Week \" + digit;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    setWeek(false, week);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        duke.getResponse(week);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        outputWeekList \u003d WeekCommand.getWeekList();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        updateListView();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "0325961"
        },
        "content": "        outputList \u003d ShowPreviousCommand.getOutputList();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        setDeadlineTable();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        overdueDateColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"date\"));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        overdueTaskColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"task\"));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        overdueTable.setItems(setOverdueTable());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "0325961"
        },
        "content": "        retrieveList();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        setProgressContainer();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(!response.isEmpty()) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Text temp \u003d new Text(response);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            temp.setWrappingWidth(dukeResponseColumn.getWidth() - 15);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Integer index \u003d betterDukeResponse.size() + 1;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            betterDukeResponse.add(new DukeResponseView(index.toString(), temp));"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            setDukeResponse();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (userInput.getText().equals(\"bye\")) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            delay.setOnFinished( event -\u003e Platform.exit() );"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (input.contains(\"retrieve/previous\")) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "0325961"
        },
        "content": "            String previousInput \u003d Duke.getPreviousInput();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "0325961"
        },
        "content": "            userInput.setText(previousInput);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (input.startsWith(\"retrieve/ft \")) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String selectedOption \u003d Duke.getSelectedOption();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            userInput.setText(selectedOption);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private boolean overdueCheck(Date date) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date startOfWeek \u003d c.getTime();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (date.before(startOfWeek)) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else return false;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private long daysBetween(Date date) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return (currentDate.getTime() - date.getTime()) / (1000 * 60 * 60 * 24);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String week \u003d NO_FIELD;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method updates currentWeek Label."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param onStart The flag which indicates program startup"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param selectedWeek The week selected"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void setWeek(Boolean onStart,String selectedWeek){"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(onStart){"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateTime \u003d new Date();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String date \u003d dateFormat.format(dateTime);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            selectedWeek \u003d LT.getValue(date);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            currentWeek.setText(selectedWeek + \" ( \" + LT.getValue(selectedWeek.toLowerCase()) + \" )\");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            week \u003d selectedWeek;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            currentWeek.setFont(Font.font(\"Verdana\", FontWeight.BOLD, FontPosture.ITALIC,30));"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            currentWeek.setTextFill(Color.GOLDENROD);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            currentWeek.setText(selectedWeek + \" ( \" + LT.getValue(selectedWeek.toLowerCase()) + \" )\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            week \u003d selectedWeek;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void updateListView(){"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        monEventView.setItems(outputWeekList.getMonList());"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        tueEventView.setItems(outputWeekList.getTueList());"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        wedEventView.setItems(outputWeekList.getWedList());"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        thuEventView.setItems(outputWeekList.getThuList());"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        friEventView.setItems(outputWeekList.getFriList());"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        satEventView.setItems(outputWeekList.getSatList());"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        sunEventView.setItems(outputWeekList.getSunList());"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 190,
      "0325961": 84,
      "hwbjerry": 128
    }
  },
  {
    "path": "src/main/java/UserInterface/ProgressController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package UserInterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Assignment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.ProgressIndicator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Controller for progress indicator. This control represents the progress indicator for a module."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class ProgressController extends HBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private Label moduleCodeLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private Label completedValueLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private Label overdueValueLabel \u003d new Label();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private ProgressIndicator progressIndicator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e moduleCodeStatusIconDescriptionArrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final HashMap\u003cString, String\u003e moduleCodeMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This function gets the arraylist containing tasks in terms of Pair(module code (status icon, description)) and determine the modules taken by user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param eventsList the list containing the event tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param deadlineList the list containing the deadline tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return a pair containing the arraylist of tasks and hashmap of module code"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Pair\u003cHashMap\u003cString, String\u003e, ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e\u003e getProgressIndicatorMap (HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e eventsList, HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e deadlineList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Assignment eventTask;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (eventsList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "            for (String moduleCode : eventsList.keySet()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "                moduleCodeMap.put(moduleCode, null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "                for (String date : eventsList.get(moduleCode).keySet()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    for (int i \u003d 0; i \u003c eventsList.get(moduleCode).get(date).size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        eventTask \u003d eventsList.get(moduleCode).get(date).get(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        moduleCodeStatusIconDescriptionArrList.add(new Pair(moduleCode, new Pair(eventTask.getStatusIcon(), eventTask.getDescription())));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Assignment deadlineTask;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String eventsMC;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (eventsList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "            for (String moduleCode : deadlineList.keySet()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "                moduleCodeMap.put(moduleCode, null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0325961"
        },
        "content": "                for (String date : deadlineList.get(moduleCode).keySet()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    for (int i \u003d 0; i \u003c deadlineList.get(moduleCode).get(date).size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        deadlineTask \u003d deadlineList.get(moduleCode).get(date).get(i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        moduleCodeStatusIconDescriptionArrList.add(new Pair(moduleCode, new Pair(deadlineTask.getStatusIcon(), deadlineTask.getDescription())));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0325961"
        },
        "content": "            for (int i \u003d 0; i \u003c moduleCodeStatusIconDescriptionArrList.size(); i++) { //checks if the module code of the events hashMap is found in the deadline hashMap"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0325961"
        },
        "content": "                eventsMC \u003d moduleCodeStatusIconDescriptionArrList.get(i).getKey();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0325961"
        },
        "content": "                for (String deadlineMC : deadlineList.keySet()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    if (!eventsMC.equals(deadlineMC)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        moduleCodeMap.put(deadlineMC, null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        for (String date : deadlineList.get(deadlineMC).keySet()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            for (int j \u003d 0; j \u003c deadlineList.get(deadlineMC).get(date).size(); j++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0325961"
        },
        "content": "                                deadlineTask \u003d deadlineList.get(deadlineMC).get(date).get(j);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0325961"
        },
        "content": "                                moduleCodeStatusIconDescriptionArrList.add(new Pair(deadlineMC, new Pair\u003c\u003e(deadlineTask.getStatusIcon(), deadlineTask.getDescription())));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    } else if (eventsMC.equals(deadlineMC)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        for (String date : deadlineList.get(deadlineMC).keySet()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            for (int j \u003d 0; j \u003c deadlineList.get(deadlineMC).get(date).size(); j++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0325961"
        },
        "content": "                                deadlineTask \u003d deadlineList.get(deadlineMC).get(date).get(j);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0325961"
        },
        "content": "                                moduleCodeStatusIconDescriptionArrList.add(new Pair(deadlineMC, new Pair\u003c\u003e(deadlineTask.getStatusIcon(), deadlineTask.getDescription())));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return new Pair(moduleCodeMap, moduleCodeStatusIconDescriptionArrList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This function sets the text for moduleCodeLabel, completedValueLabel and overdueValueLabel and sets the progress for progressIndicator."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param mc the module code"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param totalValue the total number of event and deadline tasks"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param completedValue the number of tasks completed"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void getData (String mc, int totalValue , int completedValue) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int undoneValue \u003d totalValue - completedValue;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Double progressValue \u003d (double) completedValue / totalValue;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0325961"
        },
        "content": "        moduleCodeLabel.setText(mc);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0325961"
        },
        "content": "        completedValueLabel.setText(String.valueOf(completedValue));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0325961"
        },
        "content": "        overdueValueLabel.setText(String.valueOf(undoneValue));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0325961"
        },
        "content": "        progressIndicator.setProgress(progressValue);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 5,
      "0325961": 96
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003cBorderPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"719.0\" prefWidth\u003d\"998.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"UserInterface.MainWindow\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003cbottom\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003cHBox prefHeight\u003d\"36.0\" prefWidth\u003d\"600.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"37.0\" prefWidth\u003d\"517.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "            \u003cButton fx:id\u003d\"submitButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"38.0\" prefWidth\u003d\"80.0\" text\u003d\"Submit\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/bottom\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003cright\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cVBox prefHeight\u003d\"518.0\" prefWidth\u003d\"200.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "            \u003cTableView fx:id\u003d\"dukeResponseTable\" prefHeight\u003d\"243.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-border-color: black;\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumns\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"dukeResponseColumn\" editable\u003d\"false\" prefWidth\u003d\"198.0\" resizable\u003d\"false\" sortable\u003d\"false\" style\u003d\"-fx-alignment: center;\" text\u003d\"Response\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columns\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003c/TableView\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "            \u003cTableView fx:id\u003d\"overdueTable\" prefHeight\u003d\"282.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-border-color: black;\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumns\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"overdueDateColumn\" prefWidth\u003d\"72.0\" style\u003d\"-fx-alignment: center;\" text\u003d\"Days Due\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"overdueTaskColumn\" prefWidth\u003d\"124.0\" style\u003d\"-fx-alignment: center;\" text\u003d\"Overdue\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columns\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003c/TableView\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/right\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003ctop\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cVBox minHeight\u003d\"-Infinity\" prefHeight\u003d\"164.0\" prefWidth\u003d\"1000.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003cHBox prefHeight\u003d\"66.0\" prefWidth\u003d\"1000.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel fx:id\u003d\"currentWeek\" prefHeight\u003d\"20.0\" prefWidth\u003d\"722.0\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cFont name\u003d\"System Bold\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                     \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cHBox fx:id\u003d\"timerBox\" prefHeight\u003d\"50.0\" prefWidth\u003d\"277.0\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cStackPane prefHeight\u003d\"50.0\" prefWidth\u003d\"275.0\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                              \u003cAnchorPane fx:id\u003d\"timerPane\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                    \u003cLabel prefHeight\u003d\"50.0\" prefWidth\u003d\"247.0\" text\u003d\"CountDown\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                    \u003cText fx:id\u003d\"currentTime\" layoutX\u003d\"82.0\" layoutY\u003d\"30.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\" wrappingWidth\u003d\"125.22900390625\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                    \u003cLabel layoutY\u003d\"32.0\" text\u003d\"Break\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                    \u003cText fx:id\u003d\"currentTime1\" layoutX\u003d\"82.0\" layoutY\u003d\"45.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\" wrappingWidth\u003d\"125.22900390625\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                              \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                              \u003cAnchorPane fx:id\u003d\"blankPane\" prefHeight\u003d\"28.0\" prefWidth\u003d\"275.0\" style\u003d\"-fx-background-color: #9aabab;\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                    \u003cLabel layoutX\u003d\"49.0\" text\u003d\"Blank\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                              \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                     \u003c/children\u003e\u003c/HBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0325961"
        },
        "content": "            \u003cScrollPane hbarPolicy\u003d\"NEVER\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"100.0\" prefWidth\u003d\"1000.0\" vbarPolicy\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0325961"
        },
        "content": "                  \u003cHBox fx:id\u003d\"progressContainer\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"93.0\" prefWidth\u003d\"1000.0\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/top\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003ccenter\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cVBox minHeight\u003d\"-Infinity\" prefHeight\u003d\"518.0\" prefWidth\u003d\"798.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003cGridPane prefHeight\u003d\"50.0\" prefWidth\u003d\"800.0\" style\u003d\"-fx-border-insets: 0; -fx-border-color: black; -fx-grid-lines-visible: true;\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"50.0\" prefWidth\u003d\"110.0\" text\u003d\"SUN\" GridPane.columnIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"114.0\" text\u003d\"MON\"\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"114.0\" text\u003d\"TUE\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefWidth\u003d\"114.0\" text\u003d\"WED\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefWidth\u003d\"114.0\" text\u003d\"THU\" GridPane.columnIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefWidth\u003d\"114.0\" text\u003d\"FRI\" GridPane.columnIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefWidth\u003d\"114.0\" text\u003d\"SAT\" GridPane.columnIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0325961"
        },
        "content": "            \u003cGridPane prefHeight\u003d\"475.0\" prefWidth\u003d\"798.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"sunEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"6\" /\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"monEventView\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"tueEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"wedEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"thuEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"friEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"satEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 96,
      "0325961": 10,
      "hwbjerry": 59,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/ProgressIndicator.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?import javafx.scene.control.ProgressIndicator?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"98.0\" prefWidth\u003d\"237.0\" style\u003d\"-fx-background-color: FFCC99;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"UserInterface.ProgressController\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cProgressIndicator fx:id\u003d\"progressIndicator\" layoutX\u003d\"149.0\" layoutY\u003d\"6.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"90.0\" prefWidth\u003d\"80.0\" progress\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" layoutY\u003d\"26.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"80.0\" text\u003d\"Completed\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel fx:id\u003d\"completedValueLabel\" alignment\u003d\"CENTER\" contentDisplay\u003d\"BOTTOM\" layoutY\u003d\"56.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"80.0\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel alignment\u003d\"CENTER\" layoutX\u003d\"79.0\" layoutY\u003d\"26.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"80.0\" text\u003d\"Overdue\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel fx:id\u003d\"overdueValueLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"79.0\" layoutY\u003d\"56.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"80.0\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel fx:id\u003d\"moduleCodeLabel\" alignment\u003d\"CENTER\" layoutY\u003d\"-6.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"180.0\" text\u003d\"Module Code\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 1,
      "0325961": 15
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stringConversionTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[D][\\u2718] Test Deadline (by: Mon 02/12/2019 06:00 PM)\", new Deadline(\"Test Deadline\", \"Mon 02/12/2019 06:00 PM\").toString());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 2,
      "-": 8
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//import org.testng.annotations.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stringConversionTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String w1 \u003d \"[E][\\u2718] Test Event (at: Wed 04/12/2019 time: 07:00 AM to 11:00 AM)\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String w2 \u003d new Event(\"Test Event\", \"Wed 04/12/2019\", \"07:00 AM\", \"11:00 AM\").toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertEquals(w1,w2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "darrenoje": 2,
      "-": 12
    }
  },
  {
    "path": "src/test/java/FilterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class FilterTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        public void keywordTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        //String w1 \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        //assertEquals(w1, w2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 9,
      "lionlim97": 3
    }
  },
  {
    "path": "src/test/java/FindEarliestFreeTimesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class FindEarliestFreeTimesTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void FindEarliestFreeTimesTestEmptyList() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String duration \u003d \"2\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        calendar.add(Calendar.HOUR, Integer.parseInt(duration));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date outDate \u003d calendar.getTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String startDate \u003d format.format(date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String endDate \u003d format.format(outDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d\"You are available at: \\n\" + startDate + \"until\" + endDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TaskList todoList \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TaskList eventList \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TaskList deadlineList \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command c \u003d Parser.parse(\"when is the nearest day in which I have a \"+ duration +\" hour free slot?\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d c.execute(todoList,eventList,deadlineList, ui, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        actual \u003d actual.substring(0,\"You are available at: \\n\".length()) + startDate + \"until\" + endDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "lionlim97": 3,
      "hwbjerry": 33
    }
  },
  {
    "path": "src/test/java/FixedDurationTasksTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class FixedDurationTasksTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void FindEarliestFreeTimesTestEmptyList() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        calendar.add(Calendar.HOUR, 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date outDate \u003d calendar.getTime();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String startDate \u003d format.format(date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String endDate \u003d format.format(outDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d\"You are available at: \\n\" + startDate + \"until\" + endDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TaskList todoList \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TaskList eventList \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TaskList deadlineList \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command c \u003d Parser.parse(\"when is the nearest day in which I have a 2 hour free slot?\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d c.execute(todoList,eventList,deadlineList, ui, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        actual \u003d actual.substring(0,\"You are available at: \\n\".length()) + startDate + \"until\" + endDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "lionlim97": 5,
      "hwbjerry": 32
    }
  },
  {
    "path": "src/test/java/RemindTest/RemindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package RemindTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commands.RemindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.LookupTable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import StubClasses.ReminderStub;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import StubClasses.StorageStub;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Assignment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class tests RemindCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class RemindCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static TaskList deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Assignment taskAfterCurrentDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Assignment taskBeforeCurrentDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Assignment taskWithInvalidModCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Assignment taskWithInvalidDescription;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Assignment taskWithInvalidDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Assignment taskWithReminder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String reminderSetDateString;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String reminderRemoveDateString;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Date oneMinBeforeCurrentDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Date oneMinAfterCurrentDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Date tenMinAfterCurrentDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static SimpleDateFormat dateOutputFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static SimpleDateFormat timeOutputFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static SimpleDateFormat deadlineDateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private LookupTable lookupTable \u003d new LookupTable();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private StorageStub storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList events \u003d new TaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static void setAllVariables() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date dayAfter \u003d new Date(System.currentTimeMillis() + 86400000);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date dayBefore \u003d new Date(System.currentTimeMillis() - 86400000);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date dayAfterTomorrow \u003d new Date(System.currentTimeMillis() + 172800000);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date threeDaysAfterCurrentDate \u003d new Date(System.currentTimeMillis() + 259200000);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String dateAfter \u003d dateOutputFormat.format(dayAfter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String timeAfter \u003d timeOutputFormat.format(dayAfter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String dateBefore \u003d dateOutputFormat.format(dayBefore);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String timeBefore \u003d timeOutputFormat.format(dayBefore);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String dateDayAfterTomorrow \u003d dateOutputFormat.format(dayAfterTomorrow);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String timeDayAfterTomorrow \u003d timeOutputFormat.format(dayAfterTomorrow);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String dateThreeDaysAfter \u003d dateOutputFormat.format(threeDaysAfterCurrentDate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String timeThreeDaysAfter \u003d timeOutputFormat.format(threeDaysAfterCurrentDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        oneMinAfterCurrentDate \u003d new Date(System.currentTimeMillis() + 60000);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        oneMinBeforeCurrentDate \u003d new Date(System.currentTimeMillis() - 60000);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        tenMinAfterCurrentDate \u003d new Date(System.currentTimeMillis() + 600000);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminderSetDateString \u003d deadlineDateFormat.format(oneMinAfterCurrentDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminderRemoveDateString \u003d deadlineDateFormat.format(tenMinAfterCurrentDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        taskAfterCurrentDate \u003d new Deadline(\"CS2100 exam\", dateAfter, timeAfter);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        taskBeforeCurrentDate \u003d new Deadline(\"CS2100 exam\", dateBefore, timeBefore);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        taskWithInvalidModCode \u003d new Deadline(\"CS2107 exam\", dateAfter, timeAfter);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        taskWithInvalidDescription \u003d new Deadline(\"CS2100 assignment\", dateAfter, timeAfter);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        taskWithInvalidDate \u003d new Deadline(\"CS2100 exam\", dateDayAfterTomorrow, timeDayAfterTomorrow);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        taskWithReminder \u003d new Deadline(\"CS2100 exam\", dateThreeDaysAfter, timeThreeDaysAfter);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlines.addTask(taskAfterCurrentDate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ReminderStub.setReminderTask(taskWithReminder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ReminderStub.setReminderTime(tenMinAfterCurrentDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void taskDateBeforeCurrentDateTest() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskBeforeCurrentDate,oneMinAfterCurrentDate,true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"Sorry, your selected task has already passed!\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(lookupTable, events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void remindDateBeforeCurrentDateTest() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskAfterCurrentDate, oneMinBeforeCurrentDate,true);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"Sorry, you cannot set a time that has already passed!\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(lookupTable, events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void invalidModCodeTest() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskWithInvalidModCode, oneMinAfterCurrentDate,true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"Sorry, you have no such mod entered in your deadline table!\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(lookupTable, events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void invalidTaskDateTest() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskWithInvalidDate, oneMinAfterCurrentDate,true);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"Sorry, you have no such timing entered in your deadline table!\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(lookupTable, events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void invalidTaskDescription() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskWithInvalidDescription, oneMinAfterCurrentDate,true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"Sorry, there are no such task description in your deadline table!\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(lookupTable, events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void remindDateExistsTest() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskWithReminder, tenMinAfterCurrentDate,true);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"Sorry, you have a reminder set for \" + taskWithReminder.getDescription() + \" at: \" + taskWithReminder.getDateTime();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(lookupTable, events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void removeReminderInvalidReminderTime() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskAfterCurrentDate, oneMinAfterCurrentDate,false);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"Sorry, you have no such reminder at that inputted time.\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(lookupTable, events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void removeReminderInvalidDescription() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskWithInvalidDescription, tenMinAfterCurrentDate,false);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"Sorry, you have no such reminder with inputted description at that time\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(lookupTable, events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setReminderValidFormat() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskAfterCurrentDate, oneMinAfterCurrentDate,true);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"Reminder has been set for \" + taskAfterCurrentDate.getModCode() + \" \" + taskAfterCurrentDate.getDescription() + \"at: \" + reminderSetDateString;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(lookupTable, events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void removeReminderValidFormat() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskWithReminder, tenMinAfterCurrentDate,false);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"Reminder has been removed for \" + taskWithReminder.getModCode() + \" \" + taskWithReminder.getDescription() + \"at: \" + reminderRemoveDateString;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(lookupTable, events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 205
    }
  },
  {
    "path": "src/test/java/RemindTest/RemindParseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package RemindTest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Parser.RemindParse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "//@@author lionlim97"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class tests RemindParse."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class RemindParseTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static TaskList deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String by;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String reminderDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String taskDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static SimpleDateFormat dateOutputFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static SimpleDateFormat timeOutputFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static SimpleDateFormat deadlineInputFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static void setAllVariables() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date nextDay \u003d new Date(System.currentTimeMillis() + 86400000);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        by \u003d dateOutputFormat.format(nextDay);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        time \u003d timeOutputFormat.format(nextDay);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date twoHourFromCurrentDate \u003d new Date(System.currentTimeMillis() + 7200000);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminderDate \u003d deadlineInputFormat.format(twoHourFromCurrentDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        taskDate \u003d deadlineInputFormat.format(nextDay);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlines.addTask(new Deadline(\"CS2100 exam\", by, time));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void remindParseTestWithInvalidModCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String remindSet \u003d \"remind/set 2100 exam /by \" + taskDate + \" /to \" + reminderDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"\\u2639\" + \" OOPS!!! The ModCode is invalid\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            command \u003d new RemindParse(remindSet).parse();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertNull(command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setRemindParseTestWithInvalidDescription() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String remindSet \u003d \"remind/set CS2100 /by \" + taskDate + \" /to \" + reminderDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"\\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            command \u003d new RemindParse(remindSet).parse();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertNull(command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void removeRemindParseTestWithInvalidDescription() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String remindSet \u003d \"remind/rm CS2100 /by \" + taskDate + \" /to \" + reminderDate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"\\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            command \u003d new RemindParse(remindSet).parse();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertNull(command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setRemindParseTestWithInvalidFormat() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String remindSet \u003d \"remind/set CS2100 \" + taskDate + \" /to \" + reminderDate;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"OOPS!!! Please enter remind as follows:\\n\" +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                \"remind/(set/rm) mod_code description /by week n.o day time /to week n.o day time\\n\" +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                \"For example: remind/set cs2100 hand in homework /by week 9 fri 1500 /to week 9 thu 1500\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            command \u003d new RemindParse(remindSet).parse();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertNull(command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setRemindParseTestWithInvalidDate() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String remindSet \u003d \"remind/set CS2100 \" + \"week 14 mon\" + \" /to \" + reminderDate;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"OOPS!!! Please enter remind as follows:\\n\" +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                \"remind/(set/rm) mod_code description /by week n.o day time /to week n.o day time\\n\" +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                \"For example: remind/set cs2100 hand in homework /by week 9 fri 1500 /to week 9 thu 1500\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            command \u003d new RemindParse(remindSet).parse();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertNull(command);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setRemindParseWithValidFormat() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String remindSet \u003d \"remind/set CS2100 exam /by \" + taskDate + \" /to \" + reminderDate;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            command \u003d new RemindParse(remindSet).parse();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 132
    }
  },
  {
    "path": "src/test/java/StubClasses/ReminderStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package StubClasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Reminder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class represents Reminder to be used for unit testing."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class ReminderStub extends Reminder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cDate, Assignment\u003e remindMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private SimpleDateFormat dateOutputFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private SimpleDateFormat timeOutputFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Assignment reminderTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Date reminderTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void removeTimerTask(Assignment task, Date date, String reminderTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assert reminderTime !\u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setReminderThread(Date date, Assignment task) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static void setReminderTask(Assignment task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminderTask \u003d task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static void setReminderTime(Date time) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminderTime \u003d time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public HashMap\u003cDate, Assignment\u003e getRemindMap() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        remindMap.put(reminderTime, reminderTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return remindMap;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 46
    }
  },
  {
    "path": "src/test/java/StubClasses/StorageStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package StubClasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Commons.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class represents Storage to be used for unit testing."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class StorageStub extends Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ReminderStub reminderStub \u003d new ReminderStub();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public ReminderStub getReminderObject() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return reminderStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 15
    }
  }
]
