[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    archiveBaseName \u003d \"\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"v1.1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.5.0\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 14,
      "-": 47
    }
  },
  {
    "path": "src/main/java/Commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import JavaFx.AlertBox;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the command to add a Task object to a TaskList object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class  AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task The Task object to be added"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the adding of a Task object to a TaskList object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and displaying the add task response."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the add task message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display add task message"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws FileNotFoundException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String out \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        int con \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        boolean isOK \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        AlertBox AB \u003d new AlertBox();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (task.getType().equals(\"[E]\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            int size \u003d events.taskListSize();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean[] conflict \u003d new boolean[size];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (events.getTask(i).getDateTime().equals(task.getDateTime())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    conflict[i] \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    con++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            if (con \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                events.addTask(this.task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                out \u003d ui.showAdd(this.task, events.taskListSize());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                storage.updateEventList(events);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                out \u003d \"Sorry, you have similar events at the same time and on the same day \\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (conflict[i]) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        out +\u003d events.getTask(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                AB.display(\"Warning\", \"Clash in events\", out, Alert.AlertType.WARNING);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } else if (task.getType().equals(\"[D]\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            int size \u003d deadlines.taskListSize();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            boolean[] conflict \u003d new boolean[size];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                if (deadlines.getTask(i).getDateTime().equals(task.getDateTime())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    conflict[i] \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    con++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            if (con !\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                out \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    if (conflict[i]) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        out +\u003d deadlines.getTask(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                isOK \u003d AB.display(\"Note\", \"Similar deadline\", out, Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            if (isOK) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                deadlines.addTask(this.task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                out \u003d ui.showAdd(this.task, deadlines.taskListSize());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 27,
      "lionlim97": 19,
      "hwbjerry": 2,
      "-": 41
    }
  },
  {
    "path": "src/main/java/Commands/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the command to end the program."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the updating of the file with current list of tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the TaskList object and displays the goodbye message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the goodbye message"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display goodbye message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception On file not found error"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.updateEventList(events);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showBye();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 5,
      "-": 21
    }
  },
  {
    "path": "src/main/java/Commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Abstract class Command with methods representing all the Command subclasses to be"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * carried out when an input is entered by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public abstract String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws Exception;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/Commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the command to delete a Task object from a TaskList object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList listToChange;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a DeleteCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index The index representing the task number in the TaskList object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param list The name of the TaskList that requires changing"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public DeleteCommand(int index, String list){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the deletion of a task inside the TaskList object with the given index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the delete task message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display delete task message"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException On ArrayList out of bound error"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (list.equals(\"event\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            listToChange \u003d events;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if (list.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            listToChange \u003d deadlines;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (index \u003e\u003d 0 \u0026\u0026 index \u003c listToChange.taskListSize()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Task task \u003d listToChange.getTask(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            listToChange.removeTask(this.index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (listToChange.equals(\"event\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                storage.updateEventList(listToChange);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else if (listToChange.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                storage.updateDeadlineList(listToChange);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return ui.showDelete(task, listToChange.taskListSize());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeException(\"\\u2639\" + \" OOPS!!! I\u0027m sorry, but we cannot find the input task number :-(\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 27,
      "hwbjerry": 2,
      "-": 26
    }
  },
  {
    "path": "src/main/java/Commands/DoWithinPeriodTasksCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Interface.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Interface.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import JavaFx.AlertBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Tasks.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Represent the command that deals with tasks that need to be done within a certain period"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class DoWithinPeriodTasksCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String taskDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final boolean isValid;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Creates a DoWithinPeriodTasksCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param taskDescription The task description given"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param startDate The start date given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param endDate The end date given"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param isValid is used to store the validity of user\u0027s input date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public DoWithinPeriodTasksCommand (String taskDescription, String startDate, String endDate, boolean isValid) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.isValid \u003d isValid;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Executes the adding of Do Within Period Tasks object into TaskList object and displays."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * AlertBox to show reminder."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param events The events TaskList object that contain event tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param deadlines The deadlines TaskList object that contain deadline tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param ui The Ui object to display the add task message"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display reminder message"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (isValid) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "            AlertBox.display(\"Reminder Alert\", \"You have a task to do within a period.\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    taskDescription + \" (from \" + startDate + \" to \" + endDate + \")\", Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            //todos.addTask(new Todo(taskDescription + \"(from \" + startDate + \" to \" + endDate + \")\")); remove this after done"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return ui.showReminder(taskDescription, startDate, endDate, isValid);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 2,
      "0325961": 51
    }
  },
  {
    "path": "src/main/java/Commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represent the command to mark a check on a task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a DoneCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index The index representing the task number in the TaskList object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoneCommand(int index){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the marking a check on a task inside the TaskList object with the given index."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the done task message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display done task message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException On ArrayList out of bound error"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        /*if(index \u003e\u003d 0 \u0026\u0026 index \u003c todos.taskListSize()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            todos.markAsDone(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return ui.showDone(todos.getTask(index));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeException(\"\\u2639\" + \" OOPS!!! I\u0027m sorry, but we cannot find the input task number :-(\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return null; //remove this after fixing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 13,
      "hwbjerry": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/Commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represent the command to find a task in the TaskList object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String key;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a FindCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param key The keyword that the user wants to use to find in teh TaskList object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String key){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Executes the finding a task inside the TaskList object with the given keyword"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display find message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        /*TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cTask\u003e todosList \u003d todos.getList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cTask\u003e eventsList \u003d events.getList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cTask\u003e deadlinesList \u003d deadlines.getList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Task task : todosList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (task.getDescription().contains(key)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                list.addTask(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Task task : eventsList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (task.getDescription().contains(key)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                list.addTask(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Task task : deadlinesList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (task.getDescription().contains(key)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                list.addTask(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return ui.showFind(list);*/"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return null; //to be removed"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 28,
      "hwbjerry": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/Commands/FindEarliestFreeTimesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Interface.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Interface.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " * Represents the command to find earliest free time from TaskList object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "*/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class FindEarliestFreeTimesCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Creates a FindEarliestFreeTimesCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param duration The duration that the user wants to use to find in the TaskList object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public FindEarliestFreeTimesCommand(String duration, String type) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method checks if two given datetime have the same date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param firstDate The first date given"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param secondDate The second date given"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return This returns true if the dates are the same"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private boolean checkIfSameDate(Date firstDate, Date secondDate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        boolean isTrue \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        long diff \u003d secondDate.getTime() - firstDate.getTime();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        long diffDays \u003d diff / (24 * 60 * 60 * 1000);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(diffDays !\u003d 0) isTrue \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return isTrue;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Executes the finding of earliest available block period inside the given TaskList objects with the given duration."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param events The event TaskList object used to find free time with the given duration"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param deadlines The deadline TaskList object used to find free time with the given duration"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param ui The Ui object to display the earliest free time message"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display earliest free time"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws Exception Throws ParseException is findEarliestFreeTime contains error"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm aa\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm aa\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Pair\u003cDate, Date\u003e freeTime \u003d events.findEarliestFreeTime(duration, type);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String message;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        boolean isSameDate \u003d checkIfSameDate(freeTime.getKey(), freeTime.getValue());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (isSameDate) message \u003d dateFormat.format(freeTime.getKey()) + \" until \" + timeFormat.format(freeTime.getValue());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        else message \u003d dateFormat.format(freeTime.getKey()) + \" until \" + dateFormat.format(freeTime.getValue());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return ui.showFreeTimes(message);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 1,
      "hwbjerry": 59
    }
  },
  {
    "path": "src/main/java/Commands/FixedDurationTasksCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Interface.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Interface.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import JavaFx.FixedDurationTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Tasks.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " * Represents the command to find 5 earliest free time from TaskList object for the user to select."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class FixedDurationTasksCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String NO_FIELD \u003d\"void\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final int MAX_NO_OF_SLOTS \u003d 5;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String taskDescription;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String duration;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String taskDetails \u003d NO_FIELD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Creates a FixedDurationTasksCommand object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param taskDescription The task description given"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param duration The task description given"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param type The type task given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public FixedDurationTasksCommand(String taskDescription, String duration, String type) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function breaks down the instruction given then add the task to list by its task type."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param events The TaskList object used to storage all event tasks"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param deadlines The TaskList object used to storage deadline tasks"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws ParseException The error when the data being passed contains an error"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private void addByType(TaskList events, TaskList deadlines) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String taskType \u003d taskDetails.substring(0,3);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (taskType.equals(\"[D]\")){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[] spiltDetails \u003d taskDetails.split(\"by: \", 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[] dates \u003d spiltDetails[1].split(\" until \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            deadlines.addTask(new Deadline(taskDescription, dates[0]));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (taskType.equals(\"[E]\")){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[] spiltDetails \u003d taskDetails.split(\"at: \", 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[] dates \u003d spiltDetails[1].split(\" until \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            SimpleDateFormat dateTimeFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String date \u003d dateFormat.format(dateTimeFormat.parse(dates[0]));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String timeStart \u003d timeFormat.format(dateTimeFormat.parse(dates[0]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String timeEnd \u003d timeFormat.format(dateTimeFormat.parse(dates[1]));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            events.addTask(new Event(taskDescription, date, timeStart, timeEnd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Executes the finding of multiple available block period inside the TaskList object with the given duration."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param events The event TaskList object used to find free times with the given duration"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param deadlines The deadline TaskList object used to find frees time with the given duration"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param ui The Ui object to display the chosen free time message"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display free time chosen"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws Exception Throws ParseException is findFreeTimes contains error"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            ArrayList\u003cPair\u003cDate, Date\u003e\u003e  data \u003d events.findFreeTimes(duration, MAX_NO_OF_SLOTS, type);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/FixedDurationTask.fxml\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Parent root \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            stage.setScene(new Scene(root));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            fxmlLoader.\u003cFixedDurationTask\u003egetController().getData(data, taskDescription, type);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            stage.setTitle(\"Hello Better options\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            stage.showAndWait();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            FixedDurationTask controller \u003d fxmlLoader.getController();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            taskDetails \u003d controller.returnData();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "//            addByType(todos, events, deadlines);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return ui.showFixedDurationTask(taskDetails);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 5,
      "hwbjerry": 95
    }
  },
  {
    "path": "src/main/java/Commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the command to show the list of tasks on a TaskList object"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String list;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList listToView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public ListCommand(String list){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the display of all the task in the TaskList object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the list message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display list message"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if(list.equals(\"event\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            listToView \u003d events;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if(list.equals(\"deadline\")){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            listToView \u003d deadlines;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return ui.showList(listToView);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 14,
      "hwbjerry": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/Commands/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if date of tasks is within the current week."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private boolean withinWeek(Date date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        //Solution below adapted from https://stackoverflow.com/questions/23930216/how-to-check-if-the-date-belongs-to-current-week-or-not/23930578#23930578"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        c.setFirstDayOfWeek(Calendar.SUNDAY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        c.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        c.set(Calendar.HOUR_OF_DAY, 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        c.set(Calendar.MINUTE, 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        c.set(Calendar.MILLISECOND, 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Date startOfWeek \u003d c.getTime();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date startOfFollowingWeek \u003d new Date(startOfWeek.getTime() + 7 * 24 * 60 * 60 * 1000);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (date.after(startOfWeek) \u0026\u0026 date.before(startOfFollowingWeek)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds the tasks that are not done and within the current week."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param todos The TaskList object for todos"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the done task message"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display remind message"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException On date parsing error"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList reminder \u003d new TaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cTask\u003e eventsList \u003d events.getList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cTask\u003e deadlinesList \u003d deadlines.getList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        temp.addAll(eventsList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        temp.addAll(deadlinesList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Task task : temp) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (task.toString().contains(\"[D]\") \u0026\u0026 task.toString().contains(\"\\u2718\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Date currentDate \u003d format.parse(task.toString().substring(task.toString().indexOf(\"by:\") + 4, task.toString().indexOf(\u0027)\u0027)).trim());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (withinWeek(currentDate)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    reminder.addTask(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else if (task.toString().contains(\"[E]\") \u0026\u0026 task.toString().contains(\"\\u2718\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                DateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String[] arr \u003d task.getDateTime().split(\"to\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String[] arr1 \u003d arr[0].trim().split(\" \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String date \u003d arr1[1].trim() + \" \" + arr[1].trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Date currentDate \u003d format.parse(date);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (withinWeek(currentDate)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    reminder.addTask(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showReminder(reminder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 22,
      "hwbjerry": 3,
      "-": 49
    }
  },
  {
    "path": "src/main/java/Commands/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the command to snooze a Task object to a TaskList object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String dateString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String start;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String end;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private String modCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an SnoozeCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index The index representing the task number in the TaskList object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public SnoozeCommand(int index, String dateString, String start, String end){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateString \u003d dateString;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the snoozing a task inside the TaskList object with the given number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the find message"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display snooze message"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cTask\u003e eventsList \u003d events.getList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cTask\u003e deadlinesList \u003d deadlines.getList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Task task : eventsList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                list.addTask(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Task task : deadlinesList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                list.addTask(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (end \u003d\u003d dateString) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            list.snoozeTask(deadlinesList, index, dateString, dateString, dateString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return ui.showSnooze(index, deadlinesList.size(), deadlinesList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            list.snoozeTask(eventsList, index, dateString, start, end);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            storage.updateEventList(events);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return ui.showSnooze(index, eventsList.size(), eventsList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 20,
      "darrenoje": 11,
      "hwbjerry": 4,
      "-": 25
    }
  },
  {
    "path": "src/main/java/Commands/TentativeSchedulingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Interface.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Interface.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Interface.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " * Handles Commnand to plan Tentative Schedule"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class TentativeSchedulingCommand extends Command{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "//    private final TaskList tentativeDates \u003d Duke.getTentativeDates();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ArrayList\u003cString\u003e dateString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ArrayList\u003cString\u003e startTimeString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ArrayList\u003cString\u003e endTimeString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * Creates a Tentative Scheduling object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param des Description of event"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param dateString Array of dates of events"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param endTimeString Array of endTimes of events"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param startTimeString Array of startTime of events"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public TentativeSchedulingCommand(String des,ArrayList\u003cString\u003e dateString, ArrayList\u003cString\u003e startTimeString, ArrayList\u003cString\u003e endTimeString) throws FileNotFoundException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.description \u003d des;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.dateString \u003d dateString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.startTimeString \u003d startTimeString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.endTimeString \u003d endTimeString;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        for (int i \u003d 0; i \u003c dateString.size();i++){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Event event \u003d new Event(description, dateString.get(i),startTimeString.get(i),endTimeString.get(i));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            //this.tentativeDates.addTask(event);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "//        Storage.updateTentativeDates(tentativeDates);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * Executes the finding of earliest available block period inside the TaskList object with the given duration."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param ui The Ui object to display the earliest free time message"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display Tentative Schedule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        //return ui.showTentativeSchedule(this.tentativeDates);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 39,
      "lionlim97": 7,
      "hwbjerry": 4
    }
  },
  {
    "path": "src/main/java/Commands/ViewSchedulesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A method which allows the user to view tasks in form of schedule."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewSchedulesCommand extends Command{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the display of all the task as a schedule,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * differentiated by type."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param events The events TaskList object that contain event tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param deadlines The deadlines TaskList object that contain deadline tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the user schedule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display user\u0027s schedule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cTask\u003e eventsList \u003d events.getList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cTask\u003e deadlinesList \u003d deadlines.getList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Task task : eventsList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            list.addTask(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Task task : deadlinesList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            list.addTask(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showUserSchedule(list.schedule());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 14,
      "0325961": 2,
      "-": 22
    }
  },
  {
    "path": "src/main/java/Interface/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Interface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A program that manages tasks input by user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * with commands that includes adding, deleting, displaying list of tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * and to mark completion of a task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final TaskList events;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final TaskList todos;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final TaskList deadlines;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates Duke object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        todos \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        events \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            storage.readDeadlineList(deadlines);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            storage.readEventList(events);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (IOException | ParseException | StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showLoadingError(e);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method runs the Duke program."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input The user\u0027s input to the Duke program"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the string to respond to user\u0027s input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private String run(String input) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return c.execute(todos, events, deadlines, ui, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return ui.showError(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return run(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "lionlim97": 16,
      "0325961": 5,
      "-": 45
    }
  },
  {
    "path": "src/main/java/Interface/LookupTable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "package Interface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " * Lookup table that provides date given week and day"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class LookupTable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * Creates a lookup table object and read from Lookup.txt file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public LookupTable() throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        BufferedReader reader \u003d new BufferedReader(new FileReader(System.getProperty(\"user.dir\") + \"\\\\data\\\\Lookup.txt\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        while ((line \u003d reader.readLine()) !\u003d null)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            String[] parts \u003d line.split(\":\", 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            if (parts.length \u003e\u003d 2)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                String key \u003d parts[0].trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                String value \u003d parts[1].trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                this.map.put(key.toLowerCase(), value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * Translate week,day to date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param week_day week and day of activity in academic calender"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @return date of activity"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public  String getDate(String week_day){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String out \u003d map.get(week_day.toLowerCase().trim());//week_day in the format of (week x day x)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String getDates(String week){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return map.get(week);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String getWeek(String date){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String out \u003d map.get(date);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 46,
      "hwbjerry": 9
    }
  },
  {
    "path": "src/main/java/Interface/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Interface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Commands.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import JavaFx.AlertBox;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deals with the input of the user and tries to understand the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * user\u0027s input with fixed commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String[] arr;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String[] arr1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String[] arr2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String[] arr3;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static LookupTable LT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            LT \u003d new LookupTable();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method breaks apart the user\u0027s input and tries to make sense with it."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fullCommand The user\u0027s input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns a Command object based on user\u0027s input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException On invalid input or when wrong input format is entered"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fullCommand.trim().equals(\"bye\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ByeCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else if (fullCommand.trim().substring(0, 4).equals(\"list\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String list \u003d fullCommand.trim().substring(5);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if (list.trim().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! Please do not leave name of list blank.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    } else if (list.trim().equals(\"todo\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        return new ListCommand(list);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    } else if (list.trim().equals(\"event\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        return new ListCommand(list);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    } else if (list.trim().equals(\"deadline\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        return new ListCommand(list);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! Please enter name of list\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please enter list as follows:\\n\" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            \"list name_of_list_to_view\\n\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            \"For example: list todo\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (fullCommand.trim().substring(0, 4).equals(\"done\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                    arr \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    int index \u003d Integer.parseInt(arr[1]) - 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                    return new DoneCommand(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"\\u2639\" + \" OOPS!!! Please enter a valid task number.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"\\u2639\" + \" OOPS!!! Please do not leave task number blank.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (fullCommand.trim().substring(0, 4).equals(\"find\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                    String key \u003d fullCommand.trim().substring(5);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (key.trim().isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! Please do not leave the keyword blank.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                        return new FindCommand(key);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"\\u2639\" + \" OOPS!!! Please enter keyword.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (fullCommand.trim().substring(0, 4).equals(\"todo\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                String activity \u003d fullCommand.trim().substring(4).trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                if (activity.isEmpty()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                    return new AddCommand(new Todo(activity));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            } else if (fullCommand.trim().substring(0, 5).equals(\"add/e\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                try { //add/e module_code description /at date from time to time"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                    String activity \u003d fullCommand.trim().substring(5);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    arr \u003d activity.split(\"/at\"); //arr[0] is \" module_code description\", arr[1] is \"date from time to time\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (arr[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    arr1 \u003d arr[1].split(\"from\"); //arr1[0] is \"date\", arr1[1] is \"time to time\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\"); //format date"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    Date date \u003d formatter.parse(arr1[0].trim());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    arr2 \u003d arr1[1].split(\"to\"); //arr2[0] is (start) \"time\", arr2[1] is (end) \"time\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat formatter1 \u003d new SimpleDateFormat(\"HHmm\"); //format time"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    Date startTime \u003d formatter1.parse(arr2[0].trim());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    Date endTime \u003d formatter1.parse(arr2[1].trim());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                    String dateString \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String startTimeString \u003d timeFormat.format(startTime);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String endTimeString \u003d timeFormat.format(endTime);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    return new AddCommand(new Event(arr[0].trim(), dateString, startTimeString, endTimeString));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please enter event as follows:\\n\" +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"event name_of_event /at dd/MM/yyyy from HHmm to HHmm\\n\" +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"For example: event project meeting /at 1/1/2020 from 1500 to 1700\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (fullCommand.trim().substring(0,6).equals(\"remind\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                return new RemindCommand();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (fullCommand.trim().substring(0, 6).equals(\"delete\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    arr \u003d fullCommand.trim().substring(7).split(\" \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String list \u003d arr[0].trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                    int index \u003d Integer.parseInt(arr[1]) - 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if (arr[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! The name of list cannot be empty.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    } else if (!list.trim().equals(\"todo\") \u0026\u0026 !list.trim().equals(\"event\") \u0026\u0026 !list.trim().equals(\"deadline\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        throw new DukeException(\"OOPS!!! Please enter delete as follows:\\n\" +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                                \"delete name_of_list task_number\\n\" +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                                \"For example: delete todo 1\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    return new DeleteCommand(index, arr[0]);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"\\u2639\" + \" OOPS!!! Please enter a valid task number.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    throw new DukeException(\"\\u2639\" + \" OOPS!!! Please do not leave task number or list name blank.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } else if (fullCommand.trim().substring(0, 5).equals(\"add/d\")) {//deadline"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String activity \u003d fullCommand.trim().substring(5);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                    arr \u003d activity.split(\"/by\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (arr[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String weekdate \u003d arr[1].substring(0,arr[1].length()- 4); // week x day y"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String time \u003d arr[1].substring(arr[1].length()- 4); // time E.g 0300"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    weekdate \u003d LT.getDate(weekdate) + \" \" + time;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    Date date \u003d formatter.parse(weekdate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                    String dateString \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    return new AddCommand(new Deadline(arr[0], dateString));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\" OOPS!!! Please enter deadline as follows:\\n\" +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                            \"deadline name_of_activity /by dd/MM/yyyy HHmm\\n\" +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                            \"For example: deadline return book /by 2/12/2019 1800\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if(fullCommand.trim().contains(\"when is the nearest day in which I have a \") \u0026\u0026 fullCommand.trim().contains(\" hour free slot?\")) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                    String duration \u003d fullCommand;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String type \u003d \"event\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                    duration \u003d duration.replaceFirst(\"when is the nearest day in which I have a \", \"\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    duration \u003d duration.replaceFirst(\" hour free slot\", \"\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    duration \u003d duration.substring(0, duration.indexOf(\u0027?\u0027));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    return new FindEarliestFreeTimesCommand(duration, type);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\" OOPS!!! Please enter find free time as follows:\\n\" +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                            \" when is the nearest day in which I have a X hour free slot?\\n\" +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                            \"For example:  when is the nearest day in which I have a 4.5 hour free slot?\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (fullCommand.equals(\"show schedule\")) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ViewSchedulesCommand();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (fullCommand.trim().substring(0,6).equals(\"snooze\")) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                    String activity \u003d fullCommand.trim().substring(6);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                    arr \u003d activity.split(\"/to\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    arr1 \u003d arr[0].trim().split(\" \");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    int index \u003d Integer.parseInt(arr1[1]) - 1;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    if (arr1[1].isEmpty()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! The index of a snooze cannot be empty.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    if (arr1[0].contains(\"deadline\")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        Date date \u003d formatter.parse(arr[1].trim());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        String dateString \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        return new SnoozeCommand(index, dateString, dateString, dateString);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        arr2 \u003d arr[1].trim().split(\"to\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        arr3 \u003d arr2[0].trim().split(\" \");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        Date date \u003d formatter.parse(arr3[0].trim());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        SimpleDateFormat formatter1 \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        Date startTime \u003d formatter1.parse(arr3[1].trim());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        Date endTime \u003d formatter1.parse(arr2[1].trim());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        String dateString \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        String startTimeString \u003d timeFormat.format(startTime);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        String endTimeString \u003d timeFormat.format(endTime);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        return new SnoozeCommand(index, dateString, startTimeString, endTimeString);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    throw new DukeException(\" OOPS!!! Please enter snooze as follows respectively:\\n\" +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"To snooze deadlines: snooze deadline index /to dd/MM/yyyy HHmm\\n\" +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"To snooze events: snooze event index /to dd/MM/yyyy HHmm to HHmm\\n\" +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"For example: snooze event 2 /to 2/12/2019 1800 to 1900\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } else if (!(fullCommand.startsWith(\"todo\") || fullCommand.startsWith(\"add/d\") || fullCommand.startsWith(\"add/e\")) \u0026\u0026"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    fullCommand.contains(\"(needs \") \u0026\u0026 fullCommand.endsWith(\" hours)\")) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                try{"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    int index;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String type;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    if (fullCommand.endsWith(\" hours)\")) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        index \u003d fullCommand.indexOf(\" hours)\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        type \u003d \"event\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        index \u003d fullCommand.indexOf(\" days)\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        type \u003d \"todo\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    fullCommand \u003d fullCommand.substring(0,index);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    index \u003d fullCommand.indexOf(\"(needs \");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String taskDescription \u003d fullCommand.substring(0, index).trim();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String duration \u003d fullCommand.substring(index+7).trim();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    return new FixedDurationTasksCommand(taskDescription, duration, type);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    throw new DukeException(\" OOPS!!! Please enter Fixed Duration Task as follows:\\n\" +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            \"\u0027Task Description\u0027 \u0027 (needs x hours)\u0027\\n\" +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            \"reading the sales report (needs 2 hours)\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0325961"
        },
        "content": "            } else if (fullCommand.contains(\"(from\") \u0026\u0026 fullCommand.contains(\"to\")) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0325961"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    boolean isValid \u003d true;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    Date date \u003d new Date();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    String currentDate \u003d formatter.format(date);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    int index \u003d fullCommand.indexOf(\"(from\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    String taskDescription \u003d fullCommand.substring(0, index);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    fullCommand \u003d fullCommand.replace(taskDescription, \"\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    fullCommand \u003d fullCommand.replace(\"(from\", \"\").trim();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    String[] startAndEndDate \u003d fullCommand.split(\" to \", 2);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    String startDate \u003d startAndEndDate[0];"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    String endDate \u003d startAndEndDate[1].replace(\")\", \"\").trim();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    Date beginDate \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(startDate);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    Date newCurrentDate \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(currentDate);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    if (beginDate.compareTo(newCurrentDate) \u003c 0) { //date is wrong"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        AlertBox.display(\"Warning message\", \"Invalid date\", \"Please enter another valid date\","
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0325961"
        },
        "content": "                                Alert.AlertType.WARNING);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        isValid \u003d false;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    System.out.println(\"value of isValid: \" + isValid);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    System.out.println(\"start date: \" + startDate + \" Current date: \" + currentDate);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    return new DoWithinPeriodTasksCommand(taskDescription, startDate, endDate, isValid);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0325961"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeException(\" OOPS!!! Please enter Do Within Period Task as follows:\\n\" +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            \" \u0027Task Description\u0027 \u0027(from DD/MM/yyyy to DD/MM/yyyy)\u0027\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"\\u2639\" + \" OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"\\u2639\" + \" OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 18,
      "lionlim97": 38,
      "0325961": 30,
      "darrenoje": 43,
      "hwbjerry": 31,
      "-": 105
    }
  },
  {
    "path": "src/main/java/Interface/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Interface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Deals with loading or saving tasks to and from a file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private File filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String filePathEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String filePathDeadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static String filePathTentativeDates;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, ArrayList\u003cTask\u003e\u003e\u003e map;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates Storage object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Storage(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        filePath \u003d new File(System.getProperty(\"user.dir\") + \"\\\\data\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        filePath.mkdir();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        filePathEvent \u003d System.getProperty(\"user.dir\") + \"\\\\data\\\\event.txt\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        filePathDeadline \u003d System.getProperty(\"user.dir\") + \"\\\\data\\\\deadline.txt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        filePathTentativeDates \u003d System.getProperty(\"user.dir\") + \"\\\\data\\\\TentativeDates.txt\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void updateEventList(TaskList list) throws FileNotFoundException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        PrintWriter outputStream \u003d new PrintWriter(filePathEvent);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        map \u003d list.getMap();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Set\u003cString\u003e allMods \u003d map.keySet();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (String mod : allMods) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Set\u003cString\u003e allDates \u003d map.get(mod).keySet();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            for (String date : allDates) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                ArrayList\u003cTask\u003e temp \u003d map.get(mod).get(date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for(Task task : temp) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    outputStream.println(task.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        outputStream.close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void readEventList(TaskList list) throws IOException, ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cString\u003e temp \u003d new ArrayList\u003c\u003e(Files.readAllLines(Paths.get(filePathEvent)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (String string : temp) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Task task \u003d stringToTask(string);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            list.addTask(task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void updateDeadlineList(TaskList list) throws FileNotFoundException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        PrintWriter outputStream \u003d new PrintWriter(filePathDeadline);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        map \u003d list.getMap();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Set\u003cString\u003e allMods \u003d map.keySet();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (String mod : allMods) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Set\u003cString\u003e allDates \u003d map.get(mod).keySet();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            for (String date : allDates) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                ArrayList\u003cTask\u003e temp \u003d map.get(mod).get(date);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for(Task task : temp) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    outputStream.println(task.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        outputStream.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void readDeadlineList(TaskList list) throws IOException, ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cString\u003e temp \u003d new ArrayList\u003c\u003e(Files.readAllLines(Paths.get(filePathDeadline)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (String string : temp) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Task task \u003d stringToTask(string);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            list.addTask(task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static Task stringToTask(String string) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (string.trim().isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Error\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            System.exit(5);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Task line;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (string.contains(\"[D]\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Date date \u003d format.parse(string.substring(string.indexOf(\"by:\") + 4, string.indexOf(\u0027)\u0027)).trim());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            String dateString \u003d format.format(date);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            line \u003d new Deadline(string.substring(0, string.indexOf(\"[D]\") - 1) + \" \" + string.substring(string.indexOf(\"[D]\") + 7, string.indexOf(\"by:\") - 2), dateString);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            Date date \u003d format.parse(string.substring(string.indexOf(\"at:\") + 4, string.indexOf(\"time:\")));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            String dateString \u003d format.format(date);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            Date startTime \u003d timeFormat.parse(string.substring(string.indexOf(\"time:\") + 6, string.indexOf(\"to\")));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String startTimeString \u003d timeFormat.format(startTime);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            Date endTime \u003d timeFormat.parse(string.substring(string.indexOf(\"to\") + 3, string.indexOf(\u0027)\u0027)).trim());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String endTimeString \u003d timeFormat.format(endTime);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            line \u003d new Event(string.substring(0, string.indexOf(\"[E]\") - 1) + \" \" + string.substring(string.indexOf(\"[E]\") + 7, string.indexOf(\"at:\")-2), dateString, startTimeString, endTimeString);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } if(string.contains(\"\\u2713\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            line.setDone(true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 5,
      "lionlim97": 58,
      "darrenoje": 8,
      "-": 43
    }
  },
  {
    "path": "src/main/java/Interface/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Interface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the user interface which displays the messages to"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * respond to the user based on the user\u0027s input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String NO_FIELD \u003d \"void\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String welcomeMessage \u003d \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"What can I do for you?\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String byeMessage \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String line \u003d \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the welcome message when Duke program starts."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showWelcome(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"Hello from\\n\" + logo + welcomeMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the exit message when Duke Program ends."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showBye(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return byeMessage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the list message when user inputs list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showList(TaskList list){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String listMessage \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.taskListSize(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            listMessage \u003d listMessage + i + \".\" + list.taskToString(i-1) + \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return listMessage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays add task message when user wants to add a task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showAdd(Task task, int listSize){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Now you have \" + listSize + (listSize \u003e 1 ? \" tasks in the list.\\n\" : \" task in the list.\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays done task message when user marks a task as done."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showDone(Task task){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the delete task message when user wants to delete a task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showDelete(Task task, int listSize){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\" + task.toString() + \"\\n\" + \"Now you have \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                + listSize + (listSize \u003e 1 ? \" tasks in the list.\\n\" : \" task in the list.\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the find message when a user wants to find tasks with a specific keyword."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showFind(TaskList list){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if(list.taskListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"There are no matching tasks in your list.\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            String findMessage \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d list.taskListSize(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                findMessage \u003d findMessage + i + \".\" + list.taskToString(i - 1) + \"\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return findMessage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showFreeTimes(String message){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"You are available at: \\n\" + message);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Displays the chosen free time after the user select the best free time slot available."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param message The chosen free time"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The chosen free time. Otherwise, operation cancelled."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String showFixedDurationTask(String message){"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return message.equals(NO_FIELD) ? \"Operation cancelled!\\nPlease enter another command.\": \"Your selected task is been added.\\n\" + message;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the reminder message when user asks for a reminder."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showReminder(TaskList list){"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if(list.taskListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"There are no upcoming tasks this week.\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String remindMessage \u003d \"Here are your tasks for this week:\\n\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d list.taskListSize(); i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                remindMessage \u003d remindMessage + i + \".\" + list.taskToString(i - 1) + \"\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return remindMessage;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the error message if a file is not found."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showLoadingError(Exception e){"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"File not found\" + e.getMessage() + \"\\n\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays any of the DukeException error message caught throughout the program."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showError(DukeException e){"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return e.getMessage() + \"\\n\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showUserSchedule(String finalSchedule) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return \"Here is your schedule which have been categorised into TODO, DEADLINE and EVENTS\\n\" +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0325961"
        },
        "content": "                finalSchedule;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the snooze message when a user wants to snooze a task."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String showSnooze(int index, int listSize, ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return \"Noted. I\u0027ve snoozed task number \" + (index+1) + \" to: \" + \"\\n\" + list.get(listSize-1) + \"\\n\" +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Now you have \" + listSize + (listSize \u003e 1 ? \" tasks in the list.\\n\" : \" task in the list.\\n\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Displays the show reminder message when user enter a task with a period to do within"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param TaskDescription The description of the task entered"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param startDate The start date for task"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param endDate The end date for task"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param isValid determine if user\u0027s input date is entered correctly"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return This returns the reminder message which contain the task description and the start"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * and end date"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public String showReminder(String TaskDescription, String startDate, String endDate, boolean isValid) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (!isValid) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return \"Please enter another valid date in format of DD/MM/yyyy\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return \"Reminder have been set for: \" + TaskDescription + \".\" + \" Start Date: \" + startDate +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    \" End Date: \" + endDate + \"\\n\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String showTentativeSchedule(TaskList tentativeDates) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String out \u003d \"Here is your tentative schedule. \\n\" ;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        for (int i \u003d 0; i\u003c tentativeDates.taskListSize(); i++){"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            out +\u003d i+1 + \".\" + tentativeDates.taskToString(i ) + \"\\n\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return  out;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 6,
      "lionlim97": 1,
      "0325961": 25,
      "hwbjerry": 14,
      "darrenoje": 1,
      "-": 118
    }
  },
  {
    "path": "src/main/java/JavaFx/AlertBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "package JavaFx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.control.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " * Controller for user prompt. Provides the layout for different alert types."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class AlertBox {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function generates a alert box based on alert type"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param title The title of alert"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param header The header of the alert"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param message The body of the alert"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param alertType The alert type"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return This returns the option chosen by the user input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static boolean display(String title, String header, String message, Alert.AlertType alertType){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        boolean isOk \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Alert alert \u003d new Alert(alertType);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        alert.setHeaderText(header);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        alert.setContentText(message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(alertType \u003d\u003d Alert.AlertType.CONFIRMATION) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Optional\u003cButtonType\u003e result \u003d alert.showAndWait();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (result.get() \u003d\u003d ButtonType.OK) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                isOk \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (result.get() \u003d\u003d ButtonType.CANCEL){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                isOk \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (alertType \u003d\u003d Alert.AlertType.INFORMATION || alertType \u003d\u003d Alert.AlertType.WARNING){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            alert.showAndWait();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        alert.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return isOk;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hwbjerry": 40
    }
  },
  {
    "path": "src/main/java/JavaFx/ChatBot.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package JavaFx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.control.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Controller for ChatBot. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class ChatBot extends BorderPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * This method initializes the display in the window of the GUI."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        dialogContainer.getChildren().add(DialogBoxDuke.getDukeDialog(ui.showWelcome(), dukeImage));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Initialize Duke object in ChatBot controller with Duke object from MainWindow."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param d Duke object from Main bridge"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                DialogBoxUser.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                DialogBoxDuke.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (userInput.getText().equals(\"bye\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            delay.setOnFinished( event -\u003e Platform.exit() );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 58,
      "0325961": 2,
      "hwbjerry": 3
    }
  },
  {
    "path": "src/main/java/JavaFx/DeadlineView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package JavaFx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DeadlineView {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * This creates DeadlineView object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public DeadlineView(String date, String task){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setDate(String date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setTask(String task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 30
    }
  },
  {
    "path": "src/main/java/JavaFx/DialogBoxDuke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package JavaFx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DialogBoxDuke extends HBox {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the DialogBox object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param text The text to be displayed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param img The image to be shown"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private DialogBoxDuke(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBoxDuke.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays Duke\u0027s DiaLog box and flips it to the opposite"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * side of the user in the GUI window."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param text The text to be displayed in Duke\u0027s DialogBox"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param img The image to be displayed in Duke\u0027s DialogBox"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This creates and returns a DialogBox object representing Duke"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static DialogBoxDuke getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        var db \u003d new DialogBoxDuke(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 5,
      "-": 61
    }
  },
  {
    "path": "src/main/java/JavaFx/DialogBoxUser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package JavaFx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DialogBoxUser extends HBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates the DialogBox object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param text The text to be displayed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param img The image to be shown"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private DialogBoxUser(String text, Image img) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBoxUser.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays the user\u0027s DiaLog box in the GUI window."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param text The text to be displayed in the user\u0027s DialogBox"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param img The image to be displayed in the user\u0027s DialogBox"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return This creates and returns a DialogBox object representing the user"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static DialogBoxUser getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return new DialogBoxUser(text, img);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 48
    }
  },
  {
    "path": "src/main/java/JavaFx/FixedDurationTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "package JavaFx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.control.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " * Controller for fixed duration tasks. Provides the GUI for user to select best option."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class FixedDurationTask {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String NO_FIELD \u003d \"void\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String CROSS \u003d \"[\\u2718]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ChoiceBox\u003cString\u003e taskTypeChoiceBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private TextField taskDescriptionTextField;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cString\u003e periodListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Button cancelButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Button addButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private TextField periodTextField;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ArrayList\u003c Pair\u003cDate, Date\u003e\u003e freeTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String taskType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String taskDetails \u003d NO_FIELD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cString\u003e freeTimesList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function gets data from previous window."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param availableTimeSlot Contains all free times found in start and end pairs"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param task The task input by user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param type The task type based on the user\u0027s input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void getData(ArrayList\u003cPair\u003cDate, Date\u003e\u003e availableTimeSlot, String task, String type){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        freeTimes \u003d availableTimeSlot;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        taskDescription \u003d task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        taskType \u003d type;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        taskDescriptionTextField.setText(taskDescription);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        populateFreeTimesList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(type.equals(\"event\")){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            taskTypeChoiceBox.getItems().add(\"[E] Event\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            taskTypeChoiceBox.setValue(\"[E] Event\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            taskTypeChoiceBox.getItems().add(\"[T] Todo\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            taskTypeChoiceBox.setValue(\"[T] Todo\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function populates data into FreeTimeList ObservableList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void populateFreeTimesList(){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        SimpleDateFormat dateTimeFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm aa\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for(Pair\u003cDate, Date\u003e date: freeTimes){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String startEnd \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if(taskType.equals(\"event\")) startEnd \u003d \"Start: \" + dateTimeFormat.format(date.getKey()) + \"\\nEnd: \" + dateTimeFormat.format(date.getValue());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            else if(taskType.equals(\"todo\")) startEnd \u003d \"Start: \" + dateFormat.format(date.getKey()) + \"\\nEnd: \" + dateFormat.format(date.getValue());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            freeTimesList.add(startEnd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        periodListView.setItems(freeTimesList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function returns data processed in current window to previous window."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The command and message to display to the ChatBot"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String returnData(){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function processes the data selected from GUI then generates command and task details."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param taskType The task type"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param date The start and end dates"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The processed data command and task details in a pair"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String sortByTaskType(String taskType, String date) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        date \u003d date.replace(\"Start: \", \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] spiltDate \u003d date.split(\"End: \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String startDate \u003d spiltDate[0];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String endDate \u003d spiltDate[1];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String typeTypeCommand \u003d taskType.trim().substring(4).toLowerCase();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (taskType.substring(0,3).trim().equals(\"[T]\")){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            taskDetails \u003d taskType.trim().substring(0,3) + CROSS + \" \" + taskDescription + \" \" + startDate + \" until \" + endDate;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (taskType.substring(0,3).trim().equals(\"[E]\")){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            taskDetails \u003d taskType.trim().substring(0,3) + CROSS + \" \" + taskDescription + \" (at: \" + startDate + \" until \" + endDate + \")\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function checks if is selected parameter valid, then prompts the user to confirm."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void handleAdd() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(!periodTextField.getText().isEmpty()){"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            taskDetails \u003d sortByTaskType((taskTypeChoiceBox.getValue()), periodTextField.getText());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            boolean isOk \u003d AlertBox.display(\"Confirmation Dialog\", \"Add Task\", \"Press OK to add task.\\nPress Cancel to change your options.\", Alert.AlertType.CONFIRMATION);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Stage stage \u003d (Stage) addButton.getScene().getWindow();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (isOk) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                stage.close();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                AlertBox.display(\"Notification Dialog\", \"\", \"Your task has been added.\", Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            AlertBox.display(\"Warning Dialog\",\"Period is empty\",\"Please Select and click a Period from the List.\", Alert.AlertType.WARNING);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function prompts the user to confirm cancel operation."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void handleCancel() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        boolean isCancel \u003dAlertBox.display(\"Confirmation Dialog\",\"Cancel Task\",\"Press OK to return to ChatBot.\\nPress Cancel to return to Hello Better options.\", Alert.AlertType.CONFIRMATION);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Stage stage \u003d (Stage) cancelButton.getScene().getWindow();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(isCancel) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            stage.close();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function updates periodTextField when mouse clicked on ListView."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void updatePeriod (){"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String temp \u003d periodListView.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        int index \u003d temp.indexOf(\"End:\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String period \u003d temp.substring(0,index) + \" \" + temp.substring(index);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        periodListView.refresh();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        periodListView.setItems(freeTimesList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        periodTextField.setText(period);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hwbjerry": 146
    }
  },
  {
    "path": "src/main/java/JavaFx/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package JavaFx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method sets the platform of the GUI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param stage The window on which the Duke program will appear on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            BorderPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setTitle(\"BetterDuke\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 2,
      "hwbjerry": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/JavaFx/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package JavaFx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.animation.Animation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.fxml.Initializable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.control.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.util.Callback;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class MainWindow extends BorderPane implements Initializable {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String NO_FIELD \u003d \"void\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Label currentTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Label currentWeek;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private HBox progressContainer;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ListView sunEventView;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ListView monEventView;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ListView tueEventView;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ListView wedEventView;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ListView thuEventView;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ListView friEventView;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ListView satEventView;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableView\u003cDeadlineView\u003e overdueTable;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableColumn\u003cDeadlineView, String\u003e overdueDateColumn;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableColumn\u003cDeadlineView, String\u003e overdueTaskColumn;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableView\u003cDeadlineView\u003e deadlineTable;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableColumn\u003cDeadlineView, String\u003e deadlineDateColumn;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableColumn\u003cDeadlineView, String\u003e deadlineTaskColumn;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ArrayList\u003cTask\u003e events;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ArrayList\u003cTask\u003e deadlines;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ArrayList\u003cTask\u003e todos;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ArrayList\u003cTask\u003e overdue;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList eventsList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList deadlinesList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static LookupTable LT;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            LT \u003d new LookupTable();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    //private Map\u003cString, String\u003e lookupTable \u003d LookupTable.getLookupTable();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method initializes the display in the window of the GUI."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void initialize(URL location, ResourceBundle resources) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            todos \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            deadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            setClock();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            setWeek(true, NO_FIELD);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            retrieveList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0325961"
        },
        "content": "            openReminderBox();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            deadlineDateColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"date\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            deadlineTaskColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"task\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            deadlineTable.setItems(setDeadlineTable());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            overdueDateColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"date\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            overdueTaskColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"task\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            overdueTable.setItems(setOverdueTable());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0325961"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/ProgressIndicator.fxml\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0325961"
        },
        "content": "            Parent loader \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0325961"
        },
        "content": "            fxmlLoader.\u003cProgressController\u003egetController().getData(\"CS2100\", \"5\", \"6\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0325961"
        },
        "content": "            progressContainer.getChildren().add(loader);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            setListItem();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (ParseException | IOException | NullPointerException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Initialize Duke object in MainWindow controller with Duke object from Main."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param d Duke object from Main bridge"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Animates the clock timer in MainWindow GUI."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private void setClock() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Timeline clock \u003d new Timeline(new KeyFrame(Duration.ZERO, e -\u003e {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"E dd/MM/yyyy HH:mm:ss\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            currentTime.setText(LocalDateTime.now().format(formatter));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }), new KeyFrame(Duration.seconds(1)));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        clock.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        clock.play();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Pulls the list from storage data and stores here."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws IOException On input error reading lines in the file"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws ParseException On conversion error from string to Task object"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private void retrieveList() throws IOException, ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        eventsList \u003d new TaskList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlinesList \u003d new TaskList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        overdue \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.readEventList(eventsList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.readDeadlineList(deadlinesList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        events \u003d eventsList.getList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlines \u003d deadlinesList.getList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ObservableList\u003cDeadlineView\u003e setDeadlineTable() throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String to;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String activity;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ObservableList\u003cDeadlineView\u003e deadlineViews \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Task task : deadlines) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            activity \u003d task.toString();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            DateFormat timeFormat\u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Date date \u003d dateFormat.parse(activity.substring(activity.indexOf(\"by:\") + 4, activity.indexOf(\u0027)\u0027)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            to \u003d timeFormat.format(date);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            description \u003d task.getDescription();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (overdueCheck(date) \u0026\u0026 activity.contains(\"\\u2718\")) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                overdue.add(task);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                deadlineViews.add(new DeadlineView(to, description));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return deadlineViews;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ObservableList\u003cDeadlineView\u003e setOverdueTable() throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String daysDue;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String activity;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ObservableList\u003cDeadlineView\u003e overdueViews \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Task task : overdue) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            activity \u003d task.toString();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Date date \u003d dateFormat.parse(activity.substring(activity.indexOf(\"by:\") + 4, activity.indexOf(\u0027)\u0027)));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            daysDue \u003d String.valueOf(daysBetween(date));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            description \u003d task.getDescription();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            overdueViews.add(new DeadlineView(daysDue, description));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return overdueViews;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0325961"
        },
        "content": "     private void openReminderBox() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0325961"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0325961"
        },
        "content": "        for (int i \u003d 0; i \u003c todos.size(); i++) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0325961"
        },
        "content": "            if (todos.get(i).getDescription().contains(\"(from\") \u0026\u0026 todos.get(i).getDescription().contains(\"to\")) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String description \u003d todos.get(i).getDescription();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0325961"
        },
        "content": "                int index \u003d description.indexOf(\"(from\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String taskDescription \u003d description.substring(0, index);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0325961"
        },
        "content": "                description \u003d description.replace(taskDescription, \"\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0325961"
        },
        "content": "                description \u003d description.replace(\"(from\", \"\").trim();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String[] dateString \u003d description.split(\" to \", 2);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String startDate \u003d dateString[0];"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String endDate \u003d dateString[1].replace(\")\", \"\").trim();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0325961"
        },
        "content": "                if (formatter.format(date).equals(startDate)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    AlertBox.display(\"Reminder Alert\", \" To Do Within Period Task: \" + taskDescription,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            \"Reminder starts today. On: \" + startDate, Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0325961"
        },
        "content": "                } else if(formatter.format(date).equals(endDate)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    AlertBox.display(\"Reminder Alert\", \"To Do Within Period Task: \" + taskDescription,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            \"Reminder ends today. On: \" + endDate, Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void handleUserInput() throws ParseException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (input.startsWith(\"Week\")) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            setWeek(false, input);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            setListItem();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if (input.startsWith(\"add\")) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            refresh(input);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if (userInput.getText().equals(\"bye\")) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            delay.setOnFinished( event -\u003e Platform.exit() );"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private boolean overdueCheck(Date date) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date startOfWeek \u003d c.getTime();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (date.before(startOfWeek)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else return false;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private long daysBetween(Date date) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return (currentDate.getTime() - date.getTime()) / (1000 * 60 * 60 * 24);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    //Temp file as Add command and storage not yet implemented. By right go to file find week -\u003e find day"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String[] tempList \u003d {\"Week 8 Mon FBC\", \"Week 8 Mon A\", \"Week 8 Tue EFG\", \"Week 8 Wed EFG\", \"Week 8 Thu EFG\", \"Week 8 Fri EFG\", \"Week 8 Sat EFG\", \"Week 8 Sun EFG\", \"Week 9 Sun HAHAH\"};"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String week \u003d \"Week 9\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cString\u003e monList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cString\u003e tueList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cString\u003e wedList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cString\u003e thuList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cString\u003e friList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cString\u003e satList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cString\u003e sunList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method clears the data in GridPane ListViews."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void clearData(){"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        monList.clear();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        tueList.clear();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        wedList.clear();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        thuList.clear();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        friList.clear();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        satList.clear();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        sunList.clear();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method generates data in day GridPane ListViews based on the week selected"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void setListItem(){"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        clearData();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for(String item: tempList){ //update (tempList) when actually list is implemented"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if(item.startsWith(week)){"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                item \u003d item.replaceFirst(week, \"\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                item \u003d item.trim();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String[] splitItem \u003d item.split(\" \", 2);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                switch (splitItem[0]){"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case \"Mon\":"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        monList.add(splitItem[1]);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case  \"Tue\":"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        tueList.add(splitItem[1]);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case \"Wed\":"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        wedList.add(splitItem[1]);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case \"Thu\":"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        thuList.add(splitItem[1]);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case \"Fri\":"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        friList.add(splitItem[1]);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case \"Sat\":"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        satList.add(splitItem[1]);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case \"Sun\":"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        sunList.add(splitItem[1]);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        monEventView.setItems(monList.sorted());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        tueEventView.setItems(tueList.sorted());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        wedEventView.setItems(wedList.sorted());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        thuEventView.setItems(thuList.sorted());"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        friEventView.setItems(friList.sorted());"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        satEventView.setItems(satList.sorted());"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        sunEventView.setItems(sunList.sorted());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method updates currentWeek Label."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param onStart The flag which indicates program startup"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param selectedWeek The week selected"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void setWeek(Boolean onStart,String selectedWeek){"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        //if start up selectedWeek will be NO_FIELD, else if user search for week, week equals selected week"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(onStart){"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateTime \u003d new Date();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String date \u003d dateFormat.format(dateTime);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            selectedWeek \u003d LT.getWeek(date);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            currentWeek.setText(selectedWeek + \" ( \" + LT.getDates(selectedWeek.toLowerCase()) + \" )\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            week \u003d selectedWeek;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            currentWeek.setText(selectedWeek + \" ( \" + LT.getDates(selectedWeek.toLowerCase()) + \" )\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            week \u003d selectedWeek;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method refreshes the GridPane ListView after user Adds an item"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param input The user input from Command Line"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void refresh(String input) throws ParseException { // boolean onAdd,boolean onWeek. if onAdd \u003d 1 it\u0027s a add command, if onWeek \u003d 1 it\u0027s a week command"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        //Assume input to be implement: (Format to be changed)"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        // Week label format: Week 8 ( 07/10/2019 - 11/10/2019 )"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        //deadline format - add-d modulecode description date time"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        //event format - add-e modulecode description date(eg. 07/10/2019) from time to time )"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        DateFormat dateDayFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] spiltWeekLabel \u003d (currentWeek.getText()).split(\" \");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] splitInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        int indices \u003d splitInput.length;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if(input.startsWith(\"add/e\")) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date inputDate \u003d dateFormat.parse(splitInput[(indices-1)-4]);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date startDate \u003d dateFormat.parse(spiltWeekLabel[3]);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date endDate \u003d dateFormat.parse(spiltWeekLabel[5]);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if(inputDate.after(startDate) \u0026\u0026 inputDate.before(endDate)){"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String day \u003d (dateDayFormat.format(inputDate)).substring(0,3);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                switch (day){"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case \"Mon\":"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        monList.add((splitInput[2] + \" \" + splitInput[3]));"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        monEventView.setItems(monList.sorted());"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case  \"Tue\":"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        tueList.add((splitInput[2] + \" \" + splitInput[3]));"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        tueEventView.setItems(tueList.sorted());"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case \"Wed\":"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        wedList.add((splitInput[2] + \" \" + splitInput[3]));"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        wedEventView.setItems(wedList.sorted());"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case \"Thu\":"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        thuList.add((splitInput[2] + \" \" + splitInput[3]));"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        thuEventView.setItems(thuList.sorted());"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case \"Fri\":"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        friList.add((splitInput[2] + \" \" + splitInput[3]));"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        friEventView.setItems(friList.sorted());"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case \"Sat\":"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        satList.add((splitInput[2] + \" \" + splitInput[3]));"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        satEventView.setItems(satList.sorted());"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case \"Sun\":"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        sunList.add((splitInput[2] + \" \" + splitInput[3]));"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        sunEventView.setItems(sunList.sorted());"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if(input.startsWith(\"add/d\")){"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            deadlineTable.setItems(setDeadlineTable());"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 161,
      "0325961": 37,
      "hwbjerry": 166,
      "-": 42
    }
  },
  {
    "path": "src/main/java/JavaFx/ProgressController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package JavaFx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.ProgressIndicator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Controller for progress indicator. This control represents the progress indicator for a module."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class ProgressController extends HBox {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private Label moduleCodeLabel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private Label completedValueLabel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private Label overdueValueLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private ProgressIndicator progressIndicator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "    String moduleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "    String completedValue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "    String overdueValue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "    Double progressValue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This function gets data from the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param mc The module code input by user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param cv The number of completed tasks for the module"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param ov The number of overdue tasks for the module"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void getData(String mc, String cv, String ov) { //initialize the string in the controller"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": "        moduleCode \u003d mc;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "        completedValue \u003d cv;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "        overdueValue \u003d ov;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "        progressValue \u003d Double.parseDouble(completedValue)/Double.parseDouble(overdueValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "        moduleCodeLabel.setText(moduleCode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "        completedValueLabel.setText(completedValue);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "        overdueValueLabel.setText(overdueValue);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "        progressIndicator.setProgress(progressValue);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 43
    }
  },
  {
    "path": "src/main/java/JavaFx/TimetableView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package JavaFx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class TimetableView {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String to;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String from;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * This creates TimetableView object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public TimetableView(String time, String event, String task){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.to \u003d time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.from \u003d event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getTo() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return to;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setTo(String To) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getFrom() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return from;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setFrom(String From) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setTask(String task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 40
    }
  },
  {
    "path": "src/main/java/JavaFx/TodoView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package JavaFx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class TodoView {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String done;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * This creates TodoView object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public TodoView(String task, String done){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setTask(String task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setDone(String done) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 30
    }
  },
  {
    "path": "src/main/java/Tasks/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a task called deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Deadline object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description of a task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param by Date of when a task should be done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return super.getModCode() + \" \" + \"[D]\" + super.toString() + \"(by: \" + by + \")\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"[D]\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 5,
      "hwbjerry": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/Tasks/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a task called event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String start;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String end;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an Event object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description of a task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param by Date of when a task should be done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param start Start time"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param end End time"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Event(String description, String by, String start, String end) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"[E]\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return super.getModCode() + \" \" + \"[E]\" + super.toString() + \"(at: \" + by + \" time: \" + start + \" to \" + end + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return by + \" \" + start + \" to \" + end;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 11,
      "hwbjerry": 3,
      "darrenoje": 4,
      "-": 23
    }
  },
  {
    "path": "src/main/java/Tasks/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a task in the Duke program."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private String modCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates Task object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description The description of the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.type \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.modCode \u003d\"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"void\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether the task is completed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns a tick or cross depending on the boolean value of isDone"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String[] split \u003d description.split(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String taskDescription \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (int i \u003d 0; i \u003c split.length; i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (!split[i].equals(getModCode())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                taskDescription +\u003d split[i] + \" \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return taskDescription;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[\" + getStatusIcon()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"] \" + getDescription();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDateTime(){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"void\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getModCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String[] split \u003d description.split(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return split[0];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 2,
      "lionlim97": 13,
      "hwbjerry": 3,
      "darrenoje": 1,
      "-": 43
    }
  },
  {
    "path": "src/main/java/Tasks/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * To keep track of the list of task input by user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String NO_FIELD \u003d \"void\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, ArrayList\u003cTask\u003e\u003e\u003e map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, ArrayList\u003cString\u003e\u003e\u003e deadlineList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, ArrayList\u003cString\u003e\u003e\u003e eventList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e deadlineArrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e eventArrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a TaskList object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public HashMap\u003cString, HashMap\u003cString, ArrayList\u003cTask\u003e\u003e\u003e getMap(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.map;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public ArrayList\u003cTask\u003e getListFromDate(Task task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.map.get(task.getModCode()).get(task.getDateTime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cTask\u003e\u003e getMapFromModCode(Task task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.map.get(task.getModCode());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTask(Task task){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list.add(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (this.map.containsKey(task.getModCode())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (!this.map.get(task.getModCode()).containsKey(task.getDateTime())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                map.get(task.getModCode()).put(task.getDateTime(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            this.map.put(task.getModCode(), new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            this.map.get(task.getModCode()).put(task.getDateTime(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.map.get(task.getModCode()).get(task.getDateTime()).add(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    //Do not use this"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeTask(int index){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list.remove(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void removeTask(Task task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d this.map.get(task.getModCode()).get(task.getDateTime());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for(Task taskInList : taskList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if(taskInList.getDescription().equals(task.getDescription())) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                taskList.remove(taskInList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    //Do not use this: User will input the task in the CLI"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task getTask(int index){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.list.get(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    //Do not use this: Use toString method in Task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String taskToString(int index){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index).toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    //Do not use this: Use setDone method in Task"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone(int index){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list.get(index).setDone(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    //Use the getArrayList method then arrayList.size()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public int taskListSize(){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method generates a increased a dateTime given by days or hours based on given duration and returns the new dateTime."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param inDate The dateTime given"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param duration The duration given"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param type type task based on user\u0027s input"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The new dateTime after increasing the inDate"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Date increaseDateTime(Date inDate, int duration, String type){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.setTime(inDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(type.equals(\"event\")) c.add(Calendar.HOUR, duration);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        else if (type.equals(\"todo\")) c.add(Calendar.DATE, duration);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return c.getTime();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method sort and removes duplicated Dates of the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param date The current datetime instance which locks the time"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return A list of dates combining data from taskList"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws ParseException Throws a error when date being passed contains and error"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private TreeSet\u003cDate\u003e sortAndRemoveDuplicatedDates(Date date) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm aa\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Set\u003cDate\u003e dateTime \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        dateTime.add(date);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if(!task.getDateTime().equals(NO_FIELD)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Date dateFromList \u003d dateFormat.parse(task.getDateTime());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if (dateFromList.compareTo(date) \u003e 0) dateTime.add(dateFromList);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return new TreeSet\u003c\u003e(dateTime);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method retrieves the earliest possible block period with the duration given."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param duration The period indicated by the user"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param type The type task based on user\u0027s input"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return This returns a pair in the format datetime then datetime plus duration"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws ParseException Throws an error when method availableTimeSlot contains an error"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public Pair\u003cDate, Date\u003e findEarliestFreeTime (String duration, String type) throws ParseException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        int intDuration \u003d Integer.parseInt(duration);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (list.size() \u003d\u003d 0) return new Pair \u003c\u003e (date, increaseDateTime(date, intDuration, type));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TreeSet\u003cDate\u003e sortedDateTime \u003d sortAndRemoveDuplicatedDates(date);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Iterator i \u003d sortedDateTime.iterator();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        i.next();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (Date Date1 : sortedDateTime) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (i.hasNext()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Date Date2 \u003d (Date) (i.next());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                long diff \u003d Date2.getTime() - Date1.getTime();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                long diffHours \u003d diff / (60 * 60 * 1000) % 24;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                long diffDays \u003d diff / (24 * 60 * 60 * 1000);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if ((diffDays \u003e 0 || diffHours \u003e\u003d (long) intDuration)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Date2 \u003d increaseDateTime(Date1, intDuration, type);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    return new Pair \u003c\u003e(Date1, Date2);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date date1 \u003d sortedDateTime.last();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date date2 \u003d increaseDateTime(date1, intDuration, type);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return new Pair\u003c\u003e (date1, date2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method retrieves the 5 earliest possible block period with the duration given"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param duration The period indicated by the user"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param numOfTimeSlot The number of free time slots to generated"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param type The type task based on user\u0027s input"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return This returns a ArrayList of pair in the format datetime then datetime plus duration"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws ParseException e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public ArrayList \u003cPair\u003cDate, Date\u003e\u003e findFreeTimes(String duration, int numOfTimeSlot, String type) throws ParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        int intDuration \u003d Integer.parseInt(duration);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        ArrayList\u003c Pair\u003cDate, Date\u003e\u003e availableTimeSlot \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TreeSet\u003cDate\u003e sortedDateTime \u003d sortAndRemoveDuplicatedDates(date);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Iterator i \u003d sortedDateTime.iterator();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        i.next();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (Date Date1 : sortedDateTime) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (i.hasNext()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Date Date2 \u003d (Date) (i.next());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                long diff \u003d Date2.getTime() - Date1.getTime();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if(type.equals(\"event\")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    long diffHours \u003d diff / (60 * 60 * 1000) % 24;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                    long diffDays \u003d diff / (24 * 60 * 60 * 1000);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    if ((diffDays \u003e 0 || diffHours \u003e\u003d (long) intDuration) \u0026\u0026 numOfTimeSlot \u003e 0) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        numOfTimeSlot--;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        Date2 \u003d increaseDateTime(Date1, intDuration, type);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        availableTimeSlot.add(new Pair\u003c\u003e(Date1, Date2));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                } else if (type.equals(\"todo\")){"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    long diffDays \u003d diff / (24 * 60 * 60 * 1000);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    if ((diffDays \u003e\u003d (long) intDuration) \u0026\u0026 numOfTimeSlot \u003e 0) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        numOfTimeSlot--;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        Date2 \u003d increaseDateTime(Date1, intDuration, type);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        availableTimeSlot.add(new Pair\u003c\u003e(Date1, Date2));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(availableTimeSlot.size() \u003e\u003d 0) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date date1 \u003d sortedDateTime.last();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date date2 \u003d increaseDateTime(date1, intDuration, type);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            for(int k \u003d 0; k \u003c numOfTimeSlot; k++) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                availableTimeSlot.add(new Pair\u003c\u003e(increaseDateTime(date1, k, type),increaseDateTime(date2, k, type)));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return availableTimeSlot;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method sort the tasks according to their categories."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void sortList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            String description \u003d list.get(i).toString();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (list.get(i).getType().equals(\"[D]\")) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                this.deadlineArrList.add(description);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else if (list.get(i).getType().equals(\"[E]\")){"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                this.eventArrList.add(description);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method gets the schedule requested by user."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the String containing the schedule requested by user"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public String schedule() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        sortList();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        int sizeOfDeadlineArr \u003d getDeadlineArrList().size();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        int sizeOfEventArr \u003d getEventArrList().size();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        String finalSchedule \u003d \"Here is your schedule!\\n\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        if (sizeOfDeadlineArr !\u003d 0) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            finalSchedule +\u003d \"DEADLINE Task\\n\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            int num \u003d 1;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0325961"
        },
        "content": "            for (int i \u003d 0; i \u003c sizeOfDeadlineArr; i++) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                finalSchedule \u003d finalSchedule + num + \".\" + getDeadlineArrList().get(i) + \"\\n\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                num++;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        if (sizeOfEventArr !\u003d 0) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            finalSchedule +\u003d \"EVENT Task\\n\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            int num \u003d 1;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c sizeOfEventArr; i++) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                finalSchedule \u003d finalSchedule + num + \".\" + getEventArrList().get(i) + \"\\n\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                num++;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        deadlineArrList.clear();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        eventArrList.clear();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        return finalSchedule;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ArrayList\u003cString\u003e getDeadlineArrList() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.deadlineArrList;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ArrayList\u003cString\u003e getEventArrList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.eventArrList;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /** This method snoozes the task in the ArrayList."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index Index in the ArrayList of the Task Object to snooze"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateString New date for the Task Object"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the ArrayList"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException On invalid input or when wrong input format is entered"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public ArrayList\u003cTask\u003e snoozeTask(ArrayList\u003cTask\u003e list, int index, String dateString, String start, String end) throws DukeException {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            if (end \u003d\u003d dateString) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                Task temp \u003d list.get(index);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                list.add(new Deadline(temp.getDescription(), dateString));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                list.remove(index);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                Task temp \u003d list.get(index);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                list.add(new Event(temp.getDescription(), dateString, start, end));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                list.remove(index);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" OOPS!!! Please check that you only snoozed deadlines and events\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 48,
      "0325961": 2,
      "hwbjerry": 98,
      "darrenoje": 7,
      "-": 129
    }
  },
  {
    "path": "src/main/java/Tasks/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a task called to-do."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a To-do object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description of a task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"[T]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public String getModCode() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 4,
      "darrenoje": 5,
      "-": 20
    }
  },
  {
    "path": "src/main/resources/view/ChatBot.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003cBorderPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\" prefWidth\u003d\"700.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"JavaFx.ChatBot\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003ccenter\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"452.0\" prefWidth\u003d\"605.0\" spacing\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003cbottom\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003cHBox prefHeight\u003d\"45.0\" prefWidth\u003d\"600.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"79.0\" prefWidth\u003d\"510.0\" promptText\u003d\"Enter command here...\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cButton fx:id\u003d\"sendButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"61.0\" prefWidth\u003d\"92.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/bottom\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003cright\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003cVBox fx:id\u003d\"legendLabel\" prefHeight\u003d\"355.0\" prefWidth\u003d\"92.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"98.0\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/right\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 34
    }
  },
  {
    "path": "src/main/resources/view/DialogBoxDuke.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-radius: 20; -fx-background-color: linear-gradient(#86C1B9, #7CAFC2);\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" style\u003d\"-fx-background-radius: 5;\" x\u003d\"50.0\" y\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/resources/view/DialogBoxUser.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-radius: 20; -fx-background-color: linear-gradient(#F7CA88, #A1B56C);\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" style\u003d\"-fx-background-radius: 5;\" x\u003d\"50.0\" y\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 19
    }
  },
  {
    "path": "src/main/resources/view/Fixeddurationtask.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.ChoiceBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.SeparatorMenuItem?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003cVBox prefHeight\u003d\"390.0\" prefWidth\u003d\"640.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"JavaFx.FixedDurationTask\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        \u003cMenuBar VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003cmenus\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"New\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Open…\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Open Recent\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cSeparatorMenuItem mnemonicParsing\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Close\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Save\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Save As…\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Revert\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cSeparatorMenuItem mnemonicParsing\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Preferences…\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cSeparatorMenuItem mnemonicParsing\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Quit\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Edit\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Undo\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Redo\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cSeparatorMenuItem mnemonicParsing\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Cut\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Paste\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Delete\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cSeparatorMenuItem mnemonicParsing\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Select All\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Unselect All\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"About MyHelloApp\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003c/menus\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        \u003cAnchorPane prefHeight\u003d\"358.0\" prefWidth\u003d\"640.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003cAnchorPane layoutX\u003d\"27.0\" layoutY\u003d\"258.0\" prefHeight\u003d\"47.0\" prefWidth\u003d\"105.0\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cLabel id\u003d\"taskTypeLabel\" layoutX\u003d\"4.0\" layoutY\u003d\"-2.0\" prefHeight\u003d\"21.0\" prefWidth\u003d\"78.0\" text\u003d\"Task Type\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cChoiceBox fx:id\u003d\"taskTypeChoiceBox\" layoutY\u003d\"20.0\" prefHeight\u003d\"27.0\" prefWidth\u003d\"105.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003cVBox layoutX\u003d\"27.0\" layoutY\u003d\"18.0\" prefHeight\u003d\"207.0\" prefWidth\u003d\"566.0\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cLabel id\u003d\"availablePeriodLabel\" text\u003d\"Please choose a available Period\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cListView fx:id\u003d\"periodListView\" onKeyPressed\u003d\"#updatePeriod\" onMouseClicked\u003d\"#updatePeriod\" prefHeight\u003d\"188.0\" prefWidth\u003d\"566.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003cAnchorPane layoutX\u003d\"535.0\" layoutY\u003d\"245.0\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cButton fx:id\u003d\"addButton\" layoutX\u003d\"1.0\" layoutY\u003d\"33.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleAdd\" onKeyPressed\u003d\"#handleAdd\" prefHeight\u003d\"27.0\" prefWidth\u003d\"61.0\" text\u003d\"Add\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cButton fx:id\u003d\"cancelButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleCancel\" onKeyPressed\u003d\"#handleCancel\" prefHeight\u003d\"27.0\" prefWidth\u003d\"61.0\" text\u003d\"Cancel\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003cAnchorPane layoutX\u003d\"153.0\" layoutY\u003d\"260.0\" prefHeight\u003d\"45.0\" prefWidth\u003d\"187.0\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cTextField fx:id\u003d\"taskDescriptionTextField\" layoutX\u003d\"-7.0\" layoutY\u003d\"18.0\" prefHeight\u003d\"27.0\" prefWidth\u003d\"202.0\" promptText\u003d\"Please enter Task Description\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cLabel id\u003d\"taskDescriptionLabel\" text\u003d\"Type Description\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003cAnchorPane layoutX\u003d\"359.0\" layoutY\u003d\"260.0\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cLabel id\u003d\"periodLabel\" layoutX\u003d\"2.0\" text\u003d\"Period\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cTextField fx:id\u003d\"periodTextField\" layoutY\u003d\"19.0\" promptText\u003d\"Selected from list\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hwbjerry": 91
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003cBorderPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"800.0\" prefWidth\u003d\"1000.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"JavaFx.MainWindow\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003cbottom\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003cHBox prefHeight\u003d\"36.0\" prefWidth\u003d\"600.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"37.0\" prefWidth\u003d\"517.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cButton fx:id\u003d\"submitButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"157.0\" prefWidth\u003d\"85.0\" text\u003d\"Submit\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/bottom\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003cright\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003cVBox prefHeight\u003d\"487.0\" prefWidth\u003d\"200.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cTableView fx:id\u003d\"deadlineTable\" prefHeight\u003d\"237.0\" prefWidth\u003d\"169.0\" style\u003d\"-fx-border-color: black;\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumns\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"deadlineDateColumn\" prefWidth\u003d\"71.0\" style\u003d\"-fx-alignment: center;\" text\u003d\"Date\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"deadlineTaskColumn\" prefWidth\u003d\"125.0\" style\u003d\"-fx-alignment: center;\" text\u003d\"Deadline\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columns\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003c/TableView\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cTableView fx:id\u003d\"overdueTable\" prefHeight\u003d\"284.0\" prefWidth\u003d\"208.0\" style\u003d\"-fx-border-color: black;\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumns\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"overdueDateColumn\" prefWidth\u003d\"72.0\" style\u003d\"-fx-alignment: center;\" text\u003d\"Days Due\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"overdueTaskColumn\" prefWidth\u003d\"124.0\" style\u003d\"-fx-alignment: center;\" text\u003d\"Overdue\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columns\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003c/TableView\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/right\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003ctop\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003cVBox prefHeight\u003d\"107.0\" prefWidth\u003d\"1000.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cHBox prefHeight\u003d\"64.0\" prefWidth\u003d\"1000.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel fx:id\u003d\"currentWeek\" prefHeight\u003d\"32.0\" prefWidth\u003d\"400.0\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cFont name\u003d\"System Bold\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                     \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"159.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cLabel fx:id\u003d\"currentTime\" alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"23.0\" prefWidth\u003d\"223.0\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cHBox fx:id\u003d\"progressContainer\" prefHeight\u003d\"131.0\" prefWidth\u003d\"1000.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/top\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003ccenter\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003cGridPane prefHeight\u003d\"66.0\" prefWidth\u003d\"800.0\" style\u003d\"-fx-border-insets: 0; -fx-border-color: black; -fx-grid-lines-visible: true;\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"50.0\" prefWidth\u003d\"110.0\" text\u003d\"SUN\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"114.0\" text\u003d\"MON\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"114.0\" text\u003d\"TUE\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefWidth\u003d\"114.0\" text\u003d\"WED\" GridPane.columnIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefWidth\u003d\"114.0\" text\u003d\"THU\" GridPane.columnIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefWidth\u003d\"114.0\" text\u003d\"FRI\" GridPane.columnIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefWidth\u003d\"114.0\" text\u003d\"SAT\" GridPane.columnIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003cGridPane prefHeight\u003d\"593.0\" prefWidth\u003d\"800.0\"\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cListView fx:id\u003d\"sunEventView\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"monEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"tueEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"wedEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"thuEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"friEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"satEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"6\" /\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 116,
      "hwbjerry": 27,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/ProgressIndicator.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?import javafx.scene.control.ProgressIndicator?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"131.0\" prefWidth\u003d\"250.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"JavaFx.ProgressController\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cProgressIndicator fx:id\u003d\"progressIndicator\" layoutX\u003d\"152.0\" layoutY\u003d\"26.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"90.0\" prefWidth\u003d\"80.0\" progress\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" layoutY\u003d\"51.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"80.0\" text\u003d\"Completed\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel fx:id\u003d\"completedValueLabel\" alignment\u003d\"CENTER\" contentDisplay\u003d\"BOTTOM\" layoutY\u003d\"81.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"80.0\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel alignment\u003d\"CENTER\" layoutX\u003d\"80.0\" layoutY\u003d\"51.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"80.0\" text\u003d\"Overdue\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel fx:id\u003d\"overdueValueLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"80.0\" layoutY\u003d\"81.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"80.0\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel fx:id\u003d\"moduleCodeLabel\" alignment\u003d\"CENTER\" layoutY\u003d\"1.0\" prefHeight\u003d\"50.0\" prefWidth\u003d\"180.0\" text\u003d\"Module Code\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "0325961": 16
    }
  },
  {
    "path": "src/main/resources/view/progressCircle.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?import javafx.scene.Group?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?import javafx.scene.control.ProgressIndicator?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"103.0\" prefWidth\u003d\"264.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cProgressIndicator layoutX\u003d\"195.0\" layoutY\u003d\"37.0\" progress\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel fx:id\u003d\"moduleCode\" layoutX\u003d\"14.0\" layoutY\u003d\"14.0\" text\u003d\"Module Code\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cGroup layoutX\u003d\"33.0\" layoutY\u003d\"43.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "            \u003cLabel prefHeight\u003d\"17.0\" prefWidth\u003d\"67.0\" text\u003d\"Completed\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "            \u003cLabel fx:id\u003d\"valueCompleted\" layoutX\u003d\"17.0\" layoutY\u003d\"14.0\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003c/Group\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cGroup layoutX\u003d\"121.0\" layoutY\u003d\"43.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "            \u003cGroup\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "                  \u003cLabel fx:id\u003d\"valueOverdue\" layoutX\u003d\"9.0\" layoutY\u003d\"16.0\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "                  \u003cLabel text\u003d\"Overdue\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "            \u003c/Group\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003c/Group\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "0325961": 30
    }
  },
  {
    "path": "src/test/java/DoWithinPeriodTasksTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Interface.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Interface.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Interface.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Tasks.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class DoWithinPeriodTasksTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void doWithinPeriodTask1() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String currentDate \u003d format.format(date);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"Reminder have been set for: fishing . Start Date: \" + currentDate + \" End Date: 05/02/2020\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "        TaskList todoList \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "        TaskList eventList \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "        TaskList deadlineList \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "        todoList.addTask(new Todo(\"fishing\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command c \u003d Parser.parse(\"fishing (from: \" + currentDate + \" to 05/02/2020)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d c.execute(todoList, eventList, deadlineList, ui, storage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "0325961": 30
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//import org.testng.annotations.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stringConversionTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String w1 \u003d \"[E][\\u2718] Test Event (at: Wed 04/12/2019 time: 07:00 AM to 11:00 AM)\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String w2 \u003d new Event(\"Test Event\", \"Wed 04/12/2019\", \"07:00 AM\", \"11:00 AM\", \"cs2101\").toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertEquals(w1,w2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "darrenoje": 2,
      "-": 12
    }
  },
  {
    "path": "src/test/java/FindEarliestFreeTimesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class FindEarliestFreeTimesTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void FindEarliestFreeTimesTestEmptyList() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String duration \u003d \"2\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        calendar.add(Calendar.HOUR, Integer.parseInt(duration));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date outDate \u003d calendar.getTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String startDate \u003d format.format(date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String endDate \u003d format.format(outDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d\"You are available at: \\n\" + startDate + \"until\" + endDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TaskList todoList \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TaskList eventList \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TaskList deadlineList \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command c \u003d Parser.parse(\"when is the nearest day in which I have a \"+ duration +\" hour free slot?\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d c.execute(todoList,eventList,deadlineList, ui, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        actual \u003d actual.substring(0,\"You are available at: \\n\".length()) + startDate + \"until\" + endDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "hwbjerry": 36
    }
  },
  {
    "path": "src/test/java/FixedDurationTasksTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Interface.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Interface.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Interface.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class FixedDurationTasksTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void FindEarliestFreeTimesTestEmptyList() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        calendar.add(Calendar.HOUR, 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date outDate \u003d calendar.getTime();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String startDate \u003d format.format(date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String endDate \u003d format.format(outDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d\"You are available at: \\n\" + startDate + \"until\" + endDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TaskList todoList \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TaskList eventList \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TaskList deadlineList \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command c \u003d Parser.parse(\"when is the nearest day in which I have a 2 hour free slot?\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d c.execute(todoList,eventList,deadlineList, ui, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        actual \u003d actual.substring(0,\"You are available at: \\n\".length()) + startDate + \"until\" + endDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "hwbjerry": 37
    }
  },
  {
    "path": "src/test/java/RemindTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemindTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remindTestTodo() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String expected \u003d\"Here are your tasks for this week:\\n\" + \"1.[T][\\u2718] buy bread\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TaskList todos \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TaskList events \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TaskList deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        todos.addTask(new Todo(\"buy bread\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Command c \u003d Parser.parse(\"remind\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d c.execute(todos, events, deadlines, ui, storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remindTestWithDate() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TaskList todos \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TaskList events \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TaskList deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String currentDate \u003d format.format(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String start \u003d \"06:00 PM \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String end \u003d \"08:00 PM\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d\"Here are your tasks for this week:\\n\" + \"1.[E][\\u2718] exam (at: \" + currentDate"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                + \" time: \" + start + \" to \" + end + \")\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        events.addTask(new Event(\"exam\", currentDate, start, end));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Command c \u003d Parser.parse(\"remind\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d c.execute(todos, events, deadlines, ui, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remindTestWithDoneTasks() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TaskList todos \u003d new TaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TaskList events \u003d new TaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TaskList deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String currentDate \u003d format.format(date);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String start \u003d \"06:00 PM \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String end \u003d \"08:00 PM\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String expected \u003d \"There are no upcoming tasks this week.\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList temp \u003d new TaskList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        events.addTask(new Event(\"exam\", currentDate, start, end));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        events.markAsDone(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Command c \u003d Parser.parse(\"remind\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d c.execute(todos, events, deadlines, ui, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 25,
      "-": 38
    }
  },
  {
    "path": "src/test/java/SnoozeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import Commands.SnoozeCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void SnoozeTest() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String w1 \u003d \"[E][\\u2718] project (at: Sun 05/02/2019 time: 07:00 AM to 11:00 AM)\" + \"\\n\" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                \"[E][\\u2718] swimming (at: Sun 03/02/2019 time: 09:00 AM to 10:00 AM)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList temp \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        temp.addTask(new Event(\"swimming\", \"Sun 02/02/2019\",  \"10:00 AM\", \"11:30 AM\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        temp.addTask(new Event(\"project\", \"Sun 05/02/2019\", \"07:00 AM\", \"11:00 AM\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        //temp.snoozeTask(temp, 1, \"Sun 03/02/2019\", \"09:00 AM\", \"10:00 AM\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        //new SnoozeCommand(1, \"Sun 03/02/2019\", \"09:00 AM\", \"10:00 AM\" );"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String w2 \u003d temp.getTask(0) + \"\\n\" + temp.getTask(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(w1, w2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "darrenoje": 9,
      "-": 18
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stringConversionTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String w1 \u003d \"[T][\\u2718] test todo borrow book\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String w2 \u003d new Todo(\"test todo borrow book\").toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertEquals(w1, w2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "darrenoje": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/ViewSchedulesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class ViewSchedulesTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void viewScheduleWithDeadlineTask() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String currentDate \u003d format.format(date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"Here is your schedule which have been categorised into TODO, DEADLINE and EVENTS\\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "                \"Here is your schedule!\\n\" + \"DEADLINE Task\\n\" + \"1.[D][\\u2718] return book (by: Fri 01/02/2019 01:00PM)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "        TaskList todoList \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "        TaskList eventList \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "        TaskList deadlineList \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "        deadlineList.addTask(new Deadline(\"return book\", currentDate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command c \u003d Parser.parse(\"show schedule\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d c.execute(todoList, eventList, deadlineList, ui, storage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void viewScheduleWithTodoTask() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"Here is your schedule which have been categorised into TODO, DEADLINE and EVENTS\\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "                \"Here is your schedule!\\n\" + \"TODO Task\\n\" + \"1.[T][\\u2718] read book\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "        TaskList todoList \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "        TaskList eventList \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "        TaskList deadlineList \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "        todoList.addTask(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command c \u003d Parser.parse(\"show schedule\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d c.execute(todoList, eventList, deadlineList, ui, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void viewScheduleWithEventTask() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String currentDate \u003d format.format(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"Here is your schedule which have been categorised into TODO, DEADLINE and EVENTS\\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "                \"Here is your schedule!n\" + \"EVENT Task\\n\" + \"1.[E][\\u2718] project meeting (at: Fri 01/02/2019\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "                \"time: 1500 to 1600\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "        TaskList todoList \u003d new TaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0325961"
        },
        "content": "        TaskList eventList \u003d new TaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0325961"
        },
        "content": "        TaskList deadlineList \u003d new TaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": "        eventList.addTask(new Event(\"project meeting\", currentDate, \"1500\", \"1600\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command c \u003d Parser.parse(\"show schedule\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d c.execute(todoList, eventList, deadlineList, ui, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "0325961": 59
    }
  }
]
