[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    archiveBaseName \u003d \"\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    archiveVersion \u003d \"v1.4\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            srcDirs \u003d [\u0027src/main/java/resources\u0027]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    testImplementation ("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u0027junit:junit:4.12\u0027,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    testRuntimeOnly (\u0027org.junit.jupiter:junit-jupiter-engine:5.5.0\u0027)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    compile group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u002711.0.0\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 27,
      "hwbjerry": 4,
      "-": 38
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "import userinterface.Main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * To launch the GUI application for Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeLogger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Represents the command to add a Task object to a TaskList object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private final Assignment task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(AddCommand.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final String NUMBERING_DELIMITER \u003d \". \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates an AddCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param task The Task object to be added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public AddCommand(Assignment task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Executes the adding of a Task object to a TaskList object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * and displaying the add task response."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param ui The Ui object to display the add task message"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display add task message"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, UserInteraction ui, Storage storage)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            throws DukeInvalidFormatException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String out \u003d DukeConstants.NO_FIELD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        ArrayList\u003cString\u003e eventConflict;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        ArrayList\u003cString\u003e deadlineConflict;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (task.getType().equals(DukeConstants.EVENT_INDICATOR)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                eventConflict \u003d checkEventConflict(events, this.task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "                logger.severe(\"Invalid format for adding event\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.SAD_FACE + DukeConstants.EVENT_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            int size \u003d events.taskListSize() + 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            if (eventConflict.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                events.addTask(this.task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                out \u003d ui.showAdd(this.task,size);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                storage.updateEventList(events);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                out \u003d DukeConstants.CONFLICTING_EVENT;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                for (int i \u003d 0; i \u003c eventConflict.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    out +\u003d (i + 1) + NUMBERING_DELIMITER + eventConflict.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else if (task.getType().equals(DukeConstants.DEADLINE_INDICATOR)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            deadlineConflict \u003d checkDeadlineConflict(deadlines, this.task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            int size \u003d deadlines.taskListSize() + 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            if (deadlineConflict.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                deadlines.addTask(this.task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                out \u003d ui.showAdd(this.task,size);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                out \u003d DukeConstants.CONFLICTING_DEADLINE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                for (int i \u003d 0; i \u003c deadlineConflict.size();i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    out +\u003d (i + 1) + NUMBERING_DELIMITER + deadlineConflict.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 29,
      "lionlim97": 32,
      "0325961": 11,
      "darrenoje": 8,
      "hwbjerry": 2
    }
  },
  {
    "path": "src/main/java/commands/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the command to end the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the updating of the file with current list of tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the TaskList object and displays the goodbye message"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the goodbye message"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display goodbye message"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, UserInteraction ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showBye();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 5,
      "0325961": 4,
      "-": 17
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Abstract class Command with methods representing all the Command subclasses to be"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * carried out when an input is entered by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public abstract String execute(TaskList events, TaskList deadlines, UserInteraction ui, Storage storage)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            throws Exception;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * This method checks if task already exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param map Map of events or deadlines"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param task task to be taken action"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @throws DukeException on wrong input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void insideMapChecker(HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e map, Assignment task)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String modCode \u003d task.getModCode();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String dateOfTask \u003d task.getDate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (!map.containsKey(modCode)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeException(DukeConstants.NO_MOD_ERROR);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else if (!map.get(modCode).containsKey(dateOfTask)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeException(DukeConstants.NO_DATE_ERROR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            for (Assignment taskInList : map.get(modCode).get(dateOfTask)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                if (taskInList.getDateTime().equals(task.getDateTime())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    if (!taskInList.getDescription().equals(task.getDescription())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        throw new DukeException(DukeConstants.MISMATCH_DESCRIPTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeException(DukeConstants.NO_TASK_TIMING_ERROR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * This method checks whether there is a conflict in the adding of events based on module code and timing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param taskList The TaskList object for events"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param t The event task that is added"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @return ArrayList containing the assignment that has conflict"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public  ArrayList\u003cString\u003e checkEventConflict(TaskList taskList, Assignment t) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        ArrayList\u003cString\u003e conflict \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date startTime1 \u003d DukeConstants.TWELVE_HOUR_TIME_FORMAT.parse(t.getStartTime());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date endTime1 \u003d DukeConstants.TWELVE_HOUR_TIME_FORMAT.parse(t.getEndTime());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e mapObtained \u003d taskList.getMap();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        for (String modCode : mapObtained.keySet()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            for (String date : mapObtained.get(modCode).keySet()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                for (Assignment task : mapObtained.get(modCode).get(date)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    if (date.equals(t.getDate())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        Date taskStartTime \u003d DukeConstants.TWELVE_HOUR_TIME_FORMAT.parse(task.getStartTime());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        Date taskEndTime \u003d DukeConstants.TWELVE_HOUR_TIME_FORMAT.parse(task.getEndTime());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        if (taskStartTime.equals(startTime1) || taskStartTime.equals(endTime1)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            conflict.add(task.displayString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        } else if (taskEndTime.equals(endTime1) || taskEndTime.equals(startTime1)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            conflict.add(task.displayString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        } else if (startTime1.after(taskStartTime) \u0026\u0026 startTime1.before(taskEndTime)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            conflict.add(task.displayString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        } else if (endTime1.after(taskEndTime) \u0026\u0026 endTime1.before(taskEndTime)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            conflict.add(task.displayString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        } else if (taskStartTime.after(startTime1) \u0026\u0026 taskStartTime.before(endTime1)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            conflict.add(task.displayString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        } else if (taskEndTime.after(startTime1) \u0026\u0026 taskEndTime.before(endTime1)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            conflict.add(task.displayString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return conflict;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * This method checks whether there is a conflict in the adding of deadlines based on module code and timing."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param taskList The TaskList object for deadlines"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param t The deadline task that is added"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @return ArrayList containing the assignment that has conflict"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public ArrayList\u003cString\u003e checkDeadlineConflict(TaskList taskList, Assignment t) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        ArrayList\u003cString\u003e conflict \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e mapObtained \u003d taskList.getMap();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        if (mapObtained.containsKey(t.getModCode()) \u0026\u0026 mapObtained.get(t.getModCode()).containsKey(t.getDate())) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            ArrayList\u003cAssignment\u003e temp \u003d mapObtained.get(t.getModCode()).get(t.getDate());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            for (Assignment task : temp) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                if (task.getTime().equals(t.getTime())) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    conflict.add(task.displayString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return conflict;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 54,
      "lionlim97": 8,
      "0325961": 7,
      "darrenoje": 36,
      "hwbjerry": 4
    }
  },
  {
    "path": "src/main/java/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Reminder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Represents the command to delete a Task object from a TaskList object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Assignment task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String list;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList listToChange;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates a DeleteCommand object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param task The task to be deleted"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param list The name of the TaskList that requires changing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public DeleteCommand(String list, Assignment task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Executes the deletion of a task inside the TaskList object with the given index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param ui The Ui object to display the delete task message"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display delete task message"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws DukeException On ArrayList out of bound error"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, UserInteraction ui, Storage storage)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e eventMap \u003d events.getMap();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e deadlineMap \u003d deadlines.getMap();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        if (list.equals(DukeConstants.EVENT_LIST)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            super.insideMapChecker(eventMap, task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            events.removeTask(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            storage.updateEventList(events);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            listToChange \u003d events;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } else if (list.equals(DukeConstants.DEADLINE_LIST)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            super.insideMapChecker(deadlineMap, task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            deadlines.removeTask(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            listToChange \u003d deadlines;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Reminder reminder \u003d storage.getReminderObject();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            HashMap\u003cDate, Assignment\u003e remindMap \u003d reminder.getRemindMap();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            reminder.setDeadlines(deadlines);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Set\u003cDate\u003e dateKeySet \u003d remindMap.keySet();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            for (Date date : dateKeySet) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Assignment remindTask \u003d remindMap.get(date);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String remindTaskDescription \u003d remindTask.getDescription();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String taskDescription \u003d task.getDescription();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String remindTaskDate \u003d remindTask.getDateTime();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String taskDate \u003d task.getDateTime();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (remindTaskDescription.equals(taskDescription) \u0026\u0026 remindTaskDate.equals(taskDate)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    reminder.removeTimerTask(task, date, DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return ui.showDelete(task, listToChange.taskListSize());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 6,
      "lionlim97": 51,
      "0325961": 8,
      "darrenoje": 7,
      "hwbjerry": 3
    }
  },
  {
    "path": "src/main/java/commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " * Represents the command to done a Task object from a TaskList object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Assignment task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String list;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Creates a DoneCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param task The task to be mask as done"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param list The name of the TaskList that requires changing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public DoneCommand(String list, Assignment task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Executes the mark as done of a task inside the TaskList object with the given index."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param ui The Ui object to display the mark as done task message"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display delete task message"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws DukeException On ArrayList out of bound error"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, UserInteraction ui, Storage storage)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e eventMap \u003d events.getMap();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e deadlineMap \u003d deadlines.getMap();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (list.equals(\"event\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            super.insideMapChecker(eventMap, task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            events.updateTask(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            storage.updateEventList(events);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (list.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            super.insideMapChecker(deadlineMap, task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            deadlines.updateTask(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return ui.showDone(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 28,
      "0325961": 6,
      "darrenoje": 8,
      "hwbjerry": 16
    }
  },
  {
    "path": "src/main/java/commands/FilterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Represents the command to show the list of tasks corresponding to a keyword."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final String EVENT_KEYWORD \u003d \"at \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final String DEADLINE_KEYWORD \u003d \"by \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates FilterCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param Command The full command that calls FilterCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public FilterCommand(String Command)  {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.keyword \u003d Command.trim().toLowerCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Execute the displaying of all task the contains a certain keyword."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param ui The Ui object to display the list message"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display list message"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, UserInteraction ui, Storage storage)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            throws DukeInvalidFormatException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (keyword.trim().equals(DukeConstants.NO_FIELD)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeInvalidFormatException(DukeConstants.SHOW_FILTER_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        ArrayList\u003cString\u003e out \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e eventMap \u003d events.getMap();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Set\u003cString\u003e allMods \u003d eventMap.keySet();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        for (String mod : allMods) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            Set\u003cString\u003e allDates \u003d eventMap.get(mod).keySet();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            for (String date : allDates) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                ArrayList\u003cAssignment\u003e temp \u003d eventMap.get(mod).get(date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for (Assignment task : temp) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String lowerCaseTask \u003d task.toString().toLowerCase();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    if (lowerCaseTask.toLowerCase().contains(keyword)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        out.add(task.getType() + task.getModCode()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                + DukeConstants.BLANK_SPACE + task.getDescription()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                + EVENT_KEYWORD + task.getDateTime());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e deadlineMap \u003d deadlines.getMap();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Set\u003cString\u003e allMods1 \u003d deadlineMap.keySet();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        for (String mod : allMods1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            Set\u003cString\u003e allDates \u003d deadlineMap.get(mod).keySet();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            for (String date : allDates) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                ArrayList\u003cAssignment\u003e temp \u003d deadlineMap.get(mod).get(date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for (Assignment task : temp) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String lowerCaseTask \u003d task.toString().toLowerCase();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    if (lowerCaseTask.contains(keyword)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        out.add(task.getType() + task.getModCode()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                + DukeConstants.BLANK_SPACE + task.getDescription()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                + DEADLINE_KEYWORD + task.getDateTime());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return ui.showFilter(out, this.keyword);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 42,
      "lionlim97": 7,
      "0325961": 10,
      "darrenoje": 11,
      "hwbjerry": 8
    }
  },
  {
    "path": "src/main/java/commands/FindFreeTimesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.NavigableMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class FindFreeTimesCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final int HALF_HOUR_MARK \u003d 30;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final int HOUR_MARK \u003d 60;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final int HOURS_IN_A_DAY \u003d 24;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final int IDEAL_FREE_TIME_INTERVAL \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String TWELVE_HOUR_TIME_FORMAT_START_TIME \u003d \"12:00 AM\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String TWELVE_HOUR_TIME_AM_POST_FIX \u003d \"AM\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String TWELVE_HOUR_TIME_FORMAT_MAXIMUM_HOUR \u003d \"12\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String TWELVE_HOUR_TIME_FORMAT_HOUR_AND_MINUTE_SEPARATOR \u003d \":\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String DISPLAY_KEYWORD_OPTION \u003d \"Option\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String DISPLAY_KEYWORD_TO \u003d \" to \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final int SECOND_TO_MILLISECONDS \u003d 1000;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final int MAX_SECOND \u003d 60;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final Integer options \u003d 5;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final Integer duration;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ArrayList\u003cPair\u003cDate, Date\u003e\u003e freeTimeData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final NavigableMap\u003cString, ArrayList\u003cPair\u003cString, String\u003e\u003e\u003e dataMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public FindFreeTimesCommand(Integer duration) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method generates a dateTime by increasing dateTime given by hours"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * based on given duration and returns the new dateTime."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param inDate The dateTime given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param duration The duration given"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The new dateTime after increasing the inDate"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Date increaseDateTime(Date inDate, int duration) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.setTime(inDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.add(Calendar.HOUR, duration);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return c.getTime();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method updates the dateTime to same date with time 2359 as upper Boundary."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param inDate The dateTime given at 0000 hours"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The updated dateTime"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Date increaseTimeToTwoThreeFiveNine(Date inDate) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.setTime(inDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.add(Calendar.HOUR, 23);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.add(Calendar.MINUTE, 59);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return c.getTime();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method updates the dateTime to same date with time 0700 as lower Boundary."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param inDate The dateTime given at 0000 hours"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The updated dateTime"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Date increaseTimeToZeroSevenZeroZero(Date inDate) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.setTime(inDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.add(Calendar.HOUR, 7);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return c.getTime();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method updates the dateTime increases it by 15 minutes."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param inDate The dateTime given"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The updated dateTime"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Date increaseTimeByFifteenMinutes(Date inDate) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.setTime(inDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.add(Calendar.MINUTE, 15);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return c.getTime();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function rounds ups the time to the nearest half hour or hour mark."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param date The date given to round up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The round up date"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Date roundByHalfHourMark(Date date) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        long minuteToIncrease \u003d 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        long diff \u003d date.getTime();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        long diffMinutes \u003d diff / (MAX_SECOND * SECOND_TO_MILLISECONDS) % HOUR_MARK;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (diffMinutes \u003e HALF_HOUR_MARK) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            minuteToIncrease \u003d HOUR_MARK - diffMinutes;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (diffMinutes \u003c HALF_HOUR_MARK \u0026\u0026 diffMinutes \u003e 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            minuteToIncrease \u003d HALF_HOUR_MARK - diffMinutes;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.setTime((date));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.add(Calendar.MINUTE, (int)minuteToIncrease);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return c.getTime();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method generates a comparator to compare the key of two pairs of date based on 12 clock format."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final Comparator\u003cPair\u003cString, String\u003e\u003e compareByTime \u003d (lhs, rhs) -\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String left \u003d lhs.getKey();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String right \u003d rhs.getKey();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] leftTimeSplit \u003d left.split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] rightTimeSplit \u003d right.split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (leftTimeSplit[1].equals(TWELVE_HOUR_TIME_AM_POST_FIX)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u0026\u0026 rightTimeSplit[1].equals(TWELVE_HOUR_TIME_AM_POST_FIX)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[]leftTimeSplitHourMinute"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003d leftTimeSplit[0].split(TWELVE_HOUR_TIME_FORMAT_HOUR_AND_MINUTE_SEPARATOR);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[]rightTimeSplitHourMinute"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003d rightTimeSplit[0].split(TWELVE_HOUR_TIME_FORMAT_HOUR_AND_MINUTE_SEPARATOR);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (leftTimeSplitHourMinute[0].equals(TWELVE_HOUR_TIME_FORMAT_MAXIMUM_HOUR)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u0026\u0026 rightTimeSplitHourMinute[0].equals(TWELVE_HOUR_TIME_FORMAT_MAXIMUM_HOUR)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return leftTimeSplitHourMinute[1].compareTo(rightTimeSplitHourMinute[1]);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (leftTimeSplitHourMinute[0].equals(TWELVE_HOUR_TIME_FORMAT_MAXIMUM_HOUR)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (rightTimeSplitHourMinute[0].equals(TWELVE_HOUR_TIME_FORMAT_MAXIMUM_HOUR)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return leftTimeSplit[0].compareTo(rightTimeSplit[0]);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (leftTimeSplit[1].equals(TWELVE_HOUR_TIME_AM_POST_FIX)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (rightTimeSplit[1].equals(TWELVE_HOUR_TIME_AM_POST_FIX)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return left.compareTo(right);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    };"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Executes the finding of best available block period"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * inside the given TaskList objects with the given duration."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param ui The Ui object to display the done task message"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display freeTimes message"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws Exception On date parsing error"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, UserInteraction ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (duration \u003c DukeConstants.FIND_TIME_LOWER_BOUNDARY || duration \u003e DukeConstants.FIND_TIME_UPPER_BOUNDARY) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return ui.showFreeTimesInvalidDuration(duration.toString());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        mapDataMap(events);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        findFindTime();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        setOutput();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return ui.showFreeTimes(message);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method maps the list of events that is after the reference date and time into dataMap for data processing."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param events The list of event tasks in storage"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws ParseException The error when the data provided in invalid"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void mapDataMap(TaskList events) throws ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date refDate \u003d getRefDate(events, date);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String strCurrDateDay \u003d DukeConstants.DAY_DATE_FORMAT.format(refDate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String strCurrTime \u003d DukeConstants.TWELVE_HOUR_TIME_FORMAT.format(refDate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (String module: events.getMap().keySet()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e moduleValues \u003d events.getMap().get(module);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            mapDataMapByDateEvents(refDate, strCurrDateDay, strCurrTime, moduleValues);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method compares given dateTime with every task start and end time in the database"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * if the given is between a task it takes the latest end time among the overlapping of the tasks."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param events The list of event tasks in storage"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The Reference Date selected"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Date getRefDate(TaskList events, Date date) throws ParseException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Comparator\u003cPair\u003cLong,Assignment\u003e\u003e startTimeComparator \u003d Comparator.comparing(Pair\u003cLong,Assignment\u003e:: getKey);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String strDateDay \u003d DukeConstants.DAY_DATE_FORMAT.format(date);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date refDate \u003d date;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        ArrayList\u003cPair\u003cLong, Assignment\u003e\u003e extractedAssignmentsOnDate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (String module: events.getMap().keySet()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e moduleValues \u003d events.getMap().get(module);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (moduleValues.get(strDateDay) !\u003d null) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                ArrayList\u003cAssignment\u003e data \u003d moduleValues.get(strDateDay);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                for (Assignment task : data) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String startTime \u003d task.getStartTime();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Date startDateTime \u003d DukeConstants.DEADLINE_DATE_FORMAT.parse(strDateDay"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            + DukeConstants.BLANK_SPACE + startTime);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Long inMillis \u003d startDateTime.getTime();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    extractedAssignmentsOnDate.add(new Pair\u003c\u003e(inMillis,task));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        extractedAssignmentsOnDate.sort(startTimeComparator);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (Pair\u003cLong,Assignment\u003e task : extractedAssignmentsOnDate) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String startTime \u003d task.getValue().getStartTime();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String endTime \u003d task.getValue().getEndTime();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date startDateTime \u003d DukeConstants.DEADLINE_DATE_FORMAT.parse(strDateDay"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    + DukeConstants.BLANK_SPACE + startTime);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date endDateTime \u003d DukeConstants.DEADLINE_DATE_FORMAT.parse(strDateDay"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    + DukeConstants.BLANK_SPACE + endTime);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (startDateTime.equals(refDate)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                refDate \u003d endDateTime;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if ((startDateTime.before(refDate) \u0026\u0026 endDateTime.after(refDate)) \u0026\u0026 endDateTime.after(refDate)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                refDate \u003d endDateTime;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return refDate;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method maps the list of events that is in a module that is after reference data and time into dataMap."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param refDate The date used at reference point"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param strCurrDateDay The date with day of the week based on the reference date"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param strCurrTime The time of the day based on the reference date"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param moduleValues The list of events that is under a module"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws ParseException The error when parsing data error is found"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void mapDataMapByDateEvents(Date refDate, String strCurrDateDay,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                     String strCurrTime,HashMap\u003cString,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            ArrayList\u003cAssignment\u003e\u003e moduleValues) throws ParseException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (String strDate : moduleValues.keySet()) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date date \u003d DukeConstants.DAY_DATE_FORMAT.parse(strDate);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            date \u003d increaseTimeToTwoThreeFiveNine(date);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            ArrayList\u003cPair\u003cString, String\u003e\u003e timeArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (strDate.equals(strCurrDateDay)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                timeArray.add(new Pair\u003c\u003e(strCurrTime, strCurrTime));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (date.after(refDate)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                ArrayList\u003cAssignment\u003e data \u003d moduleValues.get(strDate);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for (Assignment task : data) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String startTime \u003d task.getStartTime();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String endTime \u003d task.getEndTime();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Date startDateTime \u003d DukeConstants.DEADLINE_DATE_FORMAT.parse(strDate"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            + DukeConstants.BLANK_SPACE + startTime);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    if (startDateTime.after(refDate)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        timeArray.add(new Pair\u003c\u003e(startTime.trim(), endTime.trim()));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if (dataMap.containsKey(strDate)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    timeArray \u003d mergeTimeArray(dataMap.get(strDate), timeArray);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                timeArray.sort(compareByTime);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                dataMap.put(strDate, timeArray);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method merges to arrayList and removes duplicated values."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param left The list of start and end times"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param right The list of start and end times"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The combines list"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ArrayList\u003cPair\u003cString, String\u003e\u003e mergeTimeArray(ArrayList\u003cPair\u003cString, String\u003e\u003e left,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                                           ArrayList\u003cPair\u003cString, String\u003e\u003e right) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (Pair\u003cString, String\u003e data: right) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (!left.contains(data)) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                left.add(data);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return left;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method Finds the best time available with the list of events in dataMap."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws ParseException The error when the data provided in invalid"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void findFindTime() throws ParseException {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (String date: dataMap.keySet()) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            ArrayList\u003cPair\u003cString, String\u003e\u003e startAndEndTimes \u003d dataMap.get(date);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            for (int i \u003d 0; i \u003c startAndEndTimes.size(); i++) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                i \u003d addIfWithinTimeBoundary(startAndEndTimes, i, date);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if (checkFreeTimeOptions()) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        generateFreeTime();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This generates find free times block based on time blocks in the database and adds if block is within boundary."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param startAndEndTimes The start and end times of the event"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param index The index of the event in the date"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param date The date of the event"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws ParseException The error when the data provided in invalid"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Integer addIfWithinTimeBoundary(ArrayList\u003cPair\u003cString, String\u003e\u003e startAndEndTimes,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                            Integer index, String date) throws ParseException {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date dateBoundary \u003d DukeConstants.DEADLINE_DATE_FORMAT.parse(date"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                + DukeConstants.BLANK_SPACE + TWELVE_HOUR_TIME_FORMAT_START_TIME);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date dateUpperBoundary \u003d increaseTimeToTwoThreeFiveNine(dateBoundary);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date dateLowerBoundary \u003d increaseTimeToZeroSevenZeroZero(dateBoundary);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (index \u003c startAndEndTimes.size() - 1) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String dateTime \u003d date + DukeConstants.BLANK_SPACE + startAndEndTimes.get(index).getValue();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String dateTimeNextEvent \u003d date"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    + DukeConstants.BLANK_SPACE + startAndEndTimes.get(index + 1).getKey();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateTimeStart \u003d DukeConstants.DEADLINE_DATE_FORMAT.parse(dateTime);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (dateTimeStart.equals(roundByHalfHourMark(dateTimeStart))) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                dateTimeStart \u003d increaseTimeByFifteenMinutes(dateTimeStart);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                dateTimeStart \u003d roundByHalfHourMark(dateTimeStart);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateNextEvent \u003d DukeConstants.DEADLINE_DATE_FORMAT.parse(dateTimeNextEvent);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateTimeEnd \u003d increaseDateTime(dateTimeStart, duration);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (dateTimeEnd.after(dateUpperBoundary)) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                index \u003d (startAndEndTimes.size() - 1);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (dateTimeEnd.before(dateNextEvent)) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if (dateTimeStart.before(dateLowerBoundary)) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    dateTimeStart \u003d dateLowerBoundary;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                dateTimeEnd \u003d increaseDateTime(dateTimeStart, duration);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if (dateTimeEnd.before(dateUpperBoundary)) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    freeTimeData.add(new Pair\u003c\u003e(dateTimeStart, dateTimeEnd));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    index \u003d (startAndEndTimes.size() - 1);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (index \u003d\u003d (startAndEndTimes.size() - 1)) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String dateTime \u003d date + DukeConstants.BLANK_SPACE + startAndEndTimes.get(index).getValue();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateTimeStart \u003d DukeConstants.DEADLINE_DATE_FORMAT.parse(dateTime);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (dateTimeStart.equals(roundByHalfHourMark(dateTimeStart))) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                dateTimeStart \u003d increaseTimeByFifteenMinutes(dateTimeStart);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                dateTimeStart \u003d roundByHalfHourMark(dateTimeStart);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateTimeEnd \u003d increaseDateTime(dateTimeStart, duration);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (dateTimeStart.after(dateLowerBoundary) \u0026\u0026 dateTimeEnd.before(dateUpperBoundary)) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                freeTimeData.add(new Pair\u003c\u003e(dateTimeStart, dateTimeEnd));"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (dateTimeStart.before(dateLowerBoundary) \u0026\u0026 dateTimeEnd.before(dateUpperBoundary)) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                dateTimeStart \u003d dateLowerBoundary;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                dateTimeEnd \u003d increaseDateTime(dateTimeStart, duration);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if (dateTimeEnd.before(dateUpperBoundary)) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    freeTimeData.add(new Pair\u003c\u003e(dateTimeStart, dateTimeEnd));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String nextKey \u003d dataMap.higherKey(date);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if (nextKey \u003d\u003d null) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Date nextDay \u003d DukeConstants.DEADLINE_DATE_FORMAT.parse(date"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            + DukeConstants.BLANK_SPACE + TWELVE_HOUR_TIME_FORMAT_START_TIME);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    nextDay \u003d increaseDateTime(nextDay, HOURS_IN_A_DAY);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Date nextDayStartTime \u003d increaseTimeToZeroSevenZeroZero(nextDay);//increaseDateTime(nextDay, 7);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Date nextDayEndTime \u003d increaseDateTime(nextDayStartTime, duration);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    freeTimeData.add(new Pair\u003c\u003e(nextDayStartTime, nextDayEndTime));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    ArrayList\u003cPair\u003cString, String\u003e\u003e nextDayStartAndEndTimes \u003d dataMap.get(nextKey);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String nextDateTime \u003d nextKey"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            + DukeConstants.BLANK_SPACE + nextDayStartAndEndTimes.get(0).getKey();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Date nextDateTimeStart \u003d DukeConstants.DEADLINE_DATE_FORMAT.parse(nextDateTime);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    dateLowerBoundary \u003d increaseDateTime(dateLowerBoundary, HOURS_IN_A_DAY);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    Date dateLowerBoundaryPlusDuration \u003d increaseDateTime(dateLowerBoundary, duration);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    if (dateLowerBoundary.before(nextDateTimeStart)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            \u0026\u0026 dateLowerBoundaryPlusDuration.before(nextDateTimeStart)) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        freeTimeData.add(new Pair\u003c\u003e(dateLowerBoundary, dateLowerBoundaryPlusDuration));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method checks if there are enough options generated."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return true if freeTimeData contains the predefined number of options. Otherwise, false"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private boolean checkFreeTimeOptions() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (freeTimeData.size() \u003d\u003d options) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method generates free times required number of options is met."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void generateFreeTime() throws ParseException {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (checkFreeTimeOptions()) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        int size \u003d freeTimeData.size();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Pair\u003cDate, Date\u003e last;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (size \u003d\u003d 0) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date currDate \u003d new Date();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String strCurrDateDay \u003d DukeConstants.DAY_DATE_FORMAT.format(currDate)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    + DukeConstants.BLANK_SPACE + TWELVE_HOUR_TIME_FORMAT_START_TIME;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            currDate \u003d DukeConstants.DEADLINE_DATE_FORMAT.parse(strCurrDateDay);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            currDate \u003d increaseTimeToZeroSevenZeroZero(currDate);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            currDate \u003d increaseDateTime(currDate, HOURS_IN_A_DAY);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            last \u003d new Pair\u003c\u003e(currDate, increaseDateTime(currDate, duration));"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            freeTimeData.add(last);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            size \u003d freeTimeData.size();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            last \u003d freeTimeData.get(size - 1);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        generateFreeTimeUntilRequiredOptions(size, last);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method extends generateFreeTime generates free time slot by an hour difference."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param size The size of the freeTimeData"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param last The last Pair found in freeTimeData"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws ParseException The error when parsing data error is found"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void generateFreeTimeUntilRequiredOptions(Integer size, Pair\u003cDate, Date\u003e last) throws ParseException {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (last \u003d\u003d null) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (int i \u003d size; i \u003c options; i++) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date tempStart \u003d last.getKey();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date tempEnd \u003d last.getValue();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String currDate \u003d DukeConstants.DAY_DATE_FORMAT.format(tempStart)"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    + DukeConstants.BLANK_SPACE + TWELVE_HOUR_TIME_FORMAT_START_TIME;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateBoundary \u003d DukeConstants.DEADLINE_DATE_FORMAT.parse(currDate);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateUpperBoundary \u003d increaseTimeToTwoThreeFiveNine(dateBoundary);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateLowerBoundary \u003d increaseTimeToZeroSevenZeroZero(dateBoundary);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Pair\u003cDate, Date\u003e newFreeTime \u003d null;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateTimeStart \u003d increaseDateTime(tempStart, IDEAL_FREE_TIME_INTERVAL);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateTimeEnd \u003d increaseDateTime(tempEnd, IDEAL_FREE_TIME_INTERVAL);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (dateTimeStart.after(dateLowerBoundary) \u0026\u0026 dateTimeEnd.before(dateUpperBoundary)) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                newFreeTime \u003d new Pair\u003c\u003e(dateTimeStart, dateTimeEnd);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (dateTimeStart.before(dateLowerBoundary) \u0026\u0026 dateTimeEnd.before(dateUpperBoundary)) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                dateTimeStart \u003d dateLowerBoundary;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                dateTimeEnd \u003d increaseDateTime(dateTimeStart, duration);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if (dateTimeEnd.before(dateUpperBoundary)) {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    newFreeTime \u003d new Pair\u003c\u003e(dateTimeStart, dateTimeEnd);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (dateTimeEnd.after(dateUpperBoundary)) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                dateTimeStart \u003d increaseDateTime(dateLowerBoundary, HOURS_IN_A_DAY);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                dateTimeEnd \u003d increaseDateTime(dateTimeStart, duration);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                newFreeTime \u003d new Pair\u003c\u003e(dateTimeStart, dateTimeEnd);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (newFreeTime !\u003d null) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                last \u003d newFreeTime;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            freeTimeData.add(last);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final ArrayList\u003cPair\u003cString, String\u003e\u003e compiledFreeTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method generates the output to be shown."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void setOutput() {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        compiledFreeTimes.clear();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Comparator\u003cPair\u003cLong,Pair\u003cString,String\u003e\u003e\u003e startTimeComparator"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003d Comparator.comparing(Pair\u003cLong,Pair\u003cString,String\u003e\u003e:: getKey);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        ArrayList\u003cPair\u003cLong, Pair\u003cString,String\u003e\u003e\u003e sortCompiledFreeTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (int i \u003d 0; i \u003c freeTimeData.size(); i++) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String compiledFreeTimeToShow;"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String compiledFreeTimeCommand;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            compiledFreeTimeToShow \u003d DukeConstants.DAY_DATE_FORMAT.format(freeTimeData.get(i).getKey()) + \"\\n\""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    + DukeConstants.TWELVE_HOUR_TIME_FORMAT.format(freeTimeData.get(i).getKey())"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    + DISPLAY_KEYWORD_TO + DukeConstants.TWELVE_HOUR_TIME_FORMAT.format(freeTimeData.get(i).getValue());"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String dateTime \u003d DukeConstants.TWENTYFOUR_HOUR_DATE_FORMAT.format(freeTimeData.get(i).getKey());"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String[] spiltDateTime \u003d dateTime.split(DukeConstants.BLANK_SPACE, 3);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            compiledFreeTimeCommand \u003d DukeConstants.ADD_EVENT_HEADER"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    + DukeConstants.BLANK_SPACE + DukeConstants.BLANK_SPACE"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    + DukeConstants.EVENT_DATE_DESCRIPTION_SPLIT_KEYWORD"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    + DukeConstants.BLANK_SPACE + spiltDateTime[1]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    + DukeConstants.BLANK_SPACE + DukeConstants.EVENT_DATE_SPLIT_KEYWORD"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    + DukeConstants.BLANK_SPACE"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    + spiltDateTime[2] + DukeConstants.BLANK_SPACE"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    + DukeConstants.EVENT_TIME_SPLIT_KEYWORD + DukeConstants.BLANK_SPACE"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    + DukeConstants.EVENT_TIME_INPUT_FORMAT.format(freeTimeData.get(i).getValue());"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Long startDateTimeInMilliSeconds \u003d (freeTimeData.get(i).getKey()).getTime();"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Pair\u003cString, String\u003e compliedData \u003d new Pair\u003c\u003e(compiledFreeTimeToShow, compiledFreeTimeCommand);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            sortCompiledFreeTimes.add(new Pair\u003c\u003e(startDateTimeInMilliSeconds,compliedData));"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        sortCompiledFreeTimes.sort(startTimeComparator);"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        message \u003d new String();"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (int i \u003d 0; i \u003c sortCompiledFreeTimes.size(); i++) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            compiledFreeTimes.add(sortCompiledFreeTimes.get(i).getValue());"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "0325961"
        },
        "content": "            int optionNo \u003d i + 1;"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            message +\u003d (DISPLAY_KEYWORD_OPTION"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    + DukeConstants.BLANK_SPACE + (optionNo) + \":\\n\""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    + sortCompiledFreeTimes.get(i).getValue().getKey()) + \"\\n\\n\";"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method gets the list of compiled free time requested by the user."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static ArrayList\u003cPair\u003cString, String\u003e\u003e getCompiledFreeTimesList() {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return compiledFreeTimes;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 3,
      "0325961": 11,
      "hwbjerry": 487,
      "darrenoje": 22
    }
  },
  {
    "path": "src/main/java/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeLogger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Represents the command to display a guide to all commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(HelpCommand.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static  String help \u003d new String();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Executes the displaying of guide to all commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param ui The Ui object to display the delete task message"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display delete task message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, UserInteraction ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            InputStream is \u003d this.getClass().getClassLoader().getResourceAsStream(\"documents/Help.txt\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            InputStreamReader isr \u003d new InputStreamReader(is);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(isr);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                help +\u003d line + \"\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            isr.close();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            is.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(\"Help.txt cannot be found\" + e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return ui.showHelp(help);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 34,
      "lionlim97": 2,
      "0325961": 10
    }
  },
  {
    "path": "src/main/java/commands/RecurringCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Represents the command to add recurring tasks to the events TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "public class RecurringCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private final String startTimeString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private final String endTimeString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private final String endDateString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private boolean isBiweekly;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private boolean isRecur;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private String startDateString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int HOURS \u003d 24;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int MINUTES \u003d 60;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int SECONDS \u003d 60;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int MILLISECONDS \u003d 1000;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int ONE_WEEK \u003d 7;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int TWO_WEEKS \u003d 14;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    ArrayList\u003cString\u003e eventConflict;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates RecurringCommand object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param description Description of a task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param startDateString Start date of a task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param endDateString End date of a task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param startTimeString Start time of a task"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param endTimeString End time of a task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param isBiweekly whether the task is biweekly"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param isRecur whether the task needs to be added"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public RecurringCommand(String description, String startDateString,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            String endDateString, String startTimeString,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            String endTimeString, boolean isBiweekly, boolean isRecur) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.startDateString \u003d startDateString;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.endDateString \u003d endDateString;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.startTimeString \u003d startTimeString;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.endTimeString \u003d endTimeString;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.isBiweekly \u003d isBiweekly;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.isRecur \u003d isRecur;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * This method gets the date of 7 days later."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param inDate date"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @return date of 7 days later"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private Date getNextWeekDate(Date inDate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date nextWeek \u003d new Date(inDate.getTime() + ONE_WEEK * HOURS * MINUTES * SECONDS * MILLISECONDS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return nextWeek;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method gets the date of 14 days later."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param inDate date"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @return date of 14 days later"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private Date getFollowingWeekDate(Date inDate) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date followingWeek \u003d new Date(inDate.getTime() + TWO_WEEKS * HOURS * MINUTES * SECONDS * MILLISECONDS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return followingWeek;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, UserInteraction ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date startDate \u003d DukeConstants.DAY_DATE_FORMAT.parse(startDateString);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date endDate \u003d DukeConstants.DAY_DATE_FORMAT.parse(endDateString);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String oldStartDateString \u003d startDateString;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date startOfFollowingWeek;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date startOfNextWeek;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e eventMap \u003d events.getMap();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        ArrayList\u003cAssignment\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (isRecur \u0026\u0026 isBiweekly) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                Assignment task \u003d new Event(description, startDateString, startTimeString, endTimeString);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                eventConflict \u003d super.checkEventConflict(events, task);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                if (!eventConflict.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                temp.add(task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                startOfFollowingWeek \u003d getFollowingWeekDate(startDate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                startDateString \u003d DukeConstants.DAY_DATE_FORMAT.format(startOfFollowingWeek);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                startDate \u003d startOfFollowingWeek;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0325961"
        },
        "content": "            } while (startOfFollowingWeek.before(endDate) || startOfFollowingWeek.equals(endDate));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else if (isRecur) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                Assignment task \u003d new Event(description, startDateString, startTimeString, endTimeString);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                eventConflict \u003d super.checkEventConflict(events, task);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                if (!eventConflict.isEmpty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                temp.add(task);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                startOfNextWeek \u003d getNextWeekDate(startDate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                startDateString \u003d DukeConstants.DAY_DATE_FORMAT.format(startOfNextWeek);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                startDate \u003d startOfNextWeek;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0325961"
        },
        "content": "            } while (startOfNextWeek.before(endDate) || startOfNextWeek.equals(endDate));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else if (isBiweekly) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                Assignment task \u003d new Event(description, startDateString, startTimeString, endTimeString);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                super.insideMapChecker(eventMap, task);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                temp.add(task);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                startOfFollowingWeek \u003d getFollowingWeekDate(startDate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                startDateString \u003d DukeConstants.DAY_DATE_FORMAT.format(startOfFollowingWeek);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                startDate \u003d startOfFollowingWeek;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0325961"
        },
        "content": "            } while (startOfFollowingWeek.before(endDate) || startOfFollowingWeek.equals(endDate));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                Assignment task \u003d new Event(description, startDateString, startTimeString, endTimeString);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                super.insideMapChecker(eventMap, task);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                temp.add(task);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                startOfNextWeek \u003d getNextWeekDate(startDate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                startDateString \u003d DukeConstants.DAY_DATE_FORMAT.format(startOfNextWeek);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                startDate \u003d startOfNextWeek;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0325961"
        },
        "content": "            } while (startOfNextWeek.before(endDate) || startOfNextWeek.equals(endDate));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (isRecur) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            if (eventConflict.isEmpty()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                for (Assignment taskInList : temp) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    events.addTask(taskInList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                return ui.showConflictRecurring(eventConflict);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            for (Assignment taskInList : temp) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                events.removeTask(taskInList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        storage.updateEventList(events);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return ui.showRecurring(description, oldStartDateString, endDateString, isBiweekly, isRecur);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 5,
      "0325961": 11,
      "darrenoje": 125,
      "hwbjerry": 4
    }
  },
  {
    "path": "src/main/java/commands/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Reminder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import parser.DateTimeParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Represents the command to set a reminder for the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Assignment task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Date time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private boolean remind;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Reminder reminder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Creates RemindCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param task Task to have a reminder set"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param time Time for the reminder to be set at"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param remind Whether a reminder needs to be set"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public RemindCommand(Assignment task, Date time, boolean remind) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.remind \u003d remind;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Sets a reminder pop-up for task user wants to set a reminder to."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param ui The Ui object to display the done task message"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display remind message"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws DukeException On invalid task and time input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, UserInteraction ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminder \u003d storage.getReminderObject();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminder.setDeadlines(deadlines);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e deadlineMap \u003d deadlines.getMap();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        HashMap\u003cDate, Assignment\u003e remindMap \u003d reminder.getRemindMap();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (task.getDescription().isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            ArrayList\u003cString\u003e remindList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            for (Date date : remindMap.keySet()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                String reminderDate \u003d DukeConstants.DEADLINE_DATE_FORMAT.format(date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String modCode \u003d remindMap.get(date).getModCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String description \u003d remindMap.get(date).getDescription();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String taskDate \u003d remindMap.get(date).getDateTime();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0325961"
        },
        "content": "                remindList.add(\"ModCode: \" + modCode + \"\\n\" + \"Description: \" + description + \"\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        + \"Deadline date: \" + taskDate + \"\\n\" + \"Reminder date: \" + reminderDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return ui.showListOfReminder(remindList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String reminderTime \u003d DukeConstants.DEADLINE_DATE_FORMAT.format(time);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String taskDateTimeString \u003d task.getDateTime();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date taskDateTime \u003d DateTimeParser.deadlineTaskStringToDate(taskDateTimeString);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (taskDateTime.before(currentDate)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeInvalidDateTimeException(DukeConstants.REMINDER_TIME_PASSED_ERROR);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (!remind) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (!remindMap.containsKey(time)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidDateTimeException(DukeConstants.NO_REMINDER_TIME_ERROR);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else if (!remindMap.get(time).getDescription().equals(task.getDescription())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeException(DukeConstants.NO_REMINDER_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else if (!remindMap.get(time).getDateTime().equals(task.getDateTime())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidDateTimeException(DukeConstants.NO_REMINDER_ERROR);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            reminder.removeTimerTask(task, time, reminderTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return ui.showCancelReminder(task, reminderTime);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (this.time.before(currentDate)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeInvalidDateTimeException(DukeConstants.TASK_TIME_PASSED_ERROR);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if (!deadlineMap.containsKey(task.getModCode())) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeException(DukeConstants.NO_MODULE_ERROR);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if (!deadlineMap.get(task.getModCode()).containsKey(task.getDate())) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeException(DukeConstants.NO_TIMING_ERROR);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if (remindMap.containsKey(time)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Assignment remindedTask \u003d remindMap.get(time);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            throw new DukeInvalidDateTimeException(\"Sorry, you have a reminder set for \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    + remindedTask.getModCode() + DukeConstants.BLANK_SPACE"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    + remindedTask.getDescription() + \" by: \" + task.getDateTime());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            Date inputTaskDate \u003d DukeConstants.DEADLINE_DATE_FORMAT.parse(task.getDateTime());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (inputTaskDate.before(time)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidDateTimeException(DukeConstants.REMINDER_AFTER_TASK_ERROR);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            ArrayList\u003cAssignment\u003e allTaskInDate \u003d deadlineMap.get(task.getModCode()).get(task.getDate());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            boolean hasTask \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            for (Assignment taskInList : allTaskInDate) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (taskInList.getDescription().equals(task.getDescription())) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    hasTask \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (!hasTask) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                throw new DukeException(DukeConstants.MISMATCH_DESCRIPTION);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminder.setReminderThread(time, task);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return ui.showReminder(task, reminderTime);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 8,
      "lionlim97": 85,
      "0325961": 14,
      "darrenoje": 4,
      "hwbjerry": 3
    }
  },
  {
    "path": "src/main/java/commands/RetrieveFreeTimesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Represents the command to retrieve the free time requested by the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class RetrieveFreeTimesCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Integer option;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String selectedOption;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String selectedOptionCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public RetrieveFreeTimesCommand(Integer option) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.option \u003d option;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Executes the retriever of earliest available block period generated by FindFreeTimesCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param ui The Ui object to display the done task message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display freeTimes message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, UserInteraction ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        ArrayList\u003cPair\u003cString, String\u003e\u003e retrievedFreeTimes \u003d FindFreeTimesCommand.getCompiledFreeTimesList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Integer indexOfOption \u003d option - 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        selectedOption \u003d retrievedFreeTimes.get(indexOfOption).getKey();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        selectedOptionCommand \u003d retrievedFreeTimes.get(indexOfOption).getValue();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return ui.showSelectionOption(option, selectedOption);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method gets the earliest free time option selected by the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static String getSelectedOption() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return selectedOptionCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 1,
      "0325961": 10,
      "hwbjerry": 34
    }
  },
  {
    "path": "src/main/java/commands/RetrievePreviousCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeLogger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeNoValidDataException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Represents the command to retrieve the previous command requested by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class RetrievePreviousCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static String retrievedOutput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(RetrievePreviousCommand.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static boolean isValid \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Creates a RetrievePreviousCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param fullCommand The user\u0027s input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public RetrievePreviousCommand(String fullCommand) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Retrieves the chosen input that the user wish to get."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param ui The Ui object to display the message for chosen input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display retrieve previous message"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @throws DukeInvalidCommandException on empty list and invalid index input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, UserInteraction ui, Storage storage)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            throws DukeInvalidCommandException, DukeNoValidDataException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        fullCommand \u003d fullCommand.replace(DukeConstants.RETRIEVE_PREVIOUS_HEADER, DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (!fullCommand.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": "            char checkSpace \u003d fullCommand.charAt(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "            if (checkSpace !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "                throw new DukeInvalidCommandException(DukeConstants.INVALID_WITHOUT_SPACE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (fullCommand.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0325961"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0325961"
        },
        "content": "            throw new DukeInvalidCommandException(DukeConstants.INVALID_EMPTY_NUMBER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "        ArrayList\u003cString\u003e retrievedList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0325961"
        },
        "content": "        retrievedList \u003d ShowPreviousCommand.getOutputList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int size \u003d retrievedList.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (size \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0325961"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0325961"
        },
        "content": "            throw new DukeNoValidDataException(DukeConstants.NO_PREVIOUS_COMMAND_TO_GET_LIST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "        boolean isNumber \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int intFullCommand \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0325961"
        },
        "content": "            intFullCommand \u003d Integer.parseInt(fullCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(\"Unable to parse string to integer\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0325961"
        },
        "content": "            isNumber \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0325961"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": "            throw new DukeInvalidCommandException(DukeConstants.INVALID_STRING_SHOULD_BE_INTEGER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (isNumber) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0325961"
        },
        "content": "            if (intFullCommand \u003c\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0325961"
        },
        "content": "                isValid \u003d false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0325961"
        },
        "content": "                throw new DukeInvalidCommandException(DukeConstants.STR_RANGE_FOR_FROM + size + \" .\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": "            } else if (intFullCommand \u003e size) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": "                isValid \u003d false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0325961"
        },
        "content": "                throw new DukeInvalidCommandException(\"There are only \" + size + \" of previous commands.\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        + DukeConstants.STR_RANGE_FOR_LESS_THAN + size + \" but greater than 0.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0325961"
        },
        "content": "            int index \u003d intFullCommand - 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0325961"
        },
        "content": "            retrievedOutput \u003d retrievedList.get(index);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0325961"
        },
        "content": "            isValid \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return ui.showChosenPreviousChoice(retrievedOutput);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method get the chosen output requested by the user."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static String getChosenOutput() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return retrievedOutput;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method checks if the input by the user is an integer."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static boolean isValid() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 102,
      "hwbjerry": 2,
      "darrenoje": 1
    }
  },
  {
    "path": "src/main/java/commands/ShowPreviousCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Represents the command which shows the previous inputs requested by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class ShowPreviousCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Creates ShowPreviousCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param fullCommand The user\u0027s input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public ShowPreviousCommand(String fullCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method adds previous command into the outputList base on user\u0027s choice/keyword."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param userInputList The list that contains all user inputs"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param outputList The list that contains the inputs the user requested"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param string The user\u0027s keyword for adding into outputList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return outputList which contains the inputs requested by user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public ArrayList\u003cString\u003e previousCommandsHandler(ArrayList\u003cString\u003e userInputList,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                                     ArrayList\u003cString\u003e outputList, String string) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int size \u003d userInputList.size() - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "        for (int j \u003d 0; j \u003c size; j++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "            userInput \u003d userInputList.get(j);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "            if (userInput.startsWith(string)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "                outputList.add(userInput + \" \\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return outputList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public ArrayList\u003cString\u003e userInputsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public final ArrayList\u003cString\u003e updatedUserInputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Shows the previous user inputs that user requested."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param ui The Ui object to display the message to display all the inputs"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display the lists of user inputs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @throws DukeInvalidCommandException when user request to show more"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, UserInteraction ui, Storage storage)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            throws DukeInvalidCommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0325961"
        },
        "content": "        boolean isNumber \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int number \u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "            number \u003d Integer.parseInt(fullCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0325961"
        },
        "content": "            isNumber \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0325961"
        },
        "content": "        ArrayList\u003cString\u003e outputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0325961"
        },
        "content": "        userInputsList \u003d Duke.getUserInputs();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int size \u003d userInputsList.size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0325961"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0325961"
        },
        "content": "            if (i % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String userInput \u003d userInputsList.get(i);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0325961"
        },
        "content": "                updatedUserInputList.add(userInput);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int sizeOfUpdatedList \u003d updatedUserInputList.size();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int sizeOfPreviousList \u003d sizeOfUpdatedList - 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (sizeOfPreviousList \u003c number) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0325961"
        },
        "content": "            throw new DukeInvalidCommandException(\"There are only \" + sizeOfPreviousList + \" previous commands. \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    + DukeConstants.STR_RANGE_FOR_LESS_THAN + sizeOfPreviousList + \" .\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (isNumber) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0325961"
        },
        "content": "            int startIndex \u003d sizeOfPreviousList - 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0325961"
        },
        "content": "            for (int i \u003d 0; i \u003c number; i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0325961"
        },
        "content": "                outputList.add(updatedUserInputList.get(startIndex) + \" \\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0325961"
        },
        "content": "                startIndex -\u003d 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d outputList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.ADD_DEADLINE_HEADER)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.ADD_DEADLINE_HEADER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.ADD_EVENT_HEADER)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.ADD_EVENT_HEADER);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.DELETE_DEADLINE_HEADER)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.DELETE_DEADLINE_HEADER);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.DELETE_EVENT_HEADER)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.DELETE_EVENT_HEADER);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.RECUR_WEEKLY_HEADER)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.RECUR_WEEKLY_HEADER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.RECUR_BIWEEKLY_HEADER)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.RECUR_BIWEEKLY_HEADER);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.REMOVE_RECUR_WEEKLY_HEADER)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    outputList, DukeConstants.REMOVE_RECUR_WEEKLY_HEADER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.REMOVE_RECUR_BIWEEKLY_HEADER)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    outputList, DukeConstants.REMOVE_RECUR_BIWEEKLY_HEADER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.REMIND_SET_HEADER)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.REMIND_SET_HEADER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.REMOVE_REMIND_HEADER)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.REMOVE_REMIND_HEADER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.REMIND_CHECK_HEADER)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.REMIND_CHECK_HEADER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.SHOW_WORKLOAD_HEADER)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.SHOW_WORKLOAD_HEADER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.SHOW_FILTER_HEADER)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.SHOW_FILTER_HEADER);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.HELP_HEADER)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.HELP_HEADER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.DONE_EVENT_HEADER)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.DONE_EVENT_HEADER);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.DONE_DEADLINE_HEADER)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.DONE_DEADLINE_HEADER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.FIND_TIME_HEADER)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.FIND_TIME_HEADER);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.RETRIEVE_PREVIOUS_HEADER)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.RETRIEVE_PREVIOUS_HEADER);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.SHOW_PREVIOUS_HEADER)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.SHOW_PREVIOUS_HEADER);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.RETRIEVE_TIME_HEADER)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.RETRIEVE_TIME_HEADER);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.SHOW_WEEK_HEADER)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.SHOW_WEEK_HEADER);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (fullCommand.equals(DukeConstants.BYE_HEADER)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0325961"
        },
        "content": "            result \u003d previousCommandsHandler(updatedUserInputList, outputList, DukeConstants.BYE_HEADER);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return ui.showPrevious(result);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method gets the list of output that the user request to show."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static ArrayList\u003cString\u003e getOutputList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 144,
      "hwbjerry": 8
    }
  },
  {
    "path": "src/main/java/commands/ShowWorkloadCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.LookupTable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Represents the command which shows the user the recommended workload for next week."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "public class ShowWorkloadCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private String week;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private Integer[] counter \u003d {0,0,0,0,0,0,0};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private LookupTable lookupTable \u003d LookupTable.getInstance();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int HOURS \u003d 24;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int MINUTES \u003d 60;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int SECONDS \u003d 60;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int MILLISECONDS \u003d 1000;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Show recommended weekly workload."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param week week to see workload"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public ShowWorkloadCommand(String week) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.week \u003d week;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method checks if selected week is valid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param workloadWeek Week of workload schedule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param selectedWeek Week of task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @return true if week of task is in week of workload schedule, false otherwise"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private boolean isValid(String workloadWeek, String selectedWeek) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return selectedWeek.equals(workloadWeek);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method finds a day to schedule the deadline task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param workloadMap HashMap of workload"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param limit limit of days to be considered"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @return Day to be scheduled in integer format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @throws ParseException when the user input the date in the wrong format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private int findBestDay(HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e workloadMap, Integer limit) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        for (Map.Entry\u003cString, ArrayList\u003cAssignment\u003e\u003e date: workloadMap.entrySet()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            Date tempDate \u003d DukeConstants.EVENT_DATE_INPUT_FORMAT.parse(date.getKey());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String tempDay \u003d DukeConstants.DAY_FORMAT.format(tempDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            int index \u003d dayToInt(tempDay);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            counter[index - 1]++;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        int num \u003d findMinimum(counter, limit) + 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return num;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method finds the day with the least number of tasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param array Integer array to serve as counter"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param limit limit of days to be considered"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @return index of the day in the array"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private int findMinimum(Integer[] array, Integer limit) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Integer min \u003d array[index];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        for (int i \u003d 1; i \u003c limit; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            if (array[i] \u003c min) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                min \u003d array[i];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                index \u003d i;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * This method converts day to integer."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param day Day of task"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @return Integer of day of task"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private int dayToInt(String day) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        case \"Mon\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        case \"Tue\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return 2;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        case \"Wed\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return 3;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        case \"Thu\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return 4;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        case \"Fri\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return 5;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        case \"Sat\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return 6;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return 7;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Executes to get the workload for next week when requested by user."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param ui The Ui object to display the list message"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display the workload message"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @throws ParseException on array index out of bound"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, UserInteraction ui, Storage storage)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String workloadWeek \u003d lookupTable.getValue(week);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e eventMap \u003d events.getMap();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e deadlineMap \u003d deadlines.getMap();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e workloadMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Map.Entry\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e eventModule: eventMap.entrySet()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e eventModuleValue \u003d eventModule.getValue();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            for (Map.Entry\u003cString, ArrayList\u003cAssignment\u003e\u003e eventItem: eventModuleValue.entrySet()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                String[] strDayDate \u003d eventItem.getKey().trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                String strDate \u003d strDayDate[1].trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String selectedWeek \u003d lookupTable.getValue(strDate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                if (selectedWeek.equals(workloadWeek)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    workloadMap.put(strDate, eventItem.getValue());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Map.Entry\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e deadlineModule: deadlineMap.entrySet()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e deadlineModuleValue \u003d deadlineModule.getValue();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            for (Map.Entry\u003cString, ArrayList\u003cAssignment\u003e\u003e deadlineItem: deadlineModuleValue.entrySet()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                String[] strDayDate \u003d deadlineItem.getKey().trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                String strDate \u003d strDayDate[1].trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String selectedWeek \u003d lookupTable.getValue(strDate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                if (isValid(workloadWeek, selectedWeek)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    Date tempDate \u003d DukeConstants.EVENT_DATE_INPUT_FORMAT.parse(strDate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String tempDay \u003d DukeConstants.DAY_FORMAT.format(tempDate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    int limit \u003d dayToInt(tempDay);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    int freeDay \u003d findBestDay(workloadMap, limit - 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    int bestDay \u003d dayToInt(tempDay) - freeDay;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    tempDate \u003d new Date(tempDate.getTime() - bestDay * HOURS * MINUTES * SECONDS * MILLISECONDS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String newDate \u003d DukeConstants.EVENT_DATE_INPUT_FORMAT.format(tempDate).trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    if (workloadMap.containsKey(newDate)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        for (int i \u003d 0; i \u003c deadlineItem.getValue().size(); i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            workloadMap.get(newDate).add(deadlineItem.getValue().get(i));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        workloadMap.put(newDate, deadlineItem.getValue());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cAssignment\u003e\u003e sortedWorkLoadMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (!workloadMap.isEmpty()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            sortedWorkLoadMap.putAll(workloadMap);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return ui.showWorkload(sortedWorkLoadMap, workloadWeek);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 20,
      "0325961": 24,
      "darrenoje": 119,
      "hwbjerry": 2
    }
  },
  {
    "path": "src/main/java/commands/UpdateProgressIndicatorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import userinterface.ProgressController;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Represents the command to update the progress indicator."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class UpdateProgressIndicatorCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "    TaskList eventList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "    TaskList deadlineList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static final String TICK_SYMBOL \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Creates UpdateProgressIndicator object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param eventList The TaskList object for events"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param deadlineList The TaskList object for deadlines"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public UpdateProgressIndicatorCommand(TaskList eventList, TaskList deadlineList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.deadlineList \u003d deadlineList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Load the fxml to update the progress indicator."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param eventList The TaskList object for events"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param deadlineList The Tasklist object for deadlines"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @throws IOException if the input is invalid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public Pair\u003cHashMap\u003cString, String\u003e, ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        getWholeDate(TaskList eventList, TaskList deadlineList) throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/ProgressIndicator.fxml\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "        fxmlLoader.load();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Pair\u003cHashMap\u003cString, String\u003e,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e\u003e result"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003d fxmlLoader.\u003cProgressController\u003egetController()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                .getProgressIndicatorMap(eventList.getMap(), deadlineList.getMap());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method gets the map which contains the module code."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param wholeData The entire map which contains the module code with the description and tick/cross"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public HashMap\u003cString, String\u003e getModuleMap(Pair\u003cHashMap\u003cString, String\u003e,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e\u003e wholeData) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "        HashMap\u003cString, String\u003e modulesMap \u003d wholeData.getKey();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return modulesMap;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method calculate the values to be shown in the progress indicator."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param moduleMap The map that contains the module code"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param wholeData The entire map which contains the module code, description and tick/cross"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return module code, completed tasks and total number of tasks"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public HashMap\u003cString, Pair\u003cInteger, Integer\u003e\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        getValues(HashMap\u003cString, String\u003e moduleMap, Pair\u003cHashMap\u003cString, String\u003e,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e\u003e wholeData) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "        HashMap\u003cString, Pair\u003cInteger, Integer\u003e\u003e moduleCodeAndTotalNumOfTasksAndCompletedValue \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0325961"
        },
        "content": "        for (String module : moduleMap.keySet()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0325961"
        },
        "content": "            int totalNumTasks \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0325961"
        },
        "content": "            int completedValue \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0325961"
        },
        "content": "            ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e tasks \u003d wholeData.getValue();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0325961"
        },
        "content": "            for (Pair\u003cString, Pair\u003cString, String\u003e\u003e as : tasks) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0325961"
        },
        "content": "                if (as.getKey().equals(module)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    totalNumTasks +\u003d 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    if (as.getValue().getKey().equals(TICK_SYMBOL)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        completedValue +\u003d 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0325961"
        },
        "content": "            moduleCodeAndTotalNumOfTasksAndCompletedValue.put(module, new Pair\u003c\u003e(totalNumTasks, completedValue));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return moduleCodeAndTotalNumOfTasksAndCompletedValue;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 71,
      "hwbjerry": 11
    }
  },
  {
    "path": "src/main/java/commands/WeekCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.LookupTable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.WeekList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Represents the command to show the week selected by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class WeekCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String TWELVE_HOUR_TIME_FORMAT_HOUR_AND_MINUTE_SEPARATOR \u003d \":\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String TWELVE_HOUR_TIME_FORMAT_MAXIMUM_HOUR \u003d \"12\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String TWELVE_HOUR_TIME_AM_POST_FIX \u003d \"AM\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String textStart \u003d \"Start: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String newLine \u003d \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private LookupTable lookupTable \u003d LookupTable.getInstance();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String week;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e monList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e tueList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e wedList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e thuList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e friList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e satList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e sunList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static WeekList weekList \u003d new WeekList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Creates a WeekCommand object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param fullCommand The user\u0027s input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public WeekCommand(String fullCommand) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.week \u003d fullCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method appends the day of the date to the date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return an ArrayList with the day and dates as a string"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ArrayList\u003cString\u003e generateDateDay(String date, LookupTable lookupTable) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] days \u003d {\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"};"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        ArrayList\u003cString\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (String day : days) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String dateOut \u003d day + DukeConstants.BLANK_SPACE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    + lookupTable.getValue(date + DukeConstants.BLANK_SPACE + day);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            temp.add(dateOut);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method checks whether there is assignment the day."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param assignmentList containing the module code and list of assignment"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param dates containing all the days and date"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return an ArrayList that contains the new days and dates that contain assignment for the new week"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ArrayList\u003cString\u003e checkIfExist(HashMap\u003cString,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0325961"
        },
        "content": "            ArrayList\u003cAssignment\u003e\u003e assignmentList, ArrayList\u003cString\u003e dates) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        ArrayList\u003cString\u003e newDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0325961"
        },
        "content": "        for (String date: dates) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0325961"
        },
        "content": "            if (assignmentList.containsKey(date)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": "                newDates.add(date);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return newDates;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method updates the list to be shown to user based on their request."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void updateList(String day, Text toShow) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        case \"Mon\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            monList.add(toShow);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        case  \"Tue\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            tueList.add(toShow);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        case \"Wed\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            wedList.add(toShow);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        case \"Thu\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            thuList.add(toShow);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        case \"Fri\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            friList.add(toShow);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        case \"Sat\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            satList.add(toShow);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        case \"Sun\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            sunList.add(toShow);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method sort the list of the days by time."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void sortList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (monList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            monList.sort(WeekCommand::compareByTime);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (tueList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            tueList.sort(WeekCommand::compareByTime);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (wedList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            wedList.sort(WeekCommand::compareByTime);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (thuList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            thuList.sort(WeekCommand::compareByTime);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (friList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            friList.sort(WeekCommand::compareByTime);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (satList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            satList.sort(WeekCommand::compareByTime);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (sunList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            sunList.sort(WeekCommand::compareByTime);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method generate the text to be shown to the user."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Text generateToShow(Assignment task) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Text toShow \u003d new Text(task.toShow() + task.getModCode() + \"\\n\" + task.getDescription());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        toShow.setFont(Font.font(10));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (task.getStatus()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            toShow.setFill(Color.GAINSBORO);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            toShow.setStrikethrough(true);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return toShow;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method generates data in day GridPane ListViews based on the week selected."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setListView(LookupTable lookupTable, TaskList eventsList) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cString\u003e weekDates \u003d generateDateDay(week, lookupTable);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (String module: eventsList.getMap().keySet()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e moduleValue \u003d eventsList.getMap().get(module);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            ArrayList\u003cString\u003e dates \u003d checkIfExist(moduleValue, weekDates);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            for (String strDate : dates) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                String[] spilt \u003d strDate.split(DukeConstants.BLANK_SPACE, 2);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                ArrayList\u003cAssignment\u003e data \u003d moduleValue.get(strDate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for (Assignment task: data) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Text toShow \u003d generateToShow(task);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    String day \u003d spilt[0];"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    updateList(day, toShow);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method creates a comparator for a 12 hour time in the format 07:00 AM to be sorted by timeline."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param lhs First item compared"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param rhs Second item compared"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The result of the comparison"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static int compareByTime(Text lhs, Text rhs) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String left \u003d lhs.getText().replaceFirst(textStart, \"\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] leftSplit \u003d left.split(newLine,2);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] leftTimeSplit \u003d leftSplit[0].split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String right \u003d rhs.getText().replaceFirst(textStart, \"\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] rightSplit \u003d right.split(newLine,2);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] rightTimeSplit \u003d rightSplit[0].split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (leftTimeSplit[1].equals(TWELVE_HOUR_TIME_AM_POST_FIX)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u0026\u0026 rightTimeSplit[1].equals(TWELVE_HOUR_TIME_AM_POST_FIX)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[]leftTimeSplitHourMinute"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003d leftTimeSplit[0].split(TWELVE_HOUR_TIME_FORMAT_HOUR_AND_MINUTE_SEPARATOR);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[]rightTimeSplitHourMinute"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003d rightTimeSplit[0].split(TWELVE_HOUR_TIME_FORMAT_HOUR_AND_MINUTE_SEPARATOR);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (leftTimeSplitHourMinute[0].equals(TWELVE_HOUR_TIME_FORMAT_MAXIMUM_HOUR)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u0026\u0026 rightTimeSplitHourMinute[0].equals(TWELVE_HOUR_TIME_FORMAT_MAXIMUM_HOUR)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return leftTimeSplitHourMinute[1].compareTo(rightTimeSplitHourMinute[1]);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (leftTimeSplitHourMinute[0].equals(TWELVE_HOUR_TIME_FORMAT_MAXIMUM_HOUR)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (rightTimeSplitHourMinute[0].equals(TWELVE_HOUR_TIME_FORMAT_MAXIMUM_HOUR)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return leftTimeSplit[0].compareTo(rightTimeSplit[0]);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (leftTimeSplit[1].equals(TWELVE_HOUR_TIME_AM_POST_FIX)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (rightTimeSplit[1].equals(TWELVE_HOUR_TIME_AM_POST_FIX)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[]leftTimeSplitHourMinute"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003d leftTimeSplit[0].split(TWELVE_HOUR_TIME_FORMAT_HOUR_AND_MINUTE_SEPARATOR);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[]rightTimeSplitHourMinute"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003d rightTimeSplit[0].split(TWELVE_HOUR_TIME_FORMAT_HOUR_AND_MINUTE_SEPARATOR);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (leftTimeSplitHourMinute[0].equals(TWELVE_HOUR_TIME_FORMAT_MAXIMUM_HOUR)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u0026\u0026 rightTimeSplitHourMinute[0].equals(TWELVE_HOUR_TIME_FORMAT_MAXIMUM_HOUR)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return leftTimeSplitHourMinute[1].compareTo(rightTimeSplitHourMinute[1]);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (leftTimeSplitHourMinute[0].equals(TWELVE_HOUR_TIME_FORMAT_MAXIMUM_HOUR)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (rightTimeSplitHourMinute[0].equals(TWELVE_HOUR_TIME_FORMAT_MAXIMUM_HOUR)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return leftTimeSplit[0].compareTo(rightTimeSplit[0]);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static WeekList getWeekList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return weekList;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Executes showing of the week list requested by the user."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param ui The Ui object to display the done task message"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, UserInteraction ui, Storage storage) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        setListView(lookupTable, events);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        sortList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        weekList \u003d new WeekList(monList, tueList, wedList, thuList, friList, satList, sunList);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return DukeConstants.NO_FIELD;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 9,
      "0325961": 45,
      "hwbjerry": 181,
      "darrenoje": 5
    }
  },
  {
    "path": "src/main/java/commons/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.RetrieveFreeTimesCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.RetrievePreviousCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeIOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import parser.MainParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import userinterface.MainWindow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * A program that manages tasks input by user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * with commands that includes adding, deleting, displaying list of tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * and to mark completion of a task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class Duke  {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private final PreloadStorage preloadStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final TaskList events;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final TaskList deadlines;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private final UserInteraction ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private final Reminder reminder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(Duke.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static ArrayList\u003cString\u003e userInputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates Duke object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ui \u003d new UserInteraction();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        preloadStorage \u003d new PreloadStorage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        events \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminder \u003d new Reminder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.setReminderObject(reminder);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        MainWindow.setStorage(storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            preloadStorage.readDeadlineList(deadlines);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            preloadStorage.readEventList(events);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            storage.readDeadlineList(deadlines);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            storage.readEventList(events);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            storage.updateEventList(events);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            reminder.setDeadlines(deadlines);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            storage.setReminderOnStart();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (DukeIOException | DukeInvalidDateTimeException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(ui.showLoadingError(e));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * This method runs the Duke program."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param input The user\u0027s input to the Duke program"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return This returns the string to respond to user\u0027s input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String run(String input) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Command c \u003d MainParser.parse(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return c.execute(events, deadlines, ui, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            logger.log(Level.SEVERE, e.getMessage(), e);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return ui.getError(e);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": "        userInputs.add(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return run(input);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static ArrayList\u003cString\u003e getUserInputs() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return userInputs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static String getPreviousInput() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String previousInput \u003d RetrievePreviousCommand.getChosenOutput();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return previousInput;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method retrieves the free time option selected by the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static String getSelectedOption() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String selectedOption \u003d RetrieveFreeTimesCommand.getSelectedOption();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return selectedOption;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 2,
      "lionlim97": 56,
      "0325961": 27,
      "hwbjerry": 6,
      "-": 2
    }
  },
  {
    "path": "src/main/java/commons/DukeConstants.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class DukeConstants {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    //DEADLINE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String ADD_DEADLINE_HEADER \u003d \"add/d\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String DELETE_DEADLINE_HEADER \u003d \"delete/d\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String DONE_DEADLINE_HEADER \u003d \"done/d\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String DEADLINE_DATE_DESCRIPTION_SPLIT_KEYWORD \u003d \"/by\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String DEADLINE_LIST \u003d \"deadline\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String DEADLINE_EMPTY_MODCODE_DESCRIPTION_ERROR \u003d \" OOPS!!! The ModCode + description of a \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"deadline cannot be empty.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String DEADLINE_EMPTY_DESCRIPTION_ERROR \u003d \" OOPS!!! The description of a deadline \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"cannot be empty.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String DEADLINE_TIME_FORMAT_ERROR \u003d \" OOPS!!! The time of a deadline can only contain digits \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"and the time has to be 4 digits.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"Please enter the time in a 24-hour time format\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String DEADLINE_FORMAT \u003d \" OOPS!!! Please enter deadline as follows:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"(delete/d or add/d or done/d) mod_code name_of_deadline /by dd/MM/yyyy HHmm\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"or (delete/d or add/d or done/d) mod_code name_of_deadline /by week x day HHmm\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    //EVENT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String DELETE_EVENT_HEADER \u003d \"delete/e\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String ADD_EVENT_HEADER \u003d \"add/e\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String DONE_EVENT_HEADER \u003d \"done/e\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String EVENT_LIST \u003d \"event\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String EVENT_DATE_DESCRIPTION_SPLIT_KEYWORD \u003d \"/at\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String EVENT_DATE_SPLIT_KEYWORD \u003d \"/from\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String EVENT_TIME_SPLIT_KEYWORD \u003d \"/to\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String EVENT_EMPTY_MODCODE_DESCRIPTION_ERROR \u003d \" OOPS!!! The ModCode + description of an event \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"cannot be empty.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String EVENT_EMPTY_DESCRIPTION_ERROR \u003d \" OOPS!!! The description of an event cannot be empty.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String EVENT_TIME_FORMAT_ERROR \u003d \" OOPS!!! The time of an event can only contain digits and \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"the time has to be 4 digits.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"Please enter the time in a 24-hour time format\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String EVENT_FORMAT \u003d \"OOPS!!! Please enter event as follows:\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"(add/e or delete/e or done/e) modCode name_of_event /at dd/MM/yyyy /from HHmm /to HHmm\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"or (add/e or delete/e or done/e) modCode name_of_event /at week x day /from HHmm /to HHmm\\n \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"For example: add/e CS1231 project meeting /at 1/1/2020 /from 1500 /to 1700\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    //RECUR"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String RECUR_WEEKLY_HEADER \u003d \"recur/weekly\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String RECUR_BIWEEKLY_HEADER \u003d \"recur/biweekly\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String REMOVE_RECUR_WEEKLY_HEADER \u003d \"recur/rmweekly\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String REMOVE_RECUR_BIWEEKLY_HEADER \u003d \"recur/rmbiweekly\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String RECUR_DATE_DESCRIPTION_SPLIT_KEYWORD \u003d \"/start\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String RECUR_BIWEEKLY_KEYWORD \u003d \"/biweekly\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String RECUR_RMBIWEEKLY_KEYWORD \u003d \"/rmbiweekly\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String RECUR_RMWEEKLY_KEYWORD \u003d \"/rmweekly\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String RECUR_EVENT_DATE_FORMAT_ERROR \u003d \" OOPS!!! The start date of the recurring event is \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"after the end date of the recurring event.\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"Please ensure the end date is after the start date.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String RECUR_EVENT_FORMAT \u003d \"OOPS!!! Please enter recurring event as follows:\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"recur/(fill) modCode name_of_event /start dd/MM/yyyy to dd/MM/yyyy /from HHmm /to HHmm\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"Note: replace (fill) with either: weekly, biweekly, rmweekly, rmbiweekly\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"For example: recur/weekly CS1231 project meeting /start 1/10/2019 to 15/11/2019 /from 1500 /to 1700\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    //SHOW"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String SHOW_WORKLOAD_HEADER \u003d \"show/workload\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String SHOW_FILTER_HEADER \u003d \"show/filter\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String HELP_HEADER \u003d \"show/help\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String FIND_TIME_HEADER \u003d \"find/time\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static final String FIND_TIME_KEYWORD_HOUR \u003d \"hour\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static final String FIND_TIME_KEYWORD_HOURS \u003d \"hours\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static final Integer FIND_TIME_LOWER_BOUNDARY \u003d 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static final Integer FIND_TIME_UPPER_BOUNDARY \u003d 16;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String SHOW_PREVIOUS_HEADER \u003d \"show/previous\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String SHOW_WEEK_HEADER \u003d \"show/week\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String SHOW_WORKLOAD_FORMAT \u003d \"OOPS!!! Please enter show workload as follows:\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"show/workload\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String SHOW_FILTER_FORMAT \u003d \" OOPS!!! Please enter filter command as follows\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"show/filter keyword\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static final String SHOW_PREVIOUS_FORMAT \u003d \"Invalid input. Please enter format: show/previous \u003cx\u003e\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \" where x is an integer OR show/previous \u003ccommand type\u003e\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String INVALID_NEGATIVE_NUMBER \u003d \"Invalid Input. Cannot enter negative number. \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"Please enter a valid integer greater than 0\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String INVALID_DECIMAL_NUMBER \u003d \"Please enter an integer for x for the \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"command show/previous \u003cx\u003e.\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String NO_AND_INVALID_COMMAND_TYPE \u003d \"Invalid Input. There is no such \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"command type in previous input\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String INVALID_NUMBER_ZERO \u003d \"Please enter a valid integer greater than 0\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    //RETRIEVE"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String RETRIEVE_TIME_HEADER \u003d \"retrieve/time\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static final Integer RETRIEVE_TIME_LOWER_BOUNDARY \u003d 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static final Integer RETRIEVE_TIME_UPPER_BOUNDARY \u003d 5;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String RETRIEVE_PREVIOUS_HEADER \u003d \"retrieve/previous\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String INVALID_WITHOUT_SPACE \u003d \"There should be a space between the command retrieve/previous\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            + \" and \u003cx\u003e, where x is an integer\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String INVALID_EMPTY_NUMBER \u003d \"\u003cx\u003e cannot be empty. \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"Please enter the valid command as retrieve/previous \u003cx\u003e, \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            + \"where x is an integer.\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String NO_PREVIOUS_COMMAND_TO_GET_LIST \u003d \"You did not enter Show Previous Command yet. \\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"Format: show previous \u003cx\u003e, where x is an integer OR show previous \u003cCommand type\u003e\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String INVALID_STRING_SHOULD_BE_INTEGER \u003d \"The x in retrieve/previous \u003cx\u003e must be an integer \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"and not a string.\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String INVALID_OPTION \u003d \"Invalid option. Please enter the command as follows. \\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"retrieve/time \u003cx\u003e, where x is a digit between 1 - 5, inclusive\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String INVALID_EMPTY_OPTION \u003d \"Invalid input.\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            + \"Option cannot be blank.\\nPlease enter the command as follows.\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"retrieve/time \u003cx\u003e, where x is a digit between 1 - 5, inclusive\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String INVALID_NO_FREE_TIME_FOUND"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            \u003d \"Please find free times by invoking the command shown below\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"find/time \u003cx\u003e hours, where x is a digit between 1 - 16, inclusive\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            + \"Followed by the command\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"retrieve/time \u003cx\u003e, where x is a digit between 1- 5, inclusive\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String STR_RANGE_FOR_FROM \u003d \"Please enter a valid integer x from 1 to \";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String STR_RANGE_FOR_LESS_THAN \u003d \"Please enter a valid number less than or equal to \";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    //FIND"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String INVALID_INPUT \u003d \"Invalid input. Please enter the command as follows. \\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"find/time \u003cx\u003e hours , where x is a digit between 1 - 16, inclusive\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String INVALID_DURATION \u003d \"Invalid duration. Please enter the command as follows. \\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"find/time \u003cx\u003e hours , where x is a digit between 1 - 16, inclusive\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String INVALID_EMPTY_DURATION \u003d \"Invalid input.\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            + \"\\nDuration cannot be blank.\\nPlease enter the command as follows.\\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"find/time \u003cx\u003e hours , where x is a digit between 1 - 16, inclusive\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    //REMIND"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String REMIND_CHECK_HEADER \u003d \"remind/check\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String REMIND_SET_HEADER \u003d \"remind/set\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String REMOVE_REMIND_HEADER \u003d \"remind/rm\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static final String REMIND_SET_KEYWORD \u003d \"/set\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static final String REMIND_CHECK_KEYWORD \u003d \"/check\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static final String REMIND_DATE_DEADLINE_DATE_SPLIT_KEYWORD \u003d \" /on \";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String REMIND_TIME_FORMAT_ERROR \u003d \" OOPS!!! The time of a reminder can only contain digits and\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \" the time has to be 4 digits.\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"Please enter the time in a 24-hour time format\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String REMIND_FORMAT \u003d \"OOPS!!! Please enter remind as follows:\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"remind/(set/rm) mod_code description /by week n.o day time /on week n.o day time\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"For example: remind/set cs2100 hand in homework /by week 9 fri 1500 /on week 9 thu 1500\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String REPEATED_REMINDER \u003d \"You already have a reminder set at that time. \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"Please remove reminder and set again\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    //EXCEPTIONS"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String SAD_FACE \u003d \"\\u2639\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String UNKNOWN_MEANING \u003d \" OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String INVALID_MODCODE_ERROR \u003d \" OOPS!!! The ModCode is invalid\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String INVALID_INPUT_ERROR \u003d \"Invalid input. Please type help to see all commands\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String CONFLICTING_EVENT \u003d \"Sorry, you have conflicting events \\n\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String CONFLICTING_DEADLINE \u003d \"Sorry, you have conflicting deadlines \\n\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String NO_MOD_ERROR \u003d \"Sorry, you have no such mod in the system\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String NO_DATE_ERROR \u003d \"Sorry, you have no such date of the mod in the system\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public static final String MISMATCH_DESCRIPTION \u003d \"Sorry, the description of your task mismatches\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String NO_TASK_TIMING_ERROR \u003d \"Sorry, you have no timing of the task in the system\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String REMINDER_TIME_PASSED_ERROR \u003d \"Sorry, your selected task has already passed!\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String NO_REMINDER_TIME_ERROR \u003d \"Sorry, you have no such reminder at that inputted time.\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String NO_REMINDER_DESCRIPTION_ERROR \u003d \"Sorry, you have no such reminder with \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"inputted description at that time.\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String NO_REMINDER_ERROR \u003d \"Sorry you have no such reminder task with inputted date and time.\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String TASK_TIME_PASSED_ERROR \u003d \"Sorry, you cannot set a time that has already passed!\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String NO_MODULE_ERROR \u003d \"Sorry, you have no such mod entered in your deadline table!\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String NO_TIMING_ERROR \u003d \"Sorry, you have no such timing entered in your deadline table!\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String REMINDER_AFTER_TASK_ERROR \u003d \"Sorry, you cannot set a reminder \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"after the date of the task.\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public static final String INVALID_DATE_ERROR \u003d \"Sorry, please enter the correct date format\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String INVALID_ACADEMIC_YEAR_DATE \u003d \"Sorry, please check if date entered exists or \""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"its in the academic year, or its in the format of DD/MM/YYYY\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static final String HAS_REMINDER_INDICATOR \u003d \"[HR]\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static final String NO_REMINDER_INDICATOR \u003d \"[NR]\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    //WEEK"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static final String INVALID_EMPTY_WEEK \u003d \"Invalid Input.\\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"The week cannot be blank.\\nPlease enter the command as follows.\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"show/week \u003cx\u003e , where x is a digit between 1 - 13, inclusive or \\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"x is either \u0027recess\u0027, \u0027reading\u0027, or \u0027exam\u0027\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static final String INVALID_WEEK \u003d \"Invalid Week. Please enter the command as follows. \\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"show/week \u003cx\u003e , where x is a digit between 1 - 13, inclusive or \\n\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"x is either \u0027recess\u0027, \u0027reading\u0027, or \u0027exam\u0027\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    //MISC"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public static final String BLANK_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public static final String NO_FIELD \u003d \"\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static final String WEEK_FORMAT_KEYWORD_RECESS \u003d \"recess\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static final String WEEK_FORMAT_KEYWORD_READING \u003d \"reading\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static final String WEEK_FORMAT_KEYWORD_EXAM \u003d \"exam\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static final String WEEK_FORMAT_KEYWORD \u003d \"Week\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String BYE_HEADER \u003d \"bye\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static final String DATA_TIME_STRING_TERMINATOR \u003d \")\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static final String DONE_INDICATOR \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static final String NOT_DONE_INDICATOR \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    //DATE"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0325961"
        },
        "content": "    //format date for event"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final SimpleDateFormat EVENT_DATE_INPUT_FORMAT \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0325961"
        },
        "content": "    //format time for event"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final SimpleDateFormat EVENT_TIME_INPUT_FORMAT \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final SimpleDateFormat DAY_DATE_FORMAT \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final SimpleDateFormat TWELVE_HOUR_TIME_FORMAT \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final SimpleDateFormat DEADLINE_INPUT_FORMAT \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static final SimpleDateFormat DEADLINE_DATE_FORMAT \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public static final SimpleDateFormat DAY_FORMAT \u003d new SimpleDateFormat(\"E\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public static final SimpleDateFormat TWENTYFOUR_HOUR_DATE_FORMAT \u003d new SimpleDateFormat(\"E dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public static final int LENGTH_OF_TIME_FORMAT \u003d 4;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    //Storage"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String NO_PRELOAD_EVENT_TXT \u003d \"There is no preload event.txt to read from. Please create one.\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static final String NO_PRELOAD_DEADLINE_TXT \u003d \"There is no preload deadline.txt to read from. \""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + \"Please create one.\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String NO_EVENT_TXT \u003d \"There is no event.txt file to read from. Please create one.\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static final String NO_DEADLINE_TXT \u003d \"There is no deadline.txt file to read from. Please create one.\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static final String DEADLINE_INDICATOR \u003d \"[D]\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static final String EVENT_INDICATOR \u003d \"[E]\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static final String REMINDER_TIME_START_KEYWORD \u003d \"[\u003cR\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static final String REMINDER_TIME_END_KEYWORD \u003d \"/R\u003e]\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 89,
      "lionlim97": 13,
      "0325961": 70,
      "hwbjerry": 35,
      "darrenoje": 11
    }
  },
  {
    "path": "src/main/java/commons/DukeLogger.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Custom log handler solution taken from"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * https://github.com/nusCS2113-AY1920S1/addressbook-level3/blob/master/src/main/java/seedu/address/commons/core/LogsCenter.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Modified to fit BetterDuke"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DukeLogger {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static final String LOG_FILE \u003d System.getProperty(\"user.dir\") + File.separator + \"data\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "            + File.separator + \"dukeLogger.log\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final Logger logger \u003d DukeLogger.getLogger(DukeLogger.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Initializes with a custom log level."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static void initialise() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        fileHandler.setLevel(Level.SEVERE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 81,
      "0325961": 8
    }
  },
  {
    "path": "src/main/java/commons/LookupTable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Lookup table that provides date given week and day."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class LookupTable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(LookupTable.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static LookupTable lookupTable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int LENGTH_OF_LINE \u003d 2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Creates a lookup table object and read from Lookup.txt file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @throws IOException when the Lookup.txt is not found"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private LookupTable() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            InputStream is \u003d this.getClass().getClassLoader().getResourceAsStream(\"documents/Lookup.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            InputStreamReader isr \u003d new InputStreamReader(is);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(isr);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                String[] parts \u003d line.split(\":\", 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                if (parts.length \u003e\u003d LENGTH_OF_LINE) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String key \u003d parts[0].trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String value \u003d parts[1].trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    this.map.put(key.trim().toLowerCase(), value);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            isr.close();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            is.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(\"Lookup.txt not found\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Translate week,day to date."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param weekAndDay week and day of activity in academic calender"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @return date of activity"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public String getValue(String weekAndDay) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return map.get(weekAndDay.toLowerCase().trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Creates a single instance of LookupTable object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static LookupTable getInstance() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (lookupTable \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            synchronized (LookupTable.class) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (lookupTable \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    lookupTable \u003d new LookupTable();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return lookupTable;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 25,
      "lionlim97": 22,
      "0325961": 16,
      "darrenoje": 3,
      "hwbjerry": 2
    }
  },
  {
    "path": "src/main/java/commons/ModCodeChecker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "public class ModCodeChecker {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static HashMap\u003cCharacter, HashMap\u003cCharacter, TreeSet\u003cString\u003e\u003e\u003e mods \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(ModCodeChecker.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static ModCodeChecker modCodeChecker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * Creates a modcode checker object and read from ModCode.txt file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @throws IOException when the ModCode.txt is not found"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private ModCodeChecker() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            InputStream is \u003d this.getClass().getClassLoader().getResourceAsStream(\"documents/ModCode.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            InputStreamReader isr \u003d new InputStreamReader(is);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(isr);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                char firstChar \u003d Character.toLowerCase(line.charAt(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                char secondChar \u003d Character.toLowerCase(line.charAt(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                if (!this.mods.containsKey(firstChar)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    this.mods.put(firstChar, new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    this.mods.get(firstChar).put(secondChar, new TreeSet\u003c\u003e());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    this.mods.get(firstChar).get(secondChar).add(line.toLowerCase());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                } else if (!this.mods.get(firstChar).containsKey(secondChar)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    this.mods.get(firstChar).put(secondChar, new TreeSet\u003c\u003e());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    this.mods.get(firstChar).get(secondChar).add(line.toLowerCase());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    this.mods.get(firstChar).get(secondChar).add(line.toLowerCase());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            isr.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            is.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(\"ModCode.txt not found\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method checks if user inputted modCode exist."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param modCode The string of mod code"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @return true if modCode exist"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public boolean isModCode(String modCode) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        modCode \u003d modCode.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        char firstChar \u003d Character.toLowerCase(modCode.charAt(0));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        char secondChar \u003d Character.toLowerCase(modCode.charAt(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (!mods.containsKey(firstChar)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else if (!mods.get(firstChar).containsKey(secondChar)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else if (!mods.get(firstChar).get(secondChar).contains(modCode.toLowerCase())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * Creates a single instance of ModCodeChecker object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public static ModCodeChecker getInstance() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (modCodeChecker \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            synchronized (ModCodeChecker.class) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                if (modCodeChecker \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    modCodeChecker \u003d new ModCodeChecker();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return modCodeChecker;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 6,
      "darrenoje": 75
    }
  },
  {
    "path": "src/main/java/commons/PreloadStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeIOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Deals with pre-loading the jar file with tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class PreloadStorage extends Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(PreloadStorage.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Reads and populates the TaskList of events from preloadevent.txt."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param list TaskList of events"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws DukeIOException when preloadevent.txt is not found"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void readEventList(TaskList list) throws DukeIOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "            InputStream inputStream \u003d this.getClass().getClassLoader().getResourceAsStream(\"documents/\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    + \"preloadevent.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                list.addTask(super.stringToTask(line));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(\"There is no event.txt to read from.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "            throw new DukeIOException(DukeConstants.NO_PRELOAD_EVENT_TXT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Reads and populates the TaskList of deadlines from preloaddeadline.txt."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param list TaskList of deadlines"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws DukeIOException when preloaddeadline.txt is not found"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void readDeadlineList(TaskList list) throws DukeIOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "            InputStream inputStream \u003d this.getClass().getClassLoader().getResourceAsStream(\"documents/\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    + \"preloaddeadline.txt\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                list.addTask(super.stringToTask(line));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            inputStreamReader.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            inputStream.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(\"There is no event.txt to read from.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0325961"
        },
        "content": "            throw new DukeIOException(DukeConstants.NO_PRELOAD_DEADLINE_TXT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 50,
      "0325961": 15
    }
  },
  {
    "path": "src/main/java/commons/Reminder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import userinterface.AlertBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import org.controlsfx.control.Notifications;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class sets or removes a reminder thread."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class Reminder {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Timer timer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cDate, Timer\u003e timerMap;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cDate, Assignment\u003e remindMap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Image img;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList deadlines;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates reminder object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Reminder() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timerMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        remindMap \u003d storage.getReminderMap();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Removes thread and sets the reminder to false for update."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param task Task with reminder set"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param date Date of reminder"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param reminderTime String version of the date of reminder"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void removeTimerTask(Assignment task, Date date, String reminderTime) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timerMap.get(date).cancel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timerMap.remove(date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlines.setReminder(task, reminderTime, false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        remindMap.remove(date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Set the TaskList object of deadlines from Duke and RemindCommand."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setDeadlines(TaskList deadlines) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.deadlines \u003d deadlines;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * This method retrieves the remindMap."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public HashMap\u003cDate, Assignment\u003e getRemindMap() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.remindMap;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays on application launch if reminders were set before application was closed previously."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void reminderOnStartAlert() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        AlertBox.display(\"Reminder!!!\", \"\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                \"Your previous reminders have been automatically set. To see more, please type remind/check\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates a new thread when a reminder is set."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param date The time set for the thread to run"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param task The task where the reminder would be set"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws DukeException On invalid date parameter"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setReminderThread(Date date, Assignment task) throws DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (timerMap.containsKey(date)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0325961"
        },
        "content": "            throw new DukeInvalidDateTimeException(DukeConstants.REPEATED_REMINDER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        img \u003d new Image(\"/images/DaDuke.png\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String reminderTime \u003d DukeConstants.DEADLINE_DATE_FORMAT.format(date);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        long seconds \u003d date.getTime() - currentDate.getTime();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlines.setReminder(task, reminderTime, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timer \u003d new Timer();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timer.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Stage owner \u003d new Stage(StageStyle.TRANSPARENT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    StackPane root \u003d new StackPane();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    root.setStyle(\"-fx-background-color: TRANSPARENT\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Scene scene \u003d new Scene(root, 1, 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    scene.setFill(Color.TRANSPARENT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    owner.setScene(scene);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    owner.setWidth(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    owner.setHeight(1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    owner.toBack();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    owner.show();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Notifications notificationBuilder \u003d Notifications.create()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .title(\"REMINDER!!!\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .graphic(new ImageView(img))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .text(task.getModCode() + \" \" + task.getDescription() + \"\\n\" + task.getDateTime())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .darkStyle()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .position(Pos.BOTTOM_RIGHT)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .hideAfter(Duration.INDEFINITE)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .onAction(event -\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                                owner.close();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    notificationBuilder.show();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    timer.cancel();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    deadlines.setReminder(task, reminderTime, false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    remindMap.remove(date);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                });"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }, seconds);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timerMap.put(date, timer);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        remindMap.put(date, task);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 125,
      "0325961": 9,
      "darrenoje": 1
    }
  },
  {
    "path": "src/main/java/commons/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeIOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Deals with loading or saving tasks to and from a file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private File filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String filePathEvent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String filePathDeadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Reminder reminder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private LookupTable lookupTable \u003d LookupTable.getInstance();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(Storage.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e map;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cDate, Assignment\u003e reminderMap;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final int LENGTH_TO_DATE \u003d 4;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final int LENGTH_TO_REMINDER_DATE \u003d 3;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final int LENGTH_TO_DESCRIPTION \u003d 5;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final int LENGTH_TO_START_TIME \u003d 6;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final int LENGTH_TO_END_MODCODE \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final int LENGTH_TO_END_DESCRIPTION \u003d 2;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final int START_OF_DATA_STRING \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final String DEADLINE_DATA_DATE_START_KEYWORD \u003d \"by:\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final String EVENT_DATA_DATE_START_KEYWORD \u003d \"at:\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final String EVENT_DATA_TIME_START_KEYWORD \u003d \"time:\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final String EVENT_DATA_TIME_END_KEYWORD \u003d \"to:\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private final String[] deadlineDelimiter \u003d {\"[D]\", \"by:\", \"[\u003cR\", \"/R\u003e]\"};"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private final String[] eventDelimiter \u003d {\"[E]\", \"at:\", \"time:\", \"[\u003cR\", \"/R\u003e]\", \"to:\"};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates Storage object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        filePath \u003d new File(System.getProperty(\"user.dir\") + File.separator + \"data\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        filePath.mkdir();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        filePathEvent \u003d System.getProperty(\"user.dir\") + File.separator + \"data\" + File.separator + \"event.txt\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        filePathDeadline \u003d System.getProperty(\"user.dir\") + File.separator + \"data\" + File.separator + \"deadline.txt\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminderMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Sets the reminder object in Storage as the one in Duke."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param reminder reminder object from duke"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setReminderObject(Reminder reminder) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Retrieves the reminder object from Storage, which is the same as reminder object in Duke."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Reminder getReminderObject() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.reminder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Saves the TaskList of events into event.txt."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param list TaskList of events"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void updateEventList(TaskList list) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        PrintWriter outputStream \u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            outputStream \u003d new PrintWriter(filePathEvent, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(\"event.txt file not found\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        map \u003d list.getMap();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Set\u003cString\u003e allMods \u003d map.keySet();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (String mod : allMods) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Set\u003cString\u003e allDates \u003d map.get(mod).keySet();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            for (String date : allDates) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                ArrayList\u003cAssignment\u003e temp \u003d map.get(mod).get(date);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for (Assignment task : temp) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    outputStream.println(task.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        outputStream.close();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Reads and populates the TaskList of events from event.txt."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param list TaskList of events"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws DukeIOException when event.txt is not found"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void readEventList(TaskList list) throws DukeIOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cString\u003e temp;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            File eventFile \u003d new File(filePathEvent);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            eventFile.createNewFile();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            temp \u003d new ArrayList\u003c\u003e(Files.readAllLines(Paths.get(filePathEvent)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(\"There is no event.txt to read from\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0325961"
        },
        "content": "            throw new DukeIOException(DukeConstants.NO_EVENT_TXT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (String string : temp) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (string.isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            boolean isValid \u003d true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            for (int i \u003d 0; i \u003c eventDelimiter.length; i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if (!string.contains(eventDelimiter[i])) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    isValid \u003d false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (isValid) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Assignment task \u003d stringToTask(string);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (task \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                list.addTask(task);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Saves the TaskList of deadlines into deadline.txt."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param list TaskList of deadlines"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void updateDeadlineList(TaskList list) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        PrintWriter outputStream \u003d null;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            outputStream \u003d new PrintWriter(filePathDeadline, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(\"deadline.txt not found\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        map \u003d list.getMap();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Set\u003cString\u003e allMods \u003d map.keySet();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (String mod : allMods) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Set\u003cString\u003e allDates \u003d map.get(mod).keySet();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            for (String date : allDates) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                ArrayList\u003cAssignment\u003e temp \u003d map.get(mod).get(date);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for (Assignment task : temp) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    outputStream.println(task.toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        outputStream.close();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Reads and populates the TaskList of deadlines from deadline.txt."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param list TaskList of deadlines"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws DukeIOException when deadline.txt is not found"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void readDeadlineList(TaskList list) throws DukeIOException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cString\u003e temp;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            File deadlineFile \u003d new File(filePathDeadline);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            deadlineFile.createNewFile();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            temp \u003d new ArrayList\u003c\u003e(Files.readAllLines(Paths.get(filePathDeadline)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(\"There is no deadline.txt to read from\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0325961"
        },
        "content": "            throw new DukeIOException(DukeConstants.NO_DEADLINE_TXT);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (String string : temp) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            boolean isValid \u003d true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            for (int i \u003d 0; i \u003c deadlineDelimiter.length; i++) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if (!string.contains(deadlineDelimiter[i])) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    isValid \u003d false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (isValid) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Assignment task \u003d stringToTask(string);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (task \u003d\u003d null) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                list.addTask(task);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (task.getIsReminder()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date date \u003d null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        date \u003d DukeConstants.DEADLINE_DATE_FORMAT.parse(task.getRemindTime());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    } catch (ParseException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        logger.severe(\"Reminder time is wrongly recorded\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    reminderMap.put(date, task);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Retrieves reminderMap."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public HashMap\u003cDate, Assignment\u003e getReminderMap() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.reminderMap;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    protected Assignment stringToTask(String string) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Assignment line \u003d null;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (string.contains(DukeConstants.DEADLINE_INDICATOR)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String dateFromData \u003d string.substring(string.indexOf(DEADLINE_DATA_DATE_START_KEYWORD)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        + LENGTH_TO_DATE, string.indexOf(DukeConstants.DATA_TIME_STRING_TERMINATOR)).trim();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String remindTime \u003d string.substring(string.indexOf(DukeConstants.REMINDER_TIME_START_KEYWORD)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        + LENGTH_TO_REMINDER_DATE, string.indexOf(DukeConstants.REMINDER_TIME_END_KEYWORD));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Date date \u003d DukeConstants.DEADLINE_DATE_FORMAT.parse(dateFromData);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String dateString \u003d DukeConstants.DAY_DATE_FORMAT.format(date);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String timeString \u003d DukeConstants.TWELVE_HOUR_TIME_FORMAT.format(date);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String modCode \u003d string.substring(START_OF_DATA_STRING, string.indexOf(DukeConstants.DEADLINE_INDICATOR)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        - LENGTH_TO_END_MODCODE);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String description \u003d string.substring(string.indexOf(DukeConstants.REMINDER_TIME_END_KEYWORD)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        + LENGTH_TO_DESCRIPTION, string.indexOf(DEADLINE_DATA_DATE_START_KEYWORD)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        - LENGTH_TO_END_DESCRIPTION);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                line \u003d new Deadline(modCode + DukeConstants.BLANK_SPACE + description, dateString, timeString);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                line.setRemindTime(remindTime);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String dateFromData \u003d string.substring(string.indexOf(EVENT_DATA_DATE_START_KEYWORD) + LENGTH_TO_DATE,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        string.indexOf(EVENT_DATA_TIME_START_KEYWORD)).trim();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String startTimeFromData \u003d string.substring(string.indexOf(EVENT_DATA_TIME_START_KEYWORD)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        + LENGTH_TO_START_TIME, string.indexOf(EVENT_DATA_TIME_END_KEYWORD));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String endTimeFromData \u003d string.substring(string.indexOf(EVENT_DATA_TIME_END_KEYWORD)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        + LENGTH_TO_REMINDER_DATE, string.indexOf(DukeConstants.DATA_TIME_STRING_TERMINATOR)).trim();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Date startTime \u003d DukeConstants.TWELVE_HOUR_TIME_FORMAT.parse(startTimeFromData);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Date endTime \u003d DukeConstants.TWELVE_HOUR_TIME_FORMAT.parse(endTimeFromData);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Date date \u003d DukeConstants.DAY_DATE_FORMAT.parse(dateFromData);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String dateString \u003d DukeConstants.DAY_DATE_FORMAT.format(date);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String startTimeString \u003d DukeConstants.TWELVE_HOUR_TIME_FORMAT.format(startTime);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String endTimeString \u003d DukeConstants.TWELVE_HOUR_TIME_FORMAT.format(endTime);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String modCode \u003d string.substring(START_OF_DATA_STRING, string.indexOf(DukeConstants.EVENT_INDICATOR)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        - LENGTH_TO_END_MODCODE);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String description \u003d string.substring(string.indexOf(DukeConstants.REMINDER_TIME_END_KEYWORD)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        + LENGTH_TO_DESCRIPTION, string.indexOf(EVENT_DATA_DATE_START_KEYWORD)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        - LENGTH_TO_END_DESCRIPTION);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0325961"
        },
        "content": "                line \u003d new Event(modCode + DukeConstants.BLANK_SPACE + description, dateString,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        startTimeString, endTimeString);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (string.contains(DukeConstants.DONE_INDICATOR)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                line.setDone(true);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (string.contains(DukeConstants.HAS_REMINDER_INDICATOR)) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                line.setReminder(true);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String taskDateString \u003d line.getDate();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Date taskDate \u003d DukeConstants.DAY_DATE_FORMAT.parse(taskDateString);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            taskDateString \u003d DukeConstants.EVENT_DATE_INPUT_FORMAT.format(taskDate);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String nullChecker \u003d lookupTable.getValue(taskDateString);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (nullChecker \u003d\u003d null) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "0325961"
        },
        "content": "                logger.severe(\"Date does not exist in LookupTable. Check date again\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (ParseException | StringIndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(\"Unable to parse data from event.txt or deadline.txt\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Starts the thread on existing reminders set from deadline.txt."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws DukeInvalidDateTimeException On setReminderThread invalid date parameter"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setReminderOnStart() throws DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Set\u003cDate\u003e dateKey \u003d reminderMap.keySet();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Date date : dateKey) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Date remindDate \u003d new Date();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Assignment task \u003d reminderMap.get(date);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String remindTime \u003d task.getRemindTime();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                remindDate \u003d DukeConstants.DEADLINE_DATE_FORMAT.parse(remindTime);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "0325961"
        },
        "content": "                logger.severe(\"Reminder date is wrong in deadline.txt. Unable to parse\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (remindDate.after(currentDate)) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                reminder.setReminderThread(remindDate, task);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (!reminderMap.isEmpty()) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            reminder.reminderOnStartAlert();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 2,
      "lionlim97": 225,
      "0325961": 47,
      "hwbjerry": 19,
      "darrenoje": 1
    }
  },
  {
    "path": "src/main/java/commons/UserInteraction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Represents the user interface which displays the messages to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * respond to the user based on the user\u0027s input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class UserInteraction {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String NO_FIELD \u003d \"void\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String byeMessage \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays the exit message when Duke Program ends."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showBye() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return byeMessage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays add task message when user wants to add a task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showAdd(Assignment task, int listSize) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\" + task.displayString() + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                + \"Now you have \" + listSize + (listSize \u003e 1 ? \" tasks in the list.\\n\" : \" task in the list.\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays done task message when user marks a task as done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showDone(Assignment task) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n\" + task.displayString() + \"\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays the delete task message when user wants to delete a task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showDelete(Assignment task, int listSize) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\" + task.displayString() + \"\\n\" + \"Now you have \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                + listSize  + (listSize \u003e 1 ? \" tasks in the list.\\n\" : \" task in the list.\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Displays the free time found with the template to be shown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param message The free times found"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The output to be shown to the user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String showFreeTimes(String message) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return (\"You are available at: \\n\" + message);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Displays the invalid chosen duration message."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param message The chosen free time"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The invalid free time with the proper format"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String showFreeTimesInvalidDuration(String message) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return \"Invalid duration\\n\" + \"Please enter the command in the format:\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0325961"
        },
        "content": "                + \"find \u0027x\u0027 hours, where \u0027x\u0027 is between 1 - 16\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String showSelectionOption(Integer option, String selectedOption) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return \"Selected option \" + option + \":\\n\" + selectedOption;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Displays the message which shows the list of reminders for all the tasks."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showListOfReminder(ArrayList\u003cString\u003e remindList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (remindList.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return \"There are no reminders set.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String remindMessage \u003d \"Here is the list of reminders set:\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (String string : remindList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            remindMessage \u003d remindMessage + \"\\n\\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Integer index \u003d remindList.indexOf(string);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            remindMessage \u003d remindMessage + (index + 1) + \". \" + string;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return remindMessage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays the show reminder message when user sets a reminder for a task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showReminder(Assignment task, String time) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"Reminder has been set for \" + task.getModCode() + \" \" + task.getDescription() + \"at: \" + time;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays the show cancel reminder message when user sets a reminder for a task."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showCancelReminder(Assignment task, String time) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"Reminder has been removed for \" + task.getModCode() + \" \" + task.getDescription() + \"on: \" + time;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays the error message if a file is not found."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showLoadingError(Exception e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"File not found\" + e.getMessage() + \"\\n\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays any of the DukeException error message caught throughout the program."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getError(Exception e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return e.getMessage() + \"\\n\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Display recurring tasks that are added."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param description description of recurring task"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param startDate start of recurrence"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param endDate end of recurrence"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public String showRecurring(String description, String startDate, String endDate,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0325961"
        },
        "content": "                                boolean isBiweekly, boolean isRecur) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (isRecur \u0026\u0026 isBiweekly) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return \"Biweekly recurring task: \" + description + \" has been added between \" + startDate"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    + \" and \" + endDate + \"\\n\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else if (isRecur) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return \"Weekly recurring task: \" + description + \" has been added between \" + startDate"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    + \" and \" + endDate + \"\\n\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else if (isBiweekly) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return \"Biweekly recurring task: \" + description + \" has been removed between \" + startDate"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    + \" and \" + endDate + \"\\n\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return \"Weekly recurring task: \" + description + \" has been removed between \" + startDate"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    + \" and \" + endDate + \"\\n\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Displays conflicting recurring task."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param conflictList The list of conflicting tasks"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public String showConflictRecurring(ArrayList\u003cString\u003e conflictList) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String out \u003d \"Sorry, you have conflicting events \\n\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        for (int i \u003d 0; i \u003c conflictList.size(); i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            out +\u003d (i + 1) + \". \" + conflictList.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Display task with instance of keyword."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param list List of task with keyword"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param keyword keyword entered by user"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String showFilter(ArrayList\u003cString\u003e list,String keyword) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            return \"There are no task(s) matching your keyword.\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            String message \u003d \"Here are the following events/deadline with the keyword \" + keyword + \"\\n\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                message +\u003d  i + \". \" + list.get(i - 1) + \"\\n\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Display a guide to commands."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String showHelp(String help) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return help;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Display recommended weekly workload."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param workloadMap map of weekly workload"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @return This returns the string of workload"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @throws ParseException on wrong date format"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public String showWorkload(TreeMap\u003cString, ArrayList\u003cAssignment\u003e\u003e workloadMap, String workloadWeek)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0325961"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String workloadSchedule \u003d \"Here is your recommended schedule for \" + workloadWeek + \":\\n\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (workloadMap.isEmpty()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return \"You have no tasks scheduled for \" + workloadWeek + \"!\\n\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            for (Map.Entry\u003cString, ArrayList\u003cAssignment\u003e\u003e workload: workloadMap.entrySet()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                Date tempDay \u003d DukeConstants.EVENT_DATE_INPUT_FORMAT.parse(workload.getKey());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                String day \u003d DukeConstants.DAY_FORMAT.format(tempDay);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                workloadSchedule \u003d workloadSchedule + day + \": \\n\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for (Assignment task: workload.getValue()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    workloadSchedule \u003d workloadSchedule + task.getType() + \" \" + task.getModCode() + \" \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            + task.getDescription() + \"\\n\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return workloadSchedule;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Display the previous list of commands requested by the user."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param outputList list of all the commands user request"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return the list requested by user"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public String showPrevious(ArrayList\u003cString\u003e outputList) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int size \u003d outputList.size();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (size \u003d\u003d 0) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0325961"
        },
        "content": "            String message \u003d \"There are no such input type in previous command\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0325961"
        },
        "content": "            String output \u003d \"\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0325961"
        },
        "content": "            for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0325961"
        },
        "content": "                output +\u003d (i + 1) + \". \" + outputList.get(i);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Display the chosen previous input requested by the user."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public String showChosenPreviousChoice(String chosenInput) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String message \u003d \"Your chosen previous input is: \\n\" + chosenInput;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 31,
      "lionlim97": 79,
      "0325961": 56,
      "darrenoje": 37,
      "hwbjerry": 23
    }
  },
  {
    "path": "src/main/java/commons/WeekList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class WeekList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ObservableList\u003cText\u003e monList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ObservableList\u003cText\u003e tueList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ObservableList\u003cText\u003e wedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ObservableList\u003cText\u003e thuList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ObservableList\u003cText\u003e friList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ObservableList\u003cText\u003e satList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ObservableList\u003cText\u003e sunList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public WeekList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method constructs WeekList class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param monList The list of events on monday"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param tueList The list of events on tuesday"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param wedList The list of events on wednesday"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param thuList The list of events on thursday"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param friList The list of events on friday"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param satList The list of events on saturday"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param sunList The list of events on sunday"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public WeekList(ObservableList\u003cText\u003e monList, ObservableList\u003cText\u003e tueList, ObservableList\u003cText\u003e wedList,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    ObservableList\u003cText\u003e thuList, ObservableList\u003cText\u003e friList, ObservableList\u003cText\u003e satList,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    ObservableList\u003cText\u003e sunList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.monList \u003d monList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.tueList \u003d tueList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.wedList \u003d wedList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.thuList \u003d thuList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.friList \u003d friList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.satList \u003d satList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.sunList \u003d sunList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public ObservableList\u003cText\u003e getMonList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return monList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public ObservableList\u003cText\u003e getTueList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return tueList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public ObservableList\u003cText\u003e getWedList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return wedList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public ObservableList\u003cText\u003e getThuList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return thuList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public ObservableList\u003cText\u003e getFriList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return friList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public ObservableList\u003cText\u003e getSatList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return satList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public ObservableList\u003cText\u003e getSunList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return sunList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "0325961": 1,
      "hwbjerry": 67
    }
  },
  {
    "path": "src/main/java/dukeexceptions/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Represents the exception specifically catered to Duke program should any error occur."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 2,
      "0325961": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/java/dukeexceptions/DukeIOException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Represents the exception specifically catered to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * IO exception occurring in Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DukeIOException extends IOException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public DukeIOException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 13,
      "0325961": 1
    }
  },
  {
    "path": "src/main/java/dukeexceptions/DukeInvalidCommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Represents the exception specifically catered to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * invalid command input by user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DukeInvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public DukeInvalidCommandException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 10,
      "0325961": 1
    }
  },
  {
    "path": "src/main/java/dukeexceptions/DukeInvalidDateTimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Represents the exception specifically catered to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * invalid date and time input by user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DukeInvalidDateTimeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public DukeInvalidDateTimeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 10,
      "0325961": 1
    }
  },
  {
    "path": "src/main/java/dukeexceptions/DukeInvalidFormatException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Represents the exception specifically catered to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * wrong command format input by user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DukeInvalidFormatException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public DukeInvalidFormatException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 11,
      "0325961": 1
    }
  },
  {
    "path": "src/main/java/dukeexceptions/DukeNoValidDataException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package dukeexceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " * Represents the exception specifically catered to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " * no valid data found to support command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class DukeNoValidDataException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public DukeNoValidDataException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 1,
      "hwbjerry": 10
    }
  },
  {
    "path": "src/main/java/parser/AddParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.ModCodeChecker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Parse Addcommand for event and deadline and return formatted command to Parser."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class AddParse extends Parse {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String[] modCodeAndDescriptionAndDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String[] modCodeAndDescriptionSplit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static String fullCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(AddParse.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private ModCodeChecker modCodeChecker \u003d ModCodeChecker.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates AddParse object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param fullCommand The entire command that calls for AddParse."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public AddParse(String fullCommand)  {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This executes the date processing of add command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @return Command which represents the parsed Addcommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @throws Exception Returned if command does not adhere to format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public Command parse() throws DukeInvalidFormatException, DukeInvalidCommandException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": "            DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (fullCommand.trim().startsWith(DukeConstants.ADD_DEADLINE_HEADER)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String activity \u003d fullCommand.trim().replaceFirst(DukeConstants.ADD_DEADLINE_HEADER,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                modCodeAndDescriptionAndDate \u003d activity.split(DukeConstants.DEADLINE_DATE_DESCRIPTION_SPLIT_KEYWORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                modCodeAndDescriptionSplit \u003d modCodeAndDescriptionAndDate[0].trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String fullDescriptionAndModCode \u003d modCodeAndDescriptionAndDate[0].trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!super.isValidModCodeAndDescription(fullDescriptionAndModCode)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.DEADLINE_EMPTY_MODCODE_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String modCode \u003d modCodeAndDescriptionSplit[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                if (!modCodeChecker.isModCode(modCode)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE + DukeConstants.INVALID_MODCODE_ERROR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!super.isValidDescription(modCodeAndDescriptionSplit)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.DEADLINE_EMPTY_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String timePeriod \u003d modCodeAndDescriptionAndDate[1];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!super.isValidTime(timePeriod)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.DEADLINE_TIME_FORMAT_ERROR);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String deadlineDate \u003d modCodeAndDescriptionAndDate[1];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String[] out \u003d DateTimeParser.deadlineParse(deadlineDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String date \u003d out[0];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String time \u003d out[1];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                return new AddCommand(new Deadline(fullDescriptionAndModCode, date, time));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0325961"
        },
        "content": "                logger.severe(\"Invalid format for adding deadline\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.DEADLINE_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if (fullCommand.trim().startsWith(DukeConstants.ADD_EVENT_HEADER)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String activity \u003d fullCommand.trim().replaceFirst(DukeConstants.ADD_EVENT_HEADER,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                modCodeAndDescriptionAndDate \u003d activity.split(DukeConstants.EVENT_DATE_DESCRIPTION_SPLIT_KEYWORD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                modCodeAndDescriptionSplit \u003d modCodeAndDescriptionAndDate[0].trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String fullDescriptionAndModCode \u003d modCodeAndDescriptionAndDate[0].trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!super.isValidModCodeAndDescription(fullDescriptionAndModCode)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.EVENT_EMPTY_MODCODE_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String modCode \u003d modCodeAndDescriptionSplit[0];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                if (!modCodeChecker.isModCode(modCode)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.INVALID_MODCODE_ERROR);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!super.isValidDescription(modCodeAndDescriptionSplit)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.EVENT_EMPTY_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String timePeriod \u003d modCodeAndDescriptionAndDate[1];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!super.isValidTimePeriod(timePeriod)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.EVENT_TIME_FORMAT_ERROR);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String eventDate \u003d modCodeAndDescriptionAndDate[1];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String[] out \u003d DateTimeParser.eventParse(eventDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String date \u003d out[0];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String startTime \u003d out[1];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String endTime \u003d out[2];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                return new AddCommand(new Event(fullDescriptionAndModCode, date, startTime, endTime));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0325961"
        },
        "content": "                logger.severe(\"Invalid format for adding event\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.EVENT_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeInvalidCommandException(DukeConstants.SAD_FACE + DukeConstants.UNKNOWN_MEANING);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 35,
      "lionlim97": 37,
      "0325961": 38,
      "darrenoje": 7
    }
  },
  {
    "path": "src/main/java/parser/DateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class parses all date and time for BetterDuke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " **/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String[] dateTimeStringSplit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String[] dateStringSplit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String[] timeStringSplit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Parses any date that is tagged with event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param input The date input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return The String array containing all the dates."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws ParseException On wrong date format to parse."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static String[] eventParse(String input) throws ParseException, DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateTimeStringSplit \u003d input.trim().split(DukeConstants.EVENT_DATE_SPLIT_KEYWORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String weekDate \u003d DukeConstants.NO_FIELD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateStringSplit \u003d dateTimeStringSplit[0].trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        weekDate \u003d dateStringSplit[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String dateOfTask \u003d dateTimeStringSplit[0].trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        weekDate \u003d WeekFormatParse.acadWeekToString(weekDate, dateOfTask);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        Date date \u003d DukeConstants.EVENT_DATE_INPUT_FORMAT.parse(weekDate.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        timeStringSplit \u003d dateTimeStringSplit[1].split(DukeConstants.EVENT_TIME_SPLIT_KEYWORD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String startTimeOfTask \u003d timeStringSplit[0].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        Date startTime \u003d DukeConstants.EVENT_TIME_INPUT_FORMAT.parse(startTimeOfTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String endTimeOfTask \u003d timeStringSplit[1].trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        Date endTime \u003d DukeConstants.EVENT_TIME_INPUT_FORMAT.parse(endTimeOfTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String dateString \u003d DukeConstants.DAY_DATE_FORMAT.format(date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String startTimeString \u003d DukeConstants.TWELVE_HOUR_TIME_FORMAT.format(startTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String endTimeString \u003d DukeConstants.TWELVE_HOUR_TIME_FORMAT.format(endTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String[] out \u003d {dateString,startTimeString,endTimeString};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Parses any date that is tagged with deadline."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param input The date input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return The String array containing all the dates."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws ParseException On wrong date format to parse."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static String[] deadlineParse(String input) throws ParseException, DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateTimeStringSplit \u003d input.trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String weekDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String commandSplit;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateStringSplit \u003d dateTimeStringSplit[0].trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        weekDate \u003d dateStringSplit[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        int dateOfTask \u003d  input.length() - DukeConstants.LENGTH_OF_TIME_FORMAT;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        commandSplit \u003d input.substring(0, dateOfTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        weekDate \u003d WeekFormatParse.acadWeekToString(weekDate,commandSplit.trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String time \u003d input.substring(dateOfTask).trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        weekDate \u003d weekDate.trim() + DukeConstants.BLANK_SPACE + time;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        Date date \u003d DukeConstants.DEADLINE_INPUT_FORMAT.parse(weekDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String dateString \u003d DukeConstants.DAY_DATE_FORMAT.format(date);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String timeString \u003d DukeConstants.TWELVE_HOUR_TIME_FORMAT.format(date);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String[] out \u003d {dateString, timeString};"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Parses any date that is tagged as recurring."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param input The date input"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return The String array containing all the dates."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws ParseException On wrong date format to parse."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public static String[] recurringEventParse(String input) throws ParseException, DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateTimeStringSplit \u003d input.trim().split(DukeConstants.EVENT_DATE_SPLIT_KEYWORD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateStringSplit \u003d dateTimeStringSplit[0].split(DukeConstants.EVENT_TIME_SPLIT_KEYWORD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] startDateStringSplit \u003d dateStringSplit[0].trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String startWeekDate \u003d startDateStringSplit[0].trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String startDateOfTask \u003d dateStringSplit[0].trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        startWeekDate \u003d WeekFormatParse.acadWeekToString(startWeekDate, startDateOfTask);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] endDateStringSplit \u003d dateStringSplit[1].trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String endWeekDate \u003d endDateStringSplit[0].trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String endDateOfTask \u003d dateStringSplit[1].trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        endWeekDate \u003d WeekFormatParse.acadWeekToString(endWeekDate, endDateOfTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        Date startDate \u003d DukeConstants.EVENT_DATE_INPUT_FORMAT.parse(startWeekDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        Date endDate \u003d DukeConstants.EVENT_DATE_INPUT_FORMAT.parse(endWeekDate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String startDateString \u003d DukeConstants.DAY_DATE_FORMAT.format(startDate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String endDateString \u003d DukeConstants.DAY_DATE_FORMAT.format(endDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        timeStringSplit \u003d dateTimeStringSplit[1].split(DukeConstants.EVENT_TIME_SPLIT_KEYWORD);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String startTimeOfTask \u003d timeStringSplit[0].trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        Date startTime \u003d DukeConstants.EVENT_TIME_INPUT_FORMAT.parse(startTimeOfTask);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String endTimeOfTask \u003d timeStringSplit[1].trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        Date endTime \u003d DukeConstants.EVENT_TIME_INPUT_FORMAT.parse(endTimeOfTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String startTimeString \u003d DukeConstants.TWELVE_HOUR_TIME_FORMAT.format(startTime);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String endTimeString \u003d DukeConstants.TWELVE_HOUR_TIME_FORMAT.format(endTime);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] out \u003d {startDateString, endDateString, startTimeString, endTimeString};"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Parses any date that is tagged with reminder."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param input The date input"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return The String array containing all the dates."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws ParseException On wrong date format to parse."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public static String[] remindDateParse(String input) throws ParseException, DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateTimeStringSplit \u003d input.trim().split(DukeConstants.REMIND_DATE_DEADLINE_DATE_SPLIT_KEYWORD);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] taskDateTimeStringSplit \u003d dateTimeStringSplit[0].trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String weekDate \u003d taskDateTimeStringSplit[0].trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        int deadlineDateLength \u003d dateTimeStringSplit[0].length() - DukeConstants.LENGTH_OF_TIME_FORMAT;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String deadlineDate \u003d dateTimeStringSplit[0].substring(0, deadlineDateLength);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlineDate \u003d WeekFormatParse.acadWeekToString(weekDate, deadlineDate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String time \u003d dateTimeStringSplit[0].substring(deadlineDateLength);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlineDate \u003d deadlineDate + time;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] reminderDateTimeStringSplit \u003d dateTimeStringSplit[1].trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        weekDate \u003d reminderDateTimeStringSplit[0].trim();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        int reminderDateLength \u003d dateTimeStringSplit[1].length() - DukeConstants.LENGTH_OF_TIME_FORMAT;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String reminderDate \u003d dateTimeStringSplit[1].substring(0, reminderDateLength);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminderDate \u003d WeekFormatParse.acadWeekToString(weekDate, reminderDate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        time \u003d dateTimeStringSplit[1].substring(reminderDateLength);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminderDate \u003d reminderDate + time;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        Date dateOfTask \u003d DukeConstants.DEADLINE_INPUT_FORMAT.parse(deadlineDate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String dateString \u003d DukeConstants.DAY_DATE_FORMAT.format(dateOfTask);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String timeString \u003d DukeConstants.TWELVE_HOUR_TIME_FORMAT.format(dateOfTask);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String[] dateTime \u003d {dateString, timeString, reminderDate};"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static Date deadlineInputStringToDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return DukeConstants.DEADLINE_INPUT_FORMAT.parse(date);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static Date deadlineTaskStringToDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return DukeConstants.DEADLINE_DATE_FORMAT.parse(date);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 35,
      "lionlim97": 39,
      "0325961": 5,
      "darrenoje": 59
    }
  },
  {
    "path": "src/main/java/parser/DeleteParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.ModCodeChecker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": " * This class parses the full command that calls for DeleteParse."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class DeleteParse extends Parse {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String[] modCodeAndDescriptionAndDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String[] modCodeAndDescriptionSplit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static String fullCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(DeleteParse.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private ModCodeChecker modCodeChecker \u003d ModCodeChecker.getInstance();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates a DeleteParse object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param fullCommand The full command that calls for DeleteParse"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public DeleteParse(String fullCommand) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This executes the data processing for DeleteParse."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return Command which represents the parsed DeleteCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @throws Exception Returned if command does not adhere to format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public Command parse() throws DukeInvalidFormatException, DukeInvalidCommandException,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "            DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (fullCommand.trim().startsWith(DukeConstants.DELETE_EVENT_HEADER)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String activity \u003d fullCommand.trim().replaceFirst(DukeConstants.DELETE_EVENT_HEADER,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                modCodeAndDescriptionAndDate \u003d activity.split(DukeConstants.EVENT_DATE_DESCRIPTION_SPLIT_KEYWORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                modCodeAndDescriptionSplit \u003d modCodeAndDescriptionAndDate[0].trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String fullDescriptionAndModCode \u003d modCodeAndDescriptionAndDate[0].trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!super.isValidModCodeAndDescription(fullDescriptionAndModCode)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.EVENT_EMPTY_MODCODE_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String modCode \u003d modCodeAndDescriptionSplit[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                if (!modCodeChecker.isModCode(modCode)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.INVALID_MODCODE_ERROR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!super.isValidDescription(modCodeAndDescriptionSplit)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.EVENT_EMPTY_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String timePeriod \u003d modCodeAndDescriptionAndDate[1];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!super.isValidTimePeriod(timePeriod)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.EVENT_TIME_FORMAT_ERROR);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String eventDate \u003d modCodeAndDescriptionAndDate[1];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String[] out \u003d DateTimeParser.eventParse(eventDate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String date \u003d out[0];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String startTime \u003d out[1];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String endTime \u003d out[2];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0325961"
        },
        "content": "                return new DeleteCommand(DukeConstants.EVENT_LIST, new Event(fullDescriptionAndModCode, date,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        startTime, endTime));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0325961"
        },
        "content": "                logger.severe(\"Invalid format for deleting event\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.EVENT_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if (fullCommand.trim().startsWith(DukeConstants.DELETE_DEADLINE_HEADER)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String activity \u003d fullCommand.trim().replaceFirst(DukeConstants.DELETE_DEADLINE_HEADER,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                modCodeAndDescriptionAndDate \u003d activity.split(DukeConstants.DEADLINE_DATE_DESCRIPTION_SPLIT_KEYWORD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                modCodeAndDescriptionSplit \u003d modCodeAndDescriptionAndDate[0].trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String fullDescriptionAndModCode \u003d modCodeAndDescriptionAndDate[0].trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!super.isValidModCodeAndDescription(fullDescriptionAndModCode)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.DEADLINE_EMPTY_MODCODE_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String modCode \u003d modCodeAndDescriptionSplit[0];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                if (!modCodeChecker.isModCode(modCode)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE + DukeConstants.INVALID_MODCODE_ERROR);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!super.isValidDescription(modCodeAndDescriptionSplit)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.DEADLINE_EMPTY_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String timePeriod \u003d modCodeAndDescriptionAndDate[1];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!super.isValidTime(timePeriod)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.DEADLINE_TIME_FORMAT_ERROR);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String deadlineDate \u003d modCodeAndDescriptionAndDate[1];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String[] out \u003d DateTimeParser.deadlineParse(deadlineDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String date \u003d out[0];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String time \u003d out[1];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0325961"
        },
        "content": "                return new DeleteCommand(DukeConstants.DEADLINE_LIST, new Deadline(fullDescriptionAndModCode, date,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        time));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0325961"
        },
        "content": "                logger.severe(\"Invalid format for deleting deadline\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.DEADLINE_FORMAT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeInvalidCommandException(DukeConstants.SAD_FACE + DukeConstants.UNKNOWN_MEANING);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 30,
      "lionlim97": 37,
      "0325961": 42,
      "darrenoje": 7
    }
  },
  {
    "path": "src/main/java/parser/DoneParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.ModCodeChecker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class parses the full command that calls for DoneParse."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class DoneParse extends Parse {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String[] modCodeAndDescriptionAndDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String[] modCodeAndDescriptionSplit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String fullCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(DoneParse.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private ModCodeChecker modCodeChecker \u003d ModCodeChecker.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates DoneParse object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param fullCommand The full command that calls DoneParse."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public DoneParse(String fullCommand) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This executes the data processing for DoneParse."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return Command which represents the parsed DoneCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws Exception Returned if command does not adhere to format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public Command parse() throws DukeInvalidFormatException, DukeInvalidCommandException,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "            DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (fullCommand.trim().startsWith(DukeConstants.DONE_EVENT_HEADER)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String activity \u003d fullCommand.trim().replaceFirst(DukeConstants.DONE_EVENT_HEADER,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                modCodeAndDescriptionAndDate \u003d activity.split(DukeConstants.EVENT_DATE_DESCRIPTION_SPLIT_KEYWORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                modCodeAndDescriptionSplit \u003d modCodeAndDescriptionAndDate[0].trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String fullDescriptionAndModCode \u003d modCodeAndDescriptionAndDate[0].trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!super.isValidModCodeAndDescription(fullDescriptionAndModCode)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.EVENT_EMPTY_MODCODE_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String modCode \u003d modCodeAndDescriptionSplit[0];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                if (!modCodeChecker.isModCode(modCode)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.INVALID_MODCODE_ERROR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!super.isValidDescription(modCodeAndDescriptionSplit)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.EVENT_EMPTY_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String timePeriod \u003d modCodeAndDescriptionAndDate[1];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!super.isValidTimePeriod(timePeriod)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.EVENT_TIME_FORMAT_ERROR);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String eventDate \u003d modCodeAndDescriptionAndDate[1];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String[] out \u003d DateTimeParser.eventParse(eventDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String date \u003d out[0];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String startTime \u003d out[1];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String endTime \u003d out[2];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": "                return new DoneCommand(DukeConstants.EVENT_LIST, new Event(fullDescriptionAndModCode, date,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        startTime, endTime));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0325961"
        },
        "content": "                logger.severe(\"Invalid format for setting done on event\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.EVENT_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if (fullCommand.trim().startsWith(DukeConstants.DONE_DEADLINE_HEADER)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String activity \u003d fullCommand.trim().replaceFirst((DukeConstants.DONE_DEADLINE_HEADER),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                modCodeAndDescriptionAndDate \u003d activity.split(DukeConstants.DEADLINE_DATE_DESCRIPTION_SPLIT_KEYWORD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                modCodeAndDescriptionSplit \u003d modCodeAndDescriptionAndDate[0].trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String fullDescriptionAndModCode \u003d modCodeAndDescriptionAndDate[0].trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!super.isValidModCodeAndDescription(fullDescriptionAndModCode)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.DEADLINE_EMPTY_MODCODE_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String modCode \u003d modCodeAndDescriptionSplit[0];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                if (!modCodeChecker.isModCode(modCode)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE + DukeConstants.INVALID_MODCODE_ERROR);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!super.isValidDescription(modCodeAndDescriptionSplit)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.DEADLINE_EMPTY_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String timePeriod \u003d modCodeAndDescriptionAndDate[1];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!super.isValidTime(timePeriod)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            + DukeConstants.DEADLINE_TIME_FORMAT_ERROR);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String deadlineDate \u003d modCodeAndDescriptionAndDate[1];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String[] out \u003d DateTimeParser.deadlineParse(deadlineDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String date \u003d out[0];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                String time \u003d out[1];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0325961"
        },
        "content": "                return new DoneCommand(DukeConstants.DEADLINE_LIST, new Deadline(fullDescriptionAndModCode,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        date, time));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0325961"
        },
        "content": "                logger.severe(\"Invalid format for setting done on deadline\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.DEADLINE_FORMAT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeInvalidCommandException(DukeConstants.SAD_FACE + DukeConstants.UNKNOWN_MEANING);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 4,
      "lionlim97": 39,
      "0325961": 41,
      "hwbjerry": 27,
      "darrenoje": 7
    }
  },
  {
    "path": "src/main/java/parser/FilterParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.FilterCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": " * This class parses the full command that calls for FilterParse."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class FilterParse extends Parse {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static String fullCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(FilterParse.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * Creates FilterParse object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param fullCommand The entire command that calls for AddParse."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public FilterParse(String fullCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This executes the data processing for FilterParse."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @return Command which represents the parsed FilterCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @throws Exception Returned if command does not adhere to format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public Command parse() throws DukeInvalidFormatException, DukeInvalidCommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (fullCommand.trim().startsWith(DukeConstants.SHOW_FILTER_HEADER)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String keyword \u003d fullCommand.trim().replaceFirst(DukeConstants.SHOW_FILTER_HEADER,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                if (keyword.trim().equals(DukeConstants.NO_FIELD)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.SHOW_FILTER_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    return new FilterCommand(keyword);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "                logger.severe(\"Invalid format for filter\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.SHOW_FILTER_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeInvalidCommandException(DukeConstants.SAD_FACE + DukeConstants.UNKNOWN_MEANING);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 31,
      "lionlim97": 1,
      "0325961": 18,
      "darrenoje": 1
    }
  },
  {
    "path": "src/main/java/parser/FindFreeTimesParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.FindFreeTimesCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class parses the full command that calls for FindFreeTimesParse."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class FindFreeTimesParse extends Parse {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(FindFreeTimesParse.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates FindFreeTimesParse object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param fullCommand The input by the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public FindFreeTimesParse(String fullCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Command parse() throws DukeInvalidFormatException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        fullCommand \u003d fullCommand.replaceFirst(DukeConstants.FIND_TIME_HEADER, DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (fullCommand.equals(DukeConstants.FIND_TIME_KEYWORD_HOUR)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                || fullCommand.equals(DukeConstants.FIND_TIME_KEYWORD_HOURS)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeInvalidFormatException(DukeConstants.INVALID_EMPTY_DURATION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else if (fullCommand.split(DukeConstants.BLANK_SPACE).length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeInvalidFormatException(DukeConstants.INVALID_INPUT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (fullCommand.contains(DukeConstants.FIND_TIME_KEYWORD_HOURS)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            fullCommand \u003d fullCommand.replaceFirst(DukeConstants.FIND_TIME_KEYWORD_HOURS, DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (fullCommand.contains(DukeConstants.FIND_TIME_KEYWORD_HOUR)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            fullCommand \u003d fullCommand.replaceFirst(DukeConstants.FIND_TIME_KEYWORD_HOUR, DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeInvalidFormatException(DukeConstants.INVALID_INPUT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (fullCommand.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeInvalidFormatException(DukeConstants.INVALID_EMPTY_DURATION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Integer duration \u003d Integer.parseInt(fullCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if (duration \u003e\u003d DukeConstants.FIND_TIME_LOWER_BOUNDARY"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u0026\u0026 duration \u003c\u003d DukeConstants.FIND_TIME_UPPER_BOUNDARY) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    return new FindFreeTimesCommand(duration);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.INVALID_DURATION);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": "                logger.severe(\"Unable to parse string to integer\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.INVALID_DURATION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Krazzen": 7,
      "lionlim97": 8,
      "0325961": 8,
      "hwbjerry": 34,
      "darrenoje": 4
    }
  },
  {
    "path": "src/main/java/parser/MainParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.RetrievePreviousCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class distinguishes the main command and calls for methods with respect to the main command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class MainParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method executes the processing of user input and directs to the relevant command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param fullCommand The user input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The selected command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws Exception If the input is not a valid command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static Command parse(String fullCommand) throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        fullCommand \u003d fullCommand.trim().replaceAll(\" +\", \" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (fullCommand.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "            throw new DukeInvalidCommandException(\"Invalid input the command cannot be blank. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    + \"Please type help to see all commands\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String [] stringSplit \u003d fullCommand.split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String command \u003d stringSplit[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.ADD_EVENT_HEADER:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.ADD_DEADLINE_HEADER:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return new AddParse(fullCommand).parse();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.DELETE_EVENT_HEADER:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.DELETE_DEADLINE_HEADER:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return new DeleteParse(fullCommand).parse();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.DONE_EVENT_HEADER:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.DONE_DEADLINE_HEADER:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return new DoneParse(fullCommand).parse();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.RECUR_WEEKLY_HEADER:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.RECUR_BIWEEKLY_HEADER:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.REMOVE_RECUR_WEEKLY_HEADER:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.REMOVE_RECUR_BIWEEKLY_HEADER:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return new RecurParse(fullCommand).parse();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.REMIND_CHECK_HEADER:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.REMIND_SET_HEADER:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.REMOVE_REMIND_HEADER:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return new RemindParse(fullCommand).parse();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.SHOW_WORKLOAD_HEADER:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return new WorkloadParse(fullCommand).parse();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.SHOW_FILTER_HEADER:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            return new FilterParse(fullCommand).parse();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.HELP_HEADER:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.FIND_TIME_HEADER:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return new FindFreeTimesParse(fullCommand).parse();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.SHOW_PREVIOUS_HEADER:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return new ShowPreviousParse(fullCommand).parse();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.RETRIEVE_TIME_HEADER:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return new RetrieveFreeTimesParse(fullCommand).parse();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.RETRIEVE_PREVIOUS_HEADER:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return new RetrievePreviousCommand(fullCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.SHOW_WEEK_HEADER:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return new WeekParse(fullCommand).parse();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        case DukeConstants.BYE_HEADER:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0325961"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeInvalidCommandException(DukeConstants.SAD_FACE + DukeConstants.INVALID_INPUT_ERROR);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 25,
      "lionlim97": 9,
      "0325961": 34,
      "hwbjerry": 12,
      "darrenoje": 1
    }
  },
  {
    "path": "src/main/java/parser/Parse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Abstract class Parse with methods representing all the Command subclasses to be"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * carried out when an input is entered by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public abstract class Parse {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int LOWER_BOUND_OF_TIME \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int UPPER_BOUND_OF_TIME \u003d 2359;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int UPPER_BOUND_OF_HOUR \u003d 23;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int UPPER_BOUND_OF_MINUTE \u003d 59;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int TIME_SEPARATOR \u003d 100;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int WRONG_LENGTH_OF_MODCODE_DESCRIPTION \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public abstract Command parse() throws Exception;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method checks if the user input start and end time actually fits the characteristics of a"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * 24-hour time format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param input The string that contains the  date, start and end time fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return true if it matches the characteristics of a 24-hour time format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public boolean isValidTimePeriod(String input) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] dateTimeStringSplit \u003d input.trim().split(DukeConstants.EVENT_DATE_SPLIT_KEYWORD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] timeStringSplit \u003d dateTimeStringSplit[1].split(DukeConstants.EVENT_TIME_SPLIT_KEYWORD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String start \u003d timeStringSplit[0].trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String end \u003d timeStringSplit[1].trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (start.length() !\u003d DukeConstants.LENGTH_OF_TIME_FORMAT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "                || end.length() !\u003d DukeConstants.LENGTH_OF_TIME_FORMAT) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if ((start.matches(\"[0-9]+\")) || (end.matches(\"[0-9]\"))) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Integer intStart \u003d Integer.parseInt(start);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Integer intEnd \u003d Integer.parseInt(end);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            if (!isValidTwentyFourHourFormat(intStart) || !isValidTwentyFourHourFormat(intEnd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (intStart \u003e intEnd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method checks if the time given is in a 24-hour time format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param intTime The time given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return true if the time given is valid. Otherwise, false."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public boolean isValidTwentyFourHourFormat(Integer intTime) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (intTime \u003c LOWER_BOUND_OF_TIME || intTime \u003e UPPER_BOUND_OF_TIME) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            Integer intHour \u003d intTime / TIME_SEPARATOR;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            Integer intMinute \u003d intTime % TIME_SEPARATOR;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            if (intHour \u003e UPPER_BOUND_OF_HOUR  || intMinute \u003e UPPER_BOUND_OF_MINUTE) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * This method checks if the user input time actually fits the characteristics of a 24-hour time format."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param input The string that contains the date and time field"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @return true if it matches the characteristics of a 24-hour time format"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public boolean isValidTime(String input) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] spiltInput \u003d input.split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String time \u003d spiltInput[spiltInput.length - 1];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (time.length() !\u003d DukeConstants.LENGTH_OF_TIME_FORMAT) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (time.matches(\"[0-9]+\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Integer intTime \u003d Integer.parseInt(time);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return isValidTwentyFourHourFormat(intTime);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method checks if the description of task if valid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param input String array of ModCode and description"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @return true if description of task is valid"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public boolean isValidDescription(String[] input) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        if (input.length \u003d\u003d WRONG_LENGTH_OF_MODCODE_DESCRIPTION) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String description \u003d input[1].trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method checks if both the ModCode and description of the task is valid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param input String of ModCode and description"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @return true if ModCode and description of the task is valid"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public boolean isValidModCodeAndDescription(String input) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method checks if the time for the start date and end date is valid."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param start The start date"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param end The end date"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return true if the start date time and end date time is valid"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @throws ParseException on the wrong format of date"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public boolean isValidDateRecurring(String start, String end) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date startDate \u003d DukeConstants.DAY_DATE_FORMAT.parse(start);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date endDate \u003d DukeConstants.DAY_DATE_FORMAT.parse(end);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (startDate.getTime() \u003e endDate.getTime()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 3,
      "lionlim97": 6,
      "0325961": 22,
      "darrenoje": 46,
      "hwbjerry": 53
    }
  },
  {
    "path": "src/main/java/parser/RecurParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.RecurringCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.ModCodeChecker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class parses the full command that calls for RecurParse."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class RecurParse extends Parse {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int LENGTH_OF_BIWEEKLY \u003d 9;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int LENGTH_OF_RMBIWEEKLY \u003d 11;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int LENGTH_OF_RMWEEKLY \u003d 9;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int LENGTH_OF_WEEKLY \u003d 7;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int LENGTH_OF_RECUR \u003d 5;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static String fullCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String[] modCodeAndDescriptionSplit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(RecurParse.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private ModCodeChecker modCodeChecker \u003d ModCodeChecker.getInstance();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public RecurParse(String fullCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public Command parse() throws DukeInvalidFormatException, DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            boolean isBiweekly \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            boolean isRecur \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String activity \u003d fullCommand.trim().substring(LENGTH_OF_RECUR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String[] fullCommandSplit \u003d activity.split(DukeConstants.RECUR_DATE_DESCRIPTION_SPLIT_KEYWORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String modCodeAndDescription \u003d fullCommandSplit[0].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            modCodeAndDescriptionSplit \u003d modCodeAndDescription.trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String dateAndTime \u003d fullCommandSplit[1].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            if (modCodeAndDescription.contains(DukeConstants.RECUR_BIWEEKLY_KEYWORD)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                modCodeAndDescription \u003d modCodeAndDescription.substring(LENGTH_OF_BIWEEKLY).trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                isRecur \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                isBiweekly \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            } else if (modCodeAndDescription.contains(DukeConstants.RECUR_RMBIWEEKLY_KEYWORD)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                modCodeAndDescription \u003d modCodeAndDescription.substring(LENGTH_OF_RMBIWEEKLY).trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                isBiweekly \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            } else if (modCodeAndDescription.contains(DukeConstants.RECUR_RMWEEKLY_KEYWORD)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                modCodeAndDescription \u003d modCodeAndDescription.substring(LENGTH_OF_RMWEEKLY).trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                modCodeAndDescription \u003d modCodeAndDescription.substring(LENGTH_OF_WEEKLY).trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                isRecur \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "            if (!super.isValidModCodeAndDescription(modCodeAndDescription)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0325961"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        + DukeConstants.EVENT_EMPTY_MODCODE_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String[] checkSplit \u003d modCodeAndDescription.trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String modCode \u003d checkSplit[0];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            if (!modCodeChecker.isModCode(modCode)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.SAD_FACE + DukeConstants.INVALID_MODCODE_ERROR);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0325961"
        },
        "content": "            if (!super.isValidDescription(checkSplit)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0325961"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        + DukeConstants.EVENT_EMPTY_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0325961"
        },
        "content": "            if (!super.isValidTimePeriod(dateAndTime)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0325961"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        + DukeConstants.EVENT_TIME_FORMAT_ERROR);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String[] in \u003d DateTimeParser.recurringEventParse(dateAndTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String startDateString \u003d in[0];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String endDateString \u003d in[1];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String startTimeString \u003d in[2];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String endTimeString \u003d in[3];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0325961"
        },
        "content": "            if (!super.isValidDateRecurring(startDateString, endDateString)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        + DukeConstants.RECUR_EVENT_DATE_FORMAT_ERROR);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return new RecurringCommand(modCodeAndDescription, startDateString, endDateString, startTimeString,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    endTimeString, isBiweekly, isRecur);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(\"Invalid recur format\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeInvalidFormatException(DukeConstants.RECUR_EVENT_FORMAT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 19,
      "lionlim97": 4,
      "0325961": 28,
      "darrenoje": 39
    }
  },
  {
    "path": "src/main/java/parser/RemindParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.RemindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.ModCodeChecker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class parses the full command that calls for RemindParse."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class RemindParse extends Parse {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final Integer LENGTH_OF_SET \u003d 4;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final Integer LENGTH_OF_RM \u003d 3;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final Integer LENGTH_OF_SPACE \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final Integer LENGTH_OF_REMIND \u003d 6;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String[] modDescriptionCommandsplit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String[] dateDescriptionSplit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static final Logger logger \u003d DukeLogger.getLogger(RemindParse.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private ModCodeChecker modCodeChecker \u003d ModCodeChecker.getInstance();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates RemindParse object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param fullCommand The full Command that calls for RemindParse."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public RemindParse(String fullCommand) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Parses the entire input to see if it is to remove or set reminder."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return Returns RemindCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws Exception On invalid format that called for RemindParse"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Command parse() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (fullCommand.contains(DukeConstants.REMIND_CHECK_KEYWORD)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Date dummyDate \u003d new Date();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": "                return new RemindCommand(new Deadline(DukeConstants.NO_FIELD, DukeConstants.NO_FIELD,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        DukeConstants.NO_FIELD), dummyDate, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            boolean isRemind \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String activity \u003d fullCommand.trim().substring(LENGTH_OF_REMIND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            dateDescriptionSplit \u003d activity.trim().split(DukeConstants.DEADLINE_DATE_DESCRIPTION_SPLIT_KEYWORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String modDescriptionCommand \u003d dateDescriptionSplit[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            modDescriptionCommandsplit \u003d modDescriptionCommand.trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (modDescriptionCommand.contains(DukeConstants.REMIND_SET_KEYWORD)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                description \u003d modDescriptionCommand.substring(LENGTH_OF_SET).trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                isRemind \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                description \u003d modDescriptionCommand.substring(LENGTH_OF_RM).trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            if (!super.isValidModCodeAndDescription(description)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0325961"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        + DukeConstants.DEADLINE_EMPTY_MODCODE_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String checkModCodeString \u003d modDescriptionCommandsplit[1];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            if (!modCodeChecker.isModCode(checkModCodeString)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.SAD_FACE + DukeConstants.INVALID_MODCODE_ERROR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String taskDescription;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (isRemind) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": "                taskDescription \u003d dateDescriptionSplit[0].substring(LENGTH_OF_SET + checkModCodeString.length()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        + LENGTH_OF_SPACE).trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0325961"
        },
        "content": "                taskDescription \u003d dateDescriptionSplit[0].substring(LENGTH_OF_RM + checkModCodeString.length()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        + LENGTH_OF_SPACE).trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (taskDescription.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        + DukeConstants.DEADLINE_EMPTY_DESCRIPTION_ERROR);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String deadlineDateRemindDateString \u003d dateDescriptionSplit[1].trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0325961"
        },
        "content": "            String[] deadlineDateRemindDateSplit \u003d deadlineDateRemindDateString.split("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    DukeConstants.REMIND_DATE_DEADLINE_DATE_SPLIT_KEYWORD);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String deadlineDateString \u003d deadlineDateRemindDateSplit[0];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String remindDateString \u003d deadlineDateRemindDateSplit[1];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (!super.isValidTime(deadlineDateString)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0325961"
        },
        "content": "                throw new DukeInvalidDateTimeException(DukeConstants.SAD_FACE"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        + DukeConstants.DEADLINE_TIME_FORMAT_ERROR);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (!super.isValidTime(remindDateString)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                throw new DukeInvalidDateTimeException(DukeConstants.SAD_FACE + DukeConstants.REMIND_TIME_FORMAT_ERROR);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String[] dateTime \u003d DateTimeParser.remindDateParse(deadlineDateRemindDateString);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            deadlineDateString \u003d dateTime[0];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String deadlineTimeString \u003d dateTime[1];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            remindDateString \u003d dateTime[2];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Date remindDate \u003d DateTimeParser.deadlineInputStringToDate(remindDateString);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return new RemindCommand(new Deadline(description, deadlineDateString, deadlineTimeString),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    remindDate, isRemind);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(\"Invalid remind format\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeInvalidFormatException(DukeConstants.REMIND_FORMAT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 2,
      "lionlim97": 74,
      "0325961": 27,
      "darrenoje": 4
    }
  },
  {
    "path": "src/main/java/parser/RetrieveFreeTimesParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.FindFreeTimesCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.RetrieveFreeTimesCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeLogger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeNoValidDataException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " * This class parses the full command that calls for RetrieveFreeTimesParse."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class RetrieveFreeTimesParse extends Parse {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(FindFreeTimesParse.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Creates RetrieveFreeTimesParse object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param fullCommand The input by the user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public RetrieveFreeTimesParse(String fullCommand) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public Command parse() throws DukeInvalidFormatException, DukeNoValidDataException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        ArrayList\u003cPair\u003cString, String\u003e\u003e retrievedFreeTimes \u003d FindFreeTimesCommand.getCompiledFreeTimesList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (checkIsEmpty(retrievedFreeTimes)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeNoValidDataException(DukeConstants.INVALID_NO_FREE_TIME_FOUND);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        fullCommand \u003d fullCommand.replaceFirst(DukeConstants.RETRIEVE_TIME_HEADER, DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (fullCommand.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeInvalidFormatException(DukeConstants.INVALID_EMPTY_OPTION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Integer option \u003d Integer.parseInt(fullCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if (option \u003e\u003d DukeConstants.RETRIEVE_TIME_LOWER_BOUNDARY"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u0026\u0026 option \u003c\u003d DukeConstants.RETRIEVE_TIME_UPPER_BOUNDARY) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    return new RetrieveFreeTimesCommand(option);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.INVALID_OPTION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "                logger.severe(\"Unable to parse string to integer\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.INVALID_OPTION);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method checks if the option is valid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param input The retrieveFreeTimesCommand input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return true if it is valid. Otherwise, false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static boolean isValidOption(String input) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        input \u003d input.replace(DukeConstants.RETRIEVE_TIME_HEADER, DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        input \u003d input.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Integer option \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if (option \u003e\u003d DukeConstants.RETRIEVE_TIME_LOWER_BOUNDARY"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u0026\u0026 option \u003c\u003d DukeConstants.RETRIEVE_TIME_UPPER_BOUNDARY) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private boolean checkIsEmpty(ArrayList\u003cPair\u003cString, String\u003e\u003e retrievedFreeTimes) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return (retrievedFreeTimes.size() \u003d\u003d 0) ? true : false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Krazzen": 5,
      "lionlim97": 1,
      "0325961": 10,
      "hwbjerry": 67,
      "darrenoje": 2
    }
  },
  {
    "path": "src/main/java/parser/ShowPreviousParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.ShowPreviousCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": " * This class parses the full command that calls for ShowPreviousParse."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class ShowPreviousParse extends Parse {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(ShowPreviousParse.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static final Integer TOTAL_NUM_OF_COMMANDS \u003d 22;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public ShowPreviousParse(String fullCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Creates ShowPreviousParse object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @throws DukeInvalidFormatException on invalid format that called for ShowPreviousParse"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public Command parse() throws DukeInvalidFormatException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String entireCommand \u003d fullCommand.replaceFirst(DukeConstants.SHOW_PREVIOUS_HEADER, DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "        entireCommand \u003d entireCommand.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (entireCommand.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "            throw new DukeInvalidFormatException(DukeConstants.SHOW_PREVIOUS_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "        boolean isNumber \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int number \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "            number \u003d Integer.parseInt(entireCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(\"Unable to parse string to integer\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "            isNumber \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String[] listOfAllCommands \u003d { DukeConstants.ADD_DEADLINE_HEADER, DukeConstants.ADD_EVENT_HEADER,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": "            DukeConstants.DELETE_DEADLINE_HEADER, DukeConstants.DELETE_EVENT_HEADER,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "            DukeConstants.RECUR_WEEKLY_HEADER, DukeConstants.RECUR_BIWEEKLY_HEADER,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "            DukeConstants.REMOVE_RECUR_WEEKLY_HEADER, DukeConstants.REMOVE_RECUR_BIWEEKLY_HEADER,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": "            DukeConstants.REMIND_SET_HEADER, DukeConstants.REMIND_CHECK_HEADER, DukeConstants.REMOVE_REMIND_HEADER,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "            DukeConstants.SHOW_WEEK_HEADER, DukeConstants.SHOW_FILTER_HEADER, DukeConstants.HELP_HEADER,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "            DukeConstants.DONE_EVENT_HEADER, DukeConstants.DONE_DEADLINE_HEADER, DukeConstants.FIND_TIME_HEADER,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "            DukeConstants.SHOW_PREVIOUS_HEADER, DukeConstants.RETRIEVE_PREVIOUS_HEADER,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "            DukeConstants.RETRIEVE_TIME_HEADER, DukeConstants.SHOW_WORKLOAD_HEADER, DukeConstants.BYE_HEADER"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0325961"
        },
        "content": "        };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": "        boolean isValid \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (isNumber \u0026\u0026 number \u003c 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "            throw new DukeInvalidFormatException(DukeConstants.INVALID_NEGATIVE_NUMBER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (!isNumber) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0325961"
        },
        "content": "            for (int i \u003d 0; i \u003c TOTAL_NUM_OF_COMMANDS; i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String currCommand \u003d listOfAllCommands[i];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0325961"
        },
        "content": "                if (entireCommand.equals(currCommand)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    isValid \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0325961"
        },
        "content": "            if (entireCommand.contains(\".\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                entireCommand \u003d entireCommand.replace(\".\", DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0325961"
        },
        "content": "                if (entireCommand.matches(\"[0-9]+\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.INVALID_DECIMAL_NUMBER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0325961"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeInvalidFormatException(DukeConstants.NO_AND_INVALID_COMMAND_TYPE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": "            } else if (!isValid) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0325961"
        },
        "content": "                throw new DukeInvalidFormatException(DukeConstants.NO_AND_INVALID_COMMAND_TYPE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (number \u003d\u003d 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0325961"
        },
        "content": "            throw new DukeInvalidFormatException(DukeConstants.INVALID_NUMBER_ZERO);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return new ShowPreviousCommand(entireCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 2,
      "0325961": 77,
      "darrenoje": 2
    }
  },
  {
    "path": "src/main/java/parser/WeekFormatParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.LookupTable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidDateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": " * This class parses the full command that calls for WeekFormatParse."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class WeekFormatParse {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static LookupTable lookupTable \u003d LookupTable.getInstance();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String[] dateOfTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final Integer WEEK_ARRAY_LENGTH \u003d 3;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method process the input date and output into the relevant format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param weekDate The date format or week format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param date The date given"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The output format in date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws DukeInvalidDateTimeException The error where the date given is invalid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public static String acadWeekToString(String weekDate, String date) throws DukeInvalidDateTimeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (weekDate.equalsIgnoreCase(DukeConstants.WEEK_FORMAT_KEYWORD_READING)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "                || weekDate.equalsIgnoreCase(DukeConstants.WEEK_FORMAT_KEYWORD_EXAM)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "                || weekDate.equalsIgnoreCase(DukeConstants.WEEK_FORMAT_KEYWORD)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "                || weekDate.equalsIgnoreCase(DukeConstants.WEEK_FORMAT_KEYWORD_RECESS)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            dateOfTask \u003d date.trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (dateOfTask.length \u003d\u003d WEEK_ARRAY_LENGTH) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                weekDate \u003d lookupTable.getValue(date) + DukeConstants.BLANK_SPACE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                throw new DukeInvalidDateTimeException(DukeConstants.INVALID_DATE_ERROR);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String nullChecker \u003d lookupTable.getValue(weekDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (nullChecker \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                throw new DukeInvalidDateTimeException(DukeConstants.INVALID_ACADEMIC_YEAR_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            weekDate \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return weekDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 11,
      "lionlim97": 7,
      "0325961": 11,
      "darrenoje": 8,
      "hwbjerry": 7
    }
  },
  {
    "path": "src/main/java/parser/WeekParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.WeekCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class WeekParse extends Parse {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public WeekParse(String fullCommand) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public Command parse() throws DukeInvalidFormatException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (isValid(fullCommand)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            fullCommand \u003d getWeek(fullCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return new WeekCommand(fullCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        fullCommand \u003d fullCommand.replaceFirst(DukeConstants.SHOW_WEEK_HEADER, DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (fullCommand.trim().isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            throw new DukeInvalidFormatException(DukeConstants.INVALID_EMPTY_WEEK);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        throw new DukeInvalidFormatException(DukeConstants.INVALID_WEEK);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method checks if the input is valid."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param fullCommand The command input by the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return true if the input is valid. Otherwise, false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static boolean isValid(String fullCommand) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String strWeek \u003d fullCommand.replaceFirst(DukeConstants.SHOW_WEEK_HEADER, DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (!strWeek.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            char checkSpace \u003d strWeek.charAt(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (checkSpace !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        strWeek \u003d strWeek.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (strWeek.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (strWeek.equals(DukeConstants.WEEK_FORMAT_KEYWORD_RECESS)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                || strWeek.equals(DukeConstants.WEEK_FORMAT_KEYWORD_READING)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                || strWeek.equals(DukeConstants.WEEK_FORMAT_KEYWORD_EXAM)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Integer week \u003d Integer.parseInt(strWeek);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if (week \u003e\u003d 1 \u0026\u0026 week \u003c\u003d 13) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method converts the given week format to the format in the lookup table."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param fullCommand The WeekCommand with the selected week"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The week in the lookup table format"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static String getWeek(String fullCommand) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String week \u003d fullCommand.replaceFirst(DukeConstants.SHOW_WEEK_HEADER, DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        week \u003d week.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if ((week.equals(DukeConstants.WEEK_FORMAT_KEYWORD_RECESS)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                || week.equals(DukeConstants.WEEK_FORMAT_KEYWORD_READING)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                || week.equals(DukeConstants.WEEK_FORMAT_KEYWORD_EXAM))) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            week \u003d capitalizeWord(week);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            week \u003d week + DukeConstants.BLANK_SPACE + DukeConstants.WEEK_FORMAT_KEYWORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            week \u003d DukeConstants.WEEK_FORMAT_KEYWORD + DukeConstants.BLANK_SPACE + week;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return week;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method converts the given week format to the WeekCommand format."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param selectedWeek The chosen week"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The week in WeekCommand format"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static String getWeekCommandFormat(String selectedWeek) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String week;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if ((selectedWeek.toLowerCase().startsWith(DukeConstants.WEEK_FORMAT_KEYWORD_RECESS)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                || selectedWeek.toLowerCase().startsWith(DukeConstants.WEEK_FORMAT_KEYWORD_READING)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                || selectedWeek.toLowerCase().startsWith(DukeConstants.WEEK_FORMAT_KEYWORD_EXAM))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u0026\u0026 selectedWeek.contains(DukeConstants.WEEK_FORMAT_KEYWORD)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            selectedWeek \u003d selectedWeek.replace(DukeConstants.WEEK_FORMAT_KEYWORD, DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            selectedWeek \u003d selectedWeek.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            week \u003d DukeConstants.SHOW_WEEK_HEADER"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    + DukeConstants.BLANK_SPACE"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    + selectedWeek.toLowerCase();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0325961"
        },
        "content": "            week \u003d DukeConstants.SHOW_WEEK_HEADER + selectedWeek.replaceFirst(DukeConstants.WEEK_FORMAT_KEYWORD,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return week;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String capitalizeWord(String word) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String firstLetter \u003d word.substring(0,1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        firstLetter \u003d firstLetter.toUpperCase();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        word \u003d firstLetter + word.substring(1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return word;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 7,
      "hwbjerry": 96,
      "darrenoje": 7
    }
  },
  {
    "path": "src/main/java/parser/WorkloadParse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.ShowWorkloadCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class parses the full command that calls for WorkloadParse."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class WorkloadParse extends Parse {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static String fullCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int HOURS \u003d 24;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int MINUTES \u003d 60;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int SECONDS \u003d 60;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int MILLISECONDS \u003d 1000;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final int ONE_WEEK \u003d 7;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(WorkloadParse.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates a WorkloadParse object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param fullCommand The user\u0027s input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public WorkloadParse(String fullCommand) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * This method gets the date of 7 days later."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param inDate date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @return date of 7 days later"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private Date getNextWeekDate(Date inDate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date nextWeek \u003d new Date(inDate.getTime() + ONE_WEEK * HOURS * MINUTES * SECONDS * MILLISECONDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return nextWeek;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Command parse() throws DukeInvalidFormatException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            Date today \u003d Calendar.getInstance().getTime();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            Date nextWeek \u003d getNextWeekDate(today);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String nextWeekDate \u003d DukeConstants.EVENT_DATE_INPUT_FORMAT.format(nextWeek);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            return new ShowWorkloadCommand(nextWeekDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(\"Invalid show workload format\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeInvalidFormatException(DukeConstants.SAD_FACE + DukeConstants.SHOW_WORKLOAD_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 20,
      "lionlim97": 8,
      "0325961": 9,
      "darrenoje": 18
    }
  },
  {
    "path": "src/main/java/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003cBorderPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"1000.0\" prefHeight\u003d\"730.0\" prefWidth\u003d\"998.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"userinterface.MainWindow\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003cbottom\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003cHBox prefHeight\u003d\"36.0\" prefWidth\u003d\"600.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"37.0\" prefWidth\u003d\"517.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "            \u003cButton fx:id\u003d\"submitButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"38.0\" prefWidth\u003d\"80.0\" text\u003d\"Submit\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/bottom\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003cright\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "      \u003cVBox prefHeight\u003d\"518.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-border-color: black;\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003cTableView fx:id\u003d\"dukeResponseTable\" prefHeight\u003d\"243.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-border-color: black; -fx-selection-bar: pink; -fx-selection-bar-non-focused: pink;\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumns\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"dukeResponseColumn\" editable\u003d\"false\" prefWidth\u003d\"198.0\" resizable\u003d\"false\" sortable\u003d\"false\" text\u003d\"Duke Response\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columns\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003c/TableView\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "            \u003cTableView fx:id\u003d\"overdueTable\" prefHeight\u003d\"282.0\" prefWidth\u003d\"200.0\" style\u003d\"-fx-border-color: black;\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumns\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"overdueTaskColumn\" maxWidth\u003d\"-1.0\" minWidth\u003d\"83.0\" prefWidth\u003d\"-1.0\" resizable\u003d\"false\" style\u003d\"-fx-alignment: center;\" text\u003d\"Description\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"overdueDateColumn\" maxWidth\u003d\"-1.0\" minWidth\u003d\"71.0\" prefWidth\u003d\"-1.0\" resizable\u003d\"false\" style\u003d\"-fx-alignment: center;\" text\u003d\"Date\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"overdueDaysColumn\" editable\u003d\"false\" maxWidth\u003d\"-1.0\" minWidth\u003d\"27.0\" prefWidth\u003d\"-1.0\" resizable\u003d\"false\" style\u003d\"-fx-alignment: center;\" text\u003d\"OD\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columns\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003c/TableView\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/right\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003ctop\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cVBox minHeight\u003d\"-Infinity\" prefHeight\u003d\"164.0\" prefWidth\u003d\"1000.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003cHBox prefHeight\u003d\"66.0\" prefWidth\u003d\"1000.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cGridPane prefHeight\u003d\"65.0\" prefWidth\u003d\"989.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                      \u003cColumnConstraints halignment\u003d\"LEFT\" hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"903.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"844.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                      \u003cColumnConstraints fillWidth\u003d\"false\" halignment\u003d\"RIGHT\" hgrow\u003d\"NEVER\" maxWidth\u003d\"490.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"145.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                      \u003cRowConstraints maxHeight\u003d\"48.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"47.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                      \u003cRowConstraints maxHeight\u003d\"28.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"18.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cLabel fx:id\u003d\"weekLabel\" prefHeight\u003d\"20.0\" prefWidth\u003d\"996.0\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                              \u003cFont name\u003d\"System Bold\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cLabel id\u003d\"scrollPaneGuideLabel\" prefHeight\u003d\"17.0\" prefWidth\u003d\"201.0\" text\u003d\"Please click and hold to navigate\" GridPane.hgrow\u003d\"NEVER\" GridPane.rowIndex\u003d\"1\" GridPane.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cSplitPane orientation\u003d\"VERTICAL\" prefHeight\u003d\"200.0\" prefWidth\u003d\"160.0\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"RIGHT\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                          \u003citems\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                              \u003cVBox nodeOrientation\u003d\"LEFT_TO_RIGHT\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                    \u003cLabel text\u003d\"For the list of commands\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                    \u003cLabel prefHeight\u003d\"12.0\" prefWidth\u003d\"228.0\" text\u003d\"Enter: \" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                    \u003cLabel text\u003d\"show/help\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                          \u003cFont name\u003d\"System Font\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                          \u003c/items\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003cScrollPane hbarPolicy\u003d\"NEVER\" minHeight\u003d\"-Infinity\" pannable\u003d\"true\" prefHeight\u003d\"100.0\" prefWidth\u003d\"1000.0\" vbarPolicy\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0325961"
        },
        "content": "                  \u003cHBox fx:id\u003d\"progressContainer\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"93.0\" prefWidth\u003d\"1000.0\" /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/top\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003ccenter\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cVBox minHeight\u003d\"-Infinity\" prefHeight\u003d\"518.0\" prefWidth\u003d\"798.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003cGridPane prefHeight\u003d\"50.0\" prefWidth\u003d\"800.0\" style\u003d\"-fx-border-insets: 0; -fx-border-color: black; -fx-grid-lines-visible: true;\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"50.0\" prefWidth\u003d\"110.0\" text\u003d\"SUN\" GridPane.columnIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"114.0\" text\u003d\"MON\"\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"114.0\" text\u003d\"TUE\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefWidth\u003d\"114.0\" text\u003d\"WED\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefWidth\u003d\"114.0\" text\u003d\"THU\" GridPane.columnIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefWidth\u003d\"114.0\" text\u003d\"FRI\" GridPane.columnIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefWidth\u003d\"114.0\" text\u003d\"SAT\" GridPane.columnIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0325961"
        },
        "content": "            \u003cGridPane prefHeight\u003d\"475.0\" prefWidth\u003d\"798.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"sunEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"6\" /\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"monEventView\" prefHeight\u003d\"472.0\" prefWidth\u003d\"152.0\" /\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"tueEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"wedEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"thuEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"friEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"satEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 98,
      "0325961": 7,
      "hwbjerry": 76
    }
  },
  {
    "path": "src/main/java/resources/view/ProgressIndicator.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?import javafx.scene.control.ProgressIndicator?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"98.0\" prefWidth\u003d\"237.0\" style\u003d\"-fx-background-color: FF9999; -fx-border-color: black;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"userinterface.ProgressController\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cProgressIndicator fx:id\u003d\"progressIndicator\" layoutX\u003d\"149.0\" layoutY\u003d\"6.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"90.0\" prefWidth\u003d\"80.0\" progress\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" layoutY\u003d\"26.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"80.0\" text\u003d\"Completed\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel fx:id\u003d\"completedValueLabel\" alignment\u003d\"CENTER\" contentDisplay\u003d\"BOTTOM\" layoutY\u003d\"56.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"80.0\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel alignment\u003d\"CENTER\" layoutX\u003d\"79.0\" layoutY\u003d\"26.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"80.0\" text\u003d\"Undone\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel fx:id\u003d\"overdueValueLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"79.0\" layoutY\u003d\"56.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"80.0\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel fx:id\u003d\"moduleCodeLabel\" alignment\u003d\"CENTER\" layoutY\u003d\"-6.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"180.0\" text\u003d\"Module Code\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "0325961": 16
    }
  },
  {
    "path": "src/main/java/tasks/Assignment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Abstract class Assignment with methods representing all the Command subclasses to be"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * carried out when an input is entered by the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public abstract class Assignment {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private boolean isReminder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String remindTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private String modCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final String FRONT_ICON_SEPARATOR \u003d \"[\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final String BACK_ICON_SEPARATOR \u003d \"]\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final String DEADLINE_KEYWORD \u003d \"by \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates Task object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param description The description of the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Assignment(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.isReminder \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.remindTime \u003d DukeConstants.NO_FIELD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.modCode \u003d DukeConstants.NO_FIELD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public abstract String getDateTime();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public abstract String getDate();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public abstract String getTime();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public abstract String getStartTime();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public abstract String getEndTime();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Checks whether the task is completed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @return This returns a tick or cross depending on the boolean value of isDone"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return (isDone ? DukeConstants.DONE_INDICATOR : DukeConstants.NOT_DONE_INDICATOR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * Checks whether the task is completed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @return true if task is completed"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * Check whether a reminder is set."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @return This returns HR or NR depending on whether reminder is set"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String getReminderStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return (isReminder ? DukeConstants.HAS_REMINDER_INDICATOR : DukeConstants.NO_REMINDER_INDICATOR);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * Set a task to be completed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method gets the description of the assignment."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] split \u003d description.split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String taskDescription \u003d DukeConstants.NO_FIELD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (int i \u003d 0; i \u003c split.length; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            if (!split[i].toUpperCase().equals(getModCode())) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                taskDescription +\u003d split[i] + DukeConstants.BLANK_SPACE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return taskDescription;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * Convert reminder time to a string."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String remindTimeToString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return DukeConstants.REMINDER_TIME_START_KEYWORD + remindTime"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + DukeConstants.REMINDER_TIME_END_KEYWORD"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + DukeConstants.BLANK_SPACE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * Convert reminder task to string for display."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @return string of reminder task"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return FRONT_ICON_SEPARATOR + getStatusIcon()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + BACK_ICON_SEPARATOR + getReminderStatus()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + remindTimeToString() + getDescription();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * Display string of task."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String displayString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return   getType()  + FRONT_ICON_SEPARATOR"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + getStatusIcon() + BACK_ICON_SEPARATOR"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + DukeConstants.BLANK_SPACE + getModCode()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + DukeConstants.BLANK_SPACE + getDescription()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + DEADLINE_KEYWORD + getDateTime();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method gets the module code of the assignment."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getModCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String[] split \u003d description.trim().split(DukeConstants.BLANK_SPACE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String moduleCode \u003d split[0].toUpperCase();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Sets the time of reminder."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param time The time of reminder input by user"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setRemindTime(String time) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        remindTime \u003d time;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Retrieves the time of reminder."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getRemindTime() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.remindTime;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Sets true if there is a reminder set, false otherwise."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setReminder(boolean isReminder) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.isReminder \u003d isReminder;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Retrieves the boolean value of whether a reminder was set for this particular assignment."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public boolean getIsReminder() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.isReminder;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * Gets the string of modCode and description."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String toShow() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return modCode + \"\\n\" + description;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 7,
      "lionlim97": 83,
      "0325961": 17,
      "hwbjerry": 22,
      "darrenoje": 33
    }
  },
  {
    "path": "src/main/java/tasks/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Represents a task called deadline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class Deadline extends Assignment {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static final String DEADLINE_DATE_SEPARATOR \u003d \"(by: \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static final String DEADLINE_STRING_CLOSER \u003d \")\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates a Deadline object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param description Description of a task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param by Date of when a task should be done"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Deadline(String description, String by, String time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * This method converts tasks to string for storage purposes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return super.getModCode()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + DukeConstants.BLANK_SPACE + getType()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + super.toString() + DEADLINE_DATE_SEPARATOR"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + getDateTime() + DEADLINE_STRING_CLOSER;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method gets type of task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return DukeConstants.DEADLINE_INDICATOR;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method gets date and time of task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return by + DukeConstants.BLANK_SPACE + time;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method gets date of task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method gets time of task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method gets start time of task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method gets end time of task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 25,
      "lionlim97": 33,
      "0325961": 3,
      "hwbjerry": 22,
      "darrenoje": 1
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Represents a task called event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class Event extends Assignment {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String start;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String end;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final String TIME_TO_TIME \u003d \" to \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final String TIME_DELIMITER \u003d \" to: \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final String START_OF_DATE_DELIMITER \u003d \"(at: \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final String START_OF_TIME_DELIMITER \u003d \" time: \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final String END_OF_DATE_TIME_DELIMITER \u003d \")\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final String START_DELIMITER \u003d \"Start: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final String END_DELIMITER \u003d \"End: \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates an Event object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param description Description of a task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param by Date of when a task should be done"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param start Start time"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param end End time"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Event(String description, String by, String start, String end) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method gets type of task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return DukeConstants.EVENT_INDICATOR;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * This method converts tasks to string for storage purposes."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return super.getModCode() + DukeConstants.BLANK_SPACE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + getType() + super.toString()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + START_OF_DATE_DELIMITER"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + by + START_OF_TIME_DELIMITER"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + start + TIME_DELIMITER"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + end + END_OF_DATE_TIME_DELIMITER;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method gets date and time of task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return by + DukeConstants.BLANK_SPACE + start + TIME_TO_TIME + end;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method gets start and end time for display."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String toShow() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return START_DELIMITER + start + \"\\n\" + END_DELIMITER + end + \"\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method gets date of task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method gets time of task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return start + TIME_TO_TIME + end;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method gets start time of task."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method gets end time of task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 27,
      "lionlim97": 34,
      "0325961": 2,
      "hwbjerry": 31,
      "darrenoje": 11
    }
  },
  {
    "path": "src/main/java/tasks/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * To keep track of the list of task input by user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ArrayList\u003cAssignment\u003e list;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Creates a TaskList object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Retrieves the list of deadlines/events."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public ArrayList\u003cAssignment\u003e getList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Retrieved the map of deadlines/events."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e getMap() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.map;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method adds task into the arrayList list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void addTask(Assignment task) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (this.map.containsKey(task.getModCode())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (!this.map.get(task.getModCode()).containsKey(task.getDate())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                map.get(task.getModCode()).put(task.getDate(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            this.map.put(task.getModCode(), new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            this.map.get(task.getModCode()).put(task.getDate(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cAssignment\u003e taskArrayList \u003d this.map.get(task.getModCode()).get(task.getDate());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Assignment existingTask : taskArrayList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String existingTaskDescription \u003d existingTask.getDescription();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String existingTaskDate \u003d existingTask.getDateTime();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String taskDescription \u003d task.getDescription();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String taskDate \u003d task.getDateTime();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (existingTaskDescription.equals(taskDescription) \u0026\u0026 existingTaskDate.equals(taskDate)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (task.getIsReminder() \u0026\u0026 !existingTask.getIsReminder()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    existingTask.setRemindTime(task.getRemindTime());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    existingTask.setReminder(true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (task.getStatus() \u0026\u0026 !existingTask.getStatus()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    existingTask.setDone(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.map.get(task.getModCode()).get(task.getDate()).add(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.list.add(task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method removes task from the map."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void removeTask(Assignment task) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Assignment taskInList : this.map.get(task.getModCode()).get(task.getDate())) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            if (taskInList.getDateTime().equals(task.getDateTime())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                this.map.get(task.getModCode()).get(task.getDate()).remove(taskInList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                if (this.map.get(task.getModCode()).get(task.getDate()).size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    this.map.get(task.getModCode()).remove(task.getDate());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    if (this.map.get(task.getModCode()).size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        this.map.remove(task.getModCode());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method updates map with the task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void updateTask(Assignment task) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Assignment taskInList : this.map.get(task.getModCode()).get(task.getDate())) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (taskInList.getDateTime().equals(task.getDateTime())) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Integer index \u003d this.map.get(task.getModCode()).get(task.getDate()).indexOf(taskInList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Assignment temp \u003d this.map.get(task.getModCode()).get(task.getDate()).get(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                temp.setDone(true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                this.map.get(task.getModCode()).get(task.getDate()).remove(taskInList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                this.map.get(task.getModCode()).get(task.getDate()).add(temp);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * This method finds the size for the taskList."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public int taskListSize() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        int size \u003d 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        for (String modCode : map.keySet()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            for (String date : map.get(modCode).keySet()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0325961"
        },
        "content": "                for (Assignment task : map.get(modCode).get(date)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    size++;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return size;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method sets reminder for a task."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setReminder(Assignment task, String time, boolean isReminder) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Assignment taskInList : this.map.get(task.getModCode()).get(task.getDate())) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (taskInList.getDescription().equals(task.getDescription())) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (isReminder) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    taskInList.setRemindTime(time);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    taskInList.setReminder(true);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    taskInList.setRemindTime(DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    taskInList.setReminder(false);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 10,
      "lionlim97": 92,
      "0325961": 18,
      "hwbjerry": 12,
      "darrenoje": 7
    }
  },
  {
    "path": "src/main/java/userinterface/AlertBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package userinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.ButtonType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " * Controller for user prompt. Provides the layout for different alert types."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class AlertBox {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This function generates a alert box based on alert type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param title The title of alert"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param header The header of the alert"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param message The body of the alert"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param alertType The alert type"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return This returns the option chosen by the user input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static boolean display(String title, String header, String message, Alert.AlertType alertType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        boolean isOk \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Alert alert \u003d new Alert(alertType);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        alert.setHeaderText(header);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        alert.setContentText(message);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (alertType \u003d\u003d Alert.AlertType.CONFIRMATION) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Optional\u003cButtonType\u003e result \u003d alert.showAndWait();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (result.get() \u003d\u003d ButtonType.OK) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                isOk \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (result.get() \u003d\u003d ButtonType.CANCEL) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                isOk \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (alertType \u003d\u003d Alert.AlertType.INFORMATION || alertType \u003d\u003d Alert.AlertType.WARNING) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            alert.showAndWait();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        alert.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return isOk;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 4,
      "hwbjerry": 36
    }
  },
  {
    "path": "src/main/java/userinterface/DeadlineView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package userinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "darrenoje"
        },
        "content": " * Class for deadline table to store and display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "darrenoje"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DeadlineView {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Text date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Text task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Text overDays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * This creates DeadlineView object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public DeadlineView(Text task, Text date, Text overDays) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.overDays \u003d overDays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public Text getDate() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void setDate(Text date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public Text getTask() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void setTask(Text task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public Text getOverDays() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return overDays;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 22,
      "0325961": 1,
      "hwbjerry": 15,
      "darrenoje": 3
    }
  },
  {
    "path": "src/main/java/userinterface/DukeResponseView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package userinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "darrenoje"
        },
        "content": " * Class for response table to store and display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "darrenoje"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DukeResponseView {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final Text response;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public DukeResponseView(String index, Text response) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String getIndex() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public Text getResponse() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 2,
      "0325961": 1,
      "hwbjerry": 18,
      "darrenoje": 3
    }
  },
  {
    "path": "src/main/java/userinterface/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package userinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(Main.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method sets the platform of the GUI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param stage The window on which the Duke program will appear on."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        DukeLogger.initialise();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            BorderPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            stage.setMinWidth(1000);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            stage.setMinHeight(747);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setTitle(\"BetterDuke\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(\"MainWindow.fxml cannot be found.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 5,
      "0325961": 5,
      "hwbjerry": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/userinterface/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package userinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.RetrievePreviousCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.ShowPreviousCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.WeekCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.UpdateProgressIndicatorCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.LookupTable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeLogger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.WeekList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeIOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": "import parser.RetrieveFreeTimesParse;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "import parser.WeekParse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.fxml.Initializable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.FontPosture;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.ResourceBundle;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class MainWindow extends BorderPane implements Initializable {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Label weekLabel;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private HBox progressContainer;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e sunEventView;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e monEventView;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e tueEventView;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e wedEventView;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e thuEventView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e friEventView;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e satEventView;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableView\u003cDeadlineView\u003e overdueTable;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableColumn\u003cDeadlineView, String\u003e overdueDateColumn;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableColumn\u003cDeadlineView, String\u003e overdueTaskColumn;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private TableColumn\u003cDeadlineView, String\u003e overdueDaysColumn;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableView\u003cDukeResponseView\u003e dukeResponseTable;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private TableColumn\u003cDukeResponseView, String\u003e dukeResponseColumn;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ArrayList\u003cAssignment\u003e events;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ArrayList\u003cAssignment\u003e deadlines;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList eventsList;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList deadlinesList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final int HOURS \u003d 24;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final int MINUTES \u003d 60;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final int SECONDS \u003d 60;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final int MILLISECONDS \u003d 1000;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static final int TOTAL_NUM_OF_QUOTES \u003d 68;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static ArrayList\u003cString\u003e outputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static WeekList outputWeekList \u003d new WeekList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Logger logger \u003d DukeLogger.getLogger(MainWindow.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static LookupTable lookupTable \u003d LookupTable.getInstance();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final String START_WEEK_DELIMITER \u003d \" ( \";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static final String END_WEEK_DELIMITER \u003d \" )\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * This method initializes the display in the window of the GUI."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void initialize(URL location, ResourceBundle resources) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            deadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            setWeek(true, DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0325961"
        },
        "content": "            displayQuoteOfTheDay();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            retrieveList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            setDeadlineTableContents();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0325961"
        },
        "content": "            setProgressContainer();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (NullPointerException | IOException | ParseException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(\"Unable to initialise main window GUI.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private void displayQuoteOfTheDay() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            ArrayList\u003cString\u003e listOfQuotes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            InputStream inputStream \u003d this.getClass().getClassLoader().getResourceAsStream(\"documents/quotes.txt\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String firstLine;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                listOfQuotes.add(line);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Random random \u003d new Random();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0325961"
        },
        "content": "            int result \u003d random.nextInt(TOTAL_NUM_OF_QUOTES);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            firstLine \u003d listOfQuotes.get(result);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0325961"
        },
        "content": "            AlertBox.display(\"Quote of the day\", \"Quote of the day !!\", firstLine, Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            inputStreamReader.close();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            inputStream.close();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0325961"
        },
        "content": "            logger.severe(\"quotes.txt not found. Unable to load quote of the day.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method creates the progress indicator for the different modules."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @throws IOException On reading error in the lines of the file"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private void setProgressContainer() throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0325961"
        },
        "content": "        progressContainer.getChildren().clear();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0325961"
        },
        "content": "        UpdateProgressIndicatorCommand updateProgressIndicatorCommand \u003d new UpdateProgressIndicatorCommand(eventsList,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0325961"
        },
        "content": "                deadlinesList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Pair\u003cHashMap\u003cString, String\u003e, ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e\u003e wholeData \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0325961"
        },
        "content": "                updateProgressIndicatorCommand.getWholeDate(eventsList, deadlinesList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0325961"
        },
        "content": "        HashMap\u003cString, String\u003e moduleMap \u003d updateProgressIndicatorCommand.getModuleMap(wholeData);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0325961"
        },
        "content": "        HashMap\u003cString, Pair\u003cInteger, Integer\u003e\u003e progressIndicatorValues \u003d updateProgressIndicatorCommand.getValues("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0325961"
        },
        "content": "                moduleMap, wholeData);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0325961"
        },
        "content": "        for (String module : progressIndicatorValues.keySet()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0325961"
        },
        "content": "            FXMLLoader fxmlLoad \u003d new FXMLLoader(getClass().getResource(\"/view/ProgressIndicator.fxml\"));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Parent loads \u003d null;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                loads \u003d fxmlLoad.load();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0325961"
        },
        "content": "                logger.severe(\"ProgressIndicator.fxml not found.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0325961"
        },
        "content": "            int totalNumOfTasks \u003d progressIndicatorValues.get(module).getKey();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0325961"
        },
        "content": "            int completedValue \u003d progressIndicatorValues.get(module).getValue();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0325961"
        },
        "content": "            fxmlLoad.\u003cProgressController\u003egetController().getData(module, totalNumOfTasks, completedValue);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0325961"
        },
        "content": "            progressContainer.getChildren().add(loads);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Initialize Duke object in MainWindow controller with Duke object from Main."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Initialize Storage object in MainWindow controller with storage object from Duke."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static void setStorage(Storage storageFromDuke) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage \u003d storageFromDuke;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Pulls the list from storage data and stores here."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws IOException On input error reading lines in the file"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws ParseException On conversion error from string to Task object"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void retrieveList() throws DukeIOException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        eventsList \u003d new TaskList();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlinesList \u003d new TaskList();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.readEventList(eventsList);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.readDeadlineList(deadlinesList);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        events \u003d eventsList.getList();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlines \u003d deadlinesList.getList();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ObservableList\u003cDukeResponseView\u003e betterDukeResponse \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void setDeadlineTableContents() throws ParseException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        overdueDateColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"date\"));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        overdueTaskColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"task\"));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        overdueDaysColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"overDays\"));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        overdueTable.setItems(setDeadlineTable());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ObservableList\u003cDeadlineView\u003e setDeadlineTable() throws ParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String dateTime;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String modCodeAndTask;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String overDays;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        ObservableList\u003cDeadlineView\u003e deadlineViews \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (Assignment assignment: deadlines) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            isDone \u003d assignment.getStatus();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            modCodeAndTask \u003d assignment.getModCode() + \"\\n\" + assignment.getDescription();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            dateTime \u003d assignment.getDateTime();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (isDone) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                overDays \u003d \"-\";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Date taskDateTime \u003d DukeConstants.DEADLINE_DATE_FORMAT.parse(dateTime);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                overDays \u003d String.valueOf(daysBetween(taskDateTime));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0325961"
        },
        "content": "                int daysToOrPast \u003d Integer.parseInt(overDays);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0325961"
        },
        "content": "                if (daysToOrPast \u003c\u003d 0) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    overDays \u003d \"-\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Text textModCodeAndTask \u003d new Text(modCodeAndTask);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            textModCodeAndTask.setWrappingWidth(overdueTaskColumn.getWidth() - 5);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Text textDateTime \u003d new Text(dateTime);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            textDateTime.setWrappingWidth(overdueDateColumn.getWidth() - 5);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Text textOverDays \u003d new Text(overDays);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            textOverDays.setWrappingWidth(overdueDaysColumn.getWidth() - 5);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            deadlineViews.add(new DeadlineView(textModCodeAndTask, textDateTime, textOverDays));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return deadlineViews;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void setDukeResponse() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        dukeResponseColumn.setSortable(false);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        dukeResponseColumn.setCellValueFactory(new PropertyValueFactory(\"response\"));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        dukeResponseTable.setItems(betterDukeResponse);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        dukeResponseTable.scrollTo(betterDukeResponse.size() - 1);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        dukeResponseTable.getSelectionModel().select(betterDukeResponse.size() - 1);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        dukeResponseTable.getSelectionModel().getFocusedIndex();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void handleUserInput() throws IOException, ParseException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (input.startsWith(DukeConstants.SHOW_WEEK_HEADER)) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (WeekParse.isValid(input)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                week \u003d input;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                setWeek(false, WeekParse.getWeek(input));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        retrieveList();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        duke.getResponse(week);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        outputWeekList \u003d WeekCommand.getWeekList();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        updateListView();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "0325961"
        },
        "content": "        outputList \u003d ShowPreviousCommand.getOutputList();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        overdueTable.setItems(setDeadlineTable());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        setProgressContainer();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (!response.isEmpty() \u0026\u0026 !response.equals(DukeConstants.NO_FIELD)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Text temp \u003d new Text(response);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            temp.setWrappingWidth(dukeResponseColumn.getWidth() - 20);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "0325961"
        },
        "content": "            int index \u003d betterDukeResponse.size() + 1;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "0325961"
        },
        "content": "            betterDukeResponse.add(new DukeResponseView(Integer.toString(index), temp));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            setDukeResponse();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (userInput.getText().equals(DukeConstants.BYE_HEADER)) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (!input.contains(DukeConstants.SHOW_PREVIOUS_HEADER)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "0325961"
        },
        "content": "                \u0026\u0026 input.contains(DukeConstants.RETRIEVE_PREVIOUS_HEADER) \u0026\u0026 RetrievePreviousCommand.isValid()) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "0325961"
        },
        "content": "            String previousInput \u003d Duke.getPreviousInput();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "0325961"
        },
        "content": "            userInput.setText(previousInput);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else if (input.startsWith(DukeConstants.RETRIEVE_TIME_HEADER)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "0325961"
        },
        "content": "                \u0026\u0026 RetrieveFreeTimesParse.isValidOption(input)) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String selectedOption \u003d Duke.getSelectedOption();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            userInput.setText(selectedOption);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            userInput.positionCaret(DukeConstants.ADD_EVENT_HEADER.length() + DukeConstants.BLANK_SPACE.length());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private long daysBetween(Date date) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return (currentDate.getTime() - date.getTime()) / (MILLISECONDS * SECONDS * MINUTES * HOURS);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String week \u003d DukeConstants.NO_FIELD;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method updates weekLabel Label."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param onStart The flag which indicates program startup"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param selectedWeek The week selected"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void setWeek(Boolean onStart,String selectedWeek) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (onStart) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateTime \u003d new Date();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String date \u003d DukeConstants.EVENT_DATE_INPUT_FORMAT.format(dateTime);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            selectedWeek \u003d lookupTable.getValue(date);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "0325961"
        },
        "content": "            weekLabel.setText(selectedWeek + START_WEEK_DELIMITER + lookupTable.getValue(selectedWeek.toLowerCase())"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    + END_WEEK_DELIMITER);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            week \u003d WeekParse.getWeekCommandFormat(selectedWeek);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            weekLabel.setFont(Font.font(\"Verdana\", FontWeight.BOLD, FontPosture.ITALIC,30));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            weekLabel.setTextFill(Color.GOLDENROD);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "0325961"
        },
        "content": "            weekLabel.setText(selectedWeek + START_WEEK_DELIMITER + lookupTable.getValue(selectedWeek.toLowerCase())"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    + END_WEEK_DELIMITER);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void updateListView() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        monEventView.setItems(outputWeekList.getMonList());"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        tueEventView.setItems(outputWeekList.getTueList());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        wedEventView.setItems(outputWeekList.getWedList());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        thuEventView.setItems(outputWeekList.getThuList());"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        friEventView.setItems(outputWeekList.getFriList());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        satEventView.setItems(outputWeekList.getSatList());"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        sunEventView.setItems(outputWeekList.getSunList());"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 138,
      "0325961": 97,
      "hwbjerry": 111,
      "darrenoje": 3
    }
  },
  {
    "path": "src/main/java/userinterface/ProgressController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package userinterface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.ProgressIndicator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Controller for progress indicator. This control represents the progress indicator for a module."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class ProgressController extends HBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private Label moduleCodeLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private Label completedValueLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private Label overdueValueLabel \u003d new Label();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private ProgressIndicator progressIndicator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e moduleCodeStatusIconDescriptionArrList \u003d new"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "            ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final HashMap\u003cString, String\u003e moduleCodeMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method adds the events/deadlines from the list into the map."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param list The list containing either deadlines/events"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param modCodeMap The map containing the module code"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param moduleCodeStatusIconDescriptionArrList The list containing module code, status icon and the description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e addModuleCodeToArrList("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "            HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e list, HashMap\u003cString, String\u003e modCodeMap,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "            ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e moduleCodeStatusIconDescriptionArrList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Assignment task;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "        for (String moduleCode : list.keySet()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "            modCodeMap.put(moduleCode, null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "            for (String date : list.get(moduleCode).keySet()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "                for (int i \u003d 0; i \u003c list.get(moduleCode).get(date).size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    task \u003d list.get(moduleCode).get(date).get(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    moduleCodeStatusIconDescriptionArrList.add(new Pair\u003c\u003e(moduleCode, new Pair\u003c\u003e(task.getStatusIcon(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            task.getDescription())));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return moduleCodeStatusIconDescriptionArrList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e addModFromDeadlineListIntoMap("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0325961"
        },
        "content": "            String deadlineMC, Assignment deadlineTask, HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e list,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0325961"
        },
        "content": "            ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e moduleCodeStatusIconDescriptionArrList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": "        for (String date : list.get(deadlineMC).keySet()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0325961"
        },
        "content": "            for (int i \u003d 0; i \u003c list.get(deadlineMC).get(date).size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "                deadlineTask \u003d list.get(deadlineMC).get(date).get(i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0325961"
        },
        "content": "                moduleCodeStatusIconDescriptionArrList.add(new Pair\u003c\u003e(deadlineMC, new Pair\u003c\u003e("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        deadlineTask.getStatusIcon(), deadlineTask.getDescription())));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return moduleCodeStatusIconDescriptionArrList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public Assignment deadlineTask;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e arrList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method gets the arraylist containing tasks in terms of Pair(module code (status icon, description)) and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * determine the modules taken by user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param eventsList the list containing the event tasks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param deadlineList the list containing the deadline tasks"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return a pair containing the arraylist of tasks and hashmap of module code"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public Pair\u003cHashMap\u003cString, String\u003e, ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e\u003e getProgressIndicatorMap("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0325961"
        },
        "content": "            HashMap\u003cString, HashMap\u003cString, ArrayList\u003cAssignment\u003e\u003e\u003e eventsList, HashMap\u003cString, HashMap\u003cString,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0325961"
        },
        "content": "            ArrayList\u003cAssignment\u003e\u003e\u003e deadlineList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (eventsList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": "            arrList \u003d addModuleCodeToArrList(eventsList, moduleCodeMap, moduleCodeStatusIconDescriptionArrList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String eventsMC;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (eventsList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0325961"
        },
        "content": "            arrList \u003d addModuleCodeToArrList(deadlineList, moduleCodeMap, moduleCodeStatusIconDescriptionArrList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            for (int i \u003d 0; i \u003c moduleCodeStatusIconDescriptionArrList.size(); i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0325961"
        },
        "content": "                eventsMC \u003d moduleCodeStatusIconDescriptionArrList.get(i).getKey();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0325961"
        },
        "content": "                for (String deadlineMC : deadlineList.keySet()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    if (!eventsMC.equals(deadlineMC)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        moduleCodeMap.put(deadlineMC, null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        arrList \u003d addModFromDeadlineListIntoMap(deadlineMC, deadlineTask, deadlineList,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0325961"
        },
        "content": "                                moduleCodeStatusIconDescriptionArrList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    } else if (eventsMC.equals(deadlineMC)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        arrList \u003d addModFromDeadlineListIntoMap(deadlineMC, deadlineTask, deadlineList,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0325961"
        },
        "content": "                                moduleCodeStatusIconDescriptionArrList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0325961"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return new Pair\u003c\u003e(moduleCodeMap, arrList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method sets the text for moduleCodeLabel, completedValueLabel and overdueValueLabel and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * sets the progress for progressIndicator."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param mc the module code"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param totalValue the total number of event and deadline tasks"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param completedValue the number of tasks completed"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void getData(String mc, int totalValue, int completedValue) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int undoneValue \u003d totalValue - completedValue;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0325961"
        },
        "content": "        double progressValue \u003d (double) completedValue / totalValue;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0325961"
        },
        "content": "        moduleCodeLabel.setText(mc);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0325961"
        },
        "content": "        completedValueLabel.setText(String.valueOf(completedValue));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0325961"
        },
        "content": "        overdueValueLabel.setText(String.valueOf(undoneValue));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0325961"
        },
        "content": "        progressIndicator.setProgress(progressValue);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 119,
      "darrenoje": 1
    }
  },
  {
    "path": "src/test/java/filtertest/FilterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package filtertest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.FilterCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import stubclasses.StorageStub;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class FilterTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static Assignment eventWithoutKeyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static Assignment deadlineWithoutKeyword;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static Assignment eventWithKeyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static Assignment deadlineWithKeyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static String keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private StorageStub storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private UserInteraction ui \u003d new UserInteraction();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static TaskList events \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static TaskList deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method initializes the variables required."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public static void setAllVariables() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        eventWithoutKeyword \u003d new Event(\"CS2101 EventTest\",\"12/10/2019\",\"1200\",\"1201\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        deadlineWithoutKeyword \u003d new Deadline(\"CS2101 DeadlineTest\",\"13/10/2019\",\"1202\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        eventWithKeyword \u003d new Event(\"CS2101 EventWithKey\",\"12/10/2019\",\"1300\",\"1301\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        deadlineWithKeyword \u003d new Deadline(\"CS2101 DeadlineWithKey\",\"13/10/2019\",\"1200\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "        public void execute_keywordNotInList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        events \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        keyword \u003d \"key\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        deadlines.addTask(deadlineWithoutKeyword);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        events.addTask(eventWithoutKeyword);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        Command command \u003d new FilterCommand(keyword);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String w1 \u003d \"There are no task(s) matching your keyword.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String w2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            w2 \u003d command.execute(events, deadlines, ui, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            w2 \u003d e.getMessage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        assertEquals(w1, w2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void execute_keywordInList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        events \u003d new TaskList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        keyword \u003d \"key\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        deadlines.addTask(deadlineWithKeyword);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        events.addTask(eventWithKeyword);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        Command command \u003d new FilterCommand(keyword);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String w1 \u003d \"Here are the following events/deadline with the keyword key\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                + \"1. [E]CS2101 EventWithKey at 12/10/2019 1300 to 1301\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                + \"2. [D]CS2101 DeadlineWithKey by 13/10/2019 1200\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String w2;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            w2 \u003d command.execute(events, deadlines, ui, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            w2 \u003d e.getMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        assertEquals(w1, w2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void execute_keywordSubstringNotInList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        events \u003d new TaskList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        keyword \u003d \"keyword\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        deadlines.addTask(deadlineWithKeyword);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        events.addTask(eventWithKeyword);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        Command command \u003d new FilterCommand(keyword);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String w1 \u003d \"There are no task(s) matching your keyword.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String w2;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            w2 \u003d command.execute(events, deadlines, ui, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            w2 \u003d e.getMessage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        assertEquals(w1, w2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void execute_emptyKeyword_throwsDukeInvalidFormatException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        events \u003d new TaskList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        keyword \u003d new String();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        deadlines.addTask(deadlineWithKeyword);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        events.addTask(eventWithKeyword);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        Command command \u003d new FilterCommand(keyword);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String w1 \u003d \" OOPS!!! Please enter filter command as follows\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0325961"
        },
        "content": "                + \"show/filter keyword\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String w2;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            w2 \u003d command.execute(events, deadlines, ui, storage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            w2 \u003d e.getMessage();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        assertEquals(w1, w2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 85,
      "lionlim97": 1,
      "0325961": 21,
      "darrenoje": 6
    }
  },
  {
    "path": "src/test/java/findfreettimestest/FindFreeTimesParseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package findfreettimestest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import parser.FindFreeTimesParse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "//@@author hwbjerry"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " * This class tests FindFreeTimesParse."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class FindFreeTimesParseTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String INVALID_INPUT \u003d \"Invalid input. Please enter the command as follows. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"find/time \u003cx\u003e hours , where x is a digit between 1 - 16, inclusive\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String INVALID_DURATION \u003d \"Invalid duration. Please enter the command as follows. \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"find/time \u003cx\u003e hours , where x is a digit between 1 - 16, inclusive\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String INVALID_EMPTY_DURATION \u003d \"Invalid input.\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"\\nDuration cannot be blank.\\nPlease enter the command as follows.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"find/time \u003cx\u003e hours , where x is a digit between 1 - 16, inclusive\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String validUserInputWithDuration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String userInputWithZeroDuration;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String userInputWithSeventeenDuration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String userInputWithInvalidDuration;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String userInputWithDurationInDecimal;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String userInputWithoutPostFix;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String userInputWithoutDuration;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method initializes the variables required."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static void setAllVariables() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        validUserInputWithDuration \u003d \"find/time 5 hours\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        userInputWithZeroDuration \u003d \"find/time 0 hours\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        userInputWithSeventeenDuration \u003d \"find/time 17 hours\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        userInputWithInvalidDuration \u003d \"find/time abc hours\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        userInputWithDurationInDecimal \u003d \"find/time 5.6 hours\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        userInputWithoutPostFix \u003d \"find/time 5\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        userInputWithoutDuration \u003d \"find/time hours\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void findFreeTimesWithZeroDuration() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d INVALID_DURATION;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new FindFreeTimesParse(userInputWithZeroDuration).parse();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void findFreeTimesWithSeventeenDuration() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d INVALID_DURATION;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new FindFreeTimesParse(userInputWithSeventeenDuration).parse();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void findFreeTimesWithInvalidDuration() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d INVALID_DURATION;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new FindFreeTimesParse(userInputWithInvalidDuration).parse();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void findFreeTimesWithDurationInDecimal() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d INVALID_DURATION;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new FindFreeTimesParse(userInputWithDurationInDecimal).parse();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void findFreeTimesWithoutPostFix() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d INVALID_INPUT;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new FindFreeTimesParse(userInputWithoutPostFix).parse();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void findFreeTimesWithoutDuration() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d INVALID_EMPTY_DURATION;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new FindFreeTimesParse(userInputWithoutDuration).parse();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void findFreeTimesWithValidUserInput() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new FindFreeTimesParse(validUserInputWithDuration).parse();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 4,
      "hwbjerry": 134
    }
  },
  {
    "path": "src/test/java/recurringtest/RecurParseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package recurringtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import parser.RecurParse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "darrenoje"
        },
        "content": " * This class tests RecurParse."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "darrenoje"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "public class RecurParseTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String startDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String endDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String endTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method initializes the variables required."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public static void setAllVariables() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        startDate \u003d \"week 9 mon\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        endDate \u003d \"week 12 mon\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        startTime \u003d \"1000\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        endTime \u003d \"1200\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public void recurParseTest_withInvalidModCode_throwDukeInvalidFormatException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String recurSet \u003d \"recur/weekly 2101 tutorial /start \" + startDate + \" /to \" + endDate"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "                + \" /from \" + startTime + \" /to \" + endTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d DukeConstants.SAD_FACE + \" OOPS!!! The ModCode is invalid\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            command \u003d new RecurParse(recurSet).parse();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertNull(command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public void recurParseTest_withInvalidDescription_throwDukeInvalidFormatException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String recurSet \u003d \"recur/weekly CS2101 /start \" + startDate + \" /to \" + endDate"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "                + \" /from \" + startTime + \" /to \" + endTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d DukeConstants.SAD_FACE + \" OOPS!!! The description of an event cannot be empty.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            command \u003d new RecurParse(recurSet).parse();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertNull(command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public void recurParseTest_withInvalidFormat_throwDukeInvalidFormatException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String recurSet \u003d \"recur/weekly CS2101 tutorial \" + startDate + \" /to \" + endDate + \" /from \" + startTime"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0325961"
        },
        "content": "                + \" /to \" + endTime;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"OOPS!!! Please enter recurring event as follows:\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0325961"
        },
        "content": "                + \"recur/(fill) modCode name_of_event /start dd/MM/yyyy to dd/MM/yyyy /from HHmm /to HHmm\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0325961"
        },
        "content": "                + \"Note: replace (fill) with either: weekly, biweekly, rmweekly, rmbiweekly\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0325961"
        },
        "content": "                + \"For example: recur/weekly CS1231 project meeting /start 1/10/2019 to 15/11/2019 /from 1500 /to 1700\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            command \u003d new RecurParse(recurSet).parse();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertNull(command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public void recurWeeklyParse_withValidFormat() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String recurSet \u003d \"recur/weekly CS2101 tutorial /start \" + startDate + \" /to \" + endDate"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0325961"
        },
        "content": "                + \" /from \" + startTime + \" /to \" + endTime;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            command \u003d new RecurParse(recurSet).parse();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public void recurBiweeklyParse_withValidFormat() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String recurSet \u003d \"recur/biweekly CS2101 tutorial /start \" + startDate + \" /to \" + endDate"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0325961"
        },
        "content": "                + \" /from \" + startTime + \" /to \" + endTime;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            command \u003d new RecurParse(recurSet).parse();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public void recurRmweeklyParse_withValidFormat() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String recurSet \u003d \"recur/rmweekly CS2101 tutorial /start \" + startDate + \" /to \" + endDate"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0325961"
        },
        "content": "                + \" /from \" + startTime + \" /to \" + endTime;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            command \u003d new RecurParse(recurSet).parse();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public void recurRmbiweeklyParse_withValidFormat() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String recurSet \u003d \"recur/rmbiweekly CS2101 tutorial /start \" + startDate + \" /to \" + endDate"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0325961"
        },
        "content": "                + \" /from \" + startTime + \" /to \" + endTime;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            command \u003d new RecurParse(recurSet).parse();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 28,
      "darrenoje": 111
    }
  },
  {
    "path": "src/test/java/recurringtest/RecurringCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package recurringtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.RecurringCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.LookupTable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import stubclasses.StorageStub;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "darrenoje"
        },
        "content": " * This class tests RecurCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "darrenoje"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "public class RecurringCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static TaskList events \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static TaskList deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private UserInteraction ui \u003d new UserInteraction();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private StorageStub storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String testDescription;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String startWeekDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static Date startDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String startDateString;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String followingWeekDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static Date followingDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String followingDateString;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String endWeekDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static Date endDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String endDateString;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String dateBeforeStartWeekDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static Date dateBeforeStartDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String dateBeforeStartDateString;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String dateAfterEndWeekDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static Date dateAfterEndDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String dateAfterEndDateString;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static Date startTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String startTimeString;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static Date endTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String endTimeString;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String testWeekDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static Date testDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String testDateString;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static Date testStartTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String testStartTimeString;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static Date testEndTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String testEndTimeString;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static Assignment stubTask;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static SimpleDateFormat eventDateInputFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static SimpleDateFormat eventTimeInputFormat \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static SimpleDateFormat dateOutputFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static SimpleDateFormat timeOutputFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static LookupTable lookupTable \u003d LookupTable.getInstance();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public static void setAllVariables() throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        description \u003d \"CS2101 tutorial\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        testDescription \u003d \"CS2107 tutorial\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        startWeekDate \u003d lookupTable.getValue(\"week 9 mon\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        startDate \u003d eventDateInputFormat.parse(startWeekDate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        startDateString \u003d dateOutputFormat.format(startDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        followingWeekDate \u003d lookupTable.getValue(\"week 10 mon\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        followingDate \u003d eventDateInputFormat.parse(followingWeekDate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        followingDateString \u003d dateOutputFormat.format(followingDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        endWeekDate \u003d lookupTable.getValue(\"week 12 mon\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        endDate \u003d eventDateInputFormat.parse(endWeekDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        endDateString \u003d dateOutputFormat.format(endDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        startTime \u003d eventTimeInputFormat.parse(\"1000\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        startTimeString \u003d timeOutputFormat.format(startTime);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        endTime \u003d eventTimeInputFormat.parse(\"1200\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        endTimeString \u003d timeOutputFormat.format(endTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateBeforeStartWeekDate \u003d lookupTable.getValue(\"week 8 mon\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateBeforeStartDate \u003d eventDateInputFormat.parse(dateBeforeStartWeekDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateBeforeStartDateString \u003d dateOutputFormat.format(dateBeforeStartDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateAfterEndWeekDate \u003d lookupTable.getValue(\"week 13 mon\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateAfterEndDate \u003d eventDateInputFormat.parse(dateAfterEndWeekDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        dateAfterEndDateString \u003d dateOutputFormat.format(dateAfterEndDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        testWeekDate \u003d lookupTable.getValue(\"week 7 mon\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        testDate \u003d eventDateInputFormat.parse(testWeekDate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        testDateString \u003d dateOutputFormat.format(testDate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        testStartTime \u003d eventTimeInputFormat.parse(\"0900\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        testStartTimeString \u003d timeOutputFormat.format(testStartTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        testEndTime \u003d eventTimeInputFormat.parse(\"0930\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        testEndTimeString \u003d timeOutputFormat.format(testEndTime);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        stubTask \u003d new Event(description, startDateString, startTimeString, endTimeString);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        events.addTask(stubTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        stubTask \u003d new Event(description, followingDateString, startTimeString, endTimeString);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        events.addTask(stubTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        stubTask \u003d new Event(description, dateBeforeStartDateString, startTimeString, endTimeString);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        events.addTask(stubTask);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        stubTask \u003d new Event(description, testDateString, startTimeString, endTimeString);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        events.addTask(stubTask);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        stubTask \u003d new Event(testDescription, dateAfterEndDateString, startTimeString, endTimeString);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        events.addTask(stubTask);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public void addRecurringTask_clashesWithExistedEvent() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Command command \u003d new RecurringCommand(testDescription, dateAfterEndDateString, endDateString, startTimeString,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0325961"
        },
        "content": "                endTimeString, false, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"Sorry, you have conflicting events \\n\" + \"1. [E][✘] CS2107 tutorial by \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                + \"Mon 11/11/2019 10:00 AM to 12:00 PM\\n\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public void removeRecurringTask_withInvalidModCode_throwDukeException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d new RecurringCommand(\"CS2030 tutorial\", startDateString, endDateString,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0325961"
        },
        "content": "                startTimeString, endTimeString, false, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String expected \u003d \"Sorry, you have no such mod in the system\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public void removeRecurringTask_withInvalidDate_throwDukeException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d new RecurringCommand(description, endDateString, dateAfterEndDateString,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0325961"
        },
        "content": "                startTimeString, endTimeString, false, false);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String expected \u003d \"Sorry, you have no such date of the mod in the system\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public void removeRecurringTask_withInvalidTiming_throwDukeException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d new RecurringCommand(description, startDateString, endDateString, endTimeString,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0325961"
        },
        "content": "                startTimeString, false, false);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String expected \u003d \"Sorry, you have no timing of the task in the system\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public void addWeeklyRecurringCommand_withValidFormat() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Command command \u003d new RecurringCommand(testDescription, dateBeforeStartDateString, startDateString,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                testStartTimeString, testEndTimeString, false, true);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"Weekly recurring task: \" + testDescription + \" has been added between \""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0325961"
        },
        "content": "                + dateBeforeStartDateString + \" and \" + startDateString + \"\\n\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public void removeWeeklyRecurringCommand_withValidFormat() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Command command \u003d new RecurringCommand(description, startDateString, followingDateString,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0325961"
        },
        "content": "                startTimeString, endTimeString, false, false);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String expected \u003d \"Weekly recurring task: \" + description + \" has been removed between \" + startDateString"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                + \" and \" + followingDateString + \"\\n\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public void addBiweeklyRecurringCommand_withValidFormat() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Command command \u003d new RecurringCommand(testDescription, followingDateString, endDateString,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                testStartTimeString, testEndTimeString, true, true);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"Biweekly recurring task: \" + testDescription + \" has been added between \""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0325961"
        },
        "content": "                + followingDateString + \" and \" + endDateString + \"\\n\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public void removeBiweeklyRecurringCommand_withValidFormat() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Command command \u003d new RecurringCommand(description, testDateString, dateBeforeStartDateString,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0325961"
        },
        "content": "                startTimeString, endTimeString, true, false);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String expected \u003d \"Biweekly recurring task: \" + description + \" has been removed between \" + testDateString"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                + \" and \" + dateBeforeStartDateString + \"\\n\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 23,
      "darrenoje": 199
    }
  },
  {
    "path": "src/test/java/remindtest/RemindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package remindtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.RemindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.DukeConstants;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import stubclasses.ReminderStub;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import stubclasses.StorageStub;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class tests RemindCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class RemindCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static TaskList deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Assignment taskAfterCurrentDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Assignment taskBeforeCurrentDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Assignment taskWithInvalidModCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Assignment taskWithInvalidDescription;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Assignment taskWithInvalidDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Assignment taskWithReminder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Assignment dummyTask;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String reminderSetDateString;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String reminderRemoveDateString;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String tenMinAfterCurrentDateString;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Date oneMinBeforeCurrentDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Date oneMinAfterCurrentDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Date tenMinAfterCurrentDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Date threeDaysAfterCurrentDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static SimpleDateFormat dateOutputFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static SimpleDateFormat timeOutputFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static SimpleDateFormat deadlineDateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private StorageStub storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList events \u003d new TaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private UserInteraction ui \u003d new UserInteraction();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method initializes the variables required."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static void setAllVariables() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date dayAfter \u003d new Date(System.currentTimeMillis() + 86400000);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date dayBefore \u003d new Date(System.currentTimeMillis() - 86400000);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date dayAfterTomorrow \u003d new Date(System.currentTimeMillis() + 172800000);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String dateDayAfterTomorrow \u003d dateOutputFormat.format(dayAfterTomorrow);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String timeDayAfterTomorrow \u003d timeOutputFormat.format(dayAfterTomorrow);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        threeDaysAfterCurrentDate \u003d new Date(System.currentTimeMillis() + 259200000);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String dateAfter \u003d dateOutputFormat.format(dayAfter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String timeAfter \u003d timeOutputFormat.format(dayAfter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String dateBefore \u003d dateOutputFormat.format(dayBefore);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String timeBefore \u003d timeOutputFormat.format(dayBefore);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        taskAfterCurrentDate \u003d new Deadline(\"CS2100 exam\", dateAfter, timeAfter);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        taskBeforeCurrentDate \u003d new Deadline(\"CS2100 exam\", dateBefore, timeBefore);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        taskWithInvalidModCode \u003d new Deadline(\"CS2107 exam\", dateAfter, timeAfter);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        taskWithInvalidDescription \u003d new Deadline(\"CS2100 assignment\", dateAfter, timeAfter);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String dateThreeDaysAfter \u003d dateOutputFormat.format(threeDaysAfterCurrentDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String timeThreeDaysAfter \u003d timeOutputFormat.format(threeDaysAfterCurrentDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        taskWithInvalidDate \u003d new Deadline(\"CS2100 exam\", dateDayAfterTomorrow, timeDayAfterTomorrow);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        taskWithReminder \u003d new Deadline(\"CS2100 exam\", dateThreeDaysAfter, timeThreeDaysAfter);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        oneMinAfterCurrentDate \u003d new Date(System.currentTimeMillis() + 60000);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        oneMinBeforeCurrentDate \u003d new Date(System.currentTimeMillis() - 60000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        tenMinAfterCurrentDate \u003d new Date(System.currentTimeMillis() + 600000);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        tenMinAfterCurrentDateString \u003d deadlineDateFormat.format(tenMinAfterCurrentDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminderSetDateString \u003d deadlineDateFormat.format(oneMinAfterCurrentDate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminderRemoveDateString \u003d deadlineDateFormat.format(tenMinAfterCurrentDate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        dummyTask \u003d new Deadline(DukeConstants.NO_FIELD, DukeConstants.NO_FIELD, DukeConstants.NO_FIELD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlines.addTask(taskAfterCurrentDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlines.addTask(taskWithReminder);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ReminderStub.setReminderTask(taskWithReminder);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ReminderStub.setReminderTime(tenMinAfterCurrentDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void execute_setRemindTaskDateBeforeCurrentDate_throwsDukeInvalidDateTimeException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskBeforeCurrentDate,oneMinAfterCurrentDate,true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"Sorry, your selected task has already passed!\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void execute_setRemindDateBeforeCurrentDate_throwsDukeInvalidDateTimeException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskAfterCurrentDate, oneMinBeforeCurrentDate,true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"Sorry, you cannot set a time that has already passed!\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void execute_setRemindWithInvalidModCode_throwsDukeException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskWithInvalidModCode, oneMinAfterCurrentDate,true);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"Sorry, you have no such mod entered in your deadline table!\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void execute_setRemindWithInvalidTaskDate_throwsDukeException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskWithInvalidDate, oneMinAfterCurrentDate,true);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"Sorry, you have no such timing entered in your deadline table!\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void execute_setReminderWithInvalidTaskDescription_throwsDukeException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskWithInvalidDescription, oneMinAfterCurrentDate,true);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"Sorry, the description of your task mismatches\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void execute_setRemindDateThatExists_throwsDukeInvalidDateTimeException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskWithReminder, tenMinAfterCurrentDate,true);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d \"Sorry, you have a reminder set for \" + taskWithReminder.getModCode()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + \" \" + taskWithReminder.getDescription() + \" by: \" + taskWithReminder.getDateTime();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void execute_removeReminderWithInvalidReminderTime_throwsDukeInvalidDateTimeException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskAfterCurrentDate, oneMinAfterCurrentDate,false);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"Sorry, you have no such reminder at that inputted time.\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void execute_setReminderAfterDateOfTask_throwsDukeInvalidDateTimeException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskAfterCurrentDate, threeDaysAfterCurrentDate, true);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"Sorry, you cannot set a reminder after the date of the task.\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void execute_removeReminderWithInvalidDescription_throwsDukeException() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskWithInvalidDescription, tenMinAfterCurrentDate,false);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"Sorry, you have no such reminder with inputted description at that time.\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void execute_checkReminder() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(dummyTask, tenMinAfterCurrentDate,false);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d \"Here is the list of reminders set:\\n\\n\" + \"1. ModCode: CS2100\\n\" + \"Description: exam \\n\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + \"Deadline date: \" + taskWithReminder.getDateTime() + \"\\n\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + \"Reminder date: \" + tenMinAfterCurrentDateString;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void execute_setReminderWithValidFormat() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskAfterCurrentDate, oneMinAfterCurrentDate,true);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d \"Reminder has been set for \" + taskAfterCurrentDate.getModCode()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + \" \" + taskAfterCurrentDate.getDescription() + \"at: \" + reminderSetDateString;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void execute_removeReminderWithValidFormat() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d new RemindCommand(taskWithReminder, tenMinAfterCurrentDate,false);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d \"Reminder has been removed for \" + taskWithReminder.getModCode() + \" \""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                + taskWithReminder.getDescription() + \"on: \" + reminderRemoveDateString;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 211,
      "0325961": 11,
      "hwbjerry": 22
    }
  },
  {
    "path": "src/test/java/remindtest/RemindParseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package remindtest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import parser.RemindParse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class tests RemindParse."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class RemindParseTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static TaskList deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String reminderDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String taskDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static SimpleDateFormat dateOutputFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static SimpleDateFormat timeOutputFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static SimpleDateFormat deadlineInputFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method initializes the variables required."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static void setAllVariables() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date nextDay \u003d new Date(System.currentTimeMillis() + 86400000);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        by \u003d dateOutputFormat.format(nextDay);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        time \u003d timeOutputFormat.format(nextDay);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date twoHourFromCurrentDate \u003d new Date(System.currentTimeMillis() + 7200000);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminderDate \u003d deadlineInputFormat.format(twoHourFromCurrentDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        taskDate \u003d deadlineInputFormat.format(nextDay);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlines.addTask(new Deadline(\"CS2100 exam\", by, time));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void parse_setRemindWithEmptyModCodeAndDescription_throwsDukeInvalidFormatException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String remindSet \u003d \"remind/set  /by \" + taskDate + \" /on \" + reminderDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"\\u2639\" + \" OOPS!!! The ModCode + description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            command \u003d new RemindParse(remindSet).parse();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertNull(command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void parse_setRemindWithInvalidModCode_throwsDukeInvalidFormatException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String remindSet \u003d \"remind/set 2100 exam /by \" + taskDate + \" /on \" + reminderDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"\\u2639\" + \" OOPS!!! The ModCode is invalid\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            command \u003d new RemindParse(remindSet).parse();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertNull(command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void parse_setRemindWithEmptyDescription_throwsDukeInvalidFormatException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String remindSet \u003d \"remind/set CS2100 /by \" + taskDate + \" /on \" + reminderDate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"\\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            command \u003d new RemindParse(remindSet).parse();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertNull(command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void parse_setRemindWithInvalidFormat_throwsDukeInvalidFormatException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String remindSet \u003d \"remind/set CS2100 \" + taskDate + \" /on \" + reminderDate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d \"OOPS!!! Please enter remind as follows:\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                + \"remind/(set/rm) mod_code description /by week n.o day time /on week n.o day time\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                + \"For example: remind/set cs2100 hand in homework /by week 9 fri 1500 /on week 9 thu 1500\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            command \u003d new RemindParse(remindSet).parse();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertNull(command);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void parse_setRemindWithInvalidDate_throwsDukeInvalidFormatException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String remindSet \u003d \"remind/set CS2100 \" + \"week 14 mon\" + \" /on \" + reminderDate;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"OOPS!!! Please enter remind as follows:\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0325961"
        },
        "content": "                + \"remind/(set/rm) mod_code description /by week n.o day time /on week n.o day time\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0325961"
        },
        "content": "                + \"For example: remind/set cs2100 hand in homework /by week 9 fri 1500 /on week 9 thu 1500\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            command \u003d new RemindParse(remindSet).parse();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertNull(command);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void parse_setRemindParseWithValidFormat() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String remindSet \u003d \"remind/set CS2100 exam /by \" + taskDate + \" /on \" + reminderDate;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            command \u003d new RemindParse(remindSet).parse();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void parse_removeRemindParseWithValidFormat() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String remindSet \u003d \"remind/rm CS2100 exam /by \" + taskDate + \" /on \" + reminderDate;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            command \u003d new RemindParse(remindSet).parse();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void parse_checkRemindParseWithValidFormat() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String remindSet \u003d \"remind/check\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            command \u003d new RemindParse(remindSet).parse();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 149,
      "0325961": 8,
      "hwbjerry": 3
    }
  },
  {
    "path": "src/test/java/retrievefreetimestest/RetrieveFreeTimesCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package retrievefreetimestest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.FindFreeTimesCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeNoValidDataException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import parser.FindFreeTimesParse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import parser.RetrieveFreeTimesParse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import stubclasses.StorageStub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "//@@author hwbjerry"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " * This class tests RetrieveFreeTimesParse."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class RetrieveFreeTimesCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String INVALID_NO_FREE_TIME_FOUND \u003d \"Please find free times by invoking the command shown \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"below\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"find/time \u003cx\u003e hours, where x is a digit between 1 - 16, inclusive\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"Followed by the command\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"retrieve/time \u003cx\u003e, where x is a digit between 1- 5, inclusive\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String userInputWithValidOption;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static Integer userInputSelectedOption;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static ArrayList\u003cPair\u003cString, String\u003e\u003e retrievedFreeTimesList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private TaskList events \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private TaskList deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private StorageStub storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private UserInteraction ui \u003d new UserInteraction();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method initializes the variables required."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static void setAllVariables() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        userInputWithValidOption \u003d \"retrieve/time 3\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        userInputSelectedOption \u003d 3;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        retrievedFreeTimesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void retrieveFreeTimesCommandWithEmptyList() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d INVALID_NO_FREE_TIME_FOUND;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new RetrieveFreeTimesParse(userInputWithValidOption).parse();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException | DukeNoValidDataException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method initializes the variables required before a test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void setRetrievedFreeTimesList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String validUserInputWithDuration \u003d \"find/time 3 hours\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new FindFreeTimesParse(validUserInputWithDuration).parse();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void retrieveFreeTimesCommandWithPopulatedList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        setRetrievedFreeTimesList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        retrievedFreeTimesList \u003d FindFreeTimesCommand.getCompiledFreeTimesList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d ui.showSelectionOption(userInputSelectedOption,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                retrievedFreeTimesList.get(userInputSelectedOption - 1).getKey());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new RetrieveFreeTimesParse(userInputWithValidOption).parse();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        clearParameter();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void clearParameter() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        retrievedFreeTimesList.clear();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 10,
      "hwbjerry": 103
    }
  },
  {
    "path": "src/test/java/retrievefreetimestest/RetrieveFreeTimesParseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package retrievefreetimestest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeNoValidDataException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import parser.FindFreeTimesParse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import parser.RetrieveFreeTimesParse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import stubclasses.StorageStub;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "//@@author hwbjerry"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " * This class tests RetrieveFreeTimesParse."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class RetrieveFreeTimesParseTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String INVALID_OPTION \u003d \"Invalid option. Please enter the command as follows. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"retrieve/time \u003cx\u003e, where x is a digit between 1 - 5, inclusive\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String INVALID_EMPTY_OPTION \u003d \"Invalid input.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"Option cannot be blank.\\nPlease enter the command as follows.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"retrieve/time \u003cx\u003e, where x is a digit between 1 - 5, inclusive\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String validUserInputWithOption;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String userInputWithOptionZero;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String userInputWithOptionSix;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String userInputWithRandomStringOption;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String userInputWithOptionInDecimal;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String userInputWithoutOption;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static TaskList events \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static TaskList deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static StorageStub storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static UserInteraction ui \u003d new UserInteraction();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method initializes the variables required."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static void setAllVariables() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        validUserInputWithOption \u003d \"retrieve/time 5\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        userInputWithOptionZero \u003d \"retrieve/time 0\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        userInputWithOptionSix \u003d \"retrieve/time 6\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        userInputWithRandomStringOption \u003d \"retrieve/time a0b1c2\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        userInputWithOptionInDecimal \u003d \"retrieve/time 1.1\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        userInputWithoutOption \u003d \"retrieve/time \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method initializes the variables required before a test."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static void setRetrievedFreeTimesList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String validUserInputWithDuration \u003d \"find/time 3 hours\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new FindFreeTimesParse(validUserInputWithDuration).parse();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void retrieveFreeTimesWithOptionZero() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        setRetrievedFreeTimesList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d INVALID_OPTION;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new RetrieveFreeTimesParse(userInputWithOptionZero).parse();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException | DukeNoValidDataException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void retrieveFreeTimesWithOptionSix() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        setRetrievedFreeTimesList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d INVALID_OPTION;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new RetrieveFreeTimesParse(userInputWithOptionSix).parse();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException | DukeNoValidDataException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void retrieveFreeTimesWithRandomStringOption() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        setRetrievedFreeTimesList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d INVALID_OPTION;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new RetrieveFreeTimesParse(userInputWithRandomStringOption).parse();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException | DukeNoValidDataException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void retrieveFreeTimesWithOptionInDecimal() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        setRetrievedFreeTimesList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d INVALID_OPTION;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new RetrieveFreeTimesParse(userInputWithOptionInDecimal).parse();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException | DukeNoValidDataException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void retrieveFreeTimesWithoutOption() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        setRetrievedFreeTimesList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d INVALID_EMPTY_OPTION;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new RetrieveFreeTimesParse(userInputWithoutOption).parse();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException | DukeNoValidDataException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void retrieveFreeTimesValidUserInputWithOption() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        setRetrievedFreeTimesList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new RetrieveFreeTimesParse(validUserInputWithOption).parse();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException | DukeNoValidDataException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void retrieveFreeTimesValidUserInputWithOptionWithoutPopulatedList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new RetrieveFreeTimesParse(validUserInputWithOption).parse();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException | DukeNoValidDataException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 9,
      "hwbjerry": 164
    }
  },
  {
    "path": "src/test/java/retrieveprevioustest/RetrievePreviousCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package retrieveprevioustest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.RetrievePreviousCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.ShowPreviousCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import parser.FindFreeTimesParse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import parser.ShowPreviousParse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import parser.WeekParse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "import stubclasses.StorageStub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": " * This class tests RetrievePreviousCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class RetrievePreviousCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static ArrayList\u003cString\u003e previousInputList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static String userInputWithValidNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static String userInputToGetFromNonEmptyPreviousInputList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static String userInputWithoutInteger;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static String userInputWithString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static String userInputWithNumberZero;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static String userInputWithNegativeNumber;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private TaskList events \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private TaskList deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private StorageStub storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private UserInteraction ui \u003d new UserInteraction();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method initializes the variables required."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static void setAllVariables() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": "        previousInputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "        userInputWithValidNumber \u003d \"retrieve/previous 2\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": "        userInputToGetFromNonEmptyPreviousInputList \u003d \"retrieve/previous 1\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "        userInputWithoutInteger \u003d \"retrieve/previous\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "        userInputWithString \u003d \"retrieve/previous abc\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": "        userInputWithNumberZero \u003d \"retrieve/previous 0\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "        userInputWithNegativeNumber \u003d \"retrieve/previous -10\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method initializes the variables required before a test."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void runWeekCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String validUserInputWithDuration \u003d \"show/week 3\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0325961"
        },
        "content": "            command \u003d new WeekParse(validUserInputWithDuration).parse();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0325961"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method initializes the variables required before a test."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void setRetrievedFreeTimesList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String validUserInputWithDuration \u003d \"find/time 3 hours\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": "            command \u003d new FindFreeTimesParse(validUserInputWithDuration).parse();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0325961"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method initializes the variables required before a test."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void showPreviousCommandList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0325961"
        },
        "content": "        setRetrievedFreeTimesList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0325961"
        },
        "content": "        runWeekCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0325961"
        },
        "content": "        setRetrievedFreeTimesList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0325961"
        },
        "content": "        runWeekCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0325961"
        },
        "content": "        populateUserList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String validUserInput \u003d \"show/previous 2\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0325961"
        },
        "content": "            command \u003d new ShowPreviousParse(validUserInput).parse();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "0325961"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void populateUserList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0325961"
        },
        "content": "        previousInputList.add(\"find/time 1 hour\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "0325961"
        },
        "content": "        previousInputList.add(\"find/time 1 hour\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void retrievePreviousCommand_userInputWithoutInteger_throwsDukeInvalidCommandException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d new RetrievePreviousCommand(userInputWithoutInteger);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"\u003cx\u003e cannot be empty. Please enter the valid command as retrieve/previous \u003cx\u003e, \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0325961"
        },
        "content": "                + \"where x is an integer.\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void retrievePreviousCommand_userInputWithString_throwsDukeInvalidCommandException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0325961"
        },
        "content": "        showPreviousCommandList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0325961"
        },
        "content": "        runWeekCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d new RetrievePreviousCommand(userInputWithString);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"The x in retrieve/previous \u003cx\u003e must be an integer and not a string.\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void retrievePreviousCommand_userInputWithNumberZero_throwsDukeInvalidCommandException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0325961"
        },
        "content": "        showPreviousCommandList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0325961"
        },
        "content": "        runWeekCommand();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0325961"
        },
        "content": "        previousInputList \u003d ShowPreviousCommand.getOutputList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int sizeOfList \u003d previousInputList.size();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d new RetrievePreviousCommand(userInputWithNumberZero);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"Please enter a valid integer x from 1 to \" + sizeOfList + \" .\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void retrievePreviousCommand_userInputWithNegativeNumber_throwsDukeInvalidCommandException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "0325961"
        },
        "content": "        setRetrievedFreeTimesList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "0325961"
        },
        "content": "        runWeekCommand();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "0325961"
        },
        "content": "        setRetrievedFreeTimesList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "0325961"
        },
        "content": "        runWeekCommand();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "0325961"
        },
        "content": "        showPreviousCommandList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "0325961"
        },
        "content": "        runWeekCommand();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "0325961"
        },
        "content": "        previousInputList \u003d ShowPreviousCommand.getOutputList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "0325961"
        },
        "content": "        populateUserList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int sizeOfList \u003d previousInputList.size();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d new RetrievePreviousCommand(userInputWithNegativeNumber);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"Please enter a valid integer x from 1 to \" + sizeOfList + \" .\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void retrievePreviousCommand_UserInputWithValidNumber() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "0325961"
        },
        "content": "        showPreviousCommandList();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "0325961"
        },
        "content": "        runWeekCommand();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d new RetrievePreviousCommand(userInputWithValidNumber);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "0325961"
        },
        "content": "        previousInputList \u003d ShowPreviousCommand.getOutputList();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String chosenInput \u003d previousInputList.get(index);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"Your chosen previous input is: \\n\" + chosenInput;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void retrievePreviousCommand_UserInputWithNonEmptyList() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "0325961"
        },
        "content": "        populateUserList();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "0325961"
        },
        "content": "        populateUserList();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "0325961"
        },
        "content": "        showPreviousCommandList();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "0325961"
        },
        "content": "        runWeekCommand();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d new RetrievePreviousCommand(userInputToGetFromNonEmptyPreviousInputList);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "0325961"
        },
        "content": "        previousInputList \u003d ShowPreviousCommand.getOutputList();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String chosenInput \u003d previousInputList.get(index);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d ui.showChosenPreviousChoice(chosenInput);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 218,
      "hwbjerry": 12
    }
  },
  {
    "path": "src/test/java/showprevioustest/ShowPreviousCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package showprevioustest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.ShowPreviousCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.UserInteraction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import parser.FindFreeTimesParse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import stubclasses.StorageStub;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": " * This class tests ShowPreviousCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class ShowPreviousCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static String userInputWithInvalidNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static ArrayList\u003cString\u003e userInputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static int sizeOfList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private TaskList events \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private TaskList deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private StorageStub storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private UserInteraction ui \u003d new UserInteraction();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method initializes the variable required."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static void setAllVariables() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "        userInputWithInvalidNumber \u003d \"show/previous 3\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method initializes the variables required before a test."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void setRetrievedFreeTimesList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String validUserInputWithDuration \u003d \"find 3 hours\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "            command \u003d new FindFreeTimesParse(validUserInputWithDuration).parse();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0325961"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void showPreviousCommand_UserInputWithInvalidNumber_throwsDukeInvalidCommandexception() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String firstInput \u003d \"add/d CS2100 finish tutorial /by 12/10/2019 1300\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String secondInput \u003d \"add/d CS2100 assignment 2 /by 13/10/2019 1400\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String weekInput \u003d \"Week 6\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Duke.userInputs.add(firstInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Duke.userInputs.add(weekInput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Duke.userInputs.add(secondInput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Duke.userInputs.add(weekInput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Duke.userInputs.add(secondInput);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Duke.userInputs.add(weekInput);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0325961"
        },
        "content": "        sizeOfList \u003d Duke.getUserInputs().size() / 2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String t \u003d userInputWithInvalidNumber.replaceFirst(\"show/previous\", \"\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String showPreviousNumber \u003d t.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d new ShowPreviousCommand(showPreviousNumber);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"There are only \" + (sizeOfList - 1) + \" previous commands. Please enter a valid number \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0325961"
        },
        "content": "                + \"less than or equal to \" + (sizeOfList - 1) + \" .\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d command.execute(events, deadlines, ui, storageStub);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 81,
      "hwbjerry": 6
    }
  },
  {
    "path": "src/test/java/showprevioustest/ShowPreviousParseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package showprevioustest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import parser.ShowPreviousParse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": " * This class tests ShowPreviousParse."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class ShowPreviousParseTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static String userInputWithInvalidCommandType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static String userInputWithInvalidString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static String userInputWithInvalidNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static String validUserInputWithNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static String validUserInputWithCommandType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static String firstInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static String secondInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private static ArrayList\u003cString\u003e userInputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method initializes the variables required."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public static void setAllVariables() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "        userInputWithInvalidCommandType \u003d \"show/previous remove/all\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": "        userInputWithInvalidString \u003d \"show/previous abc.def\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "        userInputWithInvalidNumber \u003d \"show/previous -100\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "        validUserInputWithNumber \u003d \"show/previous 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "        validUserInputWithCommandType \u003d \"show/previous add/d\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "        firstInput \u003d \"add/d CS2100 finish tutorial /by 12/10/2019 1300\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "        secondInput \u003d \"add/d CS2100 assignment 2 /by 13/10/2019 1400\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "        userInputList.add(firstInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "        userInputList.add(secondInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void showPreviousParse_userInputWithInvalidCommandType_throwsDukeInvalidCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"Invalid Input. There is no such command type in previous input\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "            command \u003d new ShowPreviousParse(userInputWithInvalidCommandType).parse();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void showPreviousParse_userInputWithInvalidString_throwsDukeInvalidCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"Invalid Input. There is no such command type in previous input\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0325961"
        },
        "content": "            command \u003d new ShowPreviousParse(userInputWithInvalidString).parse();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void showPreviousParse_userInputWithInvalidNumber_throwsDukeInvalidCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"Invalid Input. Cannot enter negative number. Please enter a valid integer greater than 0\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0325961"
        },
        "content": "            command \u003d new ShowPreviousParse(userInputWithInvalidNumber).parse();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void showPreviousParse_userInputWithValidNumber() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"No error\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0325961"
        },
        "content": "            command \u003d new ShowPreviousParse(validUserInputWithNumber).parse();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertNotNull(expected, actual);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void showPreviousParse_userInputWithValidCommandType() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String expected \u003d \"No error\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "0325961"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "0325961"
        },
        "content": "            command \u003d new ShowPreviousParse(validUserInputWithCommandType).parse();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "0325961"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "0325961"
        },
        "content": "        assertNotNull(expected, actual);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 104,
      "hwbjerry": 3
    }
  },
  {
    "path": "src/test/java/stubclasses/DukeStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package stubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class DukeStub extends Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return super.getResponse(input);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void runGetResponse(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "        getResponse(\"find/time 3\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "        getResponse(\"find/time 3\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 15
    }
  },
  {
    "path": "src/test/java/stubclasses/ReminderStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package stubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Reminder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import tasks.Assignment;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class represents Reminder to be used for unit testing."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class ReminderStub extends Reminder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cDate, Assignment\u003e remindMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private SimpleDateFormat dateOutputFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private SimpleDateFormat timeOutputFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Assignment reminderTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static Date reminderTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void removeTimerTask(Assignment task, Date date, String reminderTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assert reminderTime !\u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setReminderThread(Date date, Assignment task) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static void setReminderTask(Assignment task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminderTask \u003d task;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public static void setReminderTime(Date time) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminderTime \u003d time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public HashMap\u003cDate, Assignment\u003e getRemindMap() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        remindMap.put(reminderTime, reminderTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return remindMap;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 43,
      "0325961": 3
    }
  },
  {
    "path": "src/test/java/stubclasses/StorageStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package stubclasses;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commons.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " * This class represents Storage to be used for unit testing."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class StorageStub extends Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ReminderStub reminderStub \u003d new ReminderStub();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public ReminderStub getReminderObject() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return reminderStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 13,
      "0325961": 2
    }
  },
  {
    "path": "src/test/java/weektest/WeekParseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package weektest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import dukeexceptions.DukeInvalidFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import parser.WeekParse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "//@@author hwbjerry"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " * This class tests WeekParse."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class WeekParseTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String INVALID_EMPTY_WEEK \u003d \"Invalid Input.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"The week cannot be blank.\\nPlease enter the command as follows.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"show/week \u003cx\u003e , where x is a digit between 1 - 13, inclusive or \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"x is either \u0027recess\u0027, \u0027reading\u0027, or \u0027exam\u0027\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String INVALID_WEEK \u003d \"Invalid Week. Please enter the command as follows. \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"show/week \u003cx\u003e , where x is a digit between 1 - 13, inclusive or \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            + \"x is either \u0027recess\u0027, \u0027reading\u0027, or \u0027exam\u0027\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String validUserInputWithDigitWeek;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String validUserInputWithRecessWeek;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String validUserInputWithReadingWeek;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String validUserInputWithExamWeek;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String userInputWithWeekZero;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String userInputWithWeekFourteen;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String userInputWithRandomStringWeek;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String userInputWithWeekInDecimal;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static String userInputWithoutWeek;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method initializes the variables required."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static void setAllVariables() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        validUserInputWithDigitWeek \u003d \"show/week 5\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        validUserInputWithRecessWeek \u003d \"show/week recess\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        validUserInputWithReadingWeek \u003d \"show/week reading\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        validUserInputWithExamWeek \u003d \"show/week exam\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        userInputWithWeekZero \u003d \"show/week 0\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        userInputWithWeekFourteen \u003d \"show/week 14\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        userInputWithRandomStringWeek \u003d \"a0b1c2\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        userInputWithWeekInDecimal \u003d \"show/week 1.1\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        userInputWithoutWeek \u003d \"show/week \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void weekWithWeekZero() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d INVALID_WEEK;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new WeekParse(userInputWithWeekZero).parse();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void weekWithWeekFourteen() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d INVALID_WEEK;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new WeekParse(userInputWithWeekFourteen).parse();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void weekWithRandomStringWeek() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d INVALID_WEEK;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new WeekParse(userInputWithRandomStringWeek).parse();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void weekWithWeekInDecimal() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d INVALID_WEEK;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new WeekParse(userInputWithWeekInDecimal).parse();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void weekWithoutWeek() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d INVALID_EMPTY_WEEK;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new WeekParse(userInputWithoutWeek).parse();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void weekValidUserInputWithDigitWeek() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new WeekParse(validUserInputWithDigitWeek).parse();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void weekValidUserInputWithRecessWeek() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new WeekParse(validUserInputWithRecessWeek).parse();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void weekValidUserInputWithReadingWeek() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new WeekParse(validUserInputWithReadingWeek).parse();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void weekValidUserInputWithExamWeek() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d \"No error\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            command \u003d new WeekParse(validUserInputWithExamWeek).parse();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (DukeInvalidFormatException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            actual \u003d e.getMessage();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertNotNull(command, actual);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 4,
      "hwbjerry": 163
    }
  }
]
