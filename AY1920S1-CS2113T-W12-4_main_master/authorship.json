[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    archiveBaseName \u003d \"\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    archiveVersion \u003d \"v1.2\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.5.0\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    compile group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u002711.0.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "lionlim97": 16,
      "-": 46
    }
  },
  {
    "path": "src/main/java/Commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import JavaFx.AlertBox;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the command to add a Task object to a TaskList object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task The Task object to be added"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the adding of a Task object to a TaskList object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and displaying the add task response."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the add task message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display add task message"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws FileNotFoundException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String out \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        int con \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        boolean isOK \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        AlertBox AB \u003d new AlertBox();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (task.getType().equals(\"[E]\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            int size \u003d events.taskListSize();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean[] conflict \u003d new boolean[size];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (events.getTask(i).getDateTime().equals(task.getDateTime())) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    conflict[i] \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    con++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            if (con \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                events.addTask(this.task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                out \u003d \"true|\" + ui.showAdd(this.task, events.taskListSize());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                storage.updateEventList(events);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                out \u003d \"Sorry, you have similar events at the same time and on the same day \\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (conflict[i]) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        out +\u003d events.getTask(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                AB.display(\"Warning\", \"Clash in events\", out, Alert.AlertType.WARNING);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } else if (task.getType().equals(\"[D]\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            int size \u003d deadlines.taskListSize();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            boolean[] conflict \u003d new boolean[size];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                if (deadlines.getTask(i).getDateTime().equals(task.getDateTime())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    conflict[i] \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    con++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            if (con !\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                out \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    if (conflict[i]) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        out +\u003d deadlines.getTask(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                isOK \u003d AB.display(\"Note\", \"Similar deadline\", \"Here are the list of similar deadlines\", Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                deadlines.addTask(this.task);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                out \u003d ui.showAdd(this.task, deadlines.taskListSize());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 26,
      "lionlim97": 17,
      "hwbjerry": 3,
      "-": 42
    }
  },
  {
    "path": "src/main/java/Commands/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the command to end the program."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the updating of the file with current list of tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the TaskList object and displays the goodbye message"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the goodbye message"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display goodbye message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception On file not found error"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.updateEventList(events);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return ui.showBye();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 5,
      "-": 21
    }
  },
  {
    "path": "src/main/java/Commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Abstract class Command with methods representing all the Command subclasses to be"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * carried out when an input is entered by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public abstract String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws Exception;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 1,
      "-": 9
    }
  },
  {
    "path": "src/main/java/Commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the command to delete a Task object from a TaskList object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private Task T;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList listToChange;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a DeleteCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param T The task to be deleted"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param list The name of the TaskList that requires changing"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public DeleteCommand(String list, Task T){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.T \u003dT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the deletion of a task inside the TaskList object with the given index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the delete task message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display delete task message"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException On ArrayList out of bound error"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "       try{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (list.equals(\"event\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                events.removeTask(T);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                storage.updateEventList(events);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                listToChange \u003d events;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else if (list.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                deadlines.removeTask(T);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                listToChange \u003d deadlines;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            return ui.showDelete(T, listToChange.taskListSize());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } catch(ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            throw new DukeException(\"\\u2639\" + \" OOPS!!! I\u0027m sorry, but we cannot find the input task  :-(\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 14,
      "lionlim97": 13,
      "hwbjerry": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/Commands/DoWithinPeriodTasksCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Interface.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Interface.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import JavaFx.AlertBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Represent the command that deals with tasks that need to be done within a certain period"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class DoWithinPeriodTasksCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String taskDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final boolean isValid;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Creates a DoWithinPeriodTasksCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param taskDescription The task description given"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param startDate The start date given"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param endDate The end date given"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param isValid is used to store the validity of user\u0027s input date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public DoWithinPeriodTasksCommand (String taskDescription, String startDate, String endDate, boolean isValid) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "        this.isValid \u003d isValid;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Executes the adding of Do Within Period Tasks object into TaskList object and displays."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * AlertBox to show reminder."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param events The events TaskList object that contain event tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param deadlines The deadlines TaskList object that contain deadline tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param ui The Ui object to display the add task message"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display reminder message"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (isValid) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": "            AlertBox.display(\"Reminder Alert\", \"You have a task to do within a period.\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    taskDescription + \" (from \" + startDate + \" to \" + endDate + \")\", Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return ui.showReminder(taskDescription, startDate, endDate, isValid);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 1,
      "0325961": 50
    }
  },
  {
    "path": "src/main/java/Commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represent the command to mark a check on a task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a DoneCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index The index representing the task number in the TaskList object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoneCommand(int index){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the marking a check on a task inside the TaskList object with the given index."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the done task message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display done task message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException On ArrayList out of bound error"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        /*if(index \u003e\u003d 0 \u0026\u0026 index \u003c todos.taskListSize()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            todos.markAsDone(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return ui.showDone(todos.getTask(index));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeException(\"\\u2639\" + \" OOPS!!! I\u0027m sorry, but we cannot find the input task number :-(\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return null; //remove this after fixing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 13,
      "hwbjerry": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/Commands/FilterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Interface.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Interface.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " * Represents the command to show the list of tasks corresponding to a keyword"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class FilterCommand extends  Command{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public FilterCommand(String keyword){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.keyword \u003dkeyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * Execute the displaying of all task the contains a certain keyword"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param ui The Ui object to display the list message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display list message"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        ArrayList\u003cTask\u003e event \u003d events.getList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        ArrayList\u003cTask\u003e deadline \u003d deadlines.getList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        for(int i \u003d 0; i \u003cevent.size();i++){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            if (event.get(i).toString().toLowerCase().contains(keyword)|"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                event.get(i).toString().toUpperCase().contains(keyword) ){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                list.addTask(event.get(i));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        for(int i \u003d 0; i \u003cdeadline.size();i++){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            if (deadline.get(i).toString().toLowerCase().contains(keyword)|"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    deadline.get(i).toString().toUpperCase().contains(keyword)){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                list.addTask(deadline.get(i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return ui.showFilter(list,this.keyword);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 49
    }
  },
  {
    "path": "src/main/java/Commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Interface.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Interface.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " * Represents the command to display a guide to all commands"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class HelpCommand extends Command{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * Executes the displaying of guide to all commands"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param ui The Ui object to display the delete task message"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display delete task message"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String help;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        help \u003d \"Here is a guide of how to use the different commands\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return ui.showHelp(help);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 24
    }
  },
  {
    "path": "src/main/java/Commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the command to show the list of tasks on a TaskList object"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String list;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList listToView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public ListCommand(String list){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the display of all the task in the TaskList object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the list message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display list message"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if(list.equals(\"event\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            listToView \u003d events;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if(list.equals(\"deadline\")){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            listToView \u003d deadlines;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return ui.showList(listToView);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 14,
      "hwbjerry": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/Commands/RecurringCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import Interface.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import Interface.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "public class RecurringCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private final String startTimeString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private final String endTimeString;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private final Date endDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private Date startOfFollowingWeek;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * Add task that is recurring over a period of time"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param description Description of a task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param startDate Start date of a task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param endDate End date of a task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param startTimeString Start time of a task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @param endTimeString End time of a task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public RecurringCommand(String description, Date startDate, Date endDate, String startTimeString, String endTimeString) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.startTimeString \u003d startTimeString;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.endTimeString \u003d endTimeString;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws ParseException, FileNotFoundException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String startDateString \u003d dateFormat.format(startDate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String endDateString \u003d dateFormat.format(endDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        Date oldStartDate \u003d startDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            events.addTask(new Event(description, startDateString, startTimeString, endTimeString));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            storage.updateEventList(events);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            startOfFollowingWeek \u003d new Date(startDate.getTime() + 7 * 24 * 60 * 60 * 1000);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            startDateString \u003d dateFormat.format(startOfFollowingWeek);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            startDate \u003d startOfFollowingWeek;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        while (startOfFollowingWeek.before(endDate) || startOfFollowingWeek.equals(endDate));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String oldStartDateString \u003d dateFormat.format(oldStartDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return ui.showRecurring(description, oldStartDateString, endDateString);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "darrenoje": 56
    }
  },
  {
    "path": "src/main/java/Commands/RemindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Interface.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import org.controlsfx.control.Notifications;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemindCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Date time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Timer timer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cDate, Timer\u003e timerHashMap;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cDate, Timeline\u003e timelineHashMap;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Image img;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private boolean remind;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Timeline timeline;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private long seconds;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public RemindCommand (Task task, Date time, boolean remind) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timerHashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timelineHashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timer \u003d new Timer();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        img \u003d new Image(\"/images/DaDuke.png\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.remind \u003d remind;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Sets a reminder pop-up for task user wants to set a reminder to."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the done task message"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display remind message"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException On date parsing error"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        HashMap\u003cString, HashMap\u003cString, ArrayList\u003cTask\u003e\u003e\u003e deadlineMap \u003d deadlines.getMap();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        HashMap\u003cDate, Task\u003e reminderMap \u003d storage.getReminderMap();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String reminderTime \u003d dateFormat.format(time);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (!remind) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            timer \u003d timerHashMap.get(time);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            timer.cancel();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            timerHashMap.remove(time);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            timeline \u003d timelineHashMap.get(time);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            timeline.stop();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            timelineHashMap.remove(time);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return ui.showCancelReminder(task, reminderTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (this.time.before(currentDate)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            throw new DukeException(\"Sorry, you cannot set a time that has already passed!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if (this.time.after(currentDate)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            seconds \u003d time.getTime() - currentDate.getTime();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (timerHashMap.containsKey(time)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Task remindedTask \u003d reminderMap.get(time);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                throw new DukeException(\"Sorry, you have a reminder set for \" + remindedTask.getDescription() + \" at: \" + task.getDateTime());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else if (!deadlineMap.containsKey(task.getModCode())) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                throw new DukeException(\"Sorry, you have no such mod entered in your deadline table!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else if (!deadlineMap.get(task.getModCode()).containsKey(task.getDateTime())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                throw new DukeException(\"Sorry, you have no such timing entered in your deadline table!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                ArrayList\u003cTask\u003e allTaskInDate \u003d deadlineMap.get(task.getModCode()).get(task.getDateTime());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                boolean hasTask \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for (Task taskInList : allTaskInDate) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if (taskInList.getDescription().equals(task.getDescription())) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        hasTask \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                if (!hasTask) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    throw new DukeException(\"Sorry, there are no such task description in your deadline table!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            deadlines.setReminder(task , reminderTime, remind);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            notification(deadlines, reminderTime);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "/*            timer.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                public void run() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Notifications notificationBuilder \u003d Notifications.create()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .title(\"REMINDER!!!\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .graphic(new ImageView(img))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .text(task.getModCode() + \" \" + task.getDescription() + \"\\n\" + task.getDateTime())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .darkStyle()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            .position(Pos.BOTTOM_RIGHT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    notificationBuilder.show();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    timer.cancel();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    deadlines.setReminder(task , reminderTime, false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }, seconds);*/"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            timerHashMap.put(time, timer);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return ui.showReminder(task, reminderTime);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private void notification(TaskList deadlines, String reminderTime) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timeline \u003d new Timeline(new KeyFrame(Duration.seconds(seconds), event -\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Notifications notificationBuilder \u003d Notifications.create()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    .title(\"REMINDER!!!\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    .graphic(new ImageView(img))"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    .text(task.getModCode() + \" \" + task.getDescription() + \"\\n\" + task.getDateTime())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    .darkStyle()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    .position(Pos.BOTTOM_RIGHT)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    .onAction(notificationEvent -\u003e {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        timeline.stop();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            notificationBuilder.show();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timeline.setCycleCount(Timeline.INDEFINITE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        timelineHashMap.put(time,timeline);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlines.setReminder(task , reminderTime, false);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 107,
      "-": 28
    }
  },
  {
    "path": "src/main/java/Commands/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the command to snooze a Task object to a TaskList object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeCommand extends Command{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String dateString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String start;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String end;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private String modCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an SnoozeCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index The index representing the task number in the TaskList object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public SnoozeCommand(int index, String dateString, String start, String end){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dateString \u003d dateString;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the snoozing a task inside the TaskList object with the given number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param events The TaskList object for events"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param deadlines The TaskList object for deadlines"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui The Ui object to display the find message"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage The Storage object to access file to load or save the tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the method in the Ui object which returns the string to display snooze message"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String execute(TaskList events, TaskList deadlines, Ui ui, Storage storage) throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cTask\u003e eventsList \u003d events.getList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cTask\u003e deadlinesList \u003d deadlines.getList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Task task : eventsList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            list.addTask(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Task task : deadlinesList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            list.addTask(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (end.equals(dateString)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            list.snoozeTask(deadlinesList, index, dateString, start, dateString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            storage.updateDeadlineList(deadlines);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return ui.showSnooze(index, deadlinesList.size(), deadlinesList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            list.snoozeTask(eventsList, index, dateString, start, end);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            storage.updateEventList(events);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            return ui.showSnooze(index, eventsList.size(), eventsList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 20,
      "0325961": 1,
      "darrenoje": 11,
      "hwbjerry": 4,
      "-": 24
    }
  },
  {
    "path": "src/main/java/Interface/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Interface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A program that manages tasks input by user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * with commands that includes adding, deleting, displaying list of tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * and to mark completion of a task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final TaskList events;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final TaskList deadlines;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates Duke object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        events \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            storage.readDeadlineList(deadlines);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            storage.readEventList(events);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException | ParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showLoadingError(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method runs the Duke program."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input The user\u0027s input to the Duke program"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the string to respond to user\u0027s input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private String run(String input) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            return c.execute(events, deadlines, ui, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return ui.showError(e);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return run(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 2,
      "lionlim97": 12,
      "0325961": 4,
      "-": 46
    }
  },
  {
    "path": "src/main/java/Interface/LookupTable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "package Interface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " * Lookup table that provides date given week and day"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Krazzen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "public class LookupTable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * Creates a lookup table object and read from Lookup.txt file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public LookupTable() throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        // InputStream is \u003d getClass().getResourceAsStream(\"Lookup.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "         //InputStreamReader isr \u003d new InputStreamReader(is);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "         //BufferedReader reader \u003d new BufferedReader(isr);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "         BufferedReader reader \u003d new BufferedReader(new FileReader(System.getProperty(\"user.dir\") + \"\\\\data\\\\Lookup.txt\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        while ((line \u003d reader.readLine()) !\u003d null)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            String[] parts \u003d line.split(\":\", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            if (parts.length \u003e\u003d 2)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                String key \u003d parts[0].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                String value \u003d parts[1].trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                this.map.put(key.trim().toLowerCase(), value);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        //isr.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        //is.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * Translate week,day to date"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param week_day week and day of activity in academic calender"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @return date of activity"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public  String getDate(String week_day){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String out \u003d map.get(week_day.toLowerCase().trim());//week_day in the format of (week x day x)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String getDates(String week){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return map.get(week);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String getWeek(String date){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String out \u003d map.get(date);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 50,
      "hwbjerry": 9
    }
  },
  {
    "path": "src/main/java/Interface/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Interface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Commands.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import JavaFx.AlertBox;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Deals with the input of the user and tries to understand the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * user\u0027s input with fixed commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String[] split;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String[] split1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String[] split2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private static String[] split3;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String[] arr;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String[] arr1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String[] arr2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String[] arr3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    private static String[] arr4;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static LookupTable LT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            LT \u003d new LookupTable();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method breaks apart the user\u0027s input and tries to make sense with it."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param fullCommand The user\u0027s input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns a Command object based on user\u0027s input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException On invalid input or when wrong input format is entered"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fullCommand.trim().equals(\"bye\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ByeCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }else if(fullCommand.trim().equalsIgnoreCase(\"help\")){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "              return new HelpCommand();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else if (fullCommand.trim().substring(0, 4).equals(\"list\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String list \u003d fullCommand.trim().substring(5);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if (list.trim().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! Please do not leave name of list blank.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    } else if (list.trim().equals(\"todo\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        return new ListCommand(list);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    } else if (list.trim().equals(\"event\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        return new ListCommand(list);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    } else if (list.trim().equals(\"deadline\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        return new ListCommand(list);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! Please enter name of list\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please enter list as follows:\\n\" +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            \"list name_of_list_to_view\\n\" +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            \"For example: list todo\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (fullCommand.trim().substring(0, 4).equals(\"done\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    int index \u003d Integer.parseInt(split[1]) - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                    return new DoneCommand(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"\\u2639\" + \" OOPS!!! Please enter a valid task number.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\"\\u2639\" + \" OOPS!!! Please do not leave task number blank.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            } else if (fullCommand.trim().substring(0, 5).equals(\"add/e\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                try { //add/e module_code description /at date from time to time"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String activity \u003d fullCommand.trim().substring(5);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    split \u003d activity.split(\"/at\"); //split[0] is \" module_code description\", split[1] is \"date /from time /to time\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if (split[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    split1 \u003d split[1].split(\"/from\"); //split1[0] is \"date\", split1[1] is \"time to time\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String weekDate \u003d\"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split2 \u003d split1[0].trim().split(\" \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    weekDate \u003d split2[0];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if(weekDate.equalsIgnoreCase(\"reading\") || weekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            || weekDate.equalsIgnoreCase(\"week\") || weekDate.equalsIgnoreCase(\"recess\")){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d LT.getDate(split1[0].trim());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }else{"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d split1[0].trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\"); //format date"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date date \u003d formatter.parse(weekDate.trim());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    split2 \u003d split1[1].split(\"/to\"); //split2[0] is (start) \"time\", split2[1] is (end) \"time\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat formatter1 \u003d new SimpleDateFormat(\"HHmm\"); //format time"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date startTime \u003d formatter1.parse(split2[0].trim());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date endTime \u003d formatter1.parse(split2[1].trim());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String dateString \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String startTimeString \u003d timeFormat.format(startTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String endTimeString \u003d timeFormat.format(endTime);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    return new AddCommand(new Event(split[0].trim(), dateString, startTimeString, endTimeString));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please enter event as follows:\\n\" +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"add/e modCode name_of_event /at dd/MM/yyyy from HHmm to HHmm\\n\" +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"For example: add/e CS1231 project meeting /at 1/1/2020 from 1500 to 1700\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            } else if (fullCommand.trim().substring(0,7).equals(\"recur/e\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String activity \u003d fullCommand.trim().substring(7);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String startWeekDate;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String endWeekDate;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    arr \u003d activity.split(\"/start\"); //arr[0] is \" module_code description\", arr[1] is \"date to date from time to time\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    if (arr[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    arr1 \u003d arr[1].split(\"/from\"); //arr1[0] is \"date to date\" or \"week X mon to week X mon\", arr1[1] is \"time to time\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    arr3 \u003d arr1[0].split(\"/to\"); //arr3[0] is (start) \"date\", arr3[1] is (end) \"date\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    arr4 \u003d arr3[0].trim().split(\" \"); //split the start date"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    //recess week mon / week 3 mon / exam week mon / reading week tue"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    startWeekDate \u003d arr4[0].trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    if (startWeekDate.equalsIgnoreCase(\"reading\") || startWeekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            || startWeekDate.equalsIgnoreCase(\"week\") || startWeekDate.equalsIgnoreCase(\"recess\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        startWeekDate \u003d LT.getDate(arr3[0].trim());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        startWeekDate \u003d arr3[0].trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    arr4 \u003d arr3[1].trim().split(\" \"); //split the end date"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    endWeekDate \u003d arr4[0].trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    if (endWeekDate.equalsIgnoreCase(\"reading\") || endWeekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            || endWeekDate.equalsIgnoreCase(\"week\") || endWeekDate.equalsIgnoreCase(\"recess\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        endWeekDate \u003d LT.getDate(arr3[1].trim());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        endWeekDate \u003d arr3[1].trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\"); //format date"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    Date startDate \u003d formatter.parse(startWeekDate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    Date endDate \u003d formatter.parse(endWeekDate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    arr2 \u003d arr1[1].split(\"/to\"); //arr2[0] is (start) \"time\", arr2[1] is (end) \"time\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat formatter1 \u003d new SimpleDateFormat(\"HHmm\"); //format time"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    Date startTime \u003d formatter1.parse(arr2[0].trim());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    Date endTime \u003d formatter1.parse(arr2[1].trim());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String startTimeString \u003d timeFormat.format(startTime);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    String endTimeString \u003d timeFormat.format(endTime);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    return new RecurringCommand(arr[0].trim(),startDate, endDate, startTimeString, endTimeString);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please enter recurring event as follows:\\n\" +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"recur/e modCode name_of_event /start dd/MM/yyyy to dd/MM/yyyy from HHmm to HHmm\\n\" +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"For example: recur/e CS1231 project meeting /start 1/10/2019 to 15/11/2019 from 1500 to 1700\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }else if(fullCommand.trim().substring(0,8).equals(\"delete/e\")){"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                try { //add/e module_code description /at date from time to time"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String activity \u003d fullCommand.trim().substring(8);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split \u003d activity.split(\"/at\"); //split[0] is \" module_code description\", split[1] is \"date from time to time\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if (split[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    split1 \u003d split[1].split(\"/from\"); //split1[0] is \"date\", split1[1] is \"time to time\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String weekDate \u003d\"\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split2 \u003d split1[0].trim().split(\" \");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    weekDate \u003d split2[0];"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if(weekDate.equalsIgnoreCase(\"reading\") || weekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            || weekDate.equalsIgnoreCase(\"week\") || weekDate.equalsIgnoreCase(\"recess\")){"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d LT.getDate(split1[0].trim());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }else{"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d split1[0].trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\"); //format date"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date date \u003d formatter.parse(weekDate.trim());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    split2 \u003d split1[1].split(\"/to\"); //split2[0] is (start) \"time\", split2[1] is (end) \"time\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    SimpleDateFormat formatter1 \u003d new SimpleDateFormat(\"HHmm\"); //format time"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date startTime \u003d formatter1.parse(split2[0].trim());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date endTime \u003d formatter1.parse(split2[1].trim());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String dateString \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String startTimeString \u003d timeFormat.format(startTime);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String endTimeString \u003d timeFormat.format(endTime);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    return new DeleteCommand(\"event\",new Event(split[0].trim(), dateString, startTimeString, endTimeString));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please enter in the format as follows:\\n\" +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            \"delete/e mod_code name_of_event /at dd/MM/yyyy from HHmm to HHmm\\n\" +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            \"or delete/e mod_code name_of_event /at week x day from HHmm to HHmm\\n\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (fullCommand.trim().substring(0,6).equals(\"remind\")) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    boolean set \u003d false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String description \u003d \"\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String activity \u003d fullCommand.trim().substring(6);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split \u003d activity.trim().split(\"/by\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if(split[0].contains(\"/set\")){"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        description \u003d split[0].substring(4).trim();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        set \u003d true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        description \u003d split[0].substring(3).trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split1 \u003d split[1].trim().split(\" /to \");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String weekDate \u003d \"\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String reminderDate \u003d \"\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split2 \u003d split1[0].trim().split(\" \");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    weekDate \u003d split2[0];"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split3 \u003d split1[1].trim().split(\" \");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    reminderDate \u003d split3[0];"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if (weekDate.equalsIgnoreCase(\"reading\") || weekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            || weekDate.equalsIgnoreCase(\"week\") || weekDate.equalsIgnoreCase(\"recess\")"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            || reminderDate.equalsIgnoreCase(\"reading\") || reminderDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            || reminderDate.equalsIgnoreCase(\"week\") || reminderDate.equalsIgnoreCase(\"recess\")) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d split1[0].substring(0,split1[0].length()- 4);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        reminderDate \u003d split1[1].substring(0,split1[1].length()- 4);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        String time \u003d split1[0].substring(split1[0].length()- 4);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d LT.getDate(weekDate) + \" \" + time;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        time \u003d split1[1].substring(split1[1].length()- 4);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        reminderDate \u003d LT.getDate(reminderDate) + \" \" + time;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    }else{"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d split1[0];"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        reminderDate \u003d split1[1];"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date dateOfTask \u003d formatter.parse(weekDate);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date dateOfReminder \u003d formatter.parse(reminderDate);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String dateString \u003d dateFormat.format(dateOfTask);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String timeString \u003d timeFormat.format(dateOfTask);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    return new RemindCommand(new Deadline(description, dateString, timeString), dateOfReminder, set);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please enter remind as follows:\\n\" +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            \"remind/(set/rm) mod_code description /by week n.o day time /to week n.o day time\\n\" +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            \"For example: remind/set cs2100 hand in homework /by week 9 fri 1500 /to week 9 thu 1500\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } else if (fullCommand.trim().substring(0,8).equals(\"delete/d\")) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String activity \u003d fullCommand.trim().substring(8);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split \u003d activity.split(\"/by\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if (split[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String weekDate \u003d\"\";"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split2 \u003d split[1].trim().split(\" \");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    weekDate \u003d split2[0];"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if(weekDate.equalsIgnoreCase(\"reading\") || weekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                            || weekDate.equalsIgnoreCase(\"week\") || weekDate.equalsIgnoreCase(\"recess\")){"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d split[1].substring(0,split[1].length()- 4); // week x day y"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        String time \u003d split[1].substring(split[1].length()- 4); // time E.g 0300"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d LT.getDate(weekDate) + \" \" + time;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }else{"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d split[1];"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date date \u003d formatter.parse(weekDate);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String dateString \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String timeString \u003d timeFormat.format(date);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    return new DeleteCommand(\"deadline\",new Deadline(split[0].trim(), dateString, timeString));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    throw new DukeException(\"OOPS!!! Please enter in the format as follows:\\n\" +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            \"delete/d mod_code name_of_event /by dd/MM/yyyy HHmm\\n\" +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            \"or delete/d mod_code name_of_event /by week x day HHmm\\n\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } else if (fullCommand.trim().substring(0, 5).equals(\"add/d\")) {//deadline"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    String activity \u003d fullCommand.trim().substring(5);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split \u003d activity.split(\"/by\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if (split[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String weekDate \u003d\"\";"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split2 \u003d split[1].trim().split(\" \");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    weekDate \u003d split2[0];"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if(weekDate.equalsIgnoreCase(\"reading\") || weekDate.equalsIgnoreCase(\"exam\")"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        || weekDate.equalsIgnoreCase(\"week\") || weekDate.equalsIgnoreCase(\"recess\")){"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d split[1].substring(0,split[1].length()- 4); // week x day y"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        String time \u003d split[1].substring(split[1].length()- 4); // time E.g 0300"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d LT.getDate(weekDate) + \" \" + time;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }else{"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        weekDate \u003d split[1];"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    Date date \u003d formatter.parse(weekDate);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "                    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "                    String dateString \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    String timeString \u003d timeFormat.format(date);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    return new AddCommand(new Deadline(split[0].trim(), dateString, timeString));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new DukeException(\" OOPS!!! Please enter deadline as follows:\\n\" +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            \"add/d mod_code name_of_event /by dd/MM/yyyy HHmm\\n\" +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                            \"or add/d mod_code name_of_event /by week x day HHmm\\n\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } else if(fullCommand.trim().substring(0,6).equalsIgnoreCase(\"filter\")){"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                String keyword \u003d \"\";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                keyword \u003d fullCommand.trim().substring(7);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                return new FilterCommand(keyword);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (fullCommand.trim().substring(0,6).equals(\"snooze\")) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                    String activity \u003d fullCommand.trim().substring(6);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split \u003d activity.split(\"/to\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    split1 \u003d split[0].trim().split(\" \");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    int index \u003d Integer.parseInt(split1[1]) - 1;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if (split1[1].isEmpty()) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "                        throw new DukeException(\"\\u2639\" + \" OOPS!!! The index of a snooze cannot be empty.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    if (split1[0].contains(\"deadline\")) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        Date date \u003d formatter.parse(split[1].trim());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        String dateString \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        String timeString \u003d timeFormat.format(date);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        return new SnoozeCommand(index, dateString, timeString, dateString);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        split2 \u003d split[1].trim().split(\"to\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        split3 \u003d split2[0].trim().split(\" \");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        Date date \u003d formatter.parse(split3[0].trim());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        SimpleDateFormat formatter1 \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        Date startTime \u003d formatter1.parse(split3[1].trim());"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        Date endTime \u003d formatter1.parse(split2[1].trim());"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        String dateString \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        String startTimeString \u003d timeFormat.format(startTime);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                        String endTimeString \u003d timeFormat.format(endTime);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        return new SnoozeCommand(index, dateString, startTimeString, endTimeString);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                    throw new DukeException(\" OOPS!!! Please enter snooze as follows respectively:\\n\" +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"To snooze deadlines: snooze deadline index /to dd/MM/yyyy HHmm\\n\" +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"To snooze events: snooze event index /to dd/MM/yyyy HHmm to HHmm\\n\" +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                            \"For example: snooze event 2 /to 2/12/2019 1800 to 1900\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "0325961"
        },
        "content": "            } else if (fullCommand.contains(\"(from\") \u0026\u0026 fullCommand.contains(\"to\")) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "0325961"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    boolean isValid \u003d true;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    Date date \u003d new Date();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    String currentDate \u003d formatter.format(date);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    int index \u003d fullCommand.indexOf(\"(from\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    String taskDescription \u003d fullCommand.substring(0, index);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    fullCommand \u003d fullCommand.replace(taskDescription, \"\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    fullCommand \u003d fullCommand.replace(\"(from\", \"\").trim();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    String[] startAndEndDate \u003d fullCommand.split(\" to \", 2);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    String startDate \u003d startAndEndDate[0];"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    String endDate \u003d startAndEndDate[1].replace(\")\", \"\").trim();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    Date beginDate \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(startDate);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    Date newCurrentDate \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(currentDate);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    if (beginDate.compareTo(newCurrentDate) \u003c 0) { //date is wrong"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        AlertBox.display(\"Warning message\", \"Invalid date\", \"Please enter another valid date\","
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "0325961"
        },
        "content": "                                Alert.AlertType.WARNING);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        isValid \u003d false;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    System.out.println(\"value of isValid: \" + isValid);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    System.out.println(\"start date: \" + startDate + \" Current date: \" + currentDate);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    return new DoWithinPeriodTasksCommand(taskDescription, startDate, endDate, isValid);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "0325961"
        },
        "content": "                } catch (ParseException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    throw new DukeException(\" OOPS!!! Please enter Do Within Period Task as follows:\\n\" +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            \" \u0027Task Description\u0027 \u0027(from DD/MM/yyyy to DD/MM/yyyy)\u0027\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"\\u2639\" + \" OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"\\u2639\" + \" OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 62,
      "lionlim97": 151,
      "0325961": 29,
      "darrenoje": 66,
      "hwbjerry": 4,
      "-": 68
    }
  },
  {
    "path": "src/main/java/Interface/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Interface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Deals with loading or saving tasks to and from a file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private File filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String filePathEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String filePathDeadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, ArrayList\u003cTask\u003e\u003e\u003e map;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cDate, Task\u003e reminderMap;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates Storage object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Storage(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        filePath \u003d new File(System.getProperty(\"user.dir\") + \"\\\\data\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        filePath.mkdir();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        filePathEvent \u003d System.getProperty(\"user.dir\") + \"\\\\data\\\\event.txt\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        filePathDeadline \u003d System.getProperty(\"user.dir\") + \"\\\\data\\\\deadline.txt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        reminderMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void updateEventList(TaskList list) throws FileNotFoundException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        PrintWriter outputStream \u003d new PrintWriter(filePathEvent);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        map \u003d list.getMap();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Set\u003cString\u003e allMods \u003d map.keySet();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (String mod : allMods) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Set\u003cString\u003e allDates \u003d map.get(mod).keySet();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            for (String date : allDates) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                ArrayList\u003cTask\u003e temp \u003d map.get(mod).get(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for(Task task : temp) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    outputStream.println(task.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        outputStream.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void readEventList(TaskList list) throws IOException, ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cString\u003e temp \u003d new ArrayList\u003c\u003e(Files.readAllLines(Paths.get(filePathEvent)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (String string : temp) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Task task \u003d stringToTask(string);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            list.addTask(task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void updateDeadlineList(TaskList list) throws FileNotFoundException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        PrintWriter outputStream \u003d new PrintWriter(filePathDeadline);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        map \u003d list.getMap();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Set\u003cString\u003e allMods \u003d map.keySet();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (String mod : allMods) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Set\u003cString\u003e allDates \u003d map.get(mod).keySet();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            for (String date : allDates) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                ArrayList\u003cTask\u003e temp \u003d map.get(mod).get(date);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                for(Task task : temp) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    outputStream.println(task.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        outputStream.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void readDeadlineList(TaskList list) throws IOException, ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ArrayList\u003cString\u003e temp \u003d new ArrayList\u003c\u003e(Files.readAllLines(Paths.get(filePathDeadline)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (String string : temp) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Task task \u003d stringToTask(string);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            list.addTask(task);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (task.getIsReminder()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                Date date \u003d dateFormat.parse(task.getRemindTime());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                reminderMap.put(date, task);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public HashMap\u003cDate, Task\u003e getReminderMap() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.reminderMap;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private static Task stringToTask(String string) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (string.trim().isEmpty()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Task line;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (string.contains(\"[D]\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Date date \u003d format.parse(string.substring(string.indexOf(\"by:\") + 4, string.indexOf(\u0027)\u0027)).trim());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String remindTime \u003d string.substring(string.indexOf(\"[\u003cR\") + 3, string.indexOf(\"/R\u003e]\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            String dateString \u003d format.format(date);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            String timeString \u003d timeFormat.format(date);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            line \u003d new Deadline(string.substring(0, string.indexOf(\"[D]\") - 1) + \" \" + string.substring(string.indexOf(\"/R\u003e]\") + 5, string.indexOf(\"by:\") - 2), dateString, timeString);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            line.setRemindTime(remindTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            SimpleDateFormat timeFormat \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            Date date \u003d format.parse(string.substring(string.indexOf(\"at:\") + 4, string.indexOf(\"time:\")));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            String dateString \u003d format.format(date);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            Date startTime \u003d timeFormat.parse(string.substring(string.indexOf(\"time:\") + 6, string.indexOf(\"to\")));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String startTimeString \u003d timeFormat.format(startTime);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            Date endTime \u003d timeFormat.parse(string.substring(string.indexOf(\"to\") + 3, string.indexOf(\u0027)\u0027)).trim());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            String endTimeString \u003d timeFormat.format(endTime);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            line \u003d new Event(string.substring(0, string.indexOf(\"[E]\") - 1) + \" \" + string.substring(string.indexOf(\"/R\u003e]\") + 5, string.indexOf(\"at:\")-2), dateString, startTimeString, endTimeString);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if(string.contains(\"\\u2713\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            line.setDone(true);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (string.contains(\"[HR]\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            line.setReminder(true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 3,
      "lionlim97": 79,
      "darrenoje": 7,
      "-": 42
    }
  },
  {
    "path": "src/main/java/Interface/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Interface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the user interface which displays the messages to"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * respond to the user based on the user\u0027s input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String NO_FIELD \u003d \"void\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String byeMessage \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the exit message when Duke Program ends."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showBye(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return byeMessage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the list message when user inputs list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showList(TaskList list){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String listMessage \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.taskListSize(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            listMessage \u003d listMessage + i + \".\" + list.taskToString(i-1) + \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return listMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays add task message when user wants to add a task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showAdd(Task task, int listSize){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Now you have \" + listSize + (listSize \u003e 1 ? \" tasks in the list.\\n\" : \" task in the list.\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays done task message when user marks a task as done."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showDone(Task task){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the delete task message when user wants to delete a task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showDelete(Task task, int listSize){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        listSize -\u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\\n\" + task.toString() + \"\\n\" + \"Now you have \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                + listSize  + (listSize \u003e 1 ? \" tasks in the list.\\n\" : \" task in the list.\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the find message when a user wants to find tasks with a specific keyword."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showFind(TaskList list){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if(list.taskListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"There are no matching tasks in your list.\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            String findMessage \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d list.taskListSize(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                findMessage \u003d findMessage + i + \".\" + list.taskToString(i - 1) + \"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return findMessage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showFreeTimes(String message){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"You are available at: \\n\" + message);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * Displays the chosen free time after the user select the best free time slot available."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param message The chosen free time"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The chosen free time. Otherwise, operation cancelled."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String showFixedDurationTask(String message){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return message.equals(NO_FIELD) ? \"Operation cancelled!\\nPlease enter another command.\": \"Your selected task is been added.\\n\" + message;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays the show reminder message when user sets a reminder for a task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showReminder(Task task, String time) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"Reminder has been set for \" + task.getModCode() + \" \" + task.getDescription() + \"at: \" + time;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Displays the show cancel reminder message when user sets a reminder for a task."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String showCancelReminder(Task task, String time) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"Reminder has been removed for \" + task.getModCode() + \" \" + task.getDescription() + \"at: \" + time;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the error message if a file is not found."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showLoadingError(Exception e){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"File not found\" + e.getMessage() + \"\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays any of the DukeException error message caught throughout the program."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showError(DukeException e){"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return e.getMessage() + \"\\n\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public String showUserSchedule(String finalSchedule) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return \"Here is your schedule which have been categorised into TODO, DEADLINE and EVENTS\\n\" +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "0325961"
        },
        "content": "                finalSchedule;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the snooze message when a user wants to snooze a task."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String showSnooze(int index, int listSize, ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return \"Noted. I\u0027ve snoozed task number \" + (index+1) + \" to: \" + \"\\n\" + list.get(listSize-1) + \"\\n\" +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Now you have \" + listSize + (listSize \u003e 1 ? \" tasks in the list.\\n\" : \" task in the list.\\n\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * Displays the show reminder message when user enter a task with a period to do within"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param TaskDescription The description of the task entered"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param startDate The start date for task"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param endDate The end date for task"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param isValid determine if user\u0027s input date is entered correctly"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return This returns the reminder message which contain the task description and the start"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * and end date"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public String showReminder(String TaskDescription, String startDate, String endDate, boolean isValid) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (!isValid) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return \"Please enter another valid date in format of DD/MM/yyyy\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0325961"
        },
        "content": "            return \"Reminder have been set for: \" + TaskDescription + \".\" + \" Start Date: \" + startDate +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    \" End Date: \" + endDate + \"\\n\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * Display recurring tasks that are added"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param description desccription of recurring task"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param startDate  start of recurrence"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param endDate   end of recurrence"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    public String showRecurring(String description, String startDate, String endDate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return \"Recurring task: \" + description + \" has been added between \" + startDate + \" and \" + endDate + \"\\n\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * Display task with instance of keyword"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param list List of task with keyword"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     * @param keyword keyword entered by user"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String showFilter(TaskList list,String keyword){"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        if(list.taskListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                return \"There are no task(s) matching your keyword.\\n\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                String message \u003d \"Here are the following events/deadline with the keyword \" + keyword + \"\\n\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d list.taskListSize(); i++) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                    message \u003d message + i + \".\" + list.taskToString(i - 1) + \"\\n\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "                return message;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     *Display a guide to commands"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    public String showHelp(String help){"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return help;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 38,
      "lionlim97": 14,
      "0325961": 21,
      "hwbjerry": 12,
      "darrenoje": 4,
      "-": 94
    }
  },
  {
    "path": "src/main/java/JavaFx/AlertBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "package JavaFx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.control.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " * Controller for user prompt. Provides the layout for different alert types."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class AlertBox {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function generates a alert box based on alert type"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param title The title of alert"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param header The header of the alert"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param message The body of the alert"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param alertType The alert type"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return This returns the option chosen by the user input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public static boolean display(String title, String header, String message, Alert.AlertType alertType){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        boolean isOk \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Alert alert \u003d new Alert(alertType);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        alert.setHeaderText(header);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        alert.setContentText(message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(alertType \u003d\u003d Alert.AlertType.CONFIRMATION) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Optional\u003cButtonType\u003e result \u003d alert.showAndWait();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (result.get() \u003d\u003d ButtonType.OK) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                isOk \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (result.get() \u003d\u003d ButtonType.CANCEL){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                isOk \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (alertType \u003d\u003d Alert.AlertType.INFORMATION || alertType \u003d\u003d Alert.AlertType.WARNING){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            alert.showAndWait();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        alert.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return isOk;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hwbjerry": 40
    }
  },
  {
    "path": "src/main/java/JavaFx/DeadlineView.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "package JavaFx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class DeadlineView {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * This creates DeadlineView object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public DeadlineView(String date, String task){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setDate(String date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setTask(String task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 30
    }
  },
  {
    "path": "src/main/java/JavaFx/FixedDurationTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "package JavaFx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.control.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " * Controller for fixed duration tasks. Provides the GUI for user to select best option."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class FixedDurationTask {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String NO_FIELD \u003d \"void\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String CROSS \u003d \"[\\u2718]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ChoiceBox\u003cString\u003e taskTypeChoiceBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private TextField taskDescriptionTextField;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cString\u003e periodListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Button cancelButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Button addButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private TextField periodTextField;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ArrayList\u003c Pair\u003cDate, Date\u003e\u003e freeTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String taskType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String taskDetails \u003d NO_FIELD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cString\u003e freeTimesList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function gets data from previous window."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param availableTimeSlot Contains all free times found in start and end pairs"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param task The task input by user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param type The task type based on the user\u0027s input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void getData(ArrayList\u003cPair\u003cDate, Date\u003e\u003e availableTimeSlot, String task, String type){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        freeTimes \u003d availableTimeSlot;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        taskDescription \u003d task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        taskType \u003d type;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        taskDescriptionTextField.setText(taskDescription);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        populateFreeTimesList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(type.equals(\"event\")){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            taskTypeChoiceBox.getItems().add(\"[E] Event\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            taskTypeChoiceBox.setValue(\"[E] Event\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            taskTypeChoiceBox.getItems().add(\"[T] Todo\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            taskTypeChoiceBox.setValue(\"[T] Todo\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function populates data into FreeTimeList ObservableList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void populateFreeTimesList(){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        SimpleDateFormat dateTimeFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm aa\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for(Pair\u003cDate, Date\u003e date: freeTimes){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String startEnd \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if(taskType.equals(\"event\")) startEnd \u003d \"Start: \" + dateTimeFormat.format(date.getKey()) + \"\\nEnd: \" + dateTimeFormat.format(date.getValue());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            else if(taskType.equals(\"todo\")) startEnd \u003d \"Start: \" + dateFormat.format(date.getKey()) + \"\\nEnd: \" + dateFormat.format(date.getValue());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            freeTimesList.add(startEnd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        periodListView.setItems(freeTimesList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function returns data processed in current window to previous window."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The command and message to display to the ChatBot"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String returnData(){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function processes the data selected from GUI then generates command and task details."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param taskType The task type"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param date The start and end dates"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The processed data command and task details in a pair"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String sortByTaskType(String taskType, String date) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        date \u003d date.replace(\"Start: \", \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] spiltDate \u003d date.split(\"End: \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String startDate \u003d spiltDate[0];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String endDate \u003d spiltDate[1];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String typeTypeCommand \u003d taskType.trim().substring(4).toLowerCase();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (taskType.substring(0,3).trim().equals(\"[T]\")){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            taskDetails \u003d taskType.trim().substring(0,3) + CROSS + \" \" + taskDescription + \" \" + startDate + \" until \" + endDate;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (taskType.substring(0,3).trim().equals(\"[E]\")){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            taskDetails \u003d taskType.trim().substring(0,3) + CROSS + \" \" + taskDescription + \" (at: \" + startDate + \" until \" + endDate + \")\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return taskDetails;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function checks if is selected parameter valid, then prompts the user to confirm."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void handleAdd() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(!periodTextField.getText().isEmpty()){"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            taskDetails \u003d sortByTaskType((taskTypeChoiceBox.getValue()), periodTextField.getText());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            boolean isOk \u003d AlertBox.display(\"Confirmation Dialog\", \"Add Task\", \"Press OK to add task.\\nPress Cancel to change your options.\", Alert.AlertType.CONFIRMATION);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Stage stage \u003d (Stage) addButton.getScene().getWindow();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (isOk) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                stage.close();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                AlertBox.display(\"Notification Dialog\", \"\", \"Your task has been added.\", Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            AlertBox.display(\"Warning Dialog\",\"Period is empty\",\"Please Select and click a Period from the List.\", Alert.AlertType.WARNING);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function prompts the user to confirm cancel operation."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void handleCancel() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        boolean isCancel \u003dAlertBox.display(\"Confirmation Dialog\",\"Cancel Task\",\"Press OK to return to ChatBot.\\nPress Cancel to return to Hello Better options.\", Alert.AlertType.CONFIRMATION);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Stage stage \u003d (Stage) cancelButton.getScene().getWindow();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(isCancel) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            stage.close();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This function updates periodTextField when mouse clicked on ListView."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void updatePeriod (){"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String temp \u003d periodListView.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        int index \u003d temp.indexOf(\"End:\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String period \u003d temp.substring(0,index) + \" \" + temp.substring(index);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        periodListView.refresh();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        periodListView.setItems(freeTimesList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        periodTextField.setText(period);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hwbjerry": 146
    }
  },
  {
    "path": "src/main/java/JavaFx/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package JavaFx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method sets the platform of the GUI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param stage The window on which the Duke program will appear on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            BorderPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setTitle(\"BetterDuke\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 2,
      "hwbjerry": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/JavaFx/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package JavaFx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.animation.Animation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.fxml.Initializable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.control.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.FontPosture;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "public class MainWindow extends BorderPane implements Initializable {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String NO_FIELD \u003d \"void\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Label currentTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Label currentWeek;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private HBox progressContainer;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e sunEventView;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e monEventView;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e tueEventView;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e wedEventView;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e thuEventView;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e friEventView;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ListView\u003cText\u003e satEventView;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableView\u003cDeadlineView\u003e overdueTable;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableColumn\u003cDeadlineView, String\u003e overdueDateColumn;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableColumn\u003cDeadlineView, String\u003e overdueTaskColumn;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableView\u003cDeadlineView\u003e deadlineTable;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableColumn\u003cDeadlineView, String\u003e deadlineDateColumn;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TableColumn\u003cDeadlineView, String\u003e deadlineTaskColumn;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ArrayList\u003cTask\u003e events;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ArrayList\u003cTask\u003e deadlines;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ArrayList\u003cTask\u003e todos;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ArrayList\u003cTask\u003e overdue;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList eventsList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private TaskList deadlinesList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static LookupTable LT;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            LT \u003d new LookupTable();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "0325961"
        },
        "content": "    protected int number_of_modules;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method initializes the display in the window of the GUI."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void initialize(URL location, ResourceBundle resources) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            todos \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            deadlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            setClock();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            setWeek(true, NO_FIELD);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            retrieveList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "0325961"
        },
        "content": "            openReminderBox();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            deadlineDateColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"date\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            deadlineTaskColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"task\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            deadlineTable.setItems(setDeadlineTable());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            overdueDateColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"date\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            overdueTaskColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"task\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            overdueTable.setItems(setOverdueTable());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "0325961"
        },
        "content": "            setProgressContainer();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "0325961"
        },
        "content": "            setListView();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "0325961"
        },
        "content": "        } catch (IOException | NullPointerException | ParseException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0325961"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This method creates the progress indicator for the different modules."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @throws IOException On reading error in the lines of the file"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private void setProgressContainer() throws IOException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "0325961"
        },
        "content": "        progressContainer.getChildren().clear();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "0325961"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/ProgressIndicator.fxml\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "0325961"
        },
        "content": "        fxmlLoader.load();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Pair\u003cHashMap\u003cString, String\u003e, ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e\u003e result\u003d fxmlLoader.\u003cProgressController\u003egetController().getProgressIndicatorMap(eventsList.getMap(), deadlinesList.getMap());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "0325961"
        },
        "content": "        number_of_modules \u003d result.getKey().keySet().size();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "0325961"
        },
        "content": "        //System.out.println(\"Number of times: \" + (String.valueOf(number_of_modules)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "0325961"
        },
        "content": "        HashMap\u003cString, String\u003e modules \u003d result.getKey();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int totalNumTasks \u003d 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int completedValue \u003d 0;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "0325961"
        },
        "content": "        for (String module : modules.keySet()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "0325961"
        },
        "content": "            ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e tasks \u003d result.getValue();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "0325961"
        },
        "content": "            //totalNumTasks \u003d tasks.size();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "0325961"
        },
        "content": "            for (Pair\u003cString, Pair\u003cString, String\u003e\u003e as : tasks) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "0325961"
        },
        "content": "                if (as.getKey().equals(module)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    totalNumTasks +\u003d 1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    if (as.getValue().getKey().equals(\"\\u2713\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        completedValue +\u003d 1;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "0325961"
        },
        "content": "            FXMLLoader fxmlLoad \u003d new FXMLLoader(getClass().getResource(\"/view/ProgressIndicator.fxml\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "0325961"
        },
        "content": "            Parent loads \u003d fxmlLoad.load();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "0325961"
        },
        "content": "            fxmlLoad.\u003cProgressController\u003egetController().getData(module, totalNumTasks, completedValue);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "0325961"
        },
        "content": "            progressContainer.getChildren().add(loads);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Initialize Duke object in MainWindow controller with Duke object from Main."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param d Duke object from Main bridge"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Animates the clock timer in MainWindow GUI."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private void setClock() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Timeline clock \u003d new Timeline(new KeyFrame(Duration.ZERO, e -\u003e {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"E dd/MM/yyyy HH:mm:ss\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            currentTime.setText(LocalDateTime.now().format(formatter));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }), new KeyFrame(Duration.seconds(1)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        clock.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        clock.play();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * Pulls the list from storage data and stores here."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws IOException On input error reading lines in the file"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @throws ParseException On conversion error from string to Task object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private void retrieveList() throws IOException, ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        eventsList \u003d new TaskList();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlinesList \u003d new TaskList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        overdue \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.readEventList(eventsList);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        storage.readDeadlineList(deadlinesList);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        events \u003d eventsList.getList();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        deadlines \u003d deadlinesList.getList();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ObservableList\u003cDeadlineView\u003e setDeadlineTable() throws ParseException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String to;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String activity;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ObservableList\u003cDeadlineView\u003e deadlineViews \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Task task : deadlines) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            activity \u003d task.toString();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            DateFormat timeFormat\u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Date date \u003d dateFormat.parse(activity.substring(activity.indexOf(\"by:\") + 4, activity.indexOf(\u0027)\u0027)));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            to \u003d timeFormat.format(date);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            description \u003d task.getDescription();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (overdueCheck(date) \u0026\u0026 activity.contains(\"\\u2718\")) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                overdue.add(task);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                deadlineViews.add(new DeadlineView(to, description));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return deadlineViews;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private ObservableList\u003cDeadlineView\u003e setOverdueTable() throws ParseException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String daysDue;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String activity;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        ObservableList\u003cDeadlineView\u003e overdueViews \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Task task : overdue) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            activity \u003d task.toString();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            Date date \u003d dateFormat.parse(activity.substring(activity.indexOf(\"by:\") + 4, activity.indexOf(\u0027)\u0027)));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            daysDue \u003d String.valueOf(daysBetween(date));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            description \u003d task.getDescription();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            overdueViews.add(new DeadlineView(daysDue, description));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return overdueViews;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private void openReminderBox() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "0325961"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "0325961"
        },
        "content": "        for (int i \u003d 0; i \u003c todos.size(); i++) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "0325961"
        },
        "content": "            if (todos.get(i).getDescription().contains(\"(from\") \u0026\u0026 todos.get(i).getDescription().contains(\"to\")) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String description \u003d todos.get(i).getDescription();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "0325961"
        },
        "content": "                int index \u003d description.indexOf(\"(from\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String taskDescription \u003d description.substring(0, index);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "0325961"
        },
        "content": "                description \u003d description.replace(taskDescription, \"\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "0325961"
        },
        "content": "                description \u003d description.replace(\"(from\", \"\").trim();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String[] dateString \u003d description.split(\" to \", 2);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String startDate \u003d dateString[0];"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "0325961"
        },
        "content": "                String endDate \u003d dateString[1].replace(\")\", \"\").trim();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0325961"
        },
        "content": "                if (formatter.format(date).equals(startDate)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    AlertBox.display(\"Reminder Alert\", \" To Do Within Period Task: \" + taskDescription,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            \"Reminder starts today. On: \" + startDate, Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "0325961"
        },
        "content": "                } else if(formatter.format(date).equals(endDate)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    AlertBox.display(\"Reminder Alert\", \"To Do Within Period Task: \" + taskDescription,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            \"Reminder ends today. On: \" + endDate, Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private void handleUserInput() throws ParseException, IOException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (input.startsWith(\"Week\")) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            setWeek(false, input);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            setListView();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if (input.startsWith(\"add\")) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "0325961"
        },
        "content": "            if(response.startsWith(\"true|\")) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "0325961"
        },
        "content": "                refresh(input);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "0325961"
        },
        "content": "                setProgressContainer();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (input.startsWith(\"delete/e\" ) || input.startsWith(\"done/e\")) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[] split \u003d input.split(\"/at\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[] dateAndTime \u003d split[1].split(\"from\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String date \u003d dateAndTime[0].trim();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (date.startsWith(\"Week\")) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String[] dateSplit \u003d date.split(\" \");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                date \u003d dateSplit[0] + \" \" + dateSplit[1];"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                date \u003d LT.getWeek(date);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (date.equals(week)) setWeek(false, week);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Krazzen"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }else if (userInput.getText().equals(\"bye\")) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            delay.setOnFinished( event -\u003e Platform.exit() );"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        AlertBox.display(\"\", \"\","
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                response, Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private boolean overdueCheck(Date date) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date startOfWeek \u003d c.getTime();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (date.before(startOfWeek)) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else return false;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private long daysBetween(Date date) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return (currentDate.getTime() - date.getTime()) / (1000 * 60 * 60 * 24);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private String week \u003d NO_FIELD;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e monList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e tueList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e wedList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e thuList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e friList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e satList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final ObservableList\u003cText\u003e sunList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method clears the data in GridPane ListViews."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void clearData(){"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        monList.clear();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        tueList.clear();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        wedList.clear();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        thuList.clear();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        friList.clear();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        satList.clear();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        sunList.clear();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method creates a comparator for a 12 hour time to be sorted by timeline."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param lhs First item compared"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param rhs Second item compared"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The result of the comparison"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static int compareByTime(Text lhs, Text rhs) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String left \u003d lhs.getText().replaceFirst(\"Start: \", \"\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] leftSplit \u003d left.split(\"\\n\",2);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] leftTimeSplit \u003d leftSplit[0].split(\" \");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String right \u003d rhs.getText().replaceFirst(\"Start: \", \"\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] rightSplit \u003d right.split(\"\\n\",2);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] rightTimeSplit \u003d rightSplit[0].split(\" \");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(leftTimeSplit[1].equals(\"AM\") \u0026\u0026 rightTimeSplit[1].equals(\"AM\")){"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[]leftTimeSplitHourMinute \u003d leftTimeSplit[0].split(\":\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[]rightTimeSplitHourMinute \u003d rightTimeSplit[0].split(\":\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if(leftTimeSplitHourMinute[0].equals(\"12\") \u0026\u0026 rightTimeSplitHourMinute[0].equals(\"12\")) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return leftTimeSplitHourMinute[1].compareTo(rightTimeSplitHourMinute[1]);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if(leftTimeSplitHourMinute[0].equals(\"12\")) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else if (rightTimeSplitHourMinute[0].equals(\"12\")) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                return leftTimeSplit[0].compareTo(rightTimeSplit[0]);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (leftTimeSplit[1].equals(\"AM\")) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else if (rightTimeSplit[1].equals(\"AM\")) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            return leftSplit[0].compareTo(rightSplit[0]);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method generates data in day GridPane ListViews based on the week selected"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void setListView() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        clearData();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for(Map.Entry\u003cString, HashMap\u003cString, ArrayList\u003cTask\u003e\u003e\u003e module: eventsList.getMap().entrySet()) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            HashMap\u003cString, ArrayList\u003cTask\u003e\u003e moduleValue \u003d module.getValue();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            for(Map.Entry\u003cString, ArrayList\u003cTask\u003e\u003e item: moduleValue.entrySet()) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String strDate \u003d item.getKey();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String[] spilt \u003d strDate.split(\" \", 3);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String selectedWeek \u003d LT.getWeek(spilt[1]);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if((selectedWeek).equals(week)) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    ArrayList\u003cTask\u003e data \u003d item.getValue(); // each item in data has the contents"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    for(Task task: data){"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        //boolean isTick \u003d task.isDone;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        Text toShow \u003d new Text(task.toShow() + task.getModCode() + \"\\n\" + task.getDescription());"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        toShow.setFont(Font.font(10));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        if (task.getStatus()){"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            toShow.setFill(Color.GAINSBORO);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            toShow.setStrikethrough(true);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        toShow.wrappingWidthProperty().bind(monEventView.widthProperty().subtract(20));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        String day \u003d spilt[0];"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        switch (day){"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            case \"Mon\":"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                monList.add(toShow);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            case  \"Tue\":"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                tueList.add(toShow);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            case \"Wed\":"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                wedList.add(toShow);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            case \"Thu\":"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                thuList.add(toShow);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            case \"Fri\":"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                friList.add(toShow);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            case \"Sat\":"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                satList.add(toShow);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                            case \"Sun\":"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                sunList.add(toShow);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(monList.size() !\u003d 0 ) monEventView.setItems(monList.sorted(MainWindow::compareByTime));"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(tueList.size() !\u003d 0 ) tueEventView.setItems(tueList.sorted(MainWindow::compareByTime));"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(wedList.size() !\u003d 0 ) wedEventView.setItems(wedList.sorted(MainWindow::compareByTime));"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(thuList.size() !\u003d 0 ) thuEventView.setItems(thuList.sorted(MainWindow::compareByTime));"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(friList.size() !\u003d 0 ) friEventView.setItems(friList.sorted(MainWindow::compareByTime));"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(satList.size() !\u003d 0 ) satEventView.setItems(satList.sorted(MainWindow::compareByTime));"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(sunList.size() !\u003d 0 ) sunEventView.setItems(sunList.sorted(MainWindow::compareByTime));"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method updates currentWeek Label."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param onStart The flag which indicates program startup"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param selectedWeek The week selected"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void setWeek(Boolean onStart,String selectedWeek){"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(onStart){"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date dateTime \u003d new Date();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String date \u003d dateFormat.format(dateTime);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            selectedWeek \u003d LT.getWeek(date);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            currentWeek.setText(selectedWeek + \" ( \" + LT.getDates(selectedWeek.toLowerCase()) + \" )\");"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            week \u003d selectedWeek;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            currentWeek.setFont(Font.font(\"Verdana\", FontWeight.BOLD, FontPosture.ITALIC,23));"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            currentWeek.setTextFill(Color.GOLDENROD);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            currentWeek.setText(selectedWeek + \" ( \" + LT.getDates(selectedWeek.toLowerCase()) + \" )\");"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            week \u003d selectedWeek;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method refreshes the GridPane ListView after user Adds an item"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param input The user input from Command Line"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws ParseException The exception when that is error with the date given"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void refresh(String input) throws ParseException {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        DateFormat dateDayFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        DateFormat timeFormat_24 \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        DateFormat timeFormat_12 \u003d new SimpleDateFormat(\"hh:mm a\");"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String[] spiltWeekLabel \u003d (currentWeek.getText()).split(\" \");"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date startDate \u003d dateFormat.parse(spiltWeekLabel[3]);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date endDate \u003d dateFormat.parse(spiltWeekLabel[5]);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (input.startsWith(\"add/e\")) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[] spiltInput \u003d input.split(\" /at \");"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[] modAndTask \u003d (spiltInput[0].replaceFirst(\"add/e \", \"\")).split(\" \");"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[] dateAndTime \u003d spiltInput[1].split(\" from \");"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String date \u003d dateAndTime[0].trim();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if(date.startsWith(\"Week\")) date \u003d LT.getDates(date.toLowerCase());"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date inputDate \u003d dateFormat.parse(date);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date currentDate \u003d dateFormat.parse(dateFormat.format(new Date()));"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if(inputDate.before(currentDate)) return;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            String[] startAndEndTime \u003d dateAndTime[1].split(\" to \");"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (inputDate.after(startDate) \u0026\u0026 inputDate.before(endDate)) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                String day \u003d (dateDayFormat.format(inputDate)).substring(0,3);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Date startTime \u003d timeFormat_24.parse(startAndEndTime[0]);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Date endTime \u003d timeFormat_24.parse(startAndEndTime[1]);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Text toShow \u003d new Text(\"Start: \" + timeFormat_12.format(startTime) + \"\\nEnd: \" +timeFormat_12.format(endTime) + \"\\n\" + modAndTask[0] + \"\\n\" + modAndTask[1]);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                toShow.wrappingWidthProperty().bind(monEventView.widthProperty().subtract(15));"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                toShow.setFont(Font.font(10));"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                switch (day){"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case \"Mon\":"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        monList.add(toShow);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        monEventView.setItems(monList.sorted(MainWindow::compareByTime));"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case  \"Tue\":"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        tueList.add(toShow);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        tueEventView.setItems(tueList.sorted(MainWindow::compareByTime));"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case \"Wed\":"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        wedList.add(toShow);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        wedEventView.setItems(wedList.sorted(MainWindow::compareByTime));"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case \"Thu\":"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        thuList.add(toShow);"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        thuEventView.setItems(thuList.sorted(MainWindow::compareByTime));"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case \"Fri\":"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        friList.add(toShow);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        friEventView.setItems(friList.sorted(MainWindow::compareByTime));"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case \"Sat\":"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        satList.add(toShow);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        satEventView.setItems(satList.sorted(MainWindow::compareByTime));"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    case \"Sun\":"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        sunList.add(toShow);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        sunEventView.setItems(sunList.sorted(MainWindow::compareByTime));"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else if (input.startsWith(\"add/d\")) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            deadlineTable.setItems(setDeadlineTable());"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "lionlim97": 145,
      "0325961": 79,
      "hwbjerry": 243,
      "-": 42
    }
  },
  {
    "path": "src/main/java/JavaFx/ProgressController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "package JavaFx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.control.ProgressIndicator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": " * Controller for progress indicator. This control represents the progress indicator for a module."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "public class ProgressController extends HBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private Label moduleCodeLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private Label completedValueLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private Label overdueValueLabel \u003d new Label();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "0325961"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private ProgressIndicator progressIndicator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e moduleCodeStatusIconDescriptionArrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final HashMap\u003cString, String\u003e moduleCodeMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This function gets the arraylist containing tasks in terms of Pair(module code (status icon, description)) and determine the modules taken by user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param eventsList the list containing the event tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param deadlineList the list containing the deadline tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @return a pair containing the arraylist of tasks and hashmap of module code"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public Pair\u003cHashMap\u003cString, String\u003e, ArrayList\u003cPair\u003cString, Pair\u003cString, String\u003e\u003e\u003e\u003e getProgressIndicatorMap (HashMap\u003cString, HashMap\u003cString, ArrayList\u003cTask\u003e\u003e\u003e eventsList, HashMap\u003cString, HashMap\u003cString, ArrayList\u003cTask\u003e\u003e\u003e deadlineList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Task eventTask;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "0325961"
        },
        "content": "        if (eventsList.size() !\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "0325961"
        },
        "content": "            for (String moduleCode : eventsList.keySet()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "0325961"
        },
        "content": "                moduleCodeMap.put(moduleCode, null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "0325961"
        },
        "content": "                for (String date : eventsList.get(moduleCode).keySet()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    for (int i \u003d 0; i \u003c eventsList.get(moduleCode).get(date).size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        eventTask \u003d eventsList.get(moduleCode).get(date).get(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        moduleCodeStatusIconDescriptionArrList.add(new Pair(moduleCode, new Pair(eventTask.getStatusIcon(), eventTask.getDescription())));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Task deadlineTask;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "0325961"
        },
        "content": "        String eventsMC;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "0325961"
        },
        "content": "        for (int i \u003d 0; i \u003c moduleCodeStatusIconDescriptionArrList.size(); i++) { //checks if the module code of the events hashMap is found in the deadline hashMap"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "0325961"
        },
        "content": "            eventsMC \u003d moduleCodeStatusIconDescriptionArrList.get(i).getKey();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "0325961"
        },
        "content": "            for (String deadlineMC : deadlineList.keySet()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "0325961"
        },
        "content": "                if (!eventsMC.equals(deadlineMC)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    moduleCodeMap.put(deadlineMC, null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    for (String date : deadlineList.get(deadlineMC).keySet()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        for (int j \u003d 0; j \u003c deadlineList.get(deadlineMC).get(date).size(); j++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            deadlineTask \u003d deadlineList.get(deadlineMC).get(date).get(j);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            moduleCodeStatusIconDescriptionArrList.add(new Pair(deadlineMC, new Pair\u003c\u003e(deadlineTask.getStatusIcon(), deadlineTask.getDescription())));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "0325961"
        },
        "content": "                } else if (eventsMC.equals(deadlineMC)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    for (String date : deadlineList.get(deadlineMC).keySet()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        for (int j \u003d 0; j \u003c deadlineList.get(deadlineMC).get(date).size(); j++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            deadlineTask \u003d deadlineList.get(deadlineMC).get(date).get(j);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "0325961"
        },
        "content": "                            moduleCodeStatusIconDescriptionArrList.add(new Pair(deadlineMC, new Pair\u003c\u003e(deadlineTask.getStatusIcon(), deadlineTask.getDescription())));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "0325961"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "0325961"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "0325961"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "0325961"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "0325961"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "0325961"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "0325961"
        },
        "content": "        return new Pair(moduleCodeMap, moduleCodeStatusIconDescriptionArrList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "0325961"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * This function sets the text for moduleCodeLabel, completedValueLabel and overdueValueLabel and sets the progress for progressIndicator."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param mc the module code"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param totalValue the total number of event and deadline tasks"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "0325961"
        },
        "content": "     * @param completedValue the number of tasks completed"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "0325961"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "0325961"
        },
        "content": "    public void getData (String mc, int totalValue , int completedValue) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "0325961"
        },
        "content": "        int undoneValue \u003d totalValue - completedValue;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Double progressValue \u003d (double) completedValue / totalValue;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "0325961"
        },
        "content": "        moduleCodeLabel.setText(mc);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "0325961"
        },
        "content": "        completedValueLabel.setText(String.valueOf(completedValue));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "0325961"
        },
        "content": "        overdueValueLabel.setText(String.valueOf(undoneValue));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "0325961"
        },
        "content": "        progressIndicator.setProgress(progressValue);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "0325961"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "0325961"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "0325961": 89
    }
  },
  {
    "path": "src/main/java/Tasks/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a task called deadline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "    private final String by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Deadline object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description of a task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param by Date of when a task should be done"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Deadline(String description, String by, String time) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return super.getModCode() + \" \" + \"[D]\" + super.toString() + \"(by: \" + by + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"[D]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return by + \" \" + time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 20,
      "0325961": 1,
      "hwbjerry": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/Tasks/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a task called event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String start;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String end;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an Event object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description of a task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param by Date of when a task should be done"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param start Start time"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "     * @param end End time"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public Event(String description, String by, String start, String end) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"[E]\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return super.getModCode() + \" \" + \"[E]\" + super.toString() + \"(at: \" + by + \" time: \" + start + \" to \" + end + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return by + \" \" + start + \" to \" + end;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "darrenoje"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String toShow() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return \"Start: \" + start + \"\\nEnd: \" + end + \"\\n\";// + super.toShow();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return start + \" to \" + end;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 19,
      "hwbjerry": 8,
      "darrenoje": 4,
      "-": 24
    }
  },
  {
    "path": "src/main/java/Tasks/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a task in the Duke program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private boolean isReminder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String remindTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    private String modCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates Task object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description The description of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.isReminder \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.remindTime \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        this.modCode \u003d\"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"void\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getDateTime(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"void\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"void\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"void\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks whether the task is completed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns a tick or cross depending on the boolean value of isDone"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private String getReminderStatus() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return (isReminder ? \"[HR]\" : \"[NR]\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String[] split \u003d description.split(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String taskDescription \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (int i \u003d 0; i \u003c split.length; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (!split[i].equals(getModCode())) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                taskDescription +\u003d split[i] + \" \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return taskDescription;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String remindTimeToString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return \"[\u003cR\" + remindTime + \"/R\u003e] \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (isReminder) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return \"[\" + getStatusIcon()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                    + \"]\" + getReminderStatus()  + remindTimeToString() + getDescription();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            return \"[\" + getStatusIcon() + \"]\" + getReminderStatus()  + remindTimeToString() + getDescription();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getModCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String[] split \u003d description.trim().split(\" \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String modcode \u003d split[0].toUpperCase();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        return modcode;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setRemindTime(String time) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        remindTime \u003d time;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public String getRemindTime() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.remindTime;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setReminder(boolean reminder) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.isReminder \u003d reminder;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public boolean getIsReminder() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.isReminder;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public String toShow() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return modCode + \"\\n\" + description;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 4,
      "lionlim97": 60,
      "hwbjerry": 7,
      "-": 39
    }
  },
  {
    "path": "src/main/java/Tasks/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package Tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * To keep track of the list of task input by user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private static final String NO_FIELD \u003d \"void\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, ArrayList\u003cTask\u003e\u003e\u003e map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, ArrayList\u003cString\u003e\u003e\u003e deadlineList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    private HashMap\u003cString, HashMap\u003cString, ArrayList\u003cString\u003e\u003e\u003e eventList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e deadlineArrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e eventArrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a TaskList object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public HashMap\u003cString, HashMap\u003cString, ArrayList\u003cTask\u003e\u003e\u003e getMap(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.map;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public ArrayList\u003cTask\u003e getListFromDate(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.map.get(task.getModCode()).get(task.getDate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public HashMap\u003cString, ArrayList\u003cTask\u003e\u003e getMapFromModCode(Task task) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return this.map.get(task.getModCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTask(Task task){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list.add(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        if (this.map.containsKey(task.getModCode())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (!this.map.get(task.getModCode()).containsKey(task.getDate())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                map.get(task.getModCode()).put(task.getDate(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            this.map.put(task.getModCode(), new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            this.map.get(task.getModCode()).put(task.getDate(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        this.map.get(task.getModCode()).get(task.getDate()).add(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    //Do not use this"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeTask(int index){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list.remove(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void removeTask(Task task) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for(Task taskInList : this.map.get(task.getModCode()).get(task.getDate())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if(taskInList.getDescription().equals(task.getDescription())) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                this.map.get(task.getModCode()).get(task.getDate()).remove(taskInList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    //Do not use this: User will input the task in the CLI"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task getTask(int index){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.list.get(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    //Do not use this: Use toString method in Task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String taskToString(int index){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index).toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    //Do not use this: Use setDone method in Task"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone(int index){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list.get(index).setDone(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    //Use the getArrayList method then arrayList.size()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public int taskListSize(){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public void setReminder(Task task, String time, boolean reminder){"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        for (Task taskInList : this.map.get(task.getModCode()).get(task.getDate())) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (taskInList.getDescription().equals(task.getDescription())) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                taskInList.setRemindTime(time);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                taskInList.setReminder(reminder);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method generates a increased a dateTime given by days or hours based on given duration and returns the new dateTime."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param inDate The dateTime given"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param duration The duration given"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param type type task based on user\u0027s input"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return The new dateTime after increasing the inDate"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private Date increaseDateTime(Date inDate, int duration, String type){"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        c.setTime(inDate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(type.equals(\"event\")) c.add(Calendar.HOUR, duration);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        else if (type.equals(\"todo\")) c.add(Calendar.DATE, duration);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return c.getTime();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method sort and removes duplicated Dates of the list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param date The current datetime instance which locks the time"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return A list of dates combining data from taskList"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "     * @throws ParseException Throws a error when date being passed contains an error"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private TreeSet\u003cDate\u003e sortAndRemoveDuplicatedDates(Date date) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm aa\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "0325961"
        },
        "content": "        Set\u003cDate\u003e dateTime \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        dateTime.add(date);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if(!task.getDateTime().equals(NO_FIELD)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Date dateFromList \u003d dateFormat.parse(task.getDateTime());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if (dateFromList.compareTo(date) \u003e 0) dateTime.add(dateFromList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return new TreeSet\u003c\u003e(dateTime);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method retrieves the earliest possible block period with the duration given."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param duration The period indicated by the user"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param type The type task based on user\u0027s input"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return This returns a pair in the format datetime then datetime plus duration"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws ParseException Throws an error when method availableTimeSlot contains an error"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public Pair\u003cDate, Date\u003e findEarliestFreeTime (String duration, String type) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        int intDuration \u003d Integer.parseInt(duration);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if (list.size() \u003d\u003d 0) return new Pair \u003c\u003e (date, increaseDateTime(date, intDuration, type));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TreeSet\u003cDate\u003e sortedDateTime \u003d sortAndRemoveDuplicatedDates(date);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Iterator i \u003d sortedDateTime.iterator();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        i.next();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (Date Date1 : sortedDateTime) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (i.hasNext()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Date Date2 \u003d (Date) (i.next());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                long diff \u003d Date2.getTime() - Date1.getTime();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                long diffHours \u003d diff / (60 * 60 * 1000) % 24;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                long diffDays \u003d diff / (24 * 60 * 60 * 1000);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if ((diffDays \u003e 0 || diffHours \u003e\u003d (long) intDuration)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    Date2 \u003d increaseDateTime(Date1, intDuration, type);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    return new Pair \u003c\u003e(Date1, Date2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date date1 \u003d sortedDateTime.last();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date date2 \u003d increaseDateTime(date1, intDuration, type);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return new Pair\u003c\u003e (date1, date2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * This method retrieves the 5 earliest possible block period with the duration given"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param duration The period indicated by the user"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param numOfTimeSlot The number of free time slots to generated"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @param type The type task based on user\u0027s input"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @return This returns a ArrayList of pair in the format datetime then datetime plus duration"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     * @throws ParseException e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public ArrayList \u003cPair\u003cDate, Date\u003e\u003e findFreeTimes(String duration, int numOfTimeSlot, String type) throws ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        int intDuration \u003d Integer.parseInt(duration);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        ArrayList\u003c Pair\u003cDate, Date\u003e\u003e availableTimeSlot \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TreeSet\u003cDate\u003e sortedDateTime \u003d sortAndRemoveDuplicatedDates(date);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Iterator i \u003d sortedDateTime.iterator();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        i.next();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        for (Date Date1 : sortedDateTime) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            if (i.hasNext()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                Date Date2 \u003d (Date) (i.next());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                long diff \u003d Date2.getTime() - Date1.getTime();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                if(type.equals(\"event\")) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                    long diffHours \u003d diff / (60 * 60 * 1000) % 24;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                    long diffDays \u003d diff / (24 * 60 * 60 * 1000);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    if ((diffDays \u003e 0 || diffHours \u003e\u003d (long) intDuration) \u0026\u0026 numOfTimeSlot \u003e 0) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        numOfTimeSlot--;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        Date2 \u003d increaseDateTime(Date1, intDuration, type);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        availableTimeSlot.add(new Pair\u003c\u003e(Date1, Date2));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                } else if (type.equals(\"todo\")){"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    long diffDays \u003d diff / (24 * 60 * 60 * 1000);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    if ((diffDays \u003e\u003d (long) intDuration) \u0026\u0026 numOfTimeSlot \u003e 0) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        numOfTimeSlot--;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        Date2 \u003d increaseDateTime(Date1, intDuration, type);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        availableTimeSlot.add(new Pair\u003c\u003e(Date1, Date2));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        if(availableTimeSlot.size() \u003e\u003d 0) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date date1 \u003d sortedDateTime.last();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            Date date2 \u003d increaseDateTime(date1, intDuration, type);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            for(int k \u003d 0; k \u003c numOfTimeSlot; k++) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                availableTimeSlot.add(new Pair\u003c\u003e(increaseDateTime(date1, k, type),increaseDateTime(date2, k, type)));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        return availableTimeSlot;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method sort the tasks according to their categories."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private void sortList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            String description \u003d list.get(i).toString();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            if (list.get(i).getType().equals(\"[D]\")) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                this.deadlineArrList.add(description);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            } else if (list.get(i).getType().equals(\"[E]\")){"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                this.eventArrList.add(description);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method gets the schedule requested by user."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the String containing the schedule requested by user"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public String schedule() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        sortList();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        int sizeOfDeadlineArr \u003d getDeadlineArrList().size();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        int sizeOfEventArr \u003d getEventArrList().size();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        String finalSchedule \u003d \"Here is your schedule!\\n\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        if (sizeOfDeadlineArr !\u003d 0) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            finalSchedule +\u003d \"DEADLINE Task\\n\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            int num \u003d 1;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "0325961"
        },
        "content": "            for (int i \u003d 0; i \u003c sizeOfDeadlineArr; i++) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                finalSchedule \u003d finalSchedule + num + \".\" + getDeadlineArrList().get(i) + \"\\n\";"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                num++;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        if (sizeOfEventArr !\u003d 0) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            finalSchedule +\u003d \"EVENT Task\\n\";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            int num \u003d 1;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c sizeOfEventArr; i++) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                finalSchedule \u003d finalSchedule + num + \".\" + getEventArrList().get(i) + \"\\n\";"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                num++;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        deadlineArrList.clear();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        eventArrList.clear();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        return finalSchedule;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ArrayList\u003cString\u003e getDeadlineArrList() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.deadlineArrList;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    private ArrayList\u003cString\u003e getEventArrList() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.eventArrList;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    /** This method snoozes the task in the ArrayList."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index Index in the ArrayList of the Task Object to snooze"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateString New date for the Task Object"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This returns the ArrayList"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException On invalid input or when wrong input format is entered"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    public ArrayList\u003cTask\u003e snoozeTask(ArrayList\u003cTask\u003e list, int index, String dateString, String start, String end) throws DukeException {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "            if (end \u003d\u003d dateString) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                Task temp \u003d list.get(index);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                list.add(new Deadline(temp.getDescription(), dateString, start));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                list.remove(index);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                Task temp \u003d list.get(index);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                list.add(new Event(temp.getDescription(), dateString, start, end));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                list.remove(index);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\" OOPS!!! Please check that you only snoozed deadlines and events\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 57,
      "0325961": 2,
      "hwbjerry": 99,
      "darrenoje": 7,
      "-": 129
    }
  },
  {
    "path": "src/main/resources/view/Fixeddurationtask.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.ChoiceBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.SeparatorMenuItem?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003cVBox prefHeight\u003d\"390.0\" prefWidth\u003d\"640.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"JavaFx.FixedDurationTask\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        \u003cMenuBar VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003cmenus\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"New\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Open…\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Open Recent\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cSeparatorMenuItem mnemonicParsing\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Close\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Save\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Save As…\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Revert\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cSeparatorMenuItem mnemonicParsing\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Preferences…\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cSeparatorMenuItem mnemonicParsing\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Quit\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Edit\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Undo\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Redo\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cSeparatorMenuItem mnemonicParsing\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Cut\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Copy\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Paste\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Delete\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cSeparatorMenuItem mnemonicParsing\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Select All\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Unselect All\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"About MyHelloApp\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003c/menus\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        \u003cAnchorPane prefHeight\u003d\"358.0\" prefWidth\u003d\"640.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003cAnchorPane layoutX\u003d\"27.0\" layoutY\u003d\"258.0\" prefHeight\u003d\"47.0\" prefWidth\u003d\"105.0\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cLabel id\u003d\"taskTypeLabel\" layoutX\u003d\"4.0\" layoutY\u003d\"-2.0\" prefHeight\u003d\"21.0\" prefWidth\u003d\"78.0\" text\u003d\"Task Type\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cChoiceBox fx:id\u003d\"taskTypeChoiceBox\" layoutY\u003d\"20.0\" prefHeight\u003d\"27.0\" prefWidth\u003d\"105.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003cVBox layoutX\u003d\"27.0\" layoutY\u003d\"18.0\" prefHeight\u003d\"207.0\" prefWidth\u003d\"566.0\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cLabel id\u003d\"availablePeriodLabel\" text\u003d\"Please choose a available Period\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cListView fx:id\u003d\"periodListView\" onKeyPressed\u003d\"#updatePeriod\" onMouseClicked\u003d\"#updatePeriod\" prefHeight\u003d\"188.0\" prefWidth\u003d\"566.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003cAnchorPane layoutX\u003d\"535.0\" layoutY\u003d\"245.0\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cButton fx:id\u003d\"addButton\" layoutX\u003d\"1.0\" layoutY\u003d\"33.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleAdd\" onKeyPressed\u003d\"#handleAdd\" prefHeight\u003d\"27.0\" prefWidth\u003d\"61.0\" text\u003d\"Add\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cButton fx:id\u003d\"cancelButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleCancel\" onKeyPressed\u003d\"#handleCancel\" prefHeight\u003d\"27.0\" prefWidth\u003d\"61.0\" text\u003d\"Cancel\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003cAnchorPane layoutX\u003d\"153.0\" layoutY\u003d\"260.0\" prefHeight\u003d\"45.0\" prefWidth\u003d\"187.0\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cTextField fx:id\u003d\"taskDescriptionTextField\" layoutX\u003d\"-7.0\" layoutY\u003d\"18.0\" prefHeight\u003d\"27.0\" prefWidth\u003d\"202.0\" promptText\u003d\"Please enter Task Description\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cLabel id\u003d\"taskDescriptionLabel\" text\u003d\"Type Description\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003cAnchorPane layoutX\u003d\"359.0\" layoutY\u003d\"260.0\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cLabel id\u003d\"periodLabel\" layoutX\u003d\"2.0\" text\u003d\"Period\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cTextField fx:id\u003d\"periodTextField\" layoutY\u003d\"19.0\" promptText\u003d\"Selected from list\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hwbjerry": 91
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003cBorderPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"800.0\" prefWidth\u003d\"1000.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"JavaFx.MainWindow\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003cbottom\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003cHBox prefHeight\u003d\"36.0\" prefWidth\u003d\"600.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"37.0\" prefWidth\u003d\"517.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cButton fx:id\u003d\"submitButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"157.0\" prefWidth\u003d\"85.0\" text\u003d\"Submit\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/bottom\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003cright\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003cVBox prefHeight\u003d\"487.0\" prefWidth\u003d\"200.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cTableView fx:id\u003d\"deadlineTable\" prefHeight\u003d\"237.0\" prefWidth\u003d\"169.0\" style\u003d\"-fx-border-color: black;\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumns\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"deadlineDateColumn\" prefWidth\u003d\"71.0\" style\u003d\"-fx-alignment: center;\" text\u003d\"Date\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"deadlineTaskColumn\" prefWidth\u003d\"125.0\" style\u003d\"-fx-alignment: center;\" text\u003d\"Deadline\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columns\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003c/TableView\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cTableView fx:id\u003d\"overdueTable\" prefHeight\u003d\"284.0\" prefWidth\u003d\"208.0\" style\u003d\"-fx-border-color: black;\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumns\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"overdueDateColumn\" prefWidth\u003d\"72.0\" style\u003d\"-fx-alignment: center;\" text\u003d\"Days Due\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"overdueTaskColumn\" prefWidth\u003d\"124.0\" style\u003d\"-fx-alignment: center;\" text\u003d\"Overdue\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columns\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003c/TableView\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/right\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003ctop\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003cVBox prefHeight\u003d\"107.0\" prefWidth\u003d\"1000.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cHBox prefHeight\u003d\"64.0\" prefWidth\u003d\"1000.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel fx:id\u003d\"currentWeek\" prefHeight\u003d\"20.0\" prefWidth\u003d\"722.0\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                        \u003cFont name\u003d\"System Bold\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                     \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cRegion prefHeight\u003d\"20.0\" prefWidth\u003d\"81.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel fx:id\u003d\"currentTime\" alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"20.0\" prefWidth\u003d\"192.0\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003cHBox fx:id\u003d\"progressContainer\" prefHeight\u003d\"131.0\" prefWidth\u003d\"1000.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/top\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003ccenter\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003cGridPane prefHeight\u003d\"66.0\" prefWidth\u003d\"800.0\" style\u003d\"-fx-border-insets: 0; -fx-border-color: black; -fx-grid-lines-visible: true;\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"50.0\" prefWidth\u003d\"110.0\" text\u003d\"SUN\" GridPane.columnIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"114.0\" text\u003d\"MON\"\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefHeight\u003d\"17.0\" prefWidth\u003d\"114.0\" text\u003d\"TUE\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefWidth\u003d\"114.0\" text\u003d\"WED\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefWidth\u003d\"114.0\" text\u003d\"THU\" GridPane.columnIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefWidth\u003d\"114.0\" text\u003d\"FRI\" GridPane.columnIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" prefWidth\u003d\"114.0\" text\u003d\"SAT\" GridPane.columnIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003ceffect\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                        \u003cDropShadow /\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                     \u003c/effect\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003cGridPane prefHeight\u003d\"593.0\" prefWidth\u003d\"800.0\"\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"sunEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"6\" /\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"monEventView\" prefWidth\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"tueEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"wedEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"thuEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"friEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "                  \u003cListView fx:id\u003d\"satEventView\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "   \u003c/center\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 107,
      "hwbjerry": 36,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/ProgressIndicator.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?import javafx.scene.control.ProgressIndicator?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "0325961"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"131.0\" prefWidth\u003d\"250.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"JavaFx.ProgressController\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "0325961"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cProgressIndicator fx:id\u003d\"progressIndicator\" layoutX\u003d\"152.0\" layoutY\u003d\"26.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"90.0\" prefWidth\u003d\"80.0\" progress\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" layoutY\u003d\"51.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"80.0\" text\u003d\"Completed\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel fx:id\u003d\"completedValueLabel\" alignment\u003d\"CENTER\" contentDisplay\u003d\"BOTTOM\" layoutY\u003d\"81.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"80.0\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel alignment\u003d\"CENTER\" layoutX\u003d\"80.0\" layoutY\u003d\"51.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"80.0\" text\u003d\"Overdue\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel fx:id\u003d\"overdueValueLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"80.0\" layoutY\u003d\"81.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"80.0\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "0325961"
        },
        "content": "      \u003cLabel fx:id\u003d\"moduleCodeLabel\" alignment\u003d\"CENTER\" layoutY\u003d\"1.0\" prefHeight\u003d\"50.0\" prefWidth\u003d\"180.0\" text\u003d\"Module Code\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "0325961"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "0325961"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "0325961": 16
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//import org.testng.annotations.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stringConversionTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String w1 \u003d \"[E][\\u2718] Test Event (at: Wed 04/12/2019 time: 07:00 AM to 11:00 AM)\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "        String w2 \u003d new Event(\"Test Event\", \"Wed 04/12/2019\", \"07:00 AM\", \"11:00 AM\").toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        assertEquals(w1,w2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "darrenoje": 2,
      "-": 12
    }
  },
  {
    "path": "src/test/java/FindEarliestFreeTimesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class FindEarliestFreeTimesTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void FindEarliestFreeTimesTestEmptyList() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String duration \u003d \"2\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        calendar.add(Calendar.HOUR, Integer.parseInt(duration));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date outDate \u003d calendar.getTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String startDate \u003d format.format(date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String endDate \u003d format.format(outDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d\"You are available at: \\n\" + startDate + \"until\" + endDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TaskList todoList \u003d new TaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TaskList eventList \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TaskList deadlineList \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command c \u003d Parser.parse(\"when is the nearest day in which I have a \"+ duration +\" hour free slot?\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d c.execute(todoList,eventList,deadlineList, ui, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        actual \u003d actual.substring(0,\"You are available at: \\n\".length()) + startDate + \"until\" + endDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "hwbjerry": 36
    }
  },
  {
    "path": "src/test/java/FixedDurationTasksTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Interface.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Interface.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Interface.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "public class FixedDurationTasksTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Krazzen"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    public void FindEarliestFreeTimesTestEmptyList() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy hh:mm a\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        calendar.add(Calendar.HOUR, 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Date outDate \u003d calendar.getTime();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String startDate \u003d format.format(date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String endDate \u003d format.format(outDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String expected \u003d\"You are available at: \\n\" + startDate + \"until\" + endDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TaskList todoList \u003d new TaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TaskList eventList \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        TaskList deadlineList \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        Command c \u003d Parser.parse(\"when is the nearest day in which I have a 2 hour free slot?\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        String actual \u003d c.execute(todoList,eventList,deadlineList, ui, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        actual \u003d actual.substring(0,\"You are available at: \\n\".length()) + startDate + \"until\" + endDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hwbjerry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Krazzen": 1,
      "hwbjerry": 37
    }
  },
  {
    "path": "src/test/java/RemindTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import Commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemindTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "    Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remindTestWithDate() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TaskList todos \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TaskList events \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TaskList deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String currentDate \u003d format.format(date);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String start \u003d \"06:00 PM \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String end \u003d \"08:00 PM\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String expected \u003d\"Here are your tasks for this week:\\n\" + \"1.[E][\\u2718] exam (at: \" + currentDate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "                + \" time: \" + start + \" to \" + end + \")\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        events.addTask(new Event(\"exam\", currentDate, start, end));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Command c \u003d Parser.parse(\"remind\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d c.execute(todos, events, deadlines, ui, storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remindTestWithDoneTasks() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TaskList todos \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TaskList events \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        TaskList deadlines \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        DateFormat format \u003d new SimpleDateFormat(\"E dd/MM/yyyy\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String currentDate \u003d format.format(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String start \u003d \"06:00 PM \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String end \u003d \"08:00 PM\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expected \u003d \"There are no upcoming tasks this week.\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList temp \u003d new TaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        events.addTask(new Event(\"exam\", currentDate, start, end));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        events.markAsDone(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Command c \u003d Parser.parse(\"remind\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lionlim97"
        },
        "content": "        String actual \u003d c.execute(todos, events, deadlines, ui, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lionlim97": 20,
      "-": 31
    }
  },
  {
    "path": "src/test/java/SnoozeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import Commands.SnoozeCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "import Interface.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import Tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import Tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SnoozeTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void SnoozeTest() throws ParseException, DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        String w1 \u003d \"[E][\\u2718] project (at: Sun 05/02/2019 time: 07:00 AM to 11:00 AM)\" + \"\\n\" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "                \"[E][\\u2718] swimming (at: Sun 03/02/2019 time: 09:00 AM to 10:00 AM)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskList temp \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        temp.addTask(new Event(\"swimming\", \"Sun 02/02/2019\",  \"10:00 AM\", \"11:30 AM\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        temp.addTask(new Event(\"project\", \"Sun 05/02/2019\", \"07:00 AM\", \"11:00 AM\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        //temp.snoozeTask(temp, 1, \"Sun 03/02/2019\", \"09:00 AM\", \"10:00 AM\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "darrenoje"
        },
        "content": "        //new SnoozeCommand(1, \"Sun 03/02/2019\", \"09:00 AM\", \"10:00 AM\" );"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String w2 \u003d temp.getTask(0) + \"\\n\" + temp.getTask(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(w1, w2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "darrenoje": 9,
      "-": 18
    }
  }
]
