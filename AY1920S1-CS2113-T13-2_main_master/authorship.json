[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    archiveBaseName \u003d \"[CS2113-T13-2][Dukepital]\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    archiveVersion \u003d \"v1.4\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    compile \"org.apache.commons:commons-csv:1.7\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    compile \u0027org.apache.commons:commons-text:1.8\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    compile group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002723.5-jre\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    compile group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u002711.0.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    compile group: \u0027org.apache.logging.log4j\u0027, name: \u0027log4j-api\u0027, version: \u00272.12.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    compile group: \u0027org.apache.logging.log4j\u0027, name: \u0027log4j-core\u0027, version: \u00272.12.1\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//    mainClassName \u003d \"duke/Duke\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 1,
      "kkeejjuunn": 2,
      "qjie7": 15,
      "-": 38,
      "HUANGXUANKUN": 7
    }
  },
  {
    "path": "src/main/java/abandon/DukeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package abandon;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.counter.Counter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class DukeCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param patientTask    ."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param tasks          ."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param patientManager ."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param dukeUi             ."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param storageManager ."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(AssignedTaskManager patientTask, TaskManager tasks, PatientManager patientManager,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Counter counter \u003d new Counter(storageManager.loadCommandFrequency());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ShortCutter shortCutter \u003d new ShortCutter(counter, dukeUi);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        shortCutter.runShortCut().execute(patientTask, tasks, patientManager, dukeUi, storageManager);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Decide whether duke should exist."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 32,
      "HUANGXUANKUN": 13
    }
  },
  {
    "path": "src/main/java/abandon/ShortCutter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "//@@author qjie7"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package abandon;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.patient.DeletePatientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.patient.FindPatientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.patient.ListPatientsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.task.ListTasksCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.patient.UpdatePatientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.task.UpdateTaskCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.models.counter.Counter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * This is a ShortCutter class to provide short cut implementation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * DukeCommand will be used to activate the short cut mode."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * This is not a simple UI implementation but also considered user\u0027s"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * daily work behavior to provide  personalised short cut solution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": " *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * @author QIAN JIE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * @version 1.3"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class ShortCutter {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private Counter counter;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private DukeUi dukeUi;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * A constructor for ShortCutter class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param counter receive a counter object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param dukeUi      receive a dukeUi object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public ShortCutter(Counter counter, DukeUi dukeUi) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.counter \u003d counter;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.dukeUi \u003d dukeUi;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private Map\u003cString, Integer\u003e sortedCommandTable;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private Map\u003cInteger, String\u003e topUsedCommandTable;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * This function is used to allow map to be sorted by its values."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param map a command frequency table in Map structure with key"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *            as the command type and value as the command frequency."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return a Map structure that is sorted according to param\u0027s value"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *         which is the used command frequency."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @author QIAN JIE"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @version 1.3"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public static \u003cK, V extends Comparable\u003cV\u003e\u003e Map\u003cK, V\u003e sortByValues(final Map\u003cK, V\u003e map) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Comparator\u003cK\u003e valueComparator \u003d (k1, k2) -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            int compare \u003d map.get(k2).compareTo(map.get(k1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            if (compare \u003d\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                return compare;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        };"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Map\u003cK, V\u003e sortedByValues \u003d new TreeMap\u003cK, V\u003e(valueComparator);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        sortedByValues.putAll(map);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return sortedByValues;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * This function is used to generate a topUsedCommandTable based on"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * the data provided from sortedCommandTable."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param sortedCommandTable a sorted command frequency table from high to low in Map structure with key"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *                           as the command type and value as the command frequency."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return a Map structure with key being the index number for user to choose"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *         and value be the command type."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @author QIAN JIE"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @version 1.3"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public Map\u003cInteger, String\u003e mapSorter(Map\u003cString, Integer\u003e sortedCommandTable) throws DukeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Map\u003cInteger, String\u003e topCommandTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        ArrayList\u003cString\u003e keys \u003d new ArrayList\u003c\u003e(sortedCommandTable.keySet());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        System.out.println(\"\u003c Most Frequently Used Commands \u003e\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if (sortedCommandTable.size() \u003c 5) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            for (int i \u003d 0; i \u003c sortedCommandTable.size(); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                int index \u003d i + 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                topCommandTable.put(index, keys.get(i));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                System.out.println(\"[\" + index + \"] \" + commandNameConverter(keys.get(i)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                int index \u003d i + 1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                topCommandTable.put(index, keys.get(i));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                System.out.println(\"[\" + index + \"] \" + commandNameConverter(keys.get(i)));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        System.out.println(\"Please choose one of these commands\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return topCommandTable;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * This function is used to run the short cut UI logic by getting"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * necessary information from user to provide the target output."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return command the command that is to be executed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @throws DukeException throw a dukeException with error message for debugging."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @author QIAN JIE"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @version 1.3"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public Command runShortCut() throws DukeException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        sortedCommandTable \u003d sortByValues(counter.getCommandTable());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        topUsedCommandTable \u003d mapSorter(sortedCommandTable);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String commandName;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String choiceIndex \u003d dukeUi.readUserInput();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        switch (choiceIndex) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            commandName \u003d topUsedCommandTable.get(1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            command \u003d shortCutChecker(commandName);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        case \"2\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            commandName \u003d topUsedCommandTable.get(2);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            command \u003d shortCutChecker(commandName);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        case \"3\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            commandName \u003d topUsedCommandTable.get(3);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            command \u003d shortCutChecker(commandName);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        case \"4\":"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            commandName \u003d topUsedCommandTable.get(4);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            command \u003d shortCutChecker(commandName);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        case \"5\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            commandName \u003d topUsedCommandTable.get(5);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            command \u003d shortCutChecker(commandName);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            throw new DukeException(ShortCutter.class, \"Please enter a valid index number shown here\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * This function is used to provide check/filter on possible"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * type of command that is chosen by the user. This check is"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * necessary due the the constantly changing behavior on the"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * ranking of the command usages."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return command the command that is to be executed."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @throws DukeException throw a dukeException with error message for debugging."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @author QIAN JIE"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @version 1.3"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public Command shortCutChecker(String commandName) throws DukeException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if (commandName.equals(\"AddPatientCommand\")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String patientName \u003d dukeUi.getPatientInfo(\"name\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String nric \u003d dukeUi.getPatientInfo(\"nric\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String room \u003d dukeUi.getPatientInfo(\"room\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String remark \u003d dukeUi.getPatientInfo(\"remark\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String[] patientInfo \u003d new String[]{patientName, nric, room, remark};"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new AddPatientCommand(patientInfo);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandName.equals(\"AddStandardTaskCommand\")) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String taskName \u003d dukeUi.getTaskInfo(\"name\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new AddTaskCommand(taskName);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandName.equals(\"DeletePatientCommand\")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String patientId \u003d dukeUi.getPatientInfo(\"id\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new DeletePatientCommand(patientId);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandName.equals(\"DeleteTaskCommand\")) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String taskId \u003d dukeUi.getTaskInfo(\"id\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new DeleteTaskCommand(taskId);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandName.equals(\"FindPatientCommand\")) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String patientId \u003d dukeUi.getPatientInfo(\"id\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new FindPatientCommand(patientId);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandName.equals(\"ListPatientsCommand\")) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new ListPatientsCommand();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandName.equals(\"ListTasksCommand\")) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new ListTasksCommand();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandName.equals(\"UpdatePatientCommand\")) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String patientId \u003d dukeUi.getPatientInfo(\"id\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String infoType \u003d dukeUi.getPatientInfo(\"change\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String changeValue \u003d dukeUi.getPatientInfo((\"changeValue\"));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String[] patientInfo \u003d new String[]{patientId, infoType, changeValue};"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new UpdatePatientCommand(patientInfo);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandName.equals(\"UpdateTaskCommand\")) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String taskId \u003d dukeUi.getTaskInfo(\"id\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String change \u003d dukeUi.getTaskInfo(\"change\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String changeValue \u003d dukeUi.getTaskInfo(\"changeValue\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String[] patientInfo \u003d new String[]{taskId, change, changeValue};"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new UpdateTaskCommand(patientInfo);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            throw new DukeException(ShortCutter.class, \"No matching command!\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * This function is used to convert the provided command class name"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * into a string that is much user friendly and easy to read by the user."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param commandClassName the command class name chosen by the user"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return a String that is easy to read by the user."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @throws DukeException throw a dukeException with error message for debugging."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @author QIAN JIE"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @version 1.3"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public static String commandNameConverter(String commandClassName) throws DukeException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String convertedName;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if (commandClassName.equals(\"AddPatientCommand\")) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Add Patient\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"AddStandardTaskCommand\")) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Add Task\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"DeletePatientCommand\")) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Delete a Patient\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"DeleteTaskCommand\")) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Delete a Task\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"FindPatientCommand\")) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Find a Patient\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"FindPatientTaskCommand\")) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Find a patient with task \";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"ListPatientsCommand\")) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Show all the patient\";"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"ListTasksCommand\")) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Show all the tasks\";"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"UpdatePatientCommand\")) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Update Patient information\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"UpdateTaskCommand\")) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Update Task information\";"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"AssignPeriodTaskCommand\")) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Assign a task to a patient\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            throw new DukeException(ShortCutter.class, \"No matching command!\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 276
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.util.mementopattern.Memento;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.util.mementopattern.MementoManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.util.mementopattern.MementoParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.commands.CommandManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.counter.Counter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents Duke, a Personal Assistant to help"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * users tracking their progress."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private AssignedTaskManager assignedTaskManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TaskManager taskManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private PatientManager patientManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private MementoManager mementoManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Counter counter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private DukeUi dukeUi;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Command command;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructs a Duke object with a relative file path."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Initialize the user interface and reads tasks from the specific text file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param filePath A string that represents the path of the local file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *                 used for storing tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        storageManager \u003d new StorageManager(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        mementoManager \u003d new MementoManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        dukeUi \u003d new DukeUi();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assignedTaskManager \u003d new AssignedTaskManager(storageManager.loadAssignedTasks());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            taskManager \u003d new TaskManager(storageManager.loadTasks());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            patientManager \u003d new PatientManager(storageManager.loadPatients());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            counter \u003d new Counter(storageManager.loadCommandFrequency());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            dukeUi.showLoadingError();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Runs the Duke program."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Reads user input until a \"bye\" message is received."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param userInput Full command entered by user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return Duke\u0027s reply to the user entered command"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException throw when execution of the command fails"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String run(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            dukeUi.readUserInputFromGui(userInput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            dukeUi.showLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            command \u003d CommandManager.manageCommand(userInput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (MementoParser.getSaveFlag(command).equals(\"save\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                Memento newMem \u003d mementoManager.saveDukeStateToMemento(taskManager, assignedTaskManager,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    patientManager);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                command.execute(assignedTaskManager, taskManager, patientManager,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    dukeUi, storageManager);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                mementoManager.add(newMem);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            } else if (MementoParser.getSaveFlag(command).equals(\"pop\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                Memento newMem \u003d mementoManager.pop();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                this.assignedTaskManager \u003d newMem.getPatientTaskState();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                this.taskManager \u003d newMem.getTaskState();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                this.patientManager \u003d newMem.getPatientState();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                command.execute(assignedTaskManager, taskManager, patientManager,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    dukeUi, storageManager);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                command.execute(assignedTaskManager, taskManager, patientManager,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    dukeUi, storageManager);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            counter.runCommandCounter(command, storageManager, counter);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return dukeUi.getDukeResponses();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            dukeUi.clearResponses();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Return the current running command."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Command getRunningCommand() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * It clears all duke\u0027s dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void clearDukeResponses() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        dukeUi.clearResponses();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * It returns manager of all patient models."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return An manager which manipulates all patient models."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public PatientManager getPatientManager() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return patientManager;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * It returns manager of all task models."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return An manager which manipulates all task models."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public TaskManager getTaskManager() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return taskManager;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * It returns manager of all storage."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return An manager which manipulates all storage."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public StorageManager getStorageManager() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return storageManager;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * It returns manager of all assignedTask models."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return An manager which manipulates all assignedTask models."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public AssignedTaskManager getAssignedTaskManager() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return assignedTaskManager;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 145
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 14
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.gui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.gui.UiManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Launcher class for the app."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        initialize();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Initialize Duke with local data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Create data directory if it is not existed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String currentDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String dataDir \u003d currentDir + \"/data\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        File directory \u003d new File(dataDir);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        duke \u003d new Duke(dataDir);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui \u003d new UiManager(duke);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * It initialize the UI manager to initialize GUI components for stages and load data from local hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param primaryStage The main stage MainWindow, which is used to contain all GUI components"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 49
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a command class received from user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * It is an abstract class that can not be instantiated, its child class represents different kind"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * of user command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * It takes in model managers, and execute the commands by calling methods in the managers."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientTasks   Manager of model class AssignedTask"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasks          Manager of model class Task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientList    Manager of model class Patient"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param dukeUi         Manager of all Duke Dialog"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager Manager of all storage, use for saving/loading data to/from local disk"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    void execute(AssignedTaskManager patientTasks, TaskManager tasks, PatientManager patientList, DukeUi dukeUi,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                 StorageManager storageManager) throws DukeException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Decide whether duke should exist."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    boolean isExit();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 38
    }
  },
  {
    "path": "src/main/java/duke/commands/CommandManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "//@@author lmtaek"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.assignedtask.AssignDeadlineTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.assignedtask.AssignPeriodTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.assignedtask.DeleteAssignedTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.assignedtask.FindAssignedTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.functional.BarChartCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import abandon.DukeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.functional.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.functional.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.functional.PieChartCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.functional.UndoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.gui.ClearFilterCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.gui.FilterCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.gui.ShowAssignedTasksCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.gui.ShowHelpGuideCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.gui.ShowPatientsCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.gui.ShowTasksCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.gui.ShowTodayCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.gui.ShowTomorrowCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.patient.DeletePatientCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.patient.FindPatientCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.patient.ListPatientsCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.patient.UpdatePatientCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.task.FindTaskCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.task.ListTasksCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.task.UpcomingTasksCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.task.UpdateTaskCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.util.Parser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * Represents a Parser that parses user input into a specific"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * type of Command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class CommandManager {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Decides which command to execute based on keywords available in the user\u0027s input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param userInput The user\u0027s input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return The command dictated by the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public static Command manageCommand(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] command \u003d userInput.toLowerCase().split(\":\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String keyWord \u003d command[0].trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser parser \u003d new Parser(userInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        switch (keyWord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"add patient\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return new AddPatientCommand(parser.parseUserInput());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                throw new DukeException(CommandManager.class, \"Please follow the  \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + \"`add patient :\u003cpatient name\u003e :\u003cNRIC\u003e :\u003cpatient room\u003e :\u003cpatient_remark\u003e` \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + \"format.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"add task\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return new AddTaskCommand(parser.parseUserInput()[0]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                throw new DukeException(CommandManager.class,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        \"Please follow the `add task :\u003ctask description\u003e` format.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"assign deadline task\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return new AssignDeadlineTaskCommand(parser.parseUserInput());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                throw new DukeException(CommandManager.class, \"Please follow the \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + \"`assign deadline task :#\u003cpatient id\u003e :#\u003ctask id\u003e \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + \":\u003cdd/MM/YYYY HHmm\u003e` format.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"assign period task\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return new AssignPeriodTaskCommand(parser.parseUserInput());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                throw new DukeException(CommandManager.class, \"Please follow the \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + \"`assign event task :#\u003cpatient id\u003e :#\u003ctask ID\u003e \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + \":\u003cdd/MM/YYYY HHmm\u003e to \u003cdd/MM/YYYY HHmm\u003e` format.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"list patients\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new ListPatientsCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"list tasks\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new ListTasksCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"delete assigned task\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return new DeleteAssignedTaskCommand(parser.parseUserInput()[0]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                throw new DukeException(CommandManager.class, \"Please follow the \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + \" `delete assigned task :#\u003cunique assigned task id\u003e` format.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"delete patient\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return new DeletePatientCommand(parser.parseUserInput()[0]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                throw new DukeException(CommandManager.class,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        \"Please follow the `delete patient :#\u003cpatient id\u003e` format\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"delete task\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return new DeleteTaskCommand(parser.parseUserInput()[0]);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                throw new DukeException(CommandManager.class, \"Please follow the `delete task :#\u003ctask id\u003e` format\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"find patient\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return new FindPatientCommand(parser.parseUserInput()[0]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                throw new DukeException(CommandManager.class, \"Please use the `find patient :#\u003cpatient id\u003e` format.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"find task\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return new FindTaskCommand(parser.parseUserInput()[0]);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                throw new DukeException(CommandManager.class, \"Please use the `find task :#\u003ctask id\u003e` format.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"find assigned tasks\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return new FindAssignedTaskCommand(parser.parseUserInput()[0]);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                throw new DukeException(CommandManager.class, \"Please use the `find assigned tasks \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + \":#\u003cpatient id\u003e` format.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"update patient\":"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return new UpdatePatientCommand(parser.parseUserInput());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                throw new DukeException(CommandManager.class,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        \"Please use the `update patient :\u003cpatient name\u003e or #\u003cpatient id\u003e\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + \":\u003cname/NRIC/room/remark\u003e :\u003cupdated info\u003e` format.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"update task\":"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return new UpdateTaskCommand(parser.parseUserInput());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                throw new DukeException(CommandManager.class, \"Please use the `update task :#\u003ctask id\u003e\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + \" :description :\u003cupdated description\u003e` format.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"show upcoming tasks\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new UpcomingTasksCommand(LocalDateTime.now(), true);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"show patients\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new ShowPatientsCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"show tasks\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new ShowTasksCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"show assigned tasks\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new ShowAssignedTasksCommand();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"show help guide\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new ShowHelpGuideCommand();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"show today\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new ShowTodayCommand();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"show tomorrow\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new ShowTomorrowCommand();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"filter\":"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return new FilterCommand(parser.parseUserInput()[0]);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                throw new DukeException(CommandManager.class, \"Please use the `filter: \u003ccontent\u003e\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"clear filter\":"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new ClearFilterCommand();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"duke\":"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new DukeCommand();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"undo\":"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"piechart\":"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new PieChartCommand();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"barchart\":"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new BarChartCommand();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            throw new DukeException(CommandManager.class, \"Could not understand user input.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 185
    }
  },
  {
    "path": "src/main/java/duke/commands/assignedtask/AssignDeadlineTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "//@@author WEIFENG-NUSCEG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.commands.assignedtask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.assignedtasks.AssignedTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskWithDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * Represents a command to assign a deadline task by its task id, to a specific patient with his/her patient id"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * follows by the task details such as the task\u0027s deadline, the task\u0027s recursive status and the task\u0027s"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * is done status."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class AssignDeadlineTaskCommand implements Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private String[] userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Create a new AssignDeadlineTaskCommand with the user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param userInput the task information from user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public AssignDeadlineTaskCommand(String[] userInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Run the command with the respect TaskList, UI, and storage, during the execution, this"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * method will check if the user input is following the correct input format of a assigned"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * deadline task command. This method will also check if the new AssignedTask task command is identical"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * with other AssignedTask stored in the AssignedTaskManager."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param assignedTaskManager contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param taskManager         contains information of all the tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param patientManager      contains information of all the patients."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param dukeUi               interacts with user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param storageManager      save the changes in csv file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @throws DukeException if there is error during assigning a deadline task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void execute(AssignedTaskManager assignedTaskManager, TaskManager taskManager, PatientManager patientManager,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (userInput.length \u003c 3 || userInput[0].charAt(0) !\u003d \u0027#\u0027 || userInput[1].charAt(0) !\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(AssignDeadlineTaskCommand.class, \"Invalid format. Please follow format: \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    + \"assign deadline task: #\u003cpatient id\u003e :#\u003ctask id\u003e : dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            int pid \u003d Integer.parseInt(userInput[0].substring(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            int tid \u003d Integer.parseInt(userInput[1].substring(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            String datetime \u003d userInput[2];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            String type \u003d \"deadline\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (!taskManager.doesExist(tid)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(AssignDeadlineTaskCommand.class, \"The task \" + tid + \" does not exist\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (!patientManager.doesExist(pid)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(AssignDeadlineTaskCommand.class, \"The patient \" + pid + \" does not exist\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            AssignedTask newAssignedTask \u003d new AssignedTaskWithDate(pid, tid, datetime, type);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (!assignedTaskManager.isSameDeadlineExist(newAssignedTask)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                assignedTaskManager.addPatientTask(newAssignedTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                storageManager.saveAssignedTasks(assignedTaskManager.getAssignTasks());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                dukeUi.patientTaskAssigned(newAssignedTask, patientManager.getPatient(pid).getName(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                        taskManager.getTask(tid).getDescription());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(AssignDeadlineTaskCommand.class, \"A same deadline task already exists\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Decide whether duke should exist."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 88
    }
  },
  {
    "path": "src/main/java/duke/commands/assignedtask/AssignPeriodTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "//@@author WEIFENG-NUSCEG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.commands.assignedtask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskWithPeriod;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.assignedtasks.AssignedTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * Represents a command to assign a period task by its task id, to a specific patient with his/her patient id"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * follows by the task details such as the task\u0027s starting period, the task\u0027s ending period,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * the task\u0027s recursive status and the task\u0027s is done status."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class AssignPeriodTaskCommand implements Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private String[] userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Create a new AssignPeriodTaskCommand with the user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param userInput the task information from user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public AssignPeriodTaskCommand(String[] userInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Run the command with the respect TaskList, UI, and storage, during the execution, this"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * method will check if the user input is following the correct input format of a assigned"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * deadline task command. This method will also check if the new AssignedTask command is identical"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * with other AssignedTask stored in the AssignedTaskManager."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param assignedTaskManager contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param taskManager         contains information of all the tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param patientManager      contains information of all the patients."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param dukeUi                  interacts with user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param storageManager      save the changes in csv file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @throws DukeException if there is error during assigning a period task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void execute(AssignedTaskManager assignedTaskManager, TaskManager taskManager, PatientManager patientManager,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (userInput.length \u003c 4 || userInput[0].charAt(0) !\u003d \u0027#\u0027 || userInput[1].charAt(0) !\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(AssignPeriodTaskCommand.class, \"Invalid format. Please follow: \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    + \"assign period task: #\u003cpatient id\u003e :#\u003ctask id\u003e : dd/MM/yyyy HHmm : dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            int pid \u003d Integer.parseInt(userInput[0].substring(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            int tid \u003d Integer.parseInt(userInput[1].substring(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            String stime \u003d userInput[2];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            String etime \u003d userInput[3];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            String type \u003d \"period\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (!taskManager.doesExist(tid)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(AssignPeriodTaskCommand.class, \"The task \" + tid + \" does not exist\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (!patientManager.doesExist(pid)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(AssignPeriodTaskCommand.class, \"The patient \" + pid + \" does not exist\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            AssignedTask newAssignedTask \u003d new AssignedTaskWithPeriod(pid, tid, stime, etime, type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (!assignedTaskManager.isSameStartEndTimeExist(newAssignedTask)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                assignedTaskManager.addPatientTask(newAssignedTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                storageManager.saveAssignedTasks(assignedTaskManager.getAssignTasks());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                dukeUi.patientTaskAssigned(newAssignedTask, patientManager.getPatient(pid).getName(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                        taskManager.getTask(tid).getDescription());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(AssignPeriodTaskCommand.class, \"A same period task already exists\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Decide whether duke should exist."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 89
    }
  },
  {
    "path": "src/main/java/duke/commands/assignedtask/DeleteAssignedTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "//@@author WEIFENG-NUSCEG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.commands.assignedtask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * Represents a command to delete a task assigned to patient through the task\u0027s unique id."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class DeleteAssignedTaskCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private int taskUniqueId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Create a new DeleteAssignedTaskCommand with the deleteInfo received, check if the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * deletion information follows the correct DeleteAssignedTaskCommand format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param deleteInfo the unique id of the assigned task to be deleted."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @throws DukeException throws exception if the format is wrong."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public DeleteAssignedTaskCommand(String deleteInfo) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (deleteInfo.charAt(0) !\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(DeleteAssignedTaskCommand.class, \"Invalid format. Please follow: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                        + \"delete assigned task : #\u003ctaskUniqueID\u003e\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            taskUniqueId \u003d Integer.parseInt(deleteInfo.substring(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(DeleteAssignedTaskCommand.class, \"Warning \" + e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Run the command with the respect TaskList, UI, and storage, during the execution,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * during the execution, this method will be checking if the Assigned task to be deleted"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * from the existing list is truly exist."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param assignedTaskManager contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param taskManager         contains information of all the tasks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param patientManager      contains information of all the patients."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param dukeUi                interacts with user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param storageManager      save the changes in csv file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @throws DukeException if there is error during deleting a assigned task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void execute(AssignedTaskManager assignedTaskManager, TaskManager taskManager,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                        PatientManager patientManager, DukeUi dukeUi,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                        StorageManager storageManager)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            assignedTaskManager.deletePatientTaskByUniqueId(taskUniqueId);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            storageManager.saveAssignedTasks(assignedTaskManager.getAssignTasks());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            dukeUi.patientTaskDeleted(taskUniqueId);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Decide whether duke should exist."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 78
    }
  },
  {
    "path": "src/main/java/duke/commands/assignedtask/FindAssignedTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "//@@author WEIFENG-NUSCEG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.commands.assignedtask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.patients.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.assignedtasks.AssignedTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.tasks.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * Represents a command to find all the tasks assigned to a specific patient"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * through the patient\u0027s id."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class FindAssignedTaskCommand implements Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private int patientId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Create a new FindAssignedTaskCommand with the user input (patient id) received, check if the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * information follows the correct FindAssignedTaskCommand format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param cmd Id of the patient who we are interested to find all his/her associated tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @throws DukeException throws exception if the format is wrong."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public FindAssignedTaskCommand(String cmd) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (cmd.charAt(0) !\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(FindAssignedTaskCommand.class, \"Invalid format. Please follow: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                        + \"find assigned tasks : #\u003cpatientID\u003e\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            patientId \u003d Integer.parseInt(cmd.substring(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(FindAssignedTaskCommand.class, \"Warning \" + e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Run the command with the respect TaskList, UI, and storage, during the execution,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * this method will be checking if any assigned tasks in the list belongs to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * specific patient received from user input and append these AssignedTasks into"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * an array list and print them out with the tasks\u0027 detail information on the ui."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param assignedTaskManager contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param tasksManager        contains information of all the tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param patientManager      contains information of all the patients."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param dukeUi                  interacts with user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param storageManager      save the changes in csv file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @throws DukeException if there is error during searching for the assigned task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void execute(AssignedTaskManager assignedTaskManager, TaskManager tasksManager,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                        PatientManager patientManager,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            Patient patient \u003d patientManager.getPatient(patientId);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            ArrayList\u003cAssignedTask\u003e patientTask \u003d assignedTaskManager.getPatientTask(patientId);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            ArrayList\u003cTask\u003e newTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            for (AssignedTask tempPatientTask : patientTask) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                newTask.add(tasksManager.getTask(tempPatientTask.getTid()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            dukeUi.patientTaskFound(patient, patientTask, newTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(FindAssignedTaskCommand.class, \"Warning \" + e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Decide whether duke should exist."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 85
    }
  },
  {
    "path": "src/main/java/duke/commands/functional/BarChartCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "//@@author qjie7"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package duke.commands.functional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.gui.BarChartBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class BarChartCommand implements Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void execute(AssignedTaskManager patientTask, TaskManager tasks, PatientManager patientList,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            Map\u003cString, Integer\u003e counterMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            counterMap \u003d storageManager.loadCommandFrequency();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            final ArrayList\u003cInteger\u003e frequencyList \u003d new ArrayList\u003cInteger\u003e(counterMap.values());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            final ArrayList\u003cString\u003e commandNameList \u003d new ArrayList\u003cString\u003e(counterMap.keySet());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            BarChartBox.showBarChartBox(frequencyList, commandNameList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            dukeUi.showBarChartResponse();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            throw new DukeException(BarChartCommand.class,\"No command has been entered yet.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 42
    }
  },
  {
    "path": "src/main/java/duke/commands/functional/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.commands.functional;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a command to exit Duke. The command.ExitCommand class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * extends from the Command class for the user to quit the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * program"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructs a ExitCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Indicates whether Duke should exist."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false otherwise."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * run the command with the respect TaskList, UI, and storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasks       The task list where tasks are saved."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param dukeUi          The user interface."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientList object that handles local text file update"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(AssignedTaskManager patientTask, TaskManager tasks,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        PatientManager patientList, DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        dukeUi.exitInformation();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 4,
      "HUANGXUANKUN": 43
    }
  },
  {
    "path": "src/main/java/duke/commands/functional/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "//@@author lmtaek"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package duke.commands.functional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class HelpCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    ArrayList\u003cString\u003e userCommandList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Lists all available commands + their respective formats for the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"Create a task:\\n `add task :\u003cdescription\u003e`\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"Create a patient profile:\\n `add patient \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \":\u003cpatient name\u003e :\u003cpatient NRIC\u003e :\u003cpatient room\u003e :\u003cpatient remark\u003e`\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"Assign a patient to a deadline task:\\n `assign deadline task \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \":#\u003cpatient ID\u003e :#\u003ctask ID\u003e :\u003cdd/MM/yyyy HHmm\u003e`\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"Assign a patient to a period task:\\n `assign period task task \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \":#\u003cpatient ID\u003e :#\u003ctask ID\u003e :\u003cdd/MM/yyyy HHmm\u003e :\u003cdd/MM/yyyy HHmm\u003e`\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"List patients:\\n `list patients`\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"List tasks:\\n `list tasks`\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"Delete a patient:\\n `delete patient :#\u003cpatient ID\u003e`\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"Delete a task:\\n `delete task :#\u003ctask ID\u003e`\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"Delete an assigned task:\\n `delete assigned task :#\u003cassigned task ID\u003e`\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"Find a patient:\\n `find patient :#\u003cpatient ID\u003e OR \u003cpatient name\u003e`\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"Find a task:\\n `find task :#\u003ctask ID\u003e OR \u003ctask description\u003e\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"Find a patient\u0027s assigned tasks:\\n `find assigned tasks \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \":#\u003cpatient ID\u003e\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"Update a patient\u0027s data:\\n `update patient :#\u003cpatient id\u003e \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \":\u003cname/NRIC/room/remark\u003e :\u003cnew information\u003e`\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"Update a task\u0027s description:\\n `update task :#\u003ctask id\u003e \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \":description :\u003cnew description\u003e`\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"Undo an action:\\n `undo`\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"Show upcoming tasks for the week:\\n `show upcoming tasks`\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"View bar chart for command frequency statistics:\\n `barchart`\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"View pie chart for command frequency statistics:\\n `piechart`\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"View help guide:\\n `help`\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        userCommandList.add(\"Exit the program:\\n `bye`\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void execute(AssignedTaskManager patientTask, TaskManager tasks,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        PatientManager patientList, DukeUi dukeUi,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        dukeUi.showHelpOptions(userCommandList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Gives a string output with all available commands + formats."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return String with commands + input formats."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public ArrayList\u003cString\u003e getHelpCommands() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return userCommandList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 74
    }
  },
  {
    "path": "src/main/java/duke/commands/functional/PieChartCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "//@@author qjie7"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package duke.commands.functional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.gui.PieChartBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class PieChartCommand implements Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void execute(AssignedTaskManager patientTask, TaskManager tasks,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                        PatientManager patientList, DukeUi dukeUi,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                        StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            Map\u003cString, Integer\u003e counterMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            counterMap \u003d storageManager.loadCommandFrequency();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            ArrayList\u003cInteger\u003e frequencyList \u003d new ArrayList\u003cInteger\u003e(counterMap.values());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            final ArrayList\u003cString\u003e commandNameList \u003d new ArrayList\u003cString\u003e(counterMap.keySet());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            PieChartBox.showPieChartBox(frequencyList, commandNameList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            dukeUi.showPieChartResponse();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            throw new DukeException(PieChartCommand.class,\"No command has been entered yet.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 43
    }
  },
  {
    "path": "src/main/java/duke/commands/functional/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "//@@author WEIFENG-NUSCEG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.commands.functional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * Represents a command to undo a last step. The command.UndoCommand class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * extends from the Command class for the user to undo the last operation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class UndoCommand implements Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * To save the internal state of the objects retrieved from Memento into local CSV files"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * run the command with the respect TaskList, UI, and storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param patientTask contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param tasks       contains information of all the tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param patientManager      contains information of all the patients."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param dukeUi            interacts with user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param storageManager      save the changes in csv file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @throws DukeException if there is error during saving the internal states."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void execute(AssignedTaskManager patientTask, TaskManager tasks, PatientManager patientManager,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        storageManager.savePatients(patientManager.getPatientList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        storageManager.saveTasks(tasks.getTaskList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        storageManager.saveAssignedTasks(patientTask.getAssignTasks());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        dukeUi.showUndoSuccess();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Decide whether duke should exist."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 49
    }
  },
  {
    "path": "src/main/java/duke/commands/gui/ClearFilterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.commands.gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * A GUI command to clear filtering in all tables."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * @@author HUANGXUANKUN"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class ClearFilterCommand implements Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Show tomorrow task in the GUI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientTask    contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasks          contains information of all the tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientManager contains information of all the patients."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param dukeUi         interacts with user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager save the changes in csv file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException if there is error during saving the internal states."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(AssignedTaskManager patientTask, TaskManager tasks, PatientManager patientManager,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        dukeUi.printDukeResponse(\"Got it! Stop filtering!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Decides whether duke should exit."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean. True if the command will cause duke to exit."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 43
    }
  },
  {
    "path": "src/main/java/duke/commands/gui/FilterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.commands.gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * A GUI command to filter the rows of data in the table. Table will then display the rows with respective columns."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class FilterCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String filterInfo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public FilterCommand(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.filterInfo \u003d input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Show tomorrow task in the GUI."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientTask    contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasks          contains information of all the tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientManager contains information of all the patients."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param dukeUi         interacts with user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager save the changes in csv file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException if there is error during saving the internal states."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(AssignedTaskManager patientTask, TaskManager tasks, PatientManager patientManager,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        dukeUi.printDukeResponse(\"Got it! Filtering: \" + filterInfo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Decides whether duke should exit."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean. True if the command will cause duke to exit."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Returns keyword to be filtered in the table."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return the keyword to be filtered."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String getFilterInfo() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return filterInfo;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 57
    }
  },
  {
    "path": "src/main/java/duke/commands/gui/ShowAssignedTasksCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.commands.gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * An command class to control GUI components."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class ShowAssignedTasksCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Show assigned tasks in table form at the center of the GUI."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientTask    contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasks          contains information of all the tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientManager contains information of all the patients."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param dukeUi         interacts with user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager save the changes in csv file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException if there is error during saving the internal states."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(AssignedTaskManager patientTask, TaskManager tasks, PatientManager patientManager,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        dukeUi.printDukeResponse(\"Got it! Show all patient assigned tasks in the center table.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Decides whether duke should exit."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean. True if the command will cause duke to exit."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 45
    }
  },
  {
    "path": "src/main/java/duke/commands/gui/ShowHelpGuideCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.commands.gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * An GUI command class to switch to help guide tab in the tab pane."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class ShowHelpGuideCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Show help guide at the left panel in GUI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientTask    contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasks          contains information of all the tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientManager contains information of all the patients."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param dukeUi         interacts with user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager save the changes in csv file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException if there is error during saving the internal states."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(AssignedTaskManager patientTask, TaskManager tasks, PatientManager patientManager,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        dukeUi.printDukeResponse(\"Got it. The help guide is now shown on the left.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Decides whether duke should exit."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean. True if the command will cause duke to exit."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 43
    }
  },
  {
    "path": "src/main/java/duke/commands/gui/ShowPatientsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.commands.gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * An gui command to switch to patients table in GUI."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class ShowPatientsCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Show GUI manipulate dialog to control GUI component such as showing tables, help guide etc."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientTask    contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasks          contains information of all the tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientManager contains information of all the patients."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param dukeUi         interacts with user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager save the changes in csv file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException if there is error during saving the internal states."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(AssignedTaskManager patientTask, TaskManager tasks, PatientManager patientManager,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        dukeUi.printDukeResponse(\"Alright! All patients\u0027 data is now displayed at the center table.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Decides whether duke should exit."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean. True if the command will cause duke to exit."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 43
    }
  },
  {
    "path": "src/main/java/duke/commands/gui/ShowTasksCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.commands.gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * A gui command to switch to task table."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class ShowTasksCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Show tasks table at the center of the GUI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientTask    contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasks          contains information of all the tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientManager contains information of all the patients."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param dukeUi         interacts with user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager save the changes in csv file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException if there is error during saving the internal states."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(AssignedTaskManager patientTask, TaskManager tasks, PatientManager patientManager,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        dukeUi.printDukeResponse(\"Got it! Show all tasks in the center table.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Decides whether duke should exit."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean. True if the command will cause duke to exit."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 44
    }
  },
  {
    "path": "src/main/java/duke/commands/gui/ShowTodayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.commands.gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * It is a Gui command to display today tasks in the upcoming tasks tab."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class ShowTodayCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Show today tasks in the GUI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientTask    contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasks          contains information of all the tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientManager contains information of all the patients."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param dukeUi         interacts with user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager save the changes in csv file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException if there is error during saving the internal states."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(AssignedTaskManager patientTask, TaskManager tasks, PatientManager patientManager,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        dukeUi.printDukeResponse(\"Got it! Refer to today tasks on the left\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Decides whether duke should exit."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean. True if the command will cause duke to exit."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 43
    }
  },
  {
    "path": "src/main/java/duke/commands/gui/ShowTomorrowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.commands.gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * A gui command to switch to tomorrow tasks in the left panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class ShowTomorrowCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Show tomorrow task in the GUI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientTask    contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasks          contains information of all the tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientManager contains information of all the patients."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param dukeUi         interacts with user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager save the changes in csv file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException if there is error during saving the internal states."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(AssignedTaskManager patientTask, TaskManager tasks, PatientManager patientManager,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        dukeUi.printDukeResponse(\"Got it! Refer to tomorrow tasks on the left\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Decides whether duke should exit."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean. True if the command will cause duke to exit."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 43
    }
  },
  {
    "path": "src/main/java/duke/commands/patient/AddPatientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "//@@author kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "package duke.commands.patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.patients.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "public class AddPatientCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private Patient newPatient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It extracts the patient information."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientInfo    contains the patient information to be added."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException if there ia any information is missing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public AddPatientCommand(String[] patientInfo) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            this.newPatient \u003d new Patient(patientInfo[0], patientInfo[1], patientInfo[2], patientInfo[3]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(AddPatientCommand.class,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    \"Please follow the format \u0027add patient :\u003cName\u003e :\u003cNRIC\u003e :\u003cRoom\u003e :\u003cremark\u003e\u0027. \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It adds a new patient to Dukepital."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param assignedTaskManager contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskManager         contains information of all the tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientManager      contains information of all the patients."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param dukeUi              interacts with user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param storageManager      save the changes in csv file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException      if the patient is not added successfully."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void execute(AssignedTaskManager assignedTaskManager, TaskManager taskManager, PatientManager patientManager,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientManager.addPatient(newPatient);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            storageManager.savePatients(patientManager.getPatientList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            dukeUi.patientAdded(newPatient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It terminates the Dukepital."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 69
    }
  },
  {
    "path": "src/main/java/duke/commands/patient/DeletePatientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "//@@author kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "package duke.commands.patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.patients.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.assignedtasks.AssignedTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.tasks.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "public class DeletePatientCommand implements Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private String deletedPatientInfo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private Patient patientToBeDeleted;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It saves the delete patient command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param deletedPatientInfo it contains the information of the patient to be deleted."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public DeletePatientCommand(String deletedPatientInfo) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.deletedPatientInfo \u003d deletedPatientInfo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It extracts patient id from the delete patient command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param deletedPatientInfo contains the delete patient command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param dukeUi             allows user to choose the patient to delete."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientManager     retrieves patient based on patient id."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return                   patient to be deleted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException     if no matched patient found."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public Patient getPatientByDeletePatientCommand(String deletedPatientInfo, DukeUi dukeUi,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                                                    PatientManager patientManager) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        char firstChar \u003d deletedPatientInfo.charAt(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (firstChar \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            int id;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                id \u003d Integer.parseInt(deletedPatientInfo.substring(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw new DukeException(DeletePatientCommand.class,\"The patient id is invalid. \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                patient \u003d patientManager.getPatient(id);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw new DukeException(DeletePatientCommand.class, \"The patient id does not exist. \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(DeletePatientCommand.class,\"Please follow format \u0027delete patient #\u003cid\u003e\u0027. \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return patient;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It deletes the patient returned from getPatientByDeletePatientCommand."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It checks whether this patient is assigned to any tasks."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It deletes the relationship between this patient and any tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param assignedTaskManager contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskManager         contains information of all the tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientManager      contains information of all the patients."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param dukeUi              interacts with user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param storageManager      save the changes in csv file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException      if there is error deleting the patient."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void execute(AssignedTaskManager assignedTaskManager, TaskManager taskManager, PatientManager patientManager,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientToBeDeleted \u003d getPatientByDeletePatientCommand(deletedPatientInfo, dukeUi, patientManager);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        dukeUi.showPatientInfo(patientToBeDeleted);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            ArrayList\u003cAssignedTask\u003e patientTasks \u003d assignedTaskManager.getPatientTask(patientToBeDeleted.getId());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            ArrayList\u003cTask\u003e assignedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            for (AssignedTask patientTask : patientTasks) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                assignedTasks.add(taskManager.getTask(patientTask.getTid()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            dukeUi.assignedTasksFoundWhenDeletePatient(patientToBeDeleted, assignedTasks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assignedTaskManager.deleteAllTasksBelongToThePatient(patientToBeDeleted.getId());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            storageManager.saveAssignedTasks(assignedTaskManager.getAssignTasks());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientManager.deletePatient(patientToBeDeleted.getId());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientManager.deletePatient(patientToBeDeleted.getId());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        storageManager.savePatients(patientManager.getPatientList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        dukeUi.patientDeleted();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It terminates the Dukepital."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 112
    }
  },
  {
    "path": "src/main/java/duke/commands/patient/FindPatientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "//@@author kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "package duke.commands.patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.patients.Patient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "public class FindPatientCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public FindPatientCommand(String command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It finds patient(s) based on name or id."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param assignedTaskManager contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskManager         contains information of all the tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientManager      contains information of all the patients."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param dukeUi              interacts with user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param storageManager      save the changes in csv file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException      if the patient is not added successfully."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void execute(AssignedTaskManager assignedTaskManager, TaskManager taskManager, PatientManager patientManager,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        char firstChar \u003d command.charAt(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (firstChar \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            int id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                id \u003d Integer.parseInt(command.substring(1, command.length()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw new DukeException(FindPatientCommand.class, \"The patient id is invalid.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                Patient patient \u003d patientManager.getPatient(id);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                dukeUi.patientsFoundById(patient);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw new DukeException(FindPatientCommand.class, \"The patient id does not exist.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            ArrayList\u003cPatient\u003e patientsWithSameName \u003d patientManager.getPatientByName(command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            dukeUi.patientsFoundByName(patientsWithSameName, command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It terminates the Dukepital."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 66
    }
  },
  {
    "path": "src/main/java/duke/commands/patient/ListPatientsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "//@@author kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "package duke.commands.patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.patients.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "public class ListPatientsCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public ListPatientsCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It lists all patients in Dukepital."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param assignedTaskManager contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskManager         contains information of all the tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientManager      contains information of all the patients."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param dukeUi              interacts with user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param storageManager      save the changes in csv file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void execute(AssignedTaskManager assignedTaskManager, TaskManager taskManager, PatientManager patientManager,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cPatient\u003e patientList \u003d patientManager.getPatientList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        dukeUi.listAllPatients(patientList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It terminates the Dukepital."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 47
    }
  },
  {
    "path": "src/main/java/duke/commands/patient/UpdatePatientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "//@@author kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "package duke.commands.patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.patients.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "public class UpdatePatientCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private String[] command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private Patient patientToBeUpdated;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public UpdatePatientCommand(String[] command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It updates a new patient in Dukepital."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param assignedTaskManager contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskManager         contains information of all the tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientManager      contains information of all the patients."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param dukeUi              interacts with user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param storageManager      save the changes in csv file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException      if the patient is not added successfully."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void execute(AssignedTaskManager assignedTaskManager, TaskManager taskManager, PatientManager patientManager,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        char firstChar \u003d command[0].charAt(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (firstChar \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            int id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                id \u003d Integer.parseInt(command[0].substring(1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw new DukeException(UpdatePatientCommand.class,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        \"Please follow the format \u0027update patient :#\u003cid\u003e :\u003cName/NRIC/Room/Remark\u003e \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                                + \":\u003cnew information\u003e\u0027.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                patientToBeUpdated \u003d patientManager.getPatient(id);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            if (command[1].toLowerCase().equals(\"name\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    if (command.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        patientManager.nameIsValid(\"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        patientManager.nameIsValid(command[2]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    throw e;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    Patient newPatient \u003d new Patient(id, command[2],"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                            patientToBeUpdated.getNric(), patientToBeUpdated.getRoom(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                            patientToBeUpdated.getRemark());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    patientManager.deletePatient(id);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    patientManager.addPatient(newPatient);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    throw e;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } else if (command[1].toLowerCase().equals(\"nric\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    if (command.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        patientManager.nricIsValid(\"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        patientManager.nricIsValid(command[2]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    throw e;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    Patient newPatient \u003d new Patient(id, patientToBeUpdated.getName(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                            command[2], patientToBeUpdated.getRoom(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                            patientToBeUpdated.getRemark());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    patientManager.deletePatient(id);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    patientManager.addPatient(newPatient);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    throw e;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } else if (command[1].toLowerCase().equals(\"room\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    if (command.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        patientManager.roomIsValid(\"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        patientManager.roomIsValid(command[2]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    throw e;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    Patient newPatient \u003d new Patient(id, patientToBeUpdated.getName(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                            patientToBeUpdated.getNric(), command[2],"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                            patientToBeUpdated.getRemark());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    patientManager.deletePatient(id);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    patientManager.addPatient(newPatient);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    throw e;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } else if (command[1].toLowerCase().equals(\"remark\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                if (command.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    patientToBeUpdated.setRemark(\"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        Patient newPatient \u003d new Patient(id, patientToBeUpdated.getName(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                                patientToBeUpdated.getNric(), patientToBeUpdated.getRoom(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                                command[2]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        patientManager.deletePatient(id);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        patientManager.addPatient(newPatient);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        throw e;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw new DukeException(UpdatePatientCommand.class,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        \"You can only update \u0027Name\u0027, \u0027NRIC\u0027, \u0027Room\u0027, or \u0027Remark\u0027 of the patient\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                storageManager.savePatients(patientManager.getPatientList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            dukeUi.showUpdatedSuccessfully();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            dukeUi.showPatientInfo(patientManager.getPatient(id));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(UpdatePatientCommand.class,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    \"Please follow the format \u0027update patient :#\u003cid\u003e :\u003cName/NRIC/Room/Remark\u003e :\u003cnew information\u003e\u0027.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It terminates the Dukepital."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 148
    }
  },
  {
    "path": "src/main/java/duke/commands/task/AddTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "//@@author kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "package duke.commands.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "public class AddTaskCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private Task newStandardTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * The constructor for the AddTaskCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskDescription contains the description of the task to be added."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public AddTaskCommand(String taskDescription) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.newStandardTask \u003d new Task(taskDescription);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It adds a new task to Dukepital."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param assignedTaskManager contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskManager         contains information of all the tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientManager      contains information of all the patients."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param dukeUi              interacts with user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param storageManager      save the changes in csv file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException      if the task is not added successfully."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void execute(AssignedTaskManager assignedTaskManager, TaskManager taskManager, PatientManager patientManager,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            taskManager.addTask(newStandardTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            storageManager.saveTasks(taskManager.getTaskList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            dukeUi.taskAdded(newStandardTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It terminates the Dukepital."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 60
    }
  },
  {
    "path": "src/main/java/duke/commands/task/DeleteTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "//@@author kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "package duke.commands.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.patients.Patient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.assignedtasks.AssignedTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "public class DeleteTaskCommand implements Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private String deletedTaskInfo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private Task taskToBeDeleted;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * The constructor for the DeleteTaskCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param deletedTaskInfo contains the information of the patient to be deleted."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public DeleteTaskCommand(String deletedTaskInfo) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.deletedTaskInfo \u003d deletedTaskInfo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It extracts the task id from the delete task command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It retrieves task based on the id extracted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param deletedTaskInfo contains the delete command received from parser class which is a string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param dukeUi              allow user choose the correct task to be deleted."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskManager     retrieves the task to be deleted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return the task to be deleted."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException if no match task found."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public Task getTaskByDeleteTaskCommand(String deletedTaskInfo, DukeUi dukeUi,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                                           TaskManager taskManager) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        char firstChar \u003d deletedTaskInfo.charAt(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (firstChar \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            int id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                id \u003d Integer.parseInt(deletedTaskInfo.substring(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw new DukeException(DeleteTaskCommand.class,\"The task id is invalid\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                task \u003d taskManager.getTask(id);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(DeleteTaskCommand.class, \"Please follow format \u0027delete task :#\u003cid\u003e\u0027. \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It deletes the task returned from getTaskByDeleteTaskCommand."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It checks whether this task is assigned to any patient."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It deletes the relation between this task and any patients"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param assignedTaskManager contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskManager         contains information of all tasks."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientManager      contains information of all patients."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param dukeUi                  interacts with user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param storageManager      save the changes in csv file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException if there is error deleting the task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void execute(AssignedTaskManager assignedTaskManager, TaskManager taskManager, PatientManager patientManager,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            taskToBeDeleted \u003d getTaskByDeleteTaskCommand(deletedTaskInfo, dukeUi, taskManager);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        dukeUi.showTaskInfo(taskToBeDeleted);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            ArrayList\u003cAssignedTask\u003e patientTasks \u003d assignedTaskManager.getTaskPatient(taskToBeDeleted.getId());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            ArrayList\u003cPatient\u003e relatedPatients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            for (AssignedTask patientTask : patientTasks) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                relatedPatients.add(patientManager.getPatient(patientTask.getPid()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            dukeUi.taskPatientFound(taskToBeDeleted, relatedPatients);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assignedTaskManager.deleteAllAssignedTaskByTaskId(taskToBeDeleted.getId());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            storageManager.saveAssignedTasks(assignedTaskManager.getAssignTasks());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            taskManager.deleteTask(taskToBeDeleted.getId());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            taskManager.deleteTask(taskToBeDeleted.getId());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        storageManager.saveTasks(taskManager.getTaskList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        dukeUi.taskDeleted();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It terminates the Dukepital."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 112
    }
  },
  {
    "path": "src/main/java/duke/commands/task/FindTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "//@@author kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "package duke.commands.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "public class FindTaskCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * The constructor for the FindTaskCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param command contains the task id/description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public FindTaskCommand(String command) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It checks whether the command is containing id or description."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It finds the task based on id or description."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientTask    contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskManager    contains information of all tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientManager contains information of all patients."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param dukeUi         interacts with user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param storageManager save the changes in csv file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException if there is error finding tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void execute(AssignedTaskManager patientTask, TaskManager taskManager, PatientManager patientManager,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        char firstChar \u003d command.charAt(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (firstChar \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            int id;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                id \u003d Integer.parseInt(command.substring(1, command.length()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw new DukeException(FindTaskCommand.class, \"The task id is invalid.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                Task task \u003d taskManager.getTask(id);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                dukeUi.taskFoundById(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            ArrayList\u003cTask\u003e tasksWithSameDescription \u003d taskManager.getTaskByDescription(command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            dukeUi.tasksFoundByDescription(tasksWithSameDescription, command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It terminates the Dukepital."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 72
    }
  },
  {
    "path": "src/main/java/duke/commands/task/ListTasksCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "//@author kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.commands.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class ListTasksCommand implements Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It lists all the tasks in the Dukepital."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientTask    contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskManager    contains information of all tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientManager contains information of all patients."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param dukeUi         interacts with user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param storageManager save the changes in csv file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException if there is error finding tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void execute(AssignedTaskManager patientTask, TaskManager taskManager, PatientManager patientManager,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d taskManager.getTaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (taskList.size() \u003c 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(ListTasksCommand.class, \"You do not have any task yet.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            dukeUi.listAllTasks(taskList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It terminates the Dukepital."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 22,
      "qjie7": 17,
      "HUANGXUANKUN": 9
    }
  },
  {
    "path": "src/main/java/duke/commands/task/UpcomingTasksCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "//@@author lmtaek"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package duke.commands.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.models.assignedtasks.UpcomingTasks;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class UpcomingTasksCommand implements Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    LocalDateTime fromDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    ArrayList\u003cLocalDateTime\u003e dates \u003d new ArrayList\u003cLocalDateTime\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    ArrayList\u003cUpcomingTasks\u003e upcomingTaskList \u003d new ArrayList\u003cUpcomingTasks\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    Boolean isTypedCommand \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * The constructor for the UpcomingTasksCommand. Takes today\u0027s date and prepares UpcomingTask lists"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * for each day within the following week."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param fromDate The current date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public UpcomingTasksCommand(LocalDateTime fromDate, Boolean isTypedCommand) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.fromDate \u003d fromDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.isTypedCommand \u003d isTypedCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            LocalDateTime currentDate \u003d fromDate.plusDays(i);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            dates.add(currentDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void execute(AssignedTaskManager patientTask, TaskManager tasks,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        PatientManager patientList, DukeUi dukeUi,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (LocalDateTime date : dates) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            UpcomingTasks upcomingTaskForDay \u003d new UpcomingTasks(date, patientTask, tasks, patientList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            upcomingTaskList.add(upcomingTaskForDay);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            if (isTypedCommand) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                dukeUi.showUpcomingTasks(upcomingTaskForDay);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        if (isTypedCommand) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            isTypedCommand \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public ArrayList\u003cUpcomingTasks\u003e getUpcomingTaskLists() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return upcomingTaskList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 65
    }
  },
  {
    "path": "src/main/java/duke/commands/task/UpdateTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "//@@author kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "package duke.commands.task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "public class UpdateTaskCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private String[] command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * The constructor for the UpdateTaskCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param command contains the task id and the new description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public UpdateTaskCommand(String[] command) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It finds the task based on id and update its description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientTask    contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskManager    contains information of all tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientManager contains information of all patients."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param dukeUi         interacts with user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param storageManager save the changes in csv file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException if there is error finding tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void execute(AssignedTaskManager patientTask, TaskManager taskManager, PatientManager patientManager,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        DukeUi dukeUi, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        char firstChar \u003d command[0].charAt(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (firstChar \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            int id;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                id \u003d Integer.parseInt(command[0].substring(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                Task taskToBeUpdated \u003d taskManager.getTask(id);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                if (command[1].toLowerCase().equals(\"description\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    Task newTask \u003d new Task(id, command[2]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    taskManager.deleteTask(id);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    taskManager.addTask(newTask);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    throw new DukeException(UpdateTaskCommand.class, \"You can only update \u0027Description\u0027 of the task\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                storageManager.saveTasks(taskManager.getTaskList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                dukeUi.showUpdatedSuccessfully();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                dukeUi.showTaskInfo(taskManager.getTask(id));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(UpdateTaskCommand.class,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    \"Please follow the format \u0027update task :#\u003cid\u003e :description :\u003cnew description\u003e\u0027.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It terminates the Dukepital."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 74
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.util.Log4jLogger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * An exception class which design for Duke, all the exception message of DukeException should start with \"Oops\"."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * An exception start with \"Oops\"."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param message exception message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super(\"Oops! \" + message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * It throws an exception to be recorded into log."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param className the classname where exception is being thrown."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param message   exception message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public DukeException(Class className, String message) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super(\"Oops! \" + message);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Log4jLogger.logException(className, message);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 2,
      "HUANGXUANKUN": 28
    }
  },
  {
    "path": "src/main/java/duke/gui/BarChartBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "//@@author qjie7"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class BarChartBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Show BarChart."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param frequencyList   a list of command frequency"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param commandNameList a list of command name"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @author Qian Jie"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @version v1.4"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public static void showBarChartBox(ArrayList\u003cInteger\u003e frequencyList, ArrayList\u003cString\u003e commandNameList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final BarChart\u003cString, Number\u003e bc \u003d new BarChart\u003cString, Number\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        int year \u003d Calendar.getInstance().get(Calendar.YEAR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final String yearInString \u003d Integer.toString(year);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        stage.setTitle(\"Bar Chart\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        bc.setTitle(\"Command Frequency\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        xAxis.setLabel(\"Command\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        yAxis.setLabel(\"Frequency\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        XYChart.Series series1 \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        series1.setName(yearInString);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        for (int i \u003d 0; i \u003c commandNameList.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            series1.getData().add(new XYChart.Data(commandNameList.get(i), frequencyList.get(i)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Scene scene \u003d new Scene(bc, 800, 600);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        bc.getData().addAll(series1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 48
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * A gui component which displays a Dialog with an image."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param text Dialog to be displayed in the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param img  an picture representing the dialog\u0027s owner"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private DialogBox(String text, Image img, String colorCode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        dialog.setTextFill(Color.web(colorCode));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * It returns a dialog block with text in black, as well as user\u0027s icon image."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param text Dialog to be displayed in the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param img  an picture representing the dialog\u0027s owner"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a JavaFX DialogBox"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return new DialogBox(text, img, \"#000000\"); //Dialog with black text"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * It returns a dialog block with text in red and blue, as well as duke\u0027s icon image."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Exception message will be displayed in red."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Duke\u0027s reply without exception will be displayed in blue."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param text Dialog to be displayed in the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param img  an picture representing the dialog\u0027s owner"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a JavaFX DialogBox"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    static DialogBox getDukeDialog(String text, Image img, boolean isException) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (isException) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return new DialogBox(text, img, \"#ff0000\"); //Dialog with red text"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return new DialogBox(text, img, \"0000FF\"); //Dialog with blue text"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 73
    }
  },
  {
    "path": "src/main/java/duke/gui/HelpBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "//@@author lmtaek"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.functional.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class HelpBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private HelpBox helpBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private Label helpText;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Control representing the \u0027Help Box\u0027 within Dukepital\u0027s GUI."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private HelpBox(String text, String colorCode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/HelpBox.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        helpText.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        helpText.setWrapText(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        helpText.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        helpText.setTextFill(Color.web(colorCode));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Sets up text display for the HelpBox."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return the text displayed in the HelpBox."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public static ArrayList\u003cHelpBox\u003e getHelpGuide() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        ArrayList\u003cHelpBox\u003e helpCommands \u003d new ArrayList\u003cHelpBox\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        HelpBox introText \u003d new HelpBox(\"Here\u0027s a list of all available commands and their formats:\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                \"#d20000\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        helpCommands.add(introText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        int alternator \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (String command : new HelpCommand().getHelpCommands()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            if (alternator % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                HelpBox newHelpBox \u003d new HelpBox(command, \"#000000\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                newHelpBox.setPadding(new Insets(0, 5, 10, 5));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                helpCommands.add(newHelpBox);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                HelpBox newHelpBox \u003d new HelpBox(command, \"#ab5e4f\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                newHelpBox.setPadding(new Insets(0, 5, 10, 5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                helpCommands.add(newHelpBox);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            alternator++;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return helpCommands;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 74
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.commands.assignedtask.AssignPeriodTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.commands.gui.FilterCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.task.UpcomingTasksCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.models.assignedtasks.UpcomingTasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.patients.Patient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.tasks.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.util.TypoCorrector;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.scene.Group;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.scene.control.Accordion;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.scene.control.DatePicker;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import javafx.scene.control.TitledPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import org.controlsfx.control.textfield.TextFields;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * @author HUANGXUANKUN"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TabPane centerTabPane;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TabPane leftTabPane;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Accordion upComingTasksAccordion;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableView\u003cPatient\u003e patientTable;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableColumn\u003cPatient, Integer\u003e patientIdCol;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableColumn\u003cPatient, String\u003e patientNameCol;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableColumn\u003cPatient, String\u003e patientRoomCol;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableColumn\u003cPatient, String\u003e patientRemarkCol;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableColumn\u003cPatient, String\u003e patientNricCol;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableView\u003cTask\u003e taskTable;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableColumn\u003cTask, Integer\u003e taskIdCol;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableColumn\u003cTask, String\u003e taskDescriptionCol;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableView\u003cAssignedTask\u003e assignedTaskTable;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableColumn\u003cAssignedTask, Integer\u003e assignedUuidCol;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableColumn\u003cAssignedTask, String\u003e assignedTypeCol;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableColumn\u003cAssignedTask, Integer\u003e assignedTidCol;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableColumn\u003cAssignedTask, String\u003e assignedDescriptionCol;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableColumn\u003cAssignedTask, Integer\u003e assignedPidCol;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableColumn\u003cAssignedTask, String\u003e assignedPnameCol;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableColumn\u003cAssignedTask, Boolean\u003e assignedIsDoneCol;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableColumn\u003cAssignedTask, String\u003e assignedTodoDateCol;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableColumn\u003cAssignedTask, String\u003e assignedStartDateCol;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TableColumn\u003cAssignedTask, String\u003e assignedEndDateCol;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField patientSearchTextField;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField taskSearchTextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField assignedTaskSearchTextField;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField addPatientNameField;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField addPatientNricField;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField addPatientRemarkField;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField addPatientRoomField;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField deletePatientIdField;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField updatePatientIdField;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField updatePatientColumnField;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField updatePatientContentField;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField addTaskNameField;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField deleteTaskIdField;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField assignTaskIdField;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField assignTaskPatientIdField;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField assignTaskStartTimeField;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField assignTaskEndTimeField;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private DatePicker assignTaskStartDatePicker;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private DatePicker assignTaskEndDatePicker;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private DatePicker assignDeadlineTaskDatePicker;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField assignDeadlineTaskTimeField;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField assignTaskUuidField;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private VBox helpGuideContainer;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private ScrollPane helpGuideScrollPane;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TextField assignTaskFindAssignedTaskField;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private VBox firstDayBox;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private VBox secondDayBox;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private VBox thirdDayBox;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private VBox fourthDayBox;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private VBox fifthDayBox;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private VBox sixthDayBox;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private VBox seventhDayBox;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TitledPane firstTitledPane;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TitledPane secondTitledPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TitledPane thirdTitledPane;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TitledPane fourthTitledPane;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TitledPane fifthTitledPane;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TitledPane sixthTitledPane;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TitledPane seventhTitledPane;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private ScrollPane firstScroll;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private ScrollPane secondScroll;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private ScrollPane thirdScroll;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private ScrollPane fourthScroll;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private ScrollPane fifthScroll;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private ScrollPane sixthScroll;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private ScrollPane seventhScroll;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    //@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/robot.png\"));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private ObservableList\u003cAssignedTask\u003e assignedTaskData;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private ObservableList\u003cTask\u003e taskData;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private ObservableList\u003cPatient\u003e patientData;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private boolean isConfirming \u003d false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String correctedCommand;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String originalCommand;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Creates the Main Window."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param primaryStage The stage to display MainWindow on."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param duke         Logic component"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public MainWindow(Stage primaryStage, Duke duke) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        initialize();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Returns the stage that MainWindow is displayed on."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Initialize GUI components in the stage."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        initializeTableViews();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        showHelpGuide();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        initializeAutoCompletion();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        executeDukeWithInput(userInput.getText());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Execute duke core with userInput command given"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * and update dialog container and tables."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private void executeDukeWithInput(String inputCommand) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String dukeResponses;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        boolean isInsistOnInvalidCommand \u003d false;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        boolean isException \u003d false;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // if confirmation of typo correction is required, check if input is Y/N."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (isConfirming) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (inputCommand.equals(\"Y\")) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                inputCommand \u003d correctedCommand;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            } else if (inputCommand.equals(\"N\")) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                inputCommand \u003d originalCommand;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                isInsistOnInvalidCommand \u003d true;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            isConfirming \u003d false;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (!isInsistOnInvalidCommand) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            TypoCorrector typoCorrector \u003d new TypoCorrector(inputCommand);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (typoCorrector.isCommandCorrected()) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                isConfirming \u003d true;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                originalCommand \u003d inputCommand;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                correctedCommand \u003d typoCorrector.getCorrectedCommand();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                dukeResponses \u003d \"Ambiguous command! Do you mean:\\n\\n\""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + correctedCommand"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + \"\\n\\n1. Enter \u0027Y\u0027 to proceed with recommended command\\n\\n\""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + \"2. Enter \u0027N\u0027 to proceed with original command\\n\\n\""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + \"3. Enter another command\";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                updateChatBox(inputCommand, dukeResponses, false);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            dukeResponses \u003d duke.run(inputCommand);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"input: \" + inputCommand);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"duke: \" + dukeResponses);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            Command command \u003d duke.getRunningCommand();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            updateTableViews();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            executeGuiInstructions(command);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            dukeResponses \u003d de.getMessage();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            isException \u003d true;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        updateChatBox(inputCommand, dukeResponses, isException);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Update chatbox."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private void updateChatBox(String userDialog, String dukeDialog, boolean isException) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            DialogBox.getUserDialog(userDialog, userImage),"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            DialogBox.getDukeDialog(dukeDialog, dukeImage, isException)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        );"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        duke.clearDukeResponses();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Initialize GUI tables."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void initializeTableViews() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedTaskData \u003d FXCollections"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            .observableArrayList(duke.getAssignedTaskManager().getAssignTasks());"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskData \u003d FXCollections.observableArrayList(duke.getTaskManager().getTaskList());"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientData \u003d FXCollections"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            .observableArrayList(duke.getPatientManager().getPatientList());"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientIdCol.setCellValueFactory(new PropertyValueFactory\u003cPatient, Integer\u003e(\"id\"));"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientNameCol.setCellValueFactory(new PropertyValueFactory\u003cPatient, String\u003e(\"name\"));"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientNricCol.setCellValueFactory(new PropertyValueFactory\u003cPatient, String\u003e(\"nric\"));"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientRoomCol.setCellValueFactory(new PropertyValueFactory\u003cPatient, String\u003e(\"room\"));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientRemarkCol.setCellValueFactory(new PropertyValueFactory\u003cPatient, String\u003e(\"remark\"));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskIdCol.setCellValueFactory(new PropertyValueFactory\u003cTask, Integer\u003e(\"id\"));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskDescriptionCol.setCellValueFactory(new PropertyValueFactory\u003cTask, String\u003e(\"description\"));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedUuidCol.setCellValueFactory(new PropertyValueFactory\u003cAssignedTask, Integer\u003e(\"uuid\"));"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedTypeCol.setCellValueFactory(new PropertyValueFactory\u003cAssignedTask, String\u003e(\"type\"));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedTidCol.setCellValueFactory(new PropertyValueFactory\u003cAssignedTask, Integer\u003e(\"tid\"));"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedPidCol.setCellValueFactory(new PropertyValueFactory\u003cAssignedTask, Integer\u003e(\"pid\"));"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedIsDoneCol.setCellValueFactory(new PropertyValueFactory\u003cAssignedTask, Boolean\u003e(\"IsDone\"));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedTodoDateCol.setCellValueFactory(new PropertyValueFactory\u003cAssignedTask, String\u003e(\"todoDateRaw\"));"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedStartDateCol.setCellValueFactory(new PropertyValueFactory\u003cAssignedTask, String\u003e(\"startDateRaw\"));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedEndDateCol.setCellValueFactory(new PropertyValueFactory\u003cAssignedTask, String\u003e(\"endDateRaw\"));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedDescriptionCol.setCellValueFactory(cellData -\u003e {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            AssignedTask currentAssignedTask \u003d cellData.getValue();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return Bindings.createStringBinding("
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                () -\u003e {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    int tid \u003d currentAssignedTask.getTid();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    return duke.getTaskManager().getTask(tid).getDescription();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            );"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        });"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedPnameCol.setCellValueFactory(cellData -\u003e {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            AssignedTask currentAssignedTask \u003d cellData.getValue();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return Bindings.createStringBinding("
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                () -\u003e {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    int pid \u003d currentAssignedTask.getPid();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    return duke.getPatientManager().getPatient(pid).getName();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            );"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        });"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedTaskTable.setItems(assignedTaskData);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskTable.setItems(taskData);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientTable.setItems(patientData);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientSearchBarListener();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedTaskSearchBarListener();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskSearchBarListener();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Update tables. To be called after each command execution"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void updateTableViews() throws DukeException {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedTaskData.clear();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskData.clear();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientData.clear();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedTaskData \u003d FXCollections.observableArrayList(duke.getAssignedTaskManager().getAssignTasks());"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskData \u003d FXCollections.observableArrayList(duke.getTaskManager().getTaskList());"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientData \u003d FXCollections.observableArrayList(duke.getPatientManager().getPatientList());"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedTaskTable.setItems(assignedTaskData);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskTable.setItems(taskData);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientTable.setItems(patientData);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientSearchBarListener();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedTaskSearchBarListener();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskSearchBarListener();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            showUpcomingTasks();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(\"Failed to update Upcoming Tasks tab.\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Manipulate relevant GUI component after a command is successfully executed."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * For example, after a patient is being added, it will display the patient table at the center tab pane."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param command Running DukeCommand"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private void executeGuiInstructions(Command command) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(command.getClass().getSimpleName());"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String commandName \u003d command.getClass().getSimpleName();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        switch (commandName) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"AssignDeadlineTaskCommand\":"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"AssignPeriodTaskCommand\":"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"DeleteAssignedTaskCommand\":"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"FindAssignedTaskCommand\":"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            centerTabPane.getSelectionModel().select(2);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            clearFilter();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"ShowAssignedTasksCommand\":"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            centerTabPane.getSelectionModel().select(2);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"AddPatientCommand\":"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"DeletePatientCommand\":"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"ListPatientsCommand\":"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"UpdatePatientCommand\":"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"FindPatientCommand\":"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            centerTabPane.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            clearFilter();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"ShowPatientsCommand\":"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            centerTabPane.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"AddTaskCommand\":"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"DeleteTaskCommand\":"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"ListTasksCommand\":"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"FindTaskCommand\":"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            clearFilter();"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            centerTabPane.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"ShowTasksCommand\":"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            centerTabPane.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"ShowHelpGuideCommand\":"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            leftTabPane.getSelectionModel().select(5);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"ShowTodayCommand\":"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            leftTabPane.getSelectionModel().select(4);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            upComingTasksAccordion.setExpandedPane(firstTitledPane);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"ShowTomorrowCommand\":"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            leftTabPane.getSelectionModel().select(4);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            upComingTasksAccordion.setExpandedPane(secondTitledPane);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"FilterCommand\":"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            FilterCommand filterCommand \u003d (FilterCommand) command;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String filterContent \u003d filterCommand.getFilterInfo();"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            filter(filterContent);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        case \"ClearFilterCommand\":"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            clearFilter();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * It will clear the text in the search bar such that rows in tables are not being filtered."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private void clearFilter() {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientSearchTextField.clear();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskSearchTextField.clear();"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedTaskSearchTextField.clear();"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * It will filter the rows in current tables(patient/task/assigned task) with given input."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private void filter(String input) {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        int currentTableIndex \u003d getSelectedTableIndex();"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (currentTableIndex \u003d\u003d 0) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            patientSearchTextField.setText(input);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else if (currentTableIndex \u003d\u003d 1) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            taskSearchTextField.setText(input);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assignedTaskSearchTextField.setText(input);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Find the index of table being displayed currently at the center of the GUI."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Index 0 refers to patient table."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Index 1 refers to tasks table."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Index 2 refers to assigned tasks table."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return index of current selected table."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private int getSelectedTableIndex() {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return centerTabPane.getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Listen to search bar input for filtering rows in patient table."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private void patientSearchBarListener() {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Wrap the ObservableList in a FilteredList (initially display all data)."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        FilteredList\u003cPatient\u003e filteredPatients \u003d new FilteredList\u003c\u003e(patientData, b -\u003e true);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Capture Patient\u0027s search bar text field"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientSearchTextField.textProperty().addListener((ObservableValue\u003c? extends String\u003e observable,"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                           String oldValue, String newValue) -\u003e {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            filteredPatients.setPredicate(patient -\u003e {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                // If filter text is empty, display all patients"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                if (newValue \u003d\u003d null || newValue.isEmpty()) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String lowerCaseFilter \u003d newValue.toLowerCase();"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                if (patient.getName().toLowerCase().contains(lowerCaseFilter)) {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } else if (String.valueOf(patient.getId()).contains(lowerCaseFilter)) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } else if (patient.getRoom().toLowerCase().contains(lowerCaseFilter)) {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } else if (patient.getNric().toLowerCase().contains(lowerCaseFilter)) {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } else if (patient.getRemark().toLowerCase().contains(lowerCaseFilter)) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    return false; // No match"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            });"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        });"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // 3. Wrap the FilteredList in a SortedList."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        SortedList\u003cPatient\u003e sortedPatientData \u003d new SortedList\u003c\u003e(filteredPatients);"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // 4. Bind the SortedList comparator to the TableView comparator."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        sortedPatientData.comparatorProperty().bind(patientTable.comparatorProperty());"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // 5. Add sorted (and filtered) data to the table."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientTable.setItems(sortedPatientData);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Listen to search bar input for filtering rows in task table."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private void taskSearchBarListener() {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Wrap the ObservableList in a FilteredList (initially display all data)."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        FilteredList\u003cTask\u003e filteredPatients \u003d new FilteredList\u003c\u003e(taskData, b -\u003e true);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Capture Patient\u0027s search bar text field"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskSearchTextField.textProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            filteredPatients.setPredicate(task -\u003e {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                // If filter text is empty, display all patients"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                if (newValue \u003d\u003d null || newValue.isEmpty()) {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String lowerCaseFilter \u003d newValue.toLowerCase();"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                if (task.getDescription().toLowerCase().contains(lowerCaseFilter)) {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } else if (String.valueOf(task.getId()).contains(lowerCaseFilter)) {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    return false; // No match"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            });"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        });"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        SortedList\u003cTask\u003e sortedTaskData \u003d new SortedList\u003c\u003e(filteredPatients);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        sortedTaskData.comparatorProperty().bind(taskTable.comparatorProperty());"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        taskTable.setItems(sortedTaskData);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Listen to search bar input for filtering rows in assign task table."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private void assignedTaskSearchBarListener() {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Wrap the ObservableList in a FilteredList (initially display all data)."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        FilteredList\u003cAssignedTask\u003e filteredAssignedTasks \u003d new FilteredList\u003c\u003e(assignedTaskData, b -\u003e true);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedTaskSearchTextField.textProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            filteredAssignedTasks.setPredicate(assignedTask -\u003e {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                if (newValue \u003d\u003d null || newValue.isEmpty()) {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String lowerCaseFilter \u003d newValue.toLowerCase();"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    if (assignedTask.getType().toLowerCase().contains(lowerCaseFilter)) {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    } else if (duke.getTaskManager().getTask((assignedTask.getTid()))"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        .getDescription().toLowerCase().contains(lowerCaseFilter)) {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    } else if (duke.getPatientManager().getPatient((assignedTask.getPid()))"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        .getName().toLowerCase().contains(lowerCaseFilter)) {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    } else if (String.valueOf(assignedTask.getUuid()).contains(lowerCaseFilter)) {"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    } else if (String.valueOf(assignedTask.getTid()).contains(lowerCaseFilter)) {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    } else if (String.valueOf(assignedTask.getPid()).contains(lowerCaseFilter)) {"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    } else if (assignedTask.getStartDateRaw().toLowerCase().contains(lowerCaseFilter)) {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    } else if (assignedTask.getEndDateRaw().toLowerCase().contains(lowerCaseFilter)) {"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    } else if (assignedTask.getTodoDateRaw().toLowerCase().contains(lowerCaseFilter)) {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        return false; // Does not match."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            });"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        });"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        SortedList\u003cAssignedTask\u003e sortedAssignedTaskData \u003d new SortedList\u003c\u003e(filteredAssignedTasks);"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        sortedAssignedTaskData.comparatorProperty().bind(assignedTaskTable.comparatorProperty());"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assignedTaskTable.setItems(sortedAssignedTaskData);"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    //@@author qjie7"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Action takes to after Undo button is being pressed."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void handleUndoButton() {"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        executeDukeWithInput(\"undo\");"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Event handler of PieChartPopUpButton."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void handlePieChartPopUpButton() throws DukeException {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Map\u003cString, Integer\u003e counterMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        counterMap \u003d duke.getStorageManager().loadCommandFrequency();"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        ArrayList\u003cInteger\u003e frequencyList \u003d new ArrayList\u003cInteger\u003e(counterMap.values());"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final ArrayList\u003cString\u003e commandNameList \u003d new ArrayList\u003cString\u003e(counterMap.keySet());"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final Scene scene \u003d new Scene(new Group());"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        stage.setTitle(\"Pie Chart\");"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        stage.setWidth(500);"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        stage.setHeight(500);"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        for (int i \u003d 0; i \u003c commandNameList.size(); i++) {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            pieChartData.add(new PieChart.Data(commandNameList.get(i), frequencyList.get(i)));"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final PieChart chart \u003d new PieChart(pieChartData);"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        chart.setTitle(\"Command Frequency\");"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        ((Group) scene.getRoot()).getChildren().add(chart);"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Event handler of BarCharPopUpButton."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void handleBarChartPopUpButton() throws DukeException {"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Map\u003cString, Integer\u003e counterMap;"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        counterMap \u003d duke.getStorageManager().loadCommandFrequency();"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final ArrayList\u003cInteger\u003e frequencyList \u003d new ArrayList\u003cInteger\u003e(counterMap.values());"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final ArrayList\u003cString\u003e commandNameList \u003d new ArrayList\u003cString\u003e(counterMap.keySet());"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final BarChart\u003cString, Number\u003e bc \u003d new BarChart\u003cString, Number\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        int year \u003d Calendar.getInstance().get(Calendar.YEAR);"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final String yearInString \u003d Integer.toString(year);"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        stage.setTitle(\"Bar Chart\");"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        bc.setTitle(\"Command Frequency\");"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        xAxis.setLabel(\"Command\");"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        yAxis.setLabel(\"Frequency\");"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        XYChart.Series series1 \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        series1.setName(yearInString);"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        for (int i \u003d 0; i \u003c commandNameList.size(); i++) {"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            series1.getData().add(new XYChart.Data(commandNameList.get(i), frequencyList.get(i)));"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Scene scene \u003d new Scene(bc, 800, 600);"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        bc.getData().addAll(series1);"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Action takes to after add patient button is being pressed."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private void handleAddPatientButton() {"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String name \u003d addPatientNameField.getText();"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String nric \u003d addPatientNricField.getText();"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String room \u003d addPatientRoomField.getText();"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String remark \u003d addPatientRemarkField.getText();"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String input \u003d \"add patient:\" + name + \":\" + nric + \":\" + room + \":\" + remark;"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        executeDukeWithInput(input);"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        addPatientNameField.clear();"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        addPatientNricField.clear();"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        addPatientRoomField.clear();"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        addPatientRemarkField.clear();"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Action takes to after update patient button is being pressed."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private void handleUpdatePatientButton() {"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String id \u003d updatePatientIdField.getText();"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String field \u003d updatePatientColumnField.getText();"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String content \u003d updatePatientContentField.getText();"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String input \u003d \"update patient:\" + \"#\" + id + \":\" + field + \":\" + content;"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        executeDukeWithInput(input);"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        updatePatientIdField.clear();"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        updatePatientColumnField.clear();"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        updatePatientContentField.clear();"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Action takes to after delete patient button is being pressed."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private void handleDeletePatientButton() {"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String id \u003d deletePatientIdField.getText();"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String input \u003d \"delete patient:\" + \"#\" + id;"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        executeDukeWithInput(input);"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        deletePatientIdField.clear();"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Action takes to after list patients button is being pressed."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private void handleListPatientsButton() {"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        executeDukeWithInput(\"list patients\");"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Action takes to after add task button is being pressed."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private void handleAddTaskButton() {"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String name \u003d addTaskNameField.getText();"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String input \u003d \"add task:\" + name;"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        executeDukeWithInput(input);"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        addTaskNameField.clear();"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Action takes to after delete task button is being pressed."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private void handleDeleteTaskButton() {"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String id \u003d deleteTaskIdField.getText();"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String input \u003d \"delete task:\" + \"#\" + id;"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        executeDukeWithInput(input);"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        deleteTaskIdField.clear();"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Action takes to after list task button is being pressed."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private void handleListTasksButton() {"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        executeDukeWithInput(\"list tasks\");"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Action takes to after Assign Period Task button is being pressed."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private void handleAssignTaskButton() {"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String taskId \u003d assignTaskIdField.getText();"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String patientId \u003d assignTaskPatientIdField.getText();"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        LocalDate startDate \u003d assignTaskStartDatePicker.getValue();"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        LocalDate endDate \u003d assignTaskEndDatePicker.getValue();"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String startDateInString \u003d startDate.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String endDateInString \u003d endDate.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String startTime \u003d assignTaskStartTimeField.getText();"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String endTime \u003d assignTaskEndTimeField.getText();"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String input \u003d \"assign period task :\" + \"#\" + patientId + \" :\""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            + \"#\" + taskId + \" :\" + startDateInString + \" \" + startTime"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            + \" :\" + endDateInString + \" \" + endTime;"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        executeDukeWithInput(input);"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assignTaskIdField.clear();"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assignTaskPatientIdField.clear();"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assignTaskStartTimeField.clear();"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assignTaskEndTimeField.clear();"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assignTaskStartDatePicker.setValue(null);"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assignTaskEndDatePicker.setValue(null);"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Action takes to after Assign Deadline Task button is being pressed."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private void handleDeadlineTaskButton() {"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String taskId \u003d assignTaskIdField.getText();"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String patientId \u003d assignTaskPatientIdField.getText();"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        LocalDate deadlineDate \u003d assignDeadlineTaskDatePicker.getValue();"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String deadlineDateInString \u003d deadlineDate.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String deadlineTime \u003d assignDeadlineTaskTimeField.getText();"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String input \u003d \"assign deadline task :\" + \"#\" + patientId + \" :\""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            + \"#\" + taskId + \" :\" + deadlineDateInString + \" \" + deadlineTime;"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        executeDukeWithInput(input);"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assignTaskIdField.clear();"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assignTaskPatientIdField.clear();"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assignDeadlineTaskTimeField.clear();"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assignDeadlineTaskDatePicker.setValue(null);"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Action takes to after Delete Assign task button is being pressed."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private void handleDeleteUuidTaskButton() {"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String uuid \u003d assignTaskUuidField.getText();"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String input \u003d \"delete assigned task :\" + \"#\" + uuid;"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        executeDukeWithInput(input);"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assignTaskUuidField.clear();"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Action takes to after Delete Assign task button is being pressed."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private void handleFindAssignTaskButton() {"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String patientId \u003d assignTaskFindAssignedTaskField.getText();"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String input \u003d \"find assigned tasks :\" + \"#\" + patientId;"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        executeDukeWithInput(input);"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assignTaskFindAssignedTaskField.clear();"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    //@@author lmtaek"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Handler for HelpGuide tab."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void showHelpGuide() {"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (HelpBox newHelpBox : HelpBox.getHelpGuide()) {"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            helpGuideContainer.getChildren().addAll(newHelpBox);"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            helpGuideScrollPane.setContent(helpGuideContainer);"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Handler for Upcoming Tasks tab. Dynamically updates to display tasks assigned for day within upcoming week."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @throws DukeException When Upcoming Tasks tab is unable to locate Upcoming Tasks to fill out respective fields."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void showUpcomingTasks() throws DukeException {"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        VBox[] upcomingTaskContainers \u003d {firstDayBox, secondDayBox, thirdDayBox, fourthDayBox,"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            fifthDayBox, sixthDayBox, seventhDayBox};"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        TitledPane[] titledPanes \u003d {firstTitledPane, secondTitledPane, thirdTitledPane, fourthTitledPane,"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            fifthTitledPane, sixthTitledPane, seventhTitledPane};"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        ScrollPane[] scrollPanes \u003d {firstScroll, secondScroll, thirdScroll, fourthScroll,"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            fifthScroll, sixthScroll, seventhScroll};"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        ArrayList\u003cUpcomingTasks\u003e upcomingTasks \u003d"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            new UpcomingTasksCommand(LocalDateTime.now(), false).getUpcomingTaskLists();"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            upcomingTasks.add(new UpcomingTasks(LocalDateTime.now().plusDays(i),"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                duke.getAssignedTaskManager(), duke.getTaskManager(),"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                duke.getPatientManager()));"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c upcomingTaskContainers.length; i++) {"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            upcomingTaskContainers[i].getChildren().clear();"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            titledPanes[i].setText(upcomingTasks.get(i).getFormattedDate());"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            ArrayList\u003cUpcomingTasksBox\u003e taskBoxesForDate"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                \u003d UpcomingTasksBox.createUpcomingTasksBoxesForDate(upcomingTasks.get(i).getTaskAndInfo());"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            for (UpcomingTasksBox taskInfoForDate : taskBoxesForDate) {"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                upcomingTaskContainers[i].getChildren().addAll(taskInfoForDate);"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            scrollPanes[i].setContent(upcomingTaskContainers[i]);"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            titledPanes[i].setContent(scrollPanes[i]);"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    //@@author qjie7"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private void initializeAutoCompletion() {"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String[] possibleWords \u003d {\"Y\", \"N\", \"add task :\", \"add patient :\", \"assign period task :#\","
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            \"assign deadline task :#\", \"list patients\", \"list tasks\", \"delete patient :#\", \"delete task :#\","
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            \"delete assigned task :#\", \"find patient :#\", \"find patient :\", \"find task :#\","
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            \"find task :\", \"find assigned tasks :#\", \"find assigned task :\", \"update patient :#\","
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            \"update task :#\", \"show upcoming tasks\",\"show patients\",\"show tasks\",\"show assigned tasks\","
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            \"show help guide\",\"show tomorrow\",\"show today\",\"filter\", \"clear filter\",\"barchart\", \"help\","
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            \"piechart\", \"bye\", \"undo\", \"help\"};"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        TextFields.bindAutoCompletion(userInput, possibleWords);"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 51,
      "qjie7": 262,
      "HUANGXUANKUN": 598
    }
  },
  {
    "path": "src/main/java/duke/gui/PieChartBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "//@@author qjie7"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.scene.Group;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class PieChartBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Show PieChart."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param frequencyList   a list of command frequency"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param commandNameList a list of command name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @author Qian Jie"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @version v1.4"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public static void showPieChartBox(ArrayList\u003cInteger\u003e frequencyList, ArrayList\u003cString\u003e commandNameList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final Scene scene \u003d new Scene(new Group());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Stage stage \u003d new Stage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        stage.setTitle(\"Pie Chart\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        stage.setWidth(500);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        stage.setHeight(500);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        for (int i \u003d 0; i \u003c commandNameList.size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            pieChartData.add(new PieChart.Data(commandNameList.get(i), frequencyList.get(i)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final PieChart chart \u003d new PieChart(pieChartData);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        chart.setTitle(\"Command Frequency\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        ((Group) scene.getRoot()).getChildren().add(chart);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 43
    }
  },
  {
    "path": "src/main/java/duke/gui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * API of UI component."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 15
    }
  },
  {
    "path": "src/main/java/duke/gui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public UiManager(Duke duke) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"UiManager start() error: \" + e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Exits the application after fatal error."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Raise an error alert here with title."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 43
    }
  },
  {
    "path": "src/main/java/duke/gui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.Launcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents GUI component with FXML given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructs a UiPart with a FXML file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        loadFxmlFile(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"For debugging, UiPart \" + fxmlFileName + \" is loaded.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param url  Location of the FXML document."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private void loadFxmlFile(URL url, T root) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        fxmlLoader.setLocation(url);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Returns the FXML file\u0027s location path for a specified FXML file name."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param fxmlFileName Name of the fxml file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return  File\u0027s location."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (fxmlFileName.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(fxmlFileName + \" does not exist\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        URL fxmlFileUrl \u003d Main.class.getResource(FXML_FILE_FOLDER + fxmlFileName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Loading: \" + fxmlFileUrl);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return fxmlFileUrl;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Returns the root of the scene from the fxml controller extended from this UiPart."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 71
    }
  },
  {
    "path": "src/main/java/duke/gui/UpcomingTasksBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "//@@author lmtaek"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class UpcomingTasksBox extends HBox {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private UpcomingTasksBox upcomingTasksBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private Label upcomingTaskText;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Control representing the \u0027Upcoming Tasks Box\u0027 within Dukepital\u0027s GUI."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private UpcomingTasksBox(String text) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/UpcomingTaskBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        upcomingTaskText.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        upcomingTaskText.setWrapText(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Creates UpcomingTasksBox for each of the tasks listed within a date."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param taskInfo The String used within the UpcomingTasksBox"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return An array of all the UpcomingTasksBoxes designated for a date."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public static ArrayList\u003cUpcomingTasksBox\u003e createUpcomingTasksBoxesForDate(ArrayList\u003cString\u003e taskInfo) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        ArrayList\u003cUpcomingTasksBox\u003e upcomingTaskBoxes \u003d new ArrayList\u003cUpcomingTasksBox\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (String task : taskInfo) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            UpcomingTasksBox currentTaskBox \u003d new UpcomingTasksBox(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            currentTaskBox.setPadding(new Insets(5, 5, 5, 5));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            upcomingTaskBoxes.add(new UpcomingTasksBox(task));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return upcomingTaskBoxes;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 61
    }
  },
  {
    "path": "src/main/java/duke/models/assignedtasks/AssignedTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "//@@author WEIFENG-NUSCEG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.models.assignedtasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * Represents a Assigned task that has been assigned to a patient with a unique ID."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public abstract class AssignedTask {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private SimpleIntegerProperty uuid \u003d new SimpleIntegerProperty(0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private SimpleIntegerProperty patientId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private SimpleIntegerProperty taskId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private SimpleBooleanProperty isDone \u003d new SimpleBooleanProperty(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private SimpleBooleanProperty isRecursive \u003d new SimpleBooleanProperty(false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private SimpleStringProperty taskType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private SimpleStringProperty todoDateRaw \u003d new SimpleStringProperty(\"null\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private SimpleStringProperty startDateRaw \u003d new SimpleStringProperty(\"null\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private SimpleStringProperty endDateRaw \u003d new SimpleStringProperty(\"null\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private LocalDateTime todoDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private LocalDateTime startDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private LocalDateTime endDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Create a new AssignedTask Object with patient\u0027s id, task\u0027s id and the type of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param pid  Patient\u0027s Id"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param tid  Task\u0027s Id"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param type Type of the assigned task (deadline or period)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public AssignedTask(int pid, int tid, String type) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.patientId \u003d new SimpleIntegerProperty(pid);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.taskId \u003d new SimpleIntegerProperty(tid);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.taskType \u003d new SimpleStringProperty(type);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Create a new AssignedTask Object with patient\u0027s id, task\u0027s id, the type of the task,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * the is done flag and is recursive flg."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param pid          Patient\u0027s Id"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param tid          Task\u0027s Id"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param isdone       A boolean flag to reflect whether the task is done"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param isrecurrsive A flag to reflect whether the task is recursive"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param type         Type of the assigned task (deadline or period)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public AssignedTask(int pid, int tid, boolean isdone, boolean isrecurrsive, String type) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.patientId \u003d new SimpleIntegerProperty(pid);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.taskId \u003d new SimpleIntegerProperty(tid);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.taskType \u003d new SimpleStringProperty(type);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.isDone \u003d new SimpleBooleanProperty(isdone);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.isRecursive \u003d new SimpleBooleanProperty(isrecurrsive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Create a new AssignedTask Object with patient\u0027s id, task\u0027s id, the type of the task,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * the is done flag and is recursive flg, and its unique id."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param pid          A Patient\u0027s Id"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param tid          A Task\u0027s Id"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param isdone       A boolean flag to reflect whether the task is done"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param isrecurrsive A flag to reflect whether the task is recursive"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param type         Type of the assigned task (deadline or period)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param uid          Unique id of the task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public AssignedTask(int pid, int tid, boolean isdone, boolean isrecurrsive, String type, int uid) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.patientId \u003d new SimpleIntegerProperty(pid);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.taskId \u003d new SimpleIntegerProperty(tid);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.taskType \u003d new SimpleStringProperty(type);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.isDone \u003d new SimpleBooleanProperty(isdone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.isRecursive \u003d new SimpleBooleanProperty(isrecurrsive);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.uuid \u003d new SimpleIntegerProperty(uid);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Set the unique id to the assigned task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param uuid unique id of the task"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void setUuid(int uuid) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.uuid.set(uuid);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Get the unique id from assigned task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return the unique id of assigned task"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public int getUuid() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.uuid.get();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Get the deadline before formatting from assigned task."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return the deadline before formatting of assigned task"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getTodoDateRaw() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.todoDateRaw.get();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Set the deadline before formatting to assigned task."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param todoDateRaw deadline time before formatting"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void setTodoDateRaw(String todoDateRaw) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.todoDateRaw.set(todoDateRaw);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Get the deadline in LocalDateTime from assigned task."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return the deadline in LocalDateTime of assigned task"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public LocalDateTime getTodoDate() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.todoDate;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Set the deadline in LocalDateTime to assigned task."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param todoDate deadline in LocalDateTime of assigned task"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void setTodoDate(LocalDateTime todoDate) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.todoDate \u003d todoDate;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Get the start time before formatting from assigned task."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return the start time before formatting from assigned task"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getStartDateRaw() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.startDateRaw.get();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Set the start time before formatting to assigned task."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param startDateRaw deadline time before formatting"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void setStartDateRaw(String startDateRaw) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.startDateRaw.set(startDateRaw);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Get the start time in LocalDateTime from assigned task."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return the start time in LocalDateTime of assigned task"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.startDate;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Set the start time in LocalDateTime to assigned task."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param startDate deadline in LocalDateTime of assigned task"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void setStartDate(LocalDateTime startDate) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Get the end time before formatting from assigned task."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return the end time before formatting from assigned task"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getEndDateRaw() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.endDateRaw.get();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Set the end time before formatting to assigned task."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param endDateRaw deadline time before formatting"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void setEndDateRaw(String endDateRaw) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.endDateRaw.set(endDateRaw);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Set the end time in LocalDateTime to assigned task."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param endDate deadline in LocalDateTime of assigned task"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void setEndDate(LocalDateTime endDate) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Get the end time in LocalDateTime from assigned task."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return the end time in LocalDateTime of assigned task"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public LocalDateTime getEndDate() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.endDate;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Retrieve the patient ID from assigned task."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return patient id"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public int getPid() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return patientId.get();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Set the patient id in assigned task."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param patientId the patient\u0027s id"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void setPid(int patientId) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.patientId.set(patientId);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Retrieve the task id from assigned task."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return the task id"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public int getTid() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.taskId.get();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Set the task id in assigned task."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param taskId the task\u0027s id"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void setTid(int taskId) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.taskId.set(taskId);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Retrieve the task type."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return name of the task type"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return taskType.get();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Check whether the task is done."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a bool indicates done or not yet"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.isDone.get();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Check whether the task is recursive."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @returna bool indicates recursive or not"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean getIsRecursive() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return isRecursive.get();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Set the task as done."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.isDone.set(true);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Set the task as not done yet."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void undoIsDone() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.isDone.set(false);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Set the task as a recursive task."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void markRecur() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.isRecursive.set(true);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Set the task as a non-recursive task."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void undoRecur() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.isRecursive.set(false);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Get the status icon of the assigned task."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a string contains of a icon indicates isDone"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return (isDone.get() ? \"\\u2713\" : \"\\u2718\"); // unicode icon"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Get the recursive icon of the assigned task."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a string contains of a icon indicates isRecursive"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getRecursiveIcon() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return (isRecursive.get() ? \"\\u0298\" : \"\\u0275\"); // unicode icon"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Get the unique ID, status icon and recursive icon."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a string contains the unique ID, status icon and recursive icon"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String printStatus() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return \" Unique ID \" + uuid.get() + \" \" + \"[\""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            + this.getStatusIcon() + \"] \" + \"[\" + this.getRecursiveIcon() + \"] \";"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Convert the important information of assigned task to a string."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a string with important information of assigned task"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 339
    }
  },
  {
    "path": "src/main/java/duke/models/assignedtasks/AssignedTaskManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "//@@author WEIFENG-NUSCEG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.models.assignedtasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import com.google.common.collect.ArrayListMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import com.google.common.collect.Multimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * Represents a list of Assigned Task that can perform operations such as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * add, delete, find on the tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class AssignedTaskManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private Multimap\u003cInteger, AssignedTask\u003e assignedTaskIdMap \u003d ArrayListMultimap.create();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private HashMap\u003cInteger, AssignedTask\u003e assignedTaskUniqueIdMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    int maxId \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Create a new Assigned Task Manager to save all the information of the tasks assigend to a"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * patient by passing a List of AssignedTask to both the Multimap and the Hashmap."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param assignedTasks ."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public AssignedTaskManager(ArrayList\u003cAssignedTask\u003e assignedTasks) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        for (AssignedTask assignedTask : assignedTasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            assignedTaskIdMap.put(assignedTask.getPid(), assignedTask);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            assignedTaskUniqueIdMap.put(assignedTask.getUuid(), assignedTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (!assignedTasks.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            this.maxId \u003d assignedTasks.get(assignedTasks.size() - 1).getUuid();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Retrieved the saved AssignedTask list from the AssignedTaskManager."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a ArrayList of Assigned Task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public ArrayList\u003cAssignedTask\u003e getAssignTasks() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return new ArrayList\u003cAssignedTask\u003e(assignedTaskUniqueIdMap.values());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * This method add a new Assigned Task to the current Assigned Task List."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param t a new AssignedTask to be added into the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void addPatientTask(AssignedTask t) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (t.getUuid() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            maxId +\u003d 1; //Increment maxId by 1 for the new coming patient"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            t.setUuid(maxId); //Set the unique id to patient"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTaskIdMap.put(t.getPid(), t);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTaskUniqueIdMap.put(maxId, t);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * This method delete a Assigned Task from the existing list through the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * AssignedTask\u0027s unique ID."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param uid the unique ID of the assigned task to be delete."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @throws DukeException throws exception if such assigned task with the unique id does not exist."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void deletePatientTaskByUniqueId(int uid) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            AssignedTask assignedTask \u003d assignedTaskUniqueIdMap.get(uid);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            int patientID \u003d assignedTask.getPid();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            assignedTaskIdMap.remove(patientID, assignedTask);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            assignedTaskUniqueIdMap.remove(uid);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(AssignedTaskManager.class, \"Such Unique ID does not exist\" + e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * This method deletes a AssignedTask from the existing list through the task id."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param id the id of the task to be deleted."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void deleteAssignedTaskByTaskId(int id) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        for (AssignedTask assignedTask : assignedTaskIdMap.values()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (assignedTask.getTid() \u003d\u003d id) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                assignedTaskIdMap.remove(assignedTask.getPid(), assignedTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                assignedTaskUniqueIdMap.remove(assignedTask.getUuid());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * This method deletes all the AssignedTask from the existing list through the task ID."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param id id of the task to be deleted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @throws DukeException throws exception if null pointer exception occurs."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void deleteAllAssignedTaskByTaskId(int id) throws DukeException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        for (AssignedTask assignedTask : assignedTaskIdMap.values()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (assignedTask.getTid() \u003d\u003d id) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                deleteAssignedTaskByTaskId(id);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Check if any AssignedTask in the existing list contains the same unique id."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param id the unique id of a AssignedTask."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a boolean represents the existence of the AssignedTask with same uid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean doesUidExist(int id) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return assignedTaskUniqueIdMap.containsKey(id);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Check if any AssignedTask in the existing list contains the same patient id."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param id the patient id of a AssignedTask."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a boolean represents the existence of the AssignedTask with same pid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean doesPatientIdExist(int id) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return assignedTaskIdMap.containsKey(id);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Check if any AssignedTask in the existing list has exactly the same starting"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * time and ending time with the given AssignedTask."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param patientTask a AssignedTask to be checked."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a boolean represents if the same start and end time exist."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isSameStartEndTimeExist(AssignedTask patientTask) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        for (AssignedTask assignedTask: assignedTaskUniqueIdMap.values()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (assignedTask instanceof AssignedTaskWithPeriod"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    \u0026\u0026 assignedTask.getStartDate().equals(patientTask.getStartDate())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    \u0026\u0026 assignedTask.getEndDate().equals(patientTask.getEndDate())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    \u0026\u0026 (assignedTask.getPid() \u003d\u003d patientTask.getPid())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    \u0026\u0026 (assignedTask.getTid() \u003d\u003d patientTask.getTid())) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Check if any AssignedTask in the existing list has exactly the same deadline"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * with the given AssignedTask."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param patientTask a AssignedTask to be checked."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a boolean represents if the same deadline exist in the list."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isSameDeadlineExist(AssignedTask patientTask) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        for (AssignedTask assignedTask: assignedTaskUniqueIdMap.values()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (assignedTask instanceof AssignedTaskWithDate"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    \u0026\u0026 assignedTask.getTodoDate().equals(patientTask.getTodoDate())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    \u0026\u0026 (assignedTask.getPid() \u003d\u003d patientTask.getPid())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    \u0026\u0026 (assignedTask.getTid() \u003d\u003d patientTask.getTid())) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * This method deletes the Task that has been assigned to a patient by its patient id."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param id the patient id of the AssignedTask to be deleted."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void deleteAssignedTaskBelongToThePatientFromUniqueIdMap(int id) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        for (AssignedTask assignedTask : assignedTaskUniqueIdMap.values()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (assignedTask.getPid() \u003d\u003d id) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                assignedTaskUniqueIdMap.remove(assignedTask.getUuid());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * This method deletes all the Task that has been assigned to a patient by its patient id."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param pid the patient id of the AssignedTask to be deleted."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @throws DukeException throws exception if there is a null pointer exception."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void deleteAllTasksBelongToThePatient(Integer pid) throws DukeException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (assignedTaskIdMap.containsKey(pid)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            int count \u003d 0;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            for (AssignedTask assignedTask : assignedTaskUniqueIdMap.values()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                if (assignedTask.getPid() \u003d\u003d pid) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    deleteAssignedTaskBelongToThePatientFromUniqueIdMap(pid);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            assignedTaskIdMap.removeAll(pid);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(AssignedTaskManager.class, \"Patient id: \" + pid + \" does not have any tasks!\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Return a array list of the AssignedTask belong to a specific patient by its patient id."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param pid the id of the patient."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a array list of the AssignedTask belongs to this patient."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @throws DukeException throws exception if such patient does not has any associated tasks."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public ArrayList\u003cAssignedTask\u003e getPatientTask(int pid) throws DukeException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (assignedTaskIdMap.containsKey(pid)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            ArrayList\u003cAssignedTask\u003e tempArray \u003d new ArrayList\u003cAssignedTask\u003e();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            tempArray.addAll(assignedTaskIdMap.get(pid));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return tempArray;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(AssignedTaskManager.class,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    \"The patient with id \" + pid + \" does not have any tasks.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Returns all the tasks with the same task id in the existing list."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param tid task\u0027s id."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a list of AssignedTask belongs to this task id."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @throws DukeException throws exception if such task has not been assigned to any patient."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public ArrayList\u003cAssignedTask\u003e getTaskPatient(int tid) throws DukeException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cAssignedTask\u003e tempArray \u003d new ArrayList\u003cAssignedTask\u003e();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        for (AssignedTask assignedTask : assignedTaskIdMap.values()) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (assignedTask.getTid() \u003d\u003d tid) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                tempArray.add(assignedTask);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (tempArray.size() !\u003d 0) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return tempArray;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(AssignedTaskManager.class,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    \"The Task with id \" + tid + \" has not been assigned to any patients\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 262
    }
  },
  {
    "path": "src/main/java/duke/models/assignedtasks/AssignedTaskWithDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "//@@author WEIFENG-NUSCEG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.models.assignedtasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.util.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * Represents a Assigned task that has been assigned to a patient with a deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class AssignedTaskWithDate extends AssignedTask {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Create a new AssignedTask with its patient id, task id, deadline, and task type."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param pid patient id"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param tid task id"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param timeBeforeFormat deadline"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param type task type"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public AssignedTaskWithDate(int pid, int tid, String timeBeforeFormat, String type) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super(pid, tid, type);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        setTodoDateRaw(timeBeforeFormat);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            setTodoDate(DateTimeParser.convertToLocalDateTime(timeBeforeFormat));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(AssignedTaskWithDate.class, \"The date time format is wrong!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Create a new AssignedTask with its patient id, task id, deadline, and task type."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param pid patient id"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param tid task id"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param isdone is the task done"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param isrecurrsive is the task recursive"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param timeBeforeFormat deadline"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param type task type"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public AssignedTaskWithDate(int pid, int tid, boolean isdone, boolean isrecurrsive,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                                String timeBeforeFormat, String type) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super(pid, tid, isdone, isrecurrsive, type);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        setTodoDateRaw(timeBeforeFormat);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            setTodoDate(DateTimeParser.convertToLocalDateTime(timeBeforeFormat));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(AssignedTaskWithDate.class, \"The date time format is wrong!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Create a new AssignedTask with its patient id, task id, deadline, and task type."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param pid patient id"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param tid task id"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param isdone is the task done"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param isrecurrsive is the task recursive"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param timeBeforeFormat deadline"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param type task type"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param uniqueId unique id of the task"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public AssignedTaskWithDate(int pid, int tid, boolean isdone, boolean isrecurrsive,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                                String timeBeforeFormat, String type, int uniqueId) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super(pid, tid, isdone, isrecurrsive, type, uniqueId);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        setTodoDateRaw(timeBeforeFormat);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            setTodoDate(DateTimeParser.convertToLocalDateTime(timeBeforeFormat));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(AssignedTaskWithDate.class, \"The date time format is wrong!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Return a string with the task status icon and the time after parsing."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a string with the task information"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return super.printStatus() + \" \" + DateTimeParser.convertToEnglishDateTimeBeforeParse(getTodoDate());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 84
    }
  },
  {
    "path": "src/main/java/duke/models/assignedtasks/AssignedTaskWithPeriod.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "//@@author WEIFENG-NUSCEG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.models.assignedtasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.util.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * Represents a Assigned task that has been assigned to a patient with a period."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class AssignedTaskWithPeriod extends AssignedTask {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Create a new AssignedTask with its patient id, task id, period, and task type."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param pid   patient id"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param tid   task id"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param stime starting time"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param etime ending time"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param type  task type"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public AssignedTaskWithPeriod(int pid, int tid, String stime, String etime, String type) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super(pid, tid, type);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        setStartDateRaw(stime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        setEndDateRaw(etime);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            setStartDate(DateTimeParser.convertToLocalDateTime(stime));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            setEndDate(DateTimeParser.convertToLocalDateTime(etime));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(AssignedTaskWithPeriod.class, \"The date time format is wrong!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (getEndDate().isBefore(getStartDate())) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(AssignedTaskWithPeriod.class,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    \"You can\u0027t assign the end time earlier than the start time!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Create a new AssignedTask with its patient id, task id, period, and task type, recursive status,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * is task done status."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param pid          patient id"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param tid          task id"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param isDone       is task done"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param isRecurrsive is task recursive"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param stime        starting time"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param etime        ending time"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param type         task type"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public AssignedTaskWithPeriod(int pid, int tid, boolean isDone,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                                  boolean isRecurrsive, String stime, String etime, String type) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super(pid, tid, isDone, isRecurrsive, type);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        setStartDateRaw(stime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        setEndDateRaw(etime);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            setStartDate(DateTimeParser.convertToLocalDateTime(stime));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            setEndDate(DateTimeParser.convertToLocalDateTime(etime));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(AssignedTaskWithPeriod.class, \"The date time format is wrong!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (getEndDate().isBefore(getStartDate())) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(AssignedTaskWithPeriod.class,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    \"You can\u0027t assign the end time earlier than the start time!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Create a new AssignedTask with its patient id, task id, period, and task type, recursive status,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * is task done status and unique id."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param pid          patient id"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param tid          task id"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param isDone       is task done"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param isRecurrsive is task recursive"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param stime        staring time"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param etime        ending time"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param type         task type"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param uniqueId     unique id"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public AssignedTaskWithPeriod(int pid, int tid, boolean isDone,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                                  boolean isRecurrsive, String stime, String etime, String type, int uniqueId)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super(pid, tid, isDone, isRecurrsive, type, uniqueId);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        setStartDateRaw(stime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        setEndDateRaw(etime);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            setStartDate(DateTimeParser.convertToLocalDateTime(stime));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            setEndDate(DateTimeParser.convertToLocalDateTime(etime));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(AssignedTaskWithPeriod.class, \"The date time format is wrong!\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (getEndDate().isBefore(getStartDate())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(AssignedTaskWithPeriod.class,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    \"You can\u0027t assign the end time earlier than the start time!\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Return a string with the task status icon and the time after parsing."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a string with the task information"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return super.printStatus() + \" From \" + DateTimeParser"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                .convertToEnglishDateTimeBeforeParse(getStartDate())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                + \" To \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                + DateTimeParser.convertToEnglishDateTimeBeforeParse(getEndDate());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 118
    }
  },
  {
    "path": "src/main/java/duke/models/assignedtasks/UpcomingTasks.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "//@@author lmtaek"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package duke.models.assignedtasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class UpcomingTasks {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    LocalDateTime dateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    ArrayList\u003cAssignedTask\u003e tasks \u003d new ArrayList\u003cAssignedTask\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    ArrayList\u003cString\u003e taskDescriptions \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    ArrayList\u003cString\u003e patientsForTasks \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    DateTimeFormatter dateFormatParser \u003d DateTimeFormatter.ofPattern(\"E, dd/MM\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Constructor for Upcoming Tasks class. Will create task list for tasks assigned to provided date,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * and find relevant corresponding information to be provided to the user such as task descriptions,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * or patients involved in tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param dateTime The provided date for the desired upcoming tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param assignedTaskManager The user\u0027s list of assigned tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param taskManager The user\u0027s list of all tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param patientManager The user\u0027s list of all patient profiles."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @throws DukeException Thrown when the constructor is unable to find all the required information."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public UpcomingTasks(LocalDateTime dateTime, AssignedTaskManager assignedTaskManager,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                         TaskManager taskManager, PatientManager patientManager) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.date \u003d dateTime.toLocalDate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (AssignedTask task : assignedTaskManager.getAssignTasks()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            if (task.getTodoDate() !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                LocalDate taskDate \u003d task.getTodoDate().toLocalDate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                if (taskDate.isEqual(date)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    tasks.add(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } else if (task.getStartDate() !\u003d null \u0026\u0026 task.getEndDate() !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                LocalDate startDate \u003d task.getStartDate().toLocalDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                LocalDate endDate \u003d task.getEndDate().toLocalDate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                if (startDate.isEqual(date)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    tasks.add(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                if (startDate.isBefore(date) \u0026\u0026 (endDate.isAfter(date) || endDate.isEqual(date))) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    tasks.add(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                throw new DukeException(UpcomingTasks.class, \"Unable to determine upcoming tasks for \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        + getFormattedDate() + \".\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (AssignedTask task : tasks) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            taskDescriptions.add(taskManager.getTask(task.getTid()).getDescription());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (AssignedTask task : tasks) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            patientsForTasks.add(patientManager.getPatient(task.getPid()).getName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Returns AssignedTask array list with all tasks designated for the provided date."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return Array list with designated date\u0027s tasks"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public ArrayList\u003cAssignedTask\u003e getUpcomingTasks() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Returns String array list with all descriptions of designated tasks for provided date."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return Array list with task descriptions for designated date\u0027s tasks"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public ArrayList\u003cString\u003e getUpcomingTaskDescriptions() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return taskDescriptions;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Returns String array list with all patient names of designated tasks for provided date."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return Array list with patient names for designated date\u0027s tasks"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public ArrayList\u003cString\u003e getPatientNames() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return patientsForTasks;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Returns String version of provided date in \u0027E, dd/MM\u0027 format."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return Reformatted date."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String getFormattedDate() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return dateTime.format(dateFormatParser);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Returns String Array list of each of the provided date\u0027s tasks + their respective info."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return Array list of Strings with the date\u0027s tasks + info"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public ArrayList\u003cString\u003e getTaskAndInfo() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        ArrayList\u003cString\u003e tasksWithInfo \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            String output \u003d \"Unique ID: \" + tasks.get(i).getUuid() + \". \\nDescription: \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + taskDescriptions.get(i) + \"\\nFor patient: \" + patientsForTasks.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            tasksWithInfo.add(output);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return tasksWithInfo;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 116
    }
  },
  {
    "path": "src/main/java/duke/models/counter/Counter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "//@@author qjie7"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package duke.models.counter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.functional.BarChartCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import abandon.DukeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.functional.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.functional.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.functional.PieChartCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.functional.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.storages.StorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * This is a Counter class that mainly used for counting purpose."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * @author QIAN JIE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * @version 1.3"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class Counter {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private Map\u003cString, Integer\u003e commandTable;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public Counter(Map\u003cString, Integer\u003e commandTable) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.commandTable \u003d commandTable;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public Map\u003cString, Integer\u003e getCommandTable() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return commandTable;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * This function is used to run the command counter."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param command the command type that is being processed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param counter get the Counter object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @author QIAN JIE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @version 1.3"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void runCommandCounter(Command command, StorageManager storageManager,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                                  Counter counter) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if (!(command instanceof ExitCommand || command instanceof DukeCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                || command instanceof UndoCommand || command instanceof HelpCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                || command instanceof PieChartCommand || command instanceof BarChartCommand)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String commandName \u003d command.getClass().getSimpleName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            runCounterLogic(commandName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            storageManager.saveCounters(counter.getCommandTable());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * This function is used to run the counter logic."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param commandName the command name of the class being called"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @author QIAN JIE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @version 1.3"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void runCounterLogic(String commandName) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        int count \u003d commandTable.containsKey(commandName)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                ? commandTable.get(commandName) : 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        commandTable.put(commandName, count + 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 67
    }
  },
  {
    "path": "src/main/java/duke/models/patients/Patient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "//@@author kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "package duke.models.patients;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": " * Represents a Patient."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private SimpleIntegerProperty id \u003d new SimpleIntegerProperty(0);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private SimpleStringProperty name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private SimpleStringProperty nric;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private SimpleStringProperty room;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private SimpleStringProperty remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Initialises the fields of a Patient."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param id     contains the patient\u0027s id which is an integer."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param name   contains the patient\u0027s name which is a string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param nric   contains the patient\u0027s nric which is a string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param room   contains the patient\u0027s room number which is a string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param remark contains remark of the patient which is a string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public Patient(int id, String name, String nric, String room, String remark) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.id \u003d new SimpleIntegerProperty(id);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.name \u003d new SimpleStringProperty(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.nric \u003d new SimpleStringProperty(nric);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.room \u003d new SimpleStringProperty(room);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.remark \u003d new SimpleStringProperty(remark);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Initialises the minimum fields required to setup a Patient."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param name   contains the patient\u0027s name which is a string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param nric   contains the patient\u0027s nric which is a string."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param room   contains the patient\u0027s room number which is a string."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param remark contains remark of the patient which is a string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public Patient(String name, String nric, String room, String remark) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.name \u003d new SimpleStringProperty(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.nric \u003d new SimpleStringProperty(nric);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.room \u003d new SimpleStringProperty(room);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.remark \u003d new SimpleStringProperty(remark);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It retrieves the patient\u0027s name."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return the patient\u0027s name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return name.get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It retrieves the patient\u0027s id."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return the patient\u0027s id."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return id.get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It retrieves the remark of the patient."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return the remark of the patient."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public String getRemark() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return remark.get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It retrieves the patient\u0027s room number."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return the patient\u0027s room number."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public String getRoom() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return room.get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It retrieves the nric of the patient."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return nric of the patient."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return nric.get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It sets the id of the patient."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param id contains the id of the patient which is an integer."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void setId(int id) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.id.set(id);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It sets the name of the patient."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param name contains the name of the patient which is a string."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.name.set(name);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It sets the nric of the patient."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param nric contains the nric of the patient which is a string."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void setNric(String nric) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.nric.set(nric);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It sets the room number of the patient."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param room contains the room number of the patient which is a string."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void setRoom(String room) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.room.set(room);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It sets the remark of the patient."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param remark contains the remark of the patient which is a string."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void setRemark(String remark) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.remark.set(remark);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 139
    }
  },
  {
    "path": "src/main/java/duke/models/patients/PatientManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "//@@author kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "package duke.models.patients;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "public class PatientManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private HashMap\u003cInteger, Patient\u003e patientIdMap \u003d new HashMap\u003cInteger, Patient\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private int maxId \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Instantiate a new PatientList with a empty list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public PatientManager(ArrayList\u003cPatient\u003e patientList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        for (Patient patient : patientList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientIdMap.put(patient.getId(), patient);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (!patientList.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            this.maxId \u003d patientList.get(patientList.size() - 1).getId();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It checks whether a patient exists."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param  id contains the id of the patient."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return    true if the patient exists, otherwise false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public boolean doesExist(int id) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (patientIdMap.containsKey(id)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It retrieves a patient."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param id             contains the id of the patient."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return               the patient."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException if the patient id does not exist."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public Patient getPatient(int id) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (patientIdMap.containsKey(id)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            return patientIdMap.get(id);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(PatientManager.class, \"The patient with id \" + id + \" does not exist.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It retrieves a list of patients with the name provided."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param name contains the name to be checked."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return     the list of patients who have the same name."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public ArrayList\u003cPatient\u003e getPatientByName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        name \u003d name.toLowerCase();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cPatient\u003e patientsWithThisName \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        for (Patient patient : patientIdMap.values()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            if (patient.getName().toLowerCase().contains(name)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                patientsWithThisName.add(patient);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return patientsWithThisName;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It checks whether the name is valid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param name           contains the name to be checked."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException if the name is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void nameIsValid(String name) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Pattern regex \u003d Pattern.compile(\"[$\u0026+,:;\u003d\\\\\\\\?@#|/\u0027\u003c\u003e.^*()%!-]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (regex.matcher(name).find()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(PatientManager.class, \"The patient\u0027s name cannot contain any special characters.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } else if (name.length() \u003c 3 \u0026\u0026 name.matches(\"^[a-zA-Z]*$\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(PatientManager.class, \"The patient\u0027s name must have at least 3 alphabets.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It checks whether the nric is valid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param nric           contains the nric to be checked."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException if the nric is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void nricIsValid(String nric) throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Pattern regex \u003d Pattern.compile(\"[$\u0026+,:;\u003d\\\\\\\\?@#|/\u0027\u003c\u003e.^*()%!-]\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (nric.length() !\u003d 9) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(PatientManager.class, \"NRIC must contain exactly 9 characters.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        for (Patient patient : patientIdMap.values()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            if (patient.getNric().toLowerCase().contains(nric)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw new DukeException(PatientManager.class, \"The NRIC is existed.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (regex.matcher(nric).find()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(PatientManager.class, \"The patient\u0027s NRIC cannot contain any special characters.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        char firstChar \u003d nric.charAt(0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (firstChar !\u003d \u0027S\u0027 \u0026\u0026 firstChar !\u003d \u0027T\u0027 \u0026\u0026 firstChar !\u003d \u0027F\u0027 \u0026\u0026 firstChar !\u003d \u0027G\u0027) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(PatientManager.class, \"The first letter of NRIC can only be S, T, F or G.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        String nricSubstring \u003d nric.substring(1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (Character.isAlphabetic(nricSubstring.charAt(7))) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String nricSubstring2 \u003d nricSubstring.substring(0, nricSubstring.length() - 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            if (!nricSubstring2.matches(\"[0-9]+\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw new DukeException(PatientManager.class,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        \"The NRIC can only be numerical except the first and last character.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(PatientManager.class, \"The last character of NRIC can only be alphabet.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It checks whether the room number is valid."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param room           contains the room number to be checked."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException if the room number is invalid."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void roomIsValid(String room) throws DukeException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (room.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(PatientManager.class, \"The patient\u0027s Room No. cannot be empty.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Pattern regex \u003d Pattern.compile(\"[$\u0026+,:;\u003d\\\\\\\\?@#|/\u0027\u003c\u003e.^*()%!-]\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (regex.matcher(room).find()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(PatientManager.class,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    \"The patient\u0027s Room No. cannot contain any special characters.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It adds a new patient to the patient list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patient        contains the information of the patient to be added."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException if the patient is not added successfully."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void addPatient(Patient patient) throws DukeException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            nameIsValid(patient.getName());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            nricIsValid(patient.getNric());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            roomIsValid(patient.getRoom());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (patient.getId() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            maxId +\u003d 1; //Increment maxId by 1 for the new coming patient"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patient.setId(maxId); //Set the unique id to patient"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        patientIdMap.put(patient.getId(), patient);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It retrieves the patient list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return the list of patients."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public ArrayList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return new ArrayList\u003c\u003e(patientIdMap.values());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It deletes a patient from patient list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param id             contains the id of the patient to be deleted."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException if the patient id does not exist."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void deletePatient(int id) throws DukeException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (patientIdMap.containsKey(id)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientIdMap.remove(id);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(PatientManager.class, \"The patient with id \" + id + \" does not exist.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 187
    }
  },
  {
    "path": "src/main/java/duke/models/tasks/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.models.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": " * Represents a task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private SimpleIntegerProperty id \u003d new SimpleIntegerProperty(0);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private SimpleStringProperty description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Initialises the fields of a task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param id          contains the id of a task which is an integer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param description contains the description of a task which is a string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(int id, String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.id \u003d new SimpleIntegerProperty(id);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.description \u003d new SimpleStringProperty(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Initialises the minimum fields required to setup a task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param description contains the description of a task which is a string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.description \u003d new SimpleStringProperty(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It retrieves the id of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return the id of the task which is an integer."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return this.id.get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It retrieves the description of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return the description of the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return this.description.get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It sets the id of the task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param id contains the id which is an integer."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void setId(int id) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.id.set(id);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It sets the description of the task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param description contains the description which is an string."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.description.set(description);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 10,
      "kkeejjuunn": 14,
      "qjie7": 1,
      "-": 5,
      "HUANGXUANKUN": 38
    }
  },
  {
    "path": "src/main/java/duke/models/tasks/TaskManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "//@@author kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "package duke.models.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": " * Represents a list of Task that can perform operations such as"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": " * add and delete on the tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private HashMap\u003cInteger, Task\u003e taskIdMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private int maxId \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * An ArrayList structure."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Constructor used when Duke successfully loads a TaskList from a saved file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Takes loaded taskList and uses it during Duke\u0027s new session."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskList ."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public TaskManager(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            taskIdMap.put(task.getId(), task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (!taskList.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            this.maxId \u003d taskList.get(taskList.size() - 1).getId();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Constructor used when Duke cannot successfully load a TaskList from a saved file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Instantiates a new TaskList with an empty list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public TaskManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Finds all the tasks which contain the given description."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param description contains the description to be searched."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return            an ArrayList of tasks that contain the given description."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskByDescription(String description) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        description \u003d description.toLowerCase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cTask\u003e tasksWithThisDescription \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        for (Task task : taskIdMap.values()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            if (task.getDescription().toLowerCase().contains(description)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                tasksWithThisDescription.add(task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return tasksWithThisDescription;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It adds a Task to the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskToBeAdded  contains the Task to be added to the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException if the task is not added successfully."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void addTask(Task taskToBeAdded) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (taskToBeAdded.getDescription().length() \u003c 3) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(TaskManager.class, \"The task description is too short.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        for (Task task : taskIdMap.values()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            if (task.getDescription().toLowerCase().equals(taskToBeAdded.getDescription().toLowerCase())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw new DukeException(TaskManager.class,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        \"The task \u0027\" + taskToBeAdded.getDescription() + \"\u0027 already existed.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (taskToBeAdded.getId() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            maxId +\u003d 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            taskToBeAdded.setId(maxId);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        taskIdMap.put(taskToBeAdded.getId(), taskToBeAdded);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It removes the task with the given id of the task."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param id             contains the id of the Task to be deleted."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException if the task with the id does not exist."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void deleteTask(int id) throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (taskIdMap.containsKey(id)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            taskIdMap.remove(id);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(TaskManager.class, \"The task with id \" + id + \" does not exist.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It checks whether a task exists."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param  id contains the id of the task."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return    true if the task exists, otherwise false."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public boolean doesExist(int id) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (taskIdMap.containsKey(id)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Returns the Task in the list with the given index."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param id contains the id of the Task."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return   the task in the list with the specific id."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public Task getTask(int id) throws DukeException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (taskIdMap.containsKey(id)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            return taskIdMap.get(id);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw new DukeException(TaskManager.class, \"The task with id \" + id + \" does not exist.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It retrieves all the task in the list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return the list of tasks."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return new ArrayList\u003c\u003e(taskIdMap.values());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 137
    }
  },
  {
    "path": "src/main/java/duke/storages/CsvStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.storages;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.apache.commons.csv.CSVFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.apache.commons.csv.CSVPrinter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.apache.commons.csv.CSVRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class CsvStorage extends Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructs a CSV-specific storage object with a specific file path."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param filePath A string that represents the path of the file to read or"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *                 write."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public CsvStorage(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param infoList A list of records to be to be written in rows to csv file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param headers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void write(ArrayList\u003cArrayList\u003cString\u003e\u003e infoList, String[] headers) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            BufferedWriter writer \u003d Files.newBufferedWriter(Paths.get(this.filePath));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            // Set up csv printer with headers given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            CSVPrinter csvPrinter \u003d new CSVPrinter(writer, CSVFormat.DEFAULT.withHeader(headers));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (ArrayList\u003cString\u003e row : infoList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                csvPrinter.printRecord(row);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            csvPrinter.flush();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Read data from the file and store into a ArrayList of task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A list of rows in Map with header as key and column in row as value"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If file is not found."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ArrayList\u003cMap\u003cString, String\u003e\u003e read() throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Initialize capacity for 3000 rows of records."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cMap\u003cString, String\u003e\u003e infoList \u003d new ArrayList\u003c\u003e(3000);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        File csvFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (csvFile.createNewFile()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                System.out.println(\"File \" + filePath + \" is created.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                Reader in \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                Iterable\u003cCSVRecord\u003e records \u003d CSVFormat.EXCEL.withFirstRecordAsHeader().parse(in);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                for (CSVRecord record : records) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    // There are maximum 9 columns per row"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    Map\u003cString, String\u003e headerValueMap \u003d record.toMap();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    infoList.add(headerValueMap);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return infoList;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(CsvStorage.class, \"Loading of \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + filePath"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + \" is unsuccessful.\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + \"e.getMessage()\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 1,
      "HUANGXUANKUN": 85
    }
  },
  {
    "path": "src/main/java/duke/storages/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.storages;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public abstract class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Write info to local files."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param infoList A list of records to be to be written in rows to csv file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException throw exception with error message when i/o fails"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public abstract void write(ArrayList\u003cArrayList\u003cString\u003e\u003e infoList, String[] headers) throws DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Load the patients\u0027 info from local csv files."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A list of rows in Map with header as key and column in row as value"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException throw a dukeException with error message for debugging"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public abstract ArrayList\u003cMap\u003cString, String\u003e\u003e read() throws DukeException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 26
    }
  },
  {
    "path": "src/main/java/duke/storages/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.storages;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.patients.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskWithPeriod;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskWithDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * It is a centralized class to manage all the storages related to data w/r."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * It provides API for saving during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String COMMAND_COUNTER_FILENAME \u003d \"counter.csv\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String PATIENT_FILENAME \u003d \"patients.csv\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String ASSIGNED_TASK_FILENAME \u003d \"patientsTasks.csv\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String STANDARD_TASK_FILENAME \u003d \"standardTasks.csv\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String[] COMMAND_COUNTER_HEADERS \u003d {\"Command Name\", \"Frequency\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String[] ASSIGNED_TASK_HEADERS \u003d {\"PID\", \"TID\", \"DONE\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        \"RECURRENCE\", \"DEADLINE\", \"STARTTIME\", \"ENDTIME\", \"TASKTYPE\", \"uuid\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String[] PATIENT_HEADERS \u003d {\"Id\", \"Name\", \"NRIC\", \"Room\", \"Remark\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String[] STANDARD_TASK_HEADERS \u003d {\"Id\", \"Description\"};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private CsvStorage commandCounterStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private CsvStorage patientStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private CsvStorage assignedTaskStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private CsvStorage standardTaskStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Initialize all storages to perform save/load of all data."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param filePath relative path of where all local data store"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public StorageManager(String filePath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.commandCounterStorage \u003d new CsvStorage(filePath + \"/\" + COMMAND_COUNTER_FILENAME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.patientStorage \u003d new CsvStorage(filePath + \"/\" + PATIENT_FILENAME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.assignedTaskStorage \u003d new CsvStorage(filePath + \"/\" + ASSIGNED_TASK_FILENAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.standardTaskStorage \u003d new CsvStorage(filePath + \"/\" + STANDARD_TASK_FILENAME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Save patient data in the format of(\"Id\", \"Name\", \"NRIC\", \"Room\", \"Remark\") to local csv files."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patients a list containing patient\u0027s info"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void savePatients(ArrayList\u003cPatient\u003e patients) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Initialize capacity of 3000 rows of patient\u0027s information"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e infoList \u003d new ArrayList\u003c\u003e(3000);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Patient patient : patients) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                ArrayList\u003cString\u003e row \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                row.add(String.valueOf(patient.getId())); // Append value of column ID in a row"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                row.add(patient.getName()); // Append value of column Name in a row"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                row.add(patient.getNric()); // Append value of column Nric in a row"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                row.add(patient.getRoom()); // Append value of column Room in a row"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                row.add(patient.getRemark()); // Append value of column Remark in a row"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                infoList.add(row);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            patientStorage.write(infoList, PATIENT_HEADERS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Save task data in the format of (\"Id\", \"Description\") to local csv files."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasks a list containing task\u0027s info"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void saveTasks(ArrayList\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Initialize capacity of 30 rows of standard task\u0027s info"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e infoList \u003d new ArrayList\u003c\u003e(3000);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                ArrayList\u003cString\u003e row \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                row.add(String.valueOf(task.getId())); // Append value of column ID in a row"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                row.add(task.getDescription()); // Append value of column description in a row"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                infoList.add(row);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            standardTaskStorage.write(infoList, STANDARD_TASK_HEADERS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Save patientTask data in the format of (\"Id\", \"Description\") to local csv files."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param assignedTasks a list of patientTask"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException show saving error message"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void saveAssignedTasks(ArrayList\u003cAssignedTask\u003e assignedTasks) throws DukeException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Initialize capacity of 200 rows of patient-specified task\u0027s info"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e infoList \u003d new ArrayList\u003c\u003e(200);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (AssignedTask assignedTask : assignedTasks) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String pid \u003d String.valueOf(assignedTask.getPid());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String tid \u003d String.valueOf(assignedTask.getTid());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String uniqueId \u003d String.valueOf(assignedTask.getUuid());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String isDone \u003d String.valueOf(assignedTask.getIsDone());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String isRecur \u003d String.valueOf(assignedTask.getIsRecursive());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String deadline \u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String startTime \u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String endTime \u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String type \u003d assignedTask.getType();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                if (assignedTask instanceof AssignedTaskWithDate) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    deadline \u003d ((AssignedTaskWithDate) assignedTask).getTodoDateRaw();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } else if (assignedTask instanceof AssignedTaskWithPeriod) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    startTime \u003d ((AssignedTaskWithPeriod) assignedTask).getStartDateRaw();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    endTime \u003d ((AssignedTaskWithPeriod) assignedTask).getEndDateRaw();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                ArrayList\u003cString\u003e row \u003d new ArrayList\u003cString\u003e(Arrays.asList(pid, tid, isDone, isRecur,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    deadline, startTime, endTime, type, uniqueId));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                infoList.add(row);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assignedTaskStorage.write(infoList, ASSIGNED_TASK_HEADERS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Save command frequency to local csv files."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param counts A map containing commands as keys and frequent count as values"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void saveCounters(Map\u003cString, Integer\u003e counts) throws DukeException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Initialize capacity of 20 commands type."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e infoList \u003d new ArrayList\u003c\u003e(20);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Map.Entry\u003cString, Integer\u003e entry : counts.entrySet()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                ArrayList\u003cString\u003e row \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                row.add(entry.getKey()); // Append value of column \"Command Name\" in a row"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                row.add(entry.getValue().toString()); // Append value of column \u0027Frequency\u0027 in a row"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                infoList.add(row); // Append row to the list of rows"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            commandCounterStorage.write(infoList, COMMAND_COUNTER_HEADERS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Load a list of patients."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a list of patients containing patient\u0027s info"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException show loading warning message"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ArrayList\u003cPatient\u003e loadPatients() throws DukeException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Load a list of Map\u003cheader, values\u003e from local data file"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cMap\u003cString, String\u003e\u003e patientsMap \u003d patientStorage.read();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cPatient\u003e patientList \u003d new ArrayList\u003cPatient\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Map\u003cString, String\u003e patientInfo : patientsMap) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                int id \u003d Integer.parseInt(patientInfo.get(PATIENT_HEADERS[0]));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String name \u003d patientInfo.get(PATIENT_HEADERS[1]);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String nric \u003d patientInfo.get(PATIENT_HEADERS[2]);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String room \u003d patientInfo.get(PATIENT_HEADERS[3]);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String remark \u003d patientInfo.get(PATIENT_HEADERS[4]);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                patientList.add(new Patient(id, name, nric, room, remark));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return patientList;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Load task info from local csv data files."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a list of tasks"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException return load error exception"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTasks() throws DukeException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Load a list of Map\u003cheader, values\u003e from local data file"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cMap\u003cString, String\u003e\u003e tasksMap \u003d standardTaskStorage.read();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Map\u003cString, String\u003e taskInfo : tasksMap) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                int id \u003d Integer.parseInt(taskInfo.get(STANDARD_TASK_HEADERS[0]));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String description \u003d taskInfo.get(STANDARD_TASK_HEADERS[1]);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                taskList.add(new Task(id, description));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Load patient assigned task."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return list of patient task relation"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException return load error exception"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ArrayList\u003cAssignedTask\u003e loadAssignedTasks() throws DukeException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Load a list of Map\u003cheader, values\u003e from local data file"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cMap\u003cString, String\u003e\u003e assignedTaskMap \u003d assignedTaskStorage.read();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cAssignedTask\u003e assignedTaskList \u003d new ArrayList\u003cAssignedTask\u003e();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Map\u003cString, String\u003e assignedTaskInfo : assignedTaskMap) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                int pid \u003d Integer.parseInt(assignedTaskInfo.get(ASSIGNED_TASK_HEADERS[0]));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                int tid \u003d Integer.parseInt(assignedTaskInfo.get(ASSIGNED_TASK_HEADERS[1]));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                boolean isDone \u003d Boolean.parseBoolean(assignedTaskInfo.get(ASSIGNED_TASK_HEADERS[2]));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                boolean isRecursive \u003d Boolean.parseBoolean(assignedTaskInfo.get(ASSIGNED_TASK_HEADERS[3]));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String deadline \u003d assignedTaskInfo.get(ASSIGNED_TASK_HEADERS[4]);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String startTime \u003d assignedTaskInfo.get(ASSIGNED_TASK_HEADERS[5]);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String endTime \u003d assignedTaskInfo.get(ASSIGNED_TASK_HEADERS[6]);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String taskType \u003d assignedTaskInfo.get(ASSIGNED_TASK_HEADERS[7]);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                int uniqueId \u003d Integer.parseInt(assignedTaskInfo.get(ASSIGNED_TASK_HEADERS[8]));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                if (taskType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    assignedTaskList.add(new AssignedTaskWithDate(pid, tid, isDone, isRecursive, deadline, taskType,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                            uniqueId));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } else if (taskType.equals(\"period\")) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    assignedTaskList.add(new AssignedTaskWithPeriod(pid, tid, isDone, isRecursive,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        startTime, endTime, taskType, uniqueId));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return assignedTaskList;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * To load command counter frequency."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return return the command with frequency counts"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException return load error exception"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Map\u003cString, Integer\u003e loadCommandFrequency() throws DukeException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Load a list of Map\u003cheader, values\u003e from local data file"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cMap\u003cString, String\u003e\u003e counterMap \u003d commandCounterStorage.read();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Map\u003cString, Integer\u003e integratedCounterMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Map\u003cString, String\u003e rowInfo : counterMap) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String commandName \u003d rowInfo.get(COMMAND_COUNTER_HEADERS[0]);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                int frequency \u003d Integer.parseInt(rowInfo.get(COMMAND_COUNTER_HEADERS[1]));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                integratedCounterMap.put(commandName, frequency);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return integratedCounterMap;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 256
    }
  },
  {
    "path": "src/main/java/duke/util/DateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * update the \u003ccode\u003e LocalDateTime \u003c/code\u003e constructor to save the date and time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param timeBeforeFormat the time retrieved from user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A LocalDateTime object that contains date and time information."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public static LocalDateTime convertToLocalDateTime(String timeBeforeFormat) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        DateTimeFormatter parser \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            localDateTime \u003d LocalDateTime.parse(timeBeforeFormat, parser);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return localDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DateTimeParseException error) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(DateTimeParser.class,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    \"Invalid format. Please Enter Date and Time in the format of dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *  ."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param localDateTime ."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public static String convertToEnglishDateTimeBeforeParse(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        DateTimeFormatter stFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027st of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        DateTimeFormatter ndFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027nd of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        DateTimeFormatter rdFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027rd of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        DateTimeFormatter thFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027th of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if ((localDateTime.getDayOfMonth() % 10) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return localDateTime.format(stFormatter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else if ((localDateTime.getDayOfMonth() % 10) \u003d\u003d 2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return localDateTime.format(ndFormatter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else if ((localDateTime.getDayOfMonth() % 10) \u003d\u003d 3) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return localDateTime.format(rdFormatter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return localDateTime.format(thFormatter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 1,
      "HUANGXUANKUN": 52
    }
  },
  {
    "path": "src/main/java/duke/util/DukeUi.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.models.assignedtasks.UpcomingTasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.models.patients.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents the necessary dukeUi elements for user interaction."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class DukeUi {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static DukeUi dukeUi;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String dukeResponses \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private int maxInputSize \u003d 140;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * static method to create instance of Singleton class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return DukeUi"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public static DukeUi getDukeUi() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (dukeUi \u003d\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            dukeUi \u003d new DukeUi();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return dukeUi;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Increment the response to duke response collections for print out in GUI."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param dukeResponse duke\u0027s response for user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void printDukeResponse(String dukeResponse) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.dukeResponses \u003d dukeResponses + dukeResponse + \"\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(dukeResponse);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * return all the responses for current user input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return the collections of all responses for user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String getDukeResponses() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return this.dukeResponses;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Clear Duke\u0027s responses for previous user input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void clearResponses() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.dukeResponses \u003d \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Get user full command from GUI."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param userInput User input"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void readUserInputFromGui(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (userInput.length() \u003e maxInputSize) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(\"Your input size is too large! Please limit your input \" "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    + \"to 140 characters.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Reads user instruction."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A string that represents the user instruction."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String readUserInput() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return this.userInput;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Print out message to indicate task is added."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param standardTask the standard task contains its description"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void taskAdded(Task standardTask) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        printDukeResponse(\"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            + standardTask.getDescription());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Print out message to show Patient\u0027s info."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patient it contains patient\u0027s information"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showPatientInfo(Patient patient) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        printDukeResponse(\"Name: \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            + patient.getName()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            + \"  Id: \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            + patient.getId()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            + \"\\nNRIC: \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            + patient.getNric()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            + \"  Room: \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            + patient.getRoom()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            + \"\\nRemark: \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            + patient.getRemark());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Print out the info of a task."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param task any task which contains description"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showTaskInfo(Task task) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        printDukeResponse(\"Task: \" + task.getDescription());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Display all the patients with the similar name."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patients a list contains patient with similar name"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param name     the name given by user for search"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void patientsFoundByName(ArrayList\u003cPatient\u003e patients, String name) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (patients.size() \u003e 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            printDukeResponse(\"Got it. \" + patients.size() + \" patients is/are found with name: \" + name);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Patient patient : patients) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                printDukeResponse(\"Patient #\" + i);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                showPatientInfo(patient);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                showLine();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            printDukeResponse(\"No patient was found with name: \" + name);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Display all the tasks with same description name."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasks       task with same name being found"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param description the description of task being search"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void tasksFoundByDescription(ArrayList\u003cTask\u003e tasks, String description) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            printDukeResponse(\"Got it. \" + tasks.size() + \" tasks is/are found with description: \" + description);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                printDukeResponse(\"Task #\" + i);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                showTaskInfo(task);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                showLine();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            printDukeResponse(\"No task was found with description: \" + description);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    //@@author kkeejjuunn"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Print out patient is being found."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patient patient being found"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void patientsFoundById(Patient patient) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(\"Got it. The patient is found.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        showPatientInfo(patient);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    //@@author kkeejjuunn"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Print out task is being found."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param task task being found"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void taskFoundById(Task task) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(\"Got it. The task is found.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        showTaskInfo(task);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Print message of a patient is being added."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patient it contains info of the patient being added"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void patientAdded(Patient patient) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(\"Got it. The following patient has been added:  \");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        showPatientInfo(patient);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Print message of a patient is being assigned to task."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param assignedTask it contains the patient task relation and its info"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientName  the name of patient being assigned"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskName     the name of task which is associated with the patient"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void patientTaskAssigned(AssignedTask assignedTask, String patientName, String taskName) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(\"Got it. The following Patient ID: \""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            + assignedTask.getPid()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            + patientName"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            + \" has been assigned the Task ID: \""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            + assignedTask.getTid()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            + taskName);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    //@@author kkeejjuunn"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It shows message of a patient being deleted."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void patientDeleted() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(\"Got it. The patient is deleted.\\n\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    //@@author kkeejjuunn"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It shows message of a task being deleted successfully."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void taskDeleted() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(\"Got it. The task is deleted.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It lists out all info of patients."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param id the patients to be listed out"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void patientTaskDeleted(int id) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(\"Got it. The task with unique ID: \" + id + \" has been deleted\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It lists out all info of patients."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patient the patients to be listed out"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void patientTaskAllDeleted(Patient patient) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(\"Got it. The tasks belong to: \");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(patient.getName());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(\"has been deleted\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It lists out all info of patients."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patients the patients to be listed out"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void listAllPatients(ArrayList\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        for (Patient patient : patients) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            showPatientInfo(patient);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            showLine();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It lists out all info of tasks."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskList the tasks to be listed out"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void listAllTasks(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(\"Here\u0027s a list of your tasks: \\n\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            printDukeResponse(index"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                + \". \""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                + task.getDescription()"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                + \" (ID: \""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                + task.getId()"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                + \")\""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                + \"\\n\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Shows a divider line."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(\"______________________\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Shows bye message to user."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void exitInformation() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Show information is being updated successfully."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void showUpdatedSuccessfully() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(\"I have successfully updated the following information: \\n\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Show message of loading failure."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(\"Failed to load from local data file!\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Show message of undo."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void showUndoSuccess() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(\"Undo command received\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It displays all the tasks assigned to the patient who is to be deleted."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patient     patient given by user"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientTask list of patienttasks being found associated with the patient"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param tasks       list of tasks assigned to the patient"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void patientTaskFound(Patient patient, ArrayList\u003cAssignedTask\u003e patientTask, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(\"The tasks of patient \" + patient.getId() + \" \" + patient.getName() + \" is found : \\n\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        for (int i \u003d 0; i \u003c patientTask.size(); i++) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            printDukeResponse(tasks.get(i).getId() + \". \" + tasks.get(i).getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            printDukeResponse(patientTask.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    //@@author kkeejjuunn"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It shows all info of patientTasks found which are associated with the task given by user."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param task     task given by user"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patients list of patients relate to task"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void taskPatientFound(Task task, ArrayList\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(\"The task \" + task.getId() + \" \" + task.getDescription()"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            + \" is assigned to following patient(s) : \\n\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        for (int i \u003d 0; i \u003c patients.size(); i++) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            printDukeResponse(patients.get(i).getId() + \". \" + patients.get(i).getName() + \"\\n\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    //@@author kkeejjuunn"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It shows all info of tasks found which are associated with the patient given by user."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patient patient given by user"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param tasks   list of tasks relate to patienttasks found"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void assignedTasksFoundWhenDeletePatient(Patient patient, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        printDukeResponse(patient.getName() + \" is assigned with the following tasks : \\n\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            printDukeResponse(tasks.get(i).getId() + \". \" + tasks.get(i).getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    //@@author qjie7"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Provide the necessary task details from the user for short cut feature."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param info The type of task information that want to be retrieved."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return Either the task name or task id depend on the parameter info."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @throws DukeException throw a dukeException with error message for debugging."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @author QIAN JIE"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @version 1.3"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public String getTaskInfo(String info) throws DukeException {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if (info.equals(\"name\")) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            printDukeResponse(\"Task Name ?\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String taskName \u003d dukeUi.readUserInput();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return taskName;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (info.equals(\"id\")) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            printDukeResponse(\"Task ID?\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String taskId \u003d \"#\" + dukeUi.readUserInput();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return taskId;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (info.equals(\"change\")) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            printDukeResponse(\"What would you like to change??\");"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String change \u003d dukeUi.readUserInput();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return change;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (info.equals(\"changeValue\")) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            printDukeResponse(\"Change to ?\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String changeValue \u003d dukeUi.readUserInput();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return changeValue;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            throw new DukeException(DukeUi.class, \"Please provide a proper parameter into getPatient function!\");"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Provide the necessary patient details from the user for short cut feature."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param info The type of task information that want to be retrieved."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return Either the task name or task id depend on the parameter info."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @throws DukeException throw a dukeException with error message for debugging."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @author QIAN JIE"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @version 1.3"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public String getPatientInfo(String info) throws DukeException {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if (info.equals(\"name\")) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            printDukeResponse(\"Patient Name ?\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String patientName \u003d dukeUi.readUserInput();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return patientName;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (info.equals(\"id\")) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            printDukeResponse(\"Patient ID Number ?\");"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String patientId \u003d \"#\" + dukeUi.readUserInput();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return patientId;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (info.equals(\"nric\")) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            printDukeResponse(\"NRIC?\");"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String nric \u003d dukeUi.readUserInput();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return nric;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (info.equals(\"room\")) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            printDukeResponse(\"Room??\");"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String room \u003d dukeUi.readUserInput();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return room;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (info.equals(\"remark\")) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            printDukeResponse(\"Remarks?\");"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String remark \u003d dukeUi.readUserInput();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return remark;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (info.equals(\"change\")) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            printDukeResponse(\"what would you like to change?\");"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String change \u003d dukeUi.readUserInput();"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return change;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (info.equals(\"changeValue\")) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            printDukeResponse(\"Change to ?\");"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String changeValue \u003d dukeUi.readUserInput();"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return changeValue;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            throw new DukeException(DukeUi.class, \"Please provide a proper parameter into getPatient function!\");"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void showPieChartResponse() {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        printDukeResponse(\"Here is the Pie Chart\");"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void showBarChartResponse() {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        printDukeResponse(\"Here is the Bar Chart\");"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    //@@lmtaek"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Prints out list of available command inputs + formats for the user."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param helpOptions The list of command options to be printed."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void showHelpOptions(ArrayList\u003cString\u003e helpOptions) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String output \u003d \"These are the commands that the user can use, and their respective formats:\\n\\n\";"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        for (String command : helpOptions) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            output +\u003d \" - \" + command + \"\\n\\n\";"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        printDukeResponse(output);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Prints out lists for each day of upcoming week + the tasks designated for those days."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param upcomingTasks The list of tasks for the upcoming date."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void showUpcomingTasks(UpcomingTasks upcomingTasks) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        output +\u003d upcomingTasks.getFormattedDate() + \":\\n\";"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        ArrayList\u003cString\u003e taskDescriptions \u003d upcomingTasks.getUpcomingTaskDescriptions();"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        ArrayList\u003cString\u003e patientNames \u003d upcomingTasks.getPatientNames();"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        for (int i \u003d 0; i \u003c upcomingTasks.getUpcomingTasks().size(); i++) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            output +\u003d \"Unique ID: \" + upcomingTasks.getUpcomingTasks().get(i).getUuid() + \".\\nDescription: \""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                + taskDescriptions.get(i) + \"\\nFor patient: \" + patientNames.get(i) + \"\\n\\n\";"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        printDukeResponse(output);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 2,
      "WEIFENG-NUSCEG": 2,
      "kkeejjuunn": 207,
      "qjie7": 121,
      "-": 1,
      "HUANGXUANKUN": 157
    }
  },
  {
    "path": "src/main/java/duke/util/Log4jLogger.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "//@@author kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import org.apache.logging.log4j.LogManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import org.apache.logging.log4j.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "public class Log4jLogger {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private static Logger _logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public static void logException(Class className, String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        _logger \u003d LogManager.getLogger(className);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        _logger.error(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 15
    }
  },
  {
    "path": "src/main/java/duke/util/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "//@@author lmtaek"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String userInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String[] parsedInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Constructor for the Parser class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param userInput Takes in user\u0027s raw input and stores it to use in its methods, parsing it"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *                  into a format that is appropriate for the command it invokes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public Parser(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.userInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            parsedInput \u003d userInput.split(\":\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            throw new DukeException(Parser.class, \"Could not parse user input!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Parses any instance of user input and attempts to pass the output to a Command class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return The user input without the command keyword."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String[] parseUserInput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        int outputLength \u003d parsedInput.length - 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] formattedInput \u003d new String[outputLength];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d formattedInput.length; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            formattedInput[i - 1] \u003d parsedInput[i].trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return formattedInput;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 41
    }
  },
  {
    "path": "src/main/java/duke/util/TypoCorrector.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.apache.commons.text.similarity.LevenshteinDistance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * This is a command typo corrector for Duke user command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * It provides a method TypoCorrector.CommandCorrection which takes in an invalid input command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * and return a possible matched command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * @author HUANGXUANKUN"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class TypoCorrector {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    //The maximum ratio changes of a text in % that is acceptable"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final double MAX_DISTANCE_DIFF_RATIO \u003d 0.3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    //Sets of \"Dictionaries\" for the command keyword, categorised by number of keywords contain in a supported commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String[] SIMPLE_COMMANDS \u003d {\"bye\", \"help\", \"list patients\", \"list tasks\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        \"show patients\", \"show tasks\", \"show assigned tasks\", \"show help guide\", \"clear filter\", \"show upcoming tasks\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        \"show today\", \"show tomorrow\", \"piechart\", \"barchart\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String[] OTHER_COMMANDS \u003d {\"update patient\", \"update task\", \"delete patient\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        \"delete task\", \"delete assigned task\", \"add task\", \"add patient\", \"find patient\", \"find task\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        \"find assigned tasks\", \"assign deadline task\", \"assign period task\", \"filter\",};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private boolean isCorrected \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String correctedCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String commandInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * It takes in full command by user and process it with auto-correction."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * If the correctedCommand is not equal to the original command, the command is"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * considered as corrected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param commandInput the full command entered by user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public TypoCorrector(String commandInput) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.commandInput \u003d commandInput;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        correctedCommand \u003d commandCorrection(commandInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String inputKeyword \u003d commandInput.split(\":\", 2)[0].trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String correctedKeyword \u003d correctedCommand.split(\":\", 2)[0].trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (!inputKeyword.equals(correctedKeyword)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            isCorrected \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * It returns the correction status of the command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * if true, the command can be corrected, user can then call the getCorrectedCommand() to get the corrected version."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Otherwise, the command cannot be corrected."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return if input command can be corrected."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isCommandCorrected() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return isCorrected;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * It return the correctedCommand if the command can be corrected."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Otherwise, return the original command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return the full corrected command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String getCorrectedCommand() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (isCommandCorrected()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return correctedCommand;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return commandInput;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * This method take in an user input command with typo and return a possible matches"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * If the return string is equal to the input command, there is no match."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param command the full userInput command without parsing"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a string of correctedCommand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String commandCorrection(String command) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String[] splitCommand \u003d command.split(\":\", 2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        int commandSize \u003d splitCommand.length;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String closestMatch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (commandSize \u003d\u003d 1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            // Type A command with only command keywords"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String fullCommand \u003d command.trim().toLowerCase();//Ignore spaces(back and fore)and upper/lower cases"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            closestMatch \u003d matchStringFromDict(fullCommand, SIMPLE_COMMANDS); //get closest match"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (isSimilar(fullCommand, closestMatch)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return closestMatch;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else if (commandSize \u003d\u003d 2) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            // Type B command with command keywords and other info/data"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String keyword \u003d splitCommand[0].trim().toLowerCase(); //Ignore spaces(back and fore)and upper/lower cases"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            closestMatch \u003d matchStringFromDict(keyword, OTHER_COMMANDS); //get closest match"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (isSimilar(keyword, closestMatch)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                splitCommand[0] \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return closestMatch + String.join(\":\", splitCommand).trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return command; // The original command will be return if there is no matched found"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Get the closest match string from the array targetDict."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param str the arbitrary string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return the closest matching from the target dict"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String matchStringFromDict(String str, String[] targetDict) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        int minDist \u003d 256;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String closestMatch \u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        for (String keyword : targetDict) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            int currDist \u003d getDistance(keyword, str);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (currDist \u003c minDist) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                if (currDist \u003d\u003d 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    return keyword;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                minDist \u003d currDist;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                closestMatch \u003d keyword;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return closestMatch;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Get Levenshtein distance between target and an arbitrary string."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param str the arbitrary string"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return the difference of two strings measured in distance"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Integer getDistance(String str, String target) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        LevenshteinDistance distance \u003d new LevenshteinDistance();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return distance.apply(str, target);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Method indicating if a message can be considered similar, based on Levenshtein distance"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * calculation with an allowed variation."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Max tolerated distance is derived from the current scenario\u0027s error message"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * The arbitrary MAX_DISTANCE_DIFF_RATIO \u003d 0.2 means we consider 30% change to be acceptable."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param referenceText the reference text"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param targetText    the target text for the comparison"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return true if the can be considered similar else false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private boolean isSimilar(String referenceText, String targetText) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        int threshold \u003d (int) Math.round(MAX_DISTANCE_DIFF_RATIO * referenceText.length());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        LevenshteinDistance levenshteinDistance \u003d new LevenshteinDistance(threshold);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return levenshteinDistance.apply(referenceText, targetText) !\u003d -1;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 152
    }
  },
  {
    "path": "src/main/java/duke/util/mementopattern/Memento.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "//@@author WEIFENG-NUSCEG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.util.mementopattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * This is an object created to save the internal state of the our TaskManager, PatientManager,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * AssignedTaskManager."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class Memento {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private TaskManager memTaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private PatientManager memPatientManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private AssignedTaskManager memAssignedTaskManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Create a new memento object to save the internal state of the data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param assignedTaskManager    a AssignedTask Manger contains"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param taskManager            a Task Manager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param patientManager         a Patient Manager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public Memento(TaskManager taskManager, AssignedTaskManager assignedTaskManager, PatientManager patientManager) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.memTaskList \u003d taskManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.memPatientManager \u003d patientManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.memAssignedTaskManager \u003d assignedTaskManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Retrieve the internal state of the TaskManager."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a TaskManager stored in the Memento object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public TaskManager getTaskState() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.memTaskList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Retrieve the internal state of the PatientManager."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a PatientManager stored in the Memento object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public PatientManager getPatientState() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.memPatientManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Retrieve the internal state of the AssignedTaskManager."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a AssignedTaskManager stored in the Memento object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public AssignedTaskManager getPatientTaskState() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.memAssignedTaskManager;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 57
    }
  },
  {
    "path": "src/main/java/duke/util/mementopattern/MementoManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "//@@author WEIFENG-NUSCEG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.util.mementopattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * This class represents a list of memento objects to be saved base on the sequence of occurrence,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * so that when an undo command is received, the MementoManger is able to pop the correct internal state"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * to restore."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class MementoManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private LinkedList\u003cMemento\u003e mementos \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Add a new memento object to the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @Param state of the current internal state."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void add(Memento state) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (mementos.size() \u003c 10) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            mementos.addLast(state);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            mementos.pollFirst();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            mementos.addLast(state);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Pop the correct saved internal state from the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a Memento object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public Memento pop() throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (!mementos.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return mementos.pollLast();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(MementoManager.class, \"There are no more steps to undo!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Save the current internal states into a new memento object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param taskManager  a task manager to be saved"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param assignedTaskManager a assigned task manager to be saved"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param patientManager a patient manager to be saved"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a new Memento object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public Memento saveDukeStateToMemento(TaskManager taskManager, AssignedTaskManager assignedTaskManager,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                                          PatientManager patientManager) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return new Memento(new TaskManager(taskManager.getTaskList()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                new AssignedTaskManager(assignedTaskManager.getAssignTasks()),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                new PatientManager(patientManager.getPatientList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 63
    }
  },
  {
    "path": "src/main/java/duke/util/mementopattern/MementoParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "//@@author WEIFENG-NUSCEG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.util.mementopattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.commands.assignedtask.AssignDeadlineTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.commands.assignedtask.AssignPeriodTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.commands.patient.DeletePatientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.commands.assignedtask.DeleteAssignedTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.commands.patient.UpdatePatientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.commands.task.UpdateTaskCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.commands.functional.UndoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * This is parser that checks the type of Command it takes in, if the command has anything to do with"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * the modification of the internal state of the object, it will return a \"save\", if it is an undo command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * the parser will return a \"pop\", else it will return a \"ignore\"."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class MementoParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * This method will check the type of the command it received and return respective status."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param command a command received from duke."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return a string which indicates the operation type (save, pop, ignore)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public static String getSaveFlag(Command command) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if ((command instanceof AddPatientCommand) || (command instanceof AddTaskCommand)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                || (command instanceof AssignPeriodTaskCommand) || (command instanceof DeletePatientCommand)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                || (command instanceof DeleteAssignedTaskCommand) || (command instanceof DeleteTaskCommand)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                || (command instanceof UpdatePatientCommand) || (command instanceof UpdateTaskCommand)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                || (command instanceof AssignDeadlineTaskCommand)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return \"save\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } else if (command instanceof UndoCommand) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return \"pop\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return \"ignore\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 45
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c!-- @@author HUANGXUANKUN --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"240.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"TOP_LEFT\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"151\" minHeight\u003d\"-Infinity\" minWidth\u003d\"151\"  prefWidth\u003d\"151.0\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "      \u003cInsets bottom\u003d\"20.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 23
    }
  },
  {
    "path": "src/main/resources/view/HelpBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"240.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        \u003cLabel fx:id\u003d\"helpText\" alignment\u003d\"TOP_LEFT\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 14
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "\u003c?import javafx.scene.control.Accordion?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": "\u003c?import javafx.scene.control.DatePicker?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.scene.effect.Reflection?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c!-- @@author HUANGXUANKUN --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Dukepital\" type\u003d\"Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "         \u003croot\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            \u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"716.0\" prefWidth\u003d\"1290.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"1050.0\" layoutY\u003d\"653.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"32.0\" prefWidth\u003d\"176.0\" AnchorPane.bottomAnchor\u003d\"32.0\" AnchorPane.rightAnchor\u003d\"63.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"1237.0\" layoutY\u003d\"653.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"32.0\" prefWidth\u003d\"63.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"32.0\" AnchorPane.rightAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"1050.0\" prefHeight\u003d\"673.0\" prefWidth\u003d\"249.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"61.0\" AnchorPane.leftAnchor\u003d\"1050.0\" AnchorPane.rightAnchor\u003d\"1.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                            \u003cVBox fx:id\u003d\"dialogContainer\" alignment\u003d\"TOP_RIGHT\" prefHeight\u003d\"0.0\" prefWidth\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    \u003cAnchorPane layoutX\u003d\"331.0\" layoutY\u003d\"10.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"714.0\" prefWidth\u003d\"719.0\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"331.0\" AnchorPane.rightAnchor\u003d\"250.0\" AnchorPane.topAnchor\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                            \u003cTabPane fx:id\u003d\"centerTabPane\" prefHeight\u003d\"714.0\" prefWidth\u003d\"719.0\" tabClosingPolicy\u003d\"UNAVAILABLE\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                \u003ctabs\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    \u003cTab text\u003d\"Patients\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTableView fx:id\u003d\"patientTable\" layoutX\u003d\"3.0\" layoutY\u003d\"42.0\" prefHeight\u003d\"660.0\" prefWidth\u003d\"700.0\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"50.0\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003ccolumns\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cTableColumn fx:id\u003d\"patientIdCol\" prefWidth\u003d\"51.0\" text\u003d\"ID\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cTableColumn fx:id\u003d\"patientNameCol\" minWidth\u003d\"0.0\" prefWidth\u003d\"123.0\" text\u003d\"NAME\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cTableColumn fx:id\u003d\"patientNricCol\" minWidth\u003d\"0.0\" prefWidth\u003d\"118.0\" text\u003d\"NRIC\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cTableColumn fx:id\u003d\"patientRoomCol\" minWidth\u003d\"0.0\" prefWidth\u003d\"63.0\" text\u003d\"ROOM\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cTableColumn fx:id\u003d\"patientRemarkCol\" prefWidth\u003d\"190.0\" text\u003d\"REMARK\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/columns\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"patientSearchTextField\" layoutX\u003d\"97.0\" layoutY\u003d\"14.0\" prefHeight\u003d\"25.0\" prefWidth\u003d\"600.0\" AnchorPane.leftAnchor\u003d\"100.0\" AnchorPane.topAnchor\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cLabel layoutX\u003d\"14.0\" layoutY\u003d\"14.0\" prefHeight\u003d\"25.0\" prefWidth\u003d\"100.0\" text\u003d\"Search Bar\" textAlignment\u003d\"RIGHT\" AnchorPane.leftAnchor\u003d\"5.0\" AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cFont name\u003d\"System Bold\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cInsets left\u003d\"2.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                        \u003c/content\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    \u003cTab text\u003d\"Tasks\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"705.0\" prefWidth\u003d\"661.0\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTableView fx:id\u003d\"taskTable\" layoutX\u003d\"-1.0\" layoutY\u003d\"37.0\" prefHeight\u003d\"660.0\" prefWidth\u003d\"700.0\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"50.0\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003ccolumns\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cTableColumn fx:id\u003d\"taskIdCol\" prefWidth\u003d\"71.0\" text\u003d\"ID\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cTableColumn fx:id\u003d\"taskDescriptionCol\" prefWidth\u003d\"473.0\" text\u003d\"DESCRIPTION\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/columns\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"taskSearchTextField\" layoutX\u003d\"91.0\" layoutY\u003d\"14.0\" prefHeight\u003d\"25.0\" prefWidth\u003d\"600.0\" AnchorPane.leftAnchor\u003d\"100.0\" AnchorPane.topAnchor\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cLabel layoutX\u003d\"11.0\" layoutY\u003d\"14.0\" prefHeight\u003d\"25.0\" prefWidth\u003d\"100.0\" text\u003d\"Search Bar\" textAlignment\u003d\"RIGHT\" AnchorPane.leftAnchor\u003d\"5.0\" AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cFont name\u003d\"System Bold\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cInsets left\u003d\"2.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003c/children\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                        \u003c/content\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    \u003cTab text\u003d\"Assigned Tasks\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTableView fx:id\u003d\"assignedTaskTable\" prefHeight\u003d\"660.0\" prefWidth\u003d\"700.0\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"50.0\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003ccolumns\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cTableColumn fx:id\u003d\"assignedUuidCol\" prefWidth\u003d\"51.0\" text\u003d\"UUID\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cTableColumn fx:id\u003d\"assignedTypeCol\" prefWidth\u003d\"49.0\" text\u003d\"TYPE\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cTableColumn fx:id\u003d\"assignedTidCol\" minWidth\u003d\"0.0\" prefWidth\u003d\"62.0\" text\u003d\"TID\" /\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cTableColumn fx:id\u003d\"assignedDescriptionCol\" minWidth\u003d\"0.0\" prefWidth\u003d\"121.0\" text\u003d\"DESCRIPTION\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cTableColumn fx:id\u003d\"assignedPidCol\" minWidth\u003d\"0.0\" prefWidth\u003d\"42.0\" text\u003d\"PID\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cTableColumn fx:id\u003d\"assignedPnameCol\" prefWidth\u003d\"79.0\" text\u003d\"PNAME\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cTableColumn fx:id\u003d\"assignedIsDoneCol\" prefWidth\u003d\"79.0\" text\u003d\"IS DONE\" /\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cTableColumn fx:id\u003d\"assignedTodoDateCol\" prefWidth\u003d\"72.0\" text\u003d\"TODO_D\" /\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cTableColumn fx:id\u003d\"assignedStartDateCol\" prefWidth\u003d\"83.0\" text\u003d\"START_D\" /\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cTableColumn fx:id\u003d\"assignedEndDateCol\" minWidth\u003d\"9.0\" prefWidth\u003d\"79.0\" text\u003d\"END_D\" /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/columns\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cLabel prefHeight\u003d\"25.0\" prefWidth\u003d\"100.0\" text\u003d\"Search Bar\" textAlignment\u003d\"RIGHT\" AnchorPane.leftAnchor\u003d\"5.0\" AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cFont name\u003d\"System Bold\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cInsets left\u003d\"2.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"assignedTaskSearchTextField\" prefHeight\u003d\"25.0\" prefWidth\u003d\"600.0\" AnchorPane.leftAnchor\u003d\"100.0\" AnchorPane.topAnchor\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003c/children\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                        \u003c/content\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                \u003c/tabs\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                            \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    \u003cAnchorPane layoutX\u003d\"3.0\" prefHeight\u003d\"714.0\" prefWidth\u003d\"321.0\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                            \u003cTabPane fx:id\u003d\"leftTabPane\" prefHeight\u003d\"714.0\" prefWidth\u003d\"334.0\" side\u003d\"LEFT\" tabClosingPolicy\u003d\"UNAVAILABLE\" AnchorPane.bottomAnchor\u003d\"5.0\" AnchorPane.leftAnchor\u003d\"5.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                \u003ctabs\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    \u003cTab text\u003d\"Patient Commands\"\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"714.0\" prefWidth\u003d\"279.0\"\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cButton fx:id\u003d\"addPatientButton\" layoutX\u003d\"10.0\" layoutY\u003d\"201.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleAddPatientButton\" prefHeight\u003d\"35.0\" prefWidth\u003d\"261.0\" text\u003d\"Add Patient\" AnchorPane.bottomAnchor\u003d\"450.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"6.0\" AnchorPane.topAnchor\u003d\"201.0\" /\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText fontSmoothingType\u003d\"LCD\" layoutX\u003d\"13.0\" layoutY\u003d\"36.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Patient Command Shortcuts\" wrappingWidth\u003d\"262.0\" AnchorPane.leftAnchor\u003d\"13.0\" AnchorPane.topAnchor\u003d\"14.41796875\"\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003c/Text\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"addPatientNameField\" alignment\u003d\"CENTER\" layoutX\u003d\"76.0\" layoutY\u003d\"62.0\" prefHeight\u003d\"27.0\" prefWidth\u003d\"188.0\" promptText\u003d\"Enter Name Here\" AnchorPane.leftAnchor\u003d\"76.0\" /\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"addPatientNricField\" alignment\u003d\"CENTER\" layoutX\u003d\"75.0\" layoutY\u003d\"93.0\" prefHeight\u003d\"24.0\" prefWidth\u003d\"188.0\" promptText\u003d\"Enter NRIC Here\" AnchorPane.bottomAnchor\u003d\"569.0\" AnchorPane.rightAnchor\u003d\"9.0\" AnchorPane.topAnchor\u003d\"93.0\" /\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"addPatientRoomField\" alignment\u003d\"CENTER\" layoutX\u003d\"76.0\" layoutY\u003d\"125.0\" prefHeight\u003d\"24.0\" prefWidth\u003d\"191.0\" promptText\u003d\"Enter Room No. Here\" AnchorPane.bottomAnchor\u003d\"537.0\" AnchorPane.leftAnchor\u003d\"76.0\" AnchorPane.rightAnchor\u003d\"10.0\" AnchorPane.topAnchor\u003d\"125.0\" /\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"addPatientRemarkField\" alignment\u003d\"CENTER\" layoutX\u003d\"77.0\" layoutY\u003d\"159.0\" prefHeight\u003d\"25.0\" prefWidth\u003d\"191.0\" promptText\u003d\"Any Remark?\" AnchorPane.bottomAnchor\u003d\"502.0\" AnchorPane.leftAnchor\u003d\"77.0\" AnchorPane.rightAnchor\u003d\"9.0\" AnchorPane.topAnchor\u003d\"159.0\" /\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText layoutX\u003d\"13.0\" layoutY\u003d\"82.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Name:\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"54.13671875\" AnchorPane.leftAnchor\u003d\"13.0\" AnchorPane.rightAnchor\u003d\"205.86328125\"\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003c/Text\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText layoutX\u003d\"13.0\" layoutY\u003d\"115.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"NRIC:\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"54.13671875\" AnchorPane.leftAnchor\u003d\"13.0\" AnchorPane.rightAnchor\u003d\"205.86328125\"\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003c/Text\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText layoutX\u003d\"13.0\" layoutY\u003d\"146.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Room:\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"54.13671875\" AnchorPane.bottomAnchor\u003d\"554.203125\" AnchorPane.leftAnchor\u003d\"13.0\" AnchorPane.rightAnchor\u003d\"205.86328125\" AnchorPane.topAnchor\u003d\"128.59765625\"\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003c/Text\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText layoutY\u003d\"180.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Remark:\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"80.13671875\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"192.86328125\"\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003c/Text\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cButton fx:id\u003d\"updatePatientButton\" layoutX\u003d\"9.0\" layoutY\u003d\"392.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUpdatePatientButton\" prefHeight\u003d\"28.0\" prefWidth\u003d\"259.0\" text\u003d\"Update Patient\" AnchorPane.bottomAnchor\u003d\"266.0\" AnchorPane.leftAnchor\u003d\"9.0\" AnchorPane.rightAnchor\u003d\"9.0\" AnchorPane.topAnchor\u003d\"392.0\" /\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"updatePatientIdField\" layoutX\u003d\"139.0\" layoutY\u003d\"269.0\" prefHeight\u003d\"24.0\" prefWidth\u003d\"133.0\" promptText\u003d\"Enter Patient ID Here\" AnchorPane.bottomAnchor\u003d\"393.0\" AnchorPane.leftAnchor\u003d\"139.0\" AnchorPane.rightAnchor\u003d\"5.0\" AnchorPane.topAnchor\u003d\"269.0\" /\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"updatePatientColumnField\" layoutX\u003d\"139.0\" layoutY\u003d\"304.0\" prefHeight\u003d\"32.0\" prefWidth\u003d\"129.0\" promptText\u003d\"e.g. name, NRIC etc\" AnchorPane.bottomAnchor\u003d\"350.0\" AnchorPane.leftAnchor\u003d\"139.0\" AnchorPane.rightAnchor\u003d\"5.0\" AnchorPane.topAnchor\u003d\"304.0\" /\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"updatePatientContentField\" layoutX\u003d\"140.0\" layoutY\u003d\"347.0\" prefHeight\u003d\"28.0\" prefWidth\u003d\"128.0\" promptText\u003d\"Update to ?\" AnchorPane.leftAnchor\u003d\"140.0\" /\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText layoutX\u003d\"14.0\" layoutY\u003d\"288.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Patient ID:\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"105.13671875\" AnchorPane.bottomAnchor\u003d\"412.625\" AnchorPane.leftAnchor\u003d\"14.0\" AnchorPane.rightAnchor\u003d\"153.86328125\" AnchorPane.topAnchor\u003d\"272.375\"\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003c/Text\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText layoutX\u003d\"7.0\" layoutY\u003d\"323.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"I want to update:\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"120.13671875\" AnchorPane.bottomAnchor\u003d\"377.625\" AnchorPane.leftAnchor\u003d\"7.0\" AnchorPane.rightAnchor\u003d\"145.86328125\" AnchorPane.topAnchor\u003d\"307.375\"\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003c/Text\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText layoutX\u003d\"-16.0\" layoutY\u003d\"367.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"update to :\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"166.13671875\" AnchorPane.bottomAnchor\u003d\"333.625\" AnchorPane.leftAnchor\u003d\"-16.0\" AnchorPane.rightAnchor\u003d\"122.86328125\" AnchorPane.topAnchor\u003d\"351.53125\"\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003c/Text\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cButton fx:id\u003d\"deletePatientButton\" layoutX\u003d\"8.0\" layoutY\u003d\"498.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleDeletePatientButton\" prefHeight\u003d\"34.0\" prefWidth\u003d\"262.0\" text\u003d\"Delete Patient\" AnchorPane.bottomAnchor\u003d\"154.0\" AnchorPane.leftAnchor\u003d\"8.0\" AnchorPane.rightAnchor\u003d\"7.0\" AnchorPane.topAnchor\u003d\"498.0\" /\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"deletePatientIdField\" layoutX\u003d\"122.0\" layoutY\u003d\"443.0\" prefHeight\u003d\"37.0\" prefWidth\u003d\"133.0\" promptText\u003d\"Enter Patient ID Here\" AnchorPane.bottomAnchor\u003d\"206.0\" AnchorPane.leftAnchor\u003d\"122.0\" AnchorPane.rightAnchor\u003d\"22.0\" AnchorPane.topAnchor\u003d\"443.0\" /\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText layoutX\u003d\"14.0\" layoutY\u003d\"462.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Patient ID:\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"81.13671875\" AnchorPane.bottomAnchor\u003d\"239.046875\" AnchorPane.leftAnchor\u003d\"14.0\" AnchorPane.rightAnchor\u003d\"177.86328125\" AnchorPane.topAnchor\u003d\"448.453125\"\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003c/Text\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cButton fx:id\u003d\"listPatientsButton\" layoutX\u003d\"90.0\" layoutY\u003d\"573.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleListPatientsButton\" prefHeight\u003d\"59.0\" prefWidth\u003d\"98.0\" text\u003d\"List Patients\" AnchorPane.topAnchor\u003d\"573.0\" /\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cSeparator layoutX\u003d\"6.0\" layoutY\u003d\"248.0\" prefHeight\u003d\"5.0\" prefWidth\u003d\"262.0\" /\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cSeparator layoutX\u003d\"11.0\" layoutY\u003d\"420.0\" prefHeight\u003d\"27.0\" prefWidth\u003d\"267.0\" /\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cSeparator layoutX\u003d\"7.0\" layoutY\u003d\"541.0\" prefHeight\u003d\"3.0\" prefWidth\u003d\"260.0\" /\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003c/children\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                        \u003c/content\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    \u003cTab text\u003d\"Task Commands\"\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText layoutX\u003d\"20.0\" layoutY\u003d\"33.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Task Command Shortcut\" wrappingWidth\u003d\"224.22900390625\" AnchorPane.rightAnchor\u003d\"28.77099609375\"\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003c/Text\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText layoutX\u003d\"14.0\" layoutY\u003d\"105.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Task Name:\" AnchorPane.bottomAnchor\u003d\"596.2578125\" AnchorPane.leftAnchor\u003d\"14.0\" AnchorPane.rightAnchor\u003d\"193.87939453125\" AnchorPane.topAnchor\u003d\"92.431640625\" /\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"addTaskNameField\" layoutX\u003d\"88.0\" layoutY\u003d\"87.0\" prefHeight\u003d\"31.0\" prefWidth\u003d\"165.0\" promptText\u003d\"Enter Task Name Here\" AnchorPane.bottomAnchor\u003d\"568.0\" AnchorPane.leftAnchor\u003d\"88.0\" AnchorPane.rightAnchor\u003d\"24.0\" AnchorPane.topAnchor\u003d\"87.0\" /\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cButton layoutX\u003d\"18.0\" layoutY\u003d\"129.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleAddTaskButton\" prefHeight\u003d\"31.0\" prefWidth\u003d\"231.0\" text\u003d\"Add Task\" AnchorPane.bottomAnchor\u003d\"526.0\" AnchorPane.leftAnchor\u003d\"18.0\" AnchorPane.rightAnchor\u003d\"28.0\" AnchorPane.topAnchor\u003d\"129.0\" /\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText layoutX\u003d\"14.0\" layoutY\u003d\"202.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Task ID :\" AnchorPane.bottomAnchor\u003d\"499.2578125\" AnchorPane.leftAnchor\u003d\"14.0\" AnchorPane.rightAnchor\u003d\"212.18603515625\" AnchorPane.topAnchor\u003d\"189.431640625\" /\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"deleteTaskIdField\" layoutX\u003d\"88.0\" layoutY\u003d\"184.0\" prefHeight\u003d\"29.0\" prefWidth\u003d\"165.0\" promptText\u003d\"Enter Task ID Here\" AnchorPane.bottomAnchor\u003d\"473.0\" AnchorPane.leftAnchor\u003d\"88.0\" AnchorPane.rightAnchor\u003d\"24.0\" AnchorPane.topAnchor\u003d\"184.0\" /\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cButton layoutX\u003d\"18.0\" layoutY\u003d\"223.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleDeleteTaskButton\" prefHeight\u003d\"32.0\" prefWidth\u003d\"231.0\" text\u003d\"Delete Task\" AnchorPane.bottomAnchor\u003d\"431.0\" AnchorPane.leftAnchor\u003d\"18.0\" AnchorPane.rightAnchor\u003d\"28.0\" AnchorPane.topAnchor\u003d\"223.0\" /\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cButton layoutX\u003d\"65.0\" layoutY\u003d\"299.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleListTasksButton\" prefHeight\u003d\"68.0\" prefWidth\u003d\"134.0\" text\u003d\"List Tasks\" AnchorPane.leftAnchor\u003d\"65.0\" /\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cSeparator layoutX\u003d\"32.0\" layoutY\u003d\"279.0\" prefWidth\u003d\"217.0\" /\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cSeparator layoutX\u003d\"32.0\" layoutY\u003d\"178.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cSeparator layoutX\u003d\"31.0\" layoutY\u003d\"65.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003c/children\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                        \u003c/content\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    \u003cTab text\u003d\"Assign Task\"\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cButton layoutX\u003d\"20.0\" layoutY\u003d\"298.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleAssignTaskButton\" prefHeight\u003d\"27.0\" prefWidth\u003d\"234.0\" text\u003d\"Assign Period Task\" /\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText layoutX\u003d\"15.0\" layoutY\u003d\"111.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Task ID:\" wrappingWidth\u003d\"49.22900390625\" /\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"assignTaskIdField\" layoutX\u003d\"94.0\" layoutY\u003d\"93.0\" promptText\u003d\"Enter Task ID Here\" /\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText layoutX\u003d\"17.0\" layoutY\u003d\"150.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Assign to:\" wrappingWidth\u003d\"63.0\" /\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"assignTaskPatientIdField\" layoutX\u003d\"94.0\" layoutY\u003d\"132.0\" promptText\u003d\"Enter Patient ID Here\" /\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText layoutX\u003d\"8.0\" layoutY\u003d\"225.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Start:\" wrappingWidth\u003d\"43.376953125\" /\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText layoutX\u003d\"15.0\" layoutY\u003d\"268.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"End:\" /\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"assignTaskStartTimeField\" layoutX\u003d\"191.0\" layoutY\u003d\"207.0\" prefHeight\u003d\"27.0\" prefWidth\u003d\"63.0\" promptText\u003d\"HHmm\" /\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"assignTaskEndTimeField\" layoutX\u003d\"191.0\" layoutY\u003d\"255.0\" prefHeight\u003d\"27.0\" prefWidth\u003d\"63.0\" promptText\u003d\"HHmm\" /\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cDatePicker fx:id\u003d\"assignTaskStartDatePicker\" layoutX\u003d\"51.0\" layoutY\u003d\"207.0\" prefHeight\u003d\"27.0\" prefWidth\u003d\"126.0\" promptText\u003d\"Date\" /\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cDatePicker fx:id\u003d\"assignTaskEndDatePicker\" layoutX\u003d\"51.0\" layoutY\u003d\"255.0\" prefHeight\u003d\"27.0\" prefWidth\u003d\"126.0\" promptText\u003d\"Date\" /\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText layoutX\u003d\"82.0\" layoutY\u003d\"372.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Set  Deadline Here\" wrappingWidth\u003d\"110.0\" /\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cDatePicker fx:id\u003d\"assignDeadlineTaskDatePicker\" layoutX\u003d\"20.0\" layoutY\u003d\"388.0\" prefHeight\u003d\"27.0\" prefWidth\u003d\"158.0\" promptText\u003d\"Date\" /\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cButton layoutX\u003d\"20.0\" layoutY\u003d\"438.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleDeadlineTaskButton\" prefHeight\u003d\"27.0\" prefWidth\u003d\"234.0\" text\u003d\"Assign Deadline Task\" /\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"assignDeadlineTaskTimeField\" layoutX\u003d\"191.0\" layoutY\u003d\"388.0\" prefHeight\u003d\"27.0\" prefWidth\u003d\"63.0\" promptText\u003d\"Time\" /\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cButton layoutX\u003d\"20.0\" layoutY\u003d\"629.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleDeleteUuidTaskButton\" prefHeight\u003d\"22.0\" prefWidth\u003d\"233.0\" text\u003d\"Delete Assign Task \" /\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cTextField fx:id\u003d\"assignTaskUuidField\" layoutX\u003d\"94.0\" layoutY\u003d\"584.0\" promptText\u003d\"Enter UUID Here\" /\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText layoutX\u003d\"30.0\" layoutY\u003d\"602.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"UUID:\" wrappingWidth\u003d\"37.22900390625\" /\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cText layoutX\u003d\"8.0\" layoutY\u003d\"32.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Assign Task Command Shortcut\" wrappingWidth\u003d\"274.22900390625\"\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003cfont\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cFont size\u003d\"19.0\" /\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/font\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003c/Text\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cSeparator layoutX\u003d\"37.0\" layoutY\u003d\"66.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cSeparator layoutX\u003d\"37.0\" layoutY\u003d\"181.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cSeparator layoutX\u003d\"45.0\" layoutY\u003d\"342.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cSeparator layoutX\u003d\"45.0\" layoutY\u003d\"489.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                          \u003cTextField fx:id\u003d\"assignTaskFindAssignedTaskField\" layoutX\u003d\"167.0\" layoutY\u003d\"500.0\" prefHeight\u003d\"27.0\" prefWidth\u003d\"86.0\" promptText\u003d\"Patient ID\" /\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                          \u003cText layoutX\u003d\"20.0\" layoutY\u003d\"518.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Find assigned task from :\" wrappingWidth\u003d\"148.0\" /\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                          \u003cSeparator layoutX\u003d\"36.0\" layoutY\u003d\"573.0\" prefHeight\u003d\"0.0\" prefWidth\u003d\"201.0\" /\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                          \u003cButton layoutX\u003d\"51.0\" layoutY\u003d\"537.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleFindAssignTaskButton\" prefHeight\u003d\"27.0\" prefWidth\u003d\"171.0\" text\u003d\"Find\" /\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003c/children\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                        \u003c/content\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    \u003cTab text\u003d\"Statistic\"\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                            \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cButton layoutX\u003d\"67.0\" layoutY\u003d\"221.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handlePieChartPopUpButton\" prefHeight\u003d\"94.0\" prefWidth\u003d\"140.0\" text\u003d\"Pie Chart\" AnchorPane.bottomAnchor\u003d\"389.0\" AnchorPane.leftAnchor\u003d\"67.0\" AnchorPane.rightAnchor\u003d\"66.0\" AnchorPane.topAnchor\u003d\"221.0\" /\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cButton layoutX\u003d\"67.0\" layoutY\u003d\"363.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleBarChartPopUpButton\" prefHeight\u003d\"94.0\" prefWidth\u003d\"140.0\" text\u003d\"Bar Chart\" AnchorPane.bottomAnchor\u003d\"247.0\" AnchorPane.leftAnchor\u003d\"67.0\" AnchorPane.rightAnchor\u003d\"66.0\" AnchorPane.topAnchor\u003d\"363.0\" /\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003c/children\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                        \u003c/content\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                              \u003cTab onSelectionChanged\u003d\"#showUpcomingTasks\" text\u003d\"UpcomingTasks\"\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                \u003ccontent\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                  \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                          \u003cAccordion fx:id\u003d\"upComingTasksAccordion\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\"\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                            \u003cpanes\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                              \u003cTitledPane fx:id\u003d\"firstTitledPane\" animated\u003d\"false\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\" text\u003d\"untitled 1\"\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003ccontent\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                  \u003cAnchorPane fx:id\u003d\"firstUpcomingTaskContainer\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"495.0\" prefWidth\u003d\"285.0\"\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                         \u003cchildren\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cScrollPane fx:id\u003d\"firstScroll\" hbarPolicy\u003d\"NEVER\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\"\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                              \u003ccontent\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                              \u003c/content\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cVBox fx:id\u003d\"firstDayBox\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\" /\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                         \u003c/children\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003c/content\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                              \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003cTitledPane fx:id\u003d\"secondTitledPane\" animated\u003d\"false\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\" text\u003d\"untitled 1\"\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                   \u003ccontent\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                      \u003cAnchorPane fx:id\u003d\"secondUpcomingTaskContainer\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"495.0\" prefWidth\u003d\"285.0\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                         \u003cchildren\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cScrollPane fx:id\u003d\"secondScroll\" hbarPolicy\u003d\"NEVER\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\"\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                              \u003ccontent\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                              \u003c/content\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cVBox fx:id\u003d\"secondDayBox\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\" /\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                         \u003c/children\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                   \u003c/content\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003cTitledPane fx:id\u003d\"thirdTitledPane\" animated\u003d\"false\" layoutX\u003d\"10.0\" layoutY\u003d\"37.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\" text\u003d\"untitled 1\"\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                   \u003ccontent\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                      \u003cAnchorPane fx:id\u003d\"thirdUpcomingTaskContainer\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"495.0\" prefWidth\u003d\"285.0\"\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                         \u003cchildren\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cScrollPane fx:id\u003d\"thirdScroll\" hbarPolicy\u003d\"NEVER\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\"\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                              \u003ccontent\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                              \u003c/content\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cVBox fx:id\u003d\"thirdDayBox\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\" /\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                         \u003c/children\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                   \u003c/content\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003cTitledPane fx:id\u003d\"fourthTitledPane\" animated\u003d\"false\" layoutX\u003d\"10.0\" layoutY\u003d\"673.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\" text\u003d\"untitled 1\"\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                   \u003ccontent\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                      \u003cAnchorPane fx:id\u003d\"fourthUpcomingTaskContainer\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"495.0\" prefWidth\u003d\"285.0\"\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                         \u003cchildren\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cScrollPane fx:id\u003d\"fourthScroll\" hbarPolicy\u003d\"NEVER\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\"\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                              \u003ccontent\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                              \u003c/content\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cVBox fx:id\u003d\"fourthDayBox\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\" /\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                         \u003c/children\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                   \u003c/content\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003cTitledPane fx:id\u003d\"fifthTitledPane\" animated\u003d\"false\" layoutX\u003d\"10.0\" layoutY\u003d\"673.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\" text\u003d\"untitled 1\"\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                   \u003ccontent\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                      \u003cAnchorPane fx:id\u003d\"fifthUpcomingTaskContainer\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"495.0\" prefWidth\u003d\"285.0\"\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                         \u003cchildren\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cScrollPane fx:id\u003d\"fifthScroll\" hbarPolicy\u003d\"NEVER\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\"\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                              \u003ccontent\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                              \u003c/content\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cVBox fx:id\u003d\"fifthDayBox\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\" /\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                         \u003c/children\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                   \u003c/content\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003cTitledPane fx:id\u003d\"sixthTitledPane\" animated\u003d\"false\" layoutX\u003d\"10.0\" layoutY\u003d\"673.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\" text\u003d\"untitled 1\"\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                   \u003ccontent\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                      \u003cAnchorPane fx:id\u003d\"sixthUpcomingTaskContainer\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"495.0\" prefWidth\u003d\"285.0\"\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                         \u003cchildren\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cScrollPane fx:id\u003d\"sixthScroll\" hbarPolicy\u003d\"NEVER\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\"\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                              \u003ccontent\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                              \u003c/content\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cVBox fx:id\u003d\"sixthDayBox\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\" /\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                         \u003c/children\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                   \u003c/content\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003cTitledPane fx:id\u003d\"seventhTitledPane\" animated\u003d\"false\" layoutX\u003d\"10.0\" layoutY\u003d\"673.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\" text\u003d\"untitled 1\"\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                   \u003ccontent\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                      \u003cAnchorPane fx:id\u003d\"seventhUpcomingTaskContainer\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"495.0\" prefWidth\u003d\"285.0\"\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                         \u003cchildren\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cScrollPane fx:id\u003d\"seventhScroll\" hbarPolicy\u003d\"NEVER\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\"\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                              \u003ccontent\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                              \u003c/content\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cVBox fx:id\u003d\"seventhDayBox\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\" /\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                         \u003c/children\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                   \u003c/content\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                            \u003c/panes\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                          \u003c/Accordion\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                \u003c/content\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    \u003cTab text\u003d\"Help Guide\"\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                            \u003cAnchorPane fx:id\u003d\"helpAnchorPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\"\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003cScrollPane fx:id\u003d\"helpGuideScrollPane\" hbarPolicy\u003d\"NEVER\" prefHeight\u003d\"690.0\" prefWidth\u003d\"275.0\"\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003cAnchorPane fx:id\u003d\"helpScrollPane\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"690.0\" prefWidth\u003d\"270.0\"\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                                    \u003cVBox fx:id\u003d\"helpGuideContainer\" prefHeight\u003d\"0.0\" prefWidth\u003d\"275.0\" /\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                                \u003c/children\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                        \u003c/content\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                                \u003c/children\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                        \u003c/content\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                \u003c/tabs\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                \u003ceffect\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                    \u003cReflection /\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                                \u003c/effect\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                            \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    \u003cButton layoutX\u003d\"1050.0\" layoutY\u003d\"690.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUndoButton\" prefHeight\u003d\"32.0\" prefWidth\u003d\"240.0\" text\u003d\"Undo\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"1050.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"684.0\" /\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "         \u003c/root\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 2,
      "qjie7": 2,
      "HUANGXUANKUN": 407
    }
  },
  {
    "path": "src/main/resources/view/UpcomingTaskBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"240.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        \u003cLabel fx:id\u003d\"upcomingTaskText\" alignment\u003d\"TOP_LEFT\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 14
    }
  },
  {
    "path": "src/test/java/abandon/ShortCutterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "//@@author qjie7"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package abandon;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * Junit test for abandon ShortCutter class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * @author Qian Jie"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class ShortCutterTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private Map\u003cString, Integer\u003e commandTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private Map\u003cString, Integer\u003e sortedCommandTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    String cmd1 \u003d \"AddPatientCommand\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    String cmd2 \u003d \"DeletePatientCommand\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    String cmd3 \u003d \"DeleteTaskCommand\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    String cmd4 \u003d \"FindPatientCommand\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    String cmd5 \u003d \"ListPatientsCommand\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    String cmd6 \u003d \"UpdatePatientCommand\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    String cmd7 \u003d \"UpdateTaskCommand\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void sortByValues_commandTable_sortedCommandTableByValue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        commandTable.put(\"AddPatientCommand\", 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        commandTable.put(\"AddTaskCommand\", 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        commandTable.put(\"AssignDeadlineTaskCommand\", 3);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        commandTable.put(\"AssignPeriodTaskCommand\", 4);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        commandTable.put(\"ListPatientsCommand\", 5);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        commandTable.put(\"ListTasksCommand\", 6);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        commandTable.put(\"DeleteAssignedTaskCommand\", 7);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        commandTable.put(\"DeletePatientCommand\", 8);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        commandTable.put(\"DeleteTaskCommand\", 9);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        commandTable.put(\"FindPatientCommand\", 10);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        commandTable.put(\"FindTaskCommand\", 11);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        commandTable.put(\"UpdatePatientCommand\", 12);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        commandTable.put(\"UpdateTaskCommand\", 13);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        sortedCommandTable \u003d ShortCutter.sortByValues(commandTable);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        ArrayList\u003cInteger\u003e values \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        for (Map.Entry\u003cString, Integer\u003e entry : sortedCommandTable.entrySet()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            int value \u003d entry.getValue();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            values.add(value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(values.get(0), 13);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(values.get(1), 12);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(values.get(2), 11);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(values.get(3), 10);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(values.get(4), 9);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(values.get(5), 8);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(values.get(6), 7);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(values.get(7), 6);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(values.get(8), 5);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(values.get(9), 4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(values.get(10), 3);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(values.get(11), 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(values.get(12), 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void commandNameConverter_CommandType_RespectiveConvertedCmdName() throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final String s1 \u003d ShortCutter.commandNameConverter(cmd1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final String s2 \u003d ShortCutter.commandNameConverter(cmd2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final String s3 \u003d ShortCutter.commandNameConverter(cmd3);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final String s4 \u003d ShortCutter.commandNameConverter(cmd4);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final String s5 \u003d ShortCutter.commandNameConverter(cmd5);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final String s6 \u003d ShortCutter.commandNameConverter(cmd6);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final String s7 \u003d ShortCutter.commandNameConverter(cmd7);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(s1, \"Add Patient\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(s2, \"Delete a Patient\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(s3, \"Delete a Task\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(s4, \"Find a Patient\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(s5, \"Show all the patient\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(s6, \"Update Patient information\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(s7, \"Update Task information\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 92
    }
  },
  {
    "path": "src/test/java/duke/commands/CommandManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "//@@author lmtaek"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.assignedtask.AssignPeriodTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.assignedtask.DeleteAssignedTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.assignedtask.FindAssignedTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import abandon.DukeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.functional.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.functional.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.functional.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.patient.AddPatientCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.patient.DeletePatientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.patient.FindPatientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.patient.ListPatientsCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.patient.UpdatePatientCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.task.AddTaskCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.task.DeleteTaskCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.task.FindTaskCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.task.ListTasksCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.task.UpdateTaskCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class CommandManagerTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Test the return command type of Parser.parse(userInput)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @throws DukeException referencing a Duke specified exception with error log"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void commandExitTest() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command result \u003d CommandManager.manageCommand(\"bye\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(result instanceof ExitCommand, \"The command type should be ExitCommand\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    void commandAddPatientTest() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command result \u003d CommandManager.manageCommand(\"add patient :name :nric :room :remark\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(result instanceof AddPatientCommand, \"The command type should \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \"be AddPatientCommand\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    void commandAddTaskTest() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command result \u003d CommandManager.manageCommand(\"add task :description\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(result instanceof AddTaskCommand, \"The command type should \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \"be AddTaskCommand\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    void commandAssignPeriodTest() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command result \u003d CommandManager.manageCommand(\"assign period task \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \":#1 :#2 :07/11/2019 1200 :08/11/2019 1200\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(result instanceof AssignPeriodTaskCommand, \"The command type should \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \"be AssignPeriodTaskCommand\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    void commandListPatientsTest() throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command result \u003d CommandManager.manageCommand(\"list patients\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(result instanceof ListPatientsCommand, \"The command type should \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \"be ListPatientsCommand\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    void commandListTasksTest() throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command result \u003d CommandManager.manageCommand(\"list tasks\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(result instanceof ListTasksCommand, \"The command type should \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \"be ListTasksCommand\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    void commandDeleteAssignedTaskTest() throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command result \u003d CommandManager.manageCommand(\"delete assigned task :#3\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(result instanceof DeleteAssignedTaskCommand, \"The command type should \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \"be DeleteAssignedTaskCommand\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    void commandDeletePatientTest() throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command result \u003d CommandManager.manageCommand(\"delete patient :#1\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(result instanceof DeletePatientCommand, \"The command type should \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \"be DeletePatientCommand\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    void commandDeleteTaskTest() throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command result \u003d CommandManager.manageCommand(\"delete task :#2\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(result instanceof DeleteTaskCommand, \"The command type should \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \"be DeleteTaskCommand\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    void commandFindPatientTest() throws DukeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command result \u003d CommandManager.manageCommand(\"find patient :Sarah\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(result instanceof FindPatientCommand, \"The command type should \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \"be FindPatientCommand\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    void commandFindTaskTest() throws DukeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command result \u003d CommandManager.manageCommand(\"find task :Take medicine\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(result instanceof FindTaskCommand, \"The command type should \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \"be FindTaskCommand\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    void commandFindAssignedTasksTest() throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command result \u003d CommandManager.manageCommand(\"find assigned tasks :#2\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(result instanceof FindAssignedTaskCommand, \"The command type should \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \"be FindAssignedTasksCommand\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    void commandUpdatePatientTest() throws DukeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command result \u003d CommandManager.manageCommand(\"update patient :room :12A\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(result instanceof UpdatePatientCommand, \"The command type should \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \"be UpdatePatientCommand\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    void commandUpdateTaskTest() throws DukeException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command result \u003d CommandManager.manageCommand(\"update task :description :new info\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(result instanceof UpdateTaskCommand, \"The command type should \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \"be UpdateTaskCommand\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    void commandShowUpcomingTasksTest() throws DukeException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command result \u003d CommandManager.manageCommand(\"show upcoming tasks\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(result instanceof UpcomingTasksCommand, \"The command type should \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \"be UpcomingTasksCommand\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    void commandDukeTest() throws DukeException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command result \u003d CommandManager.manageCommand(\"duke\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(result instanceof DukeCommand, \"The command type should \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \"be DukeCommand\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    void commandUndoTest() throws DukeException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command result \u003d CommandManager.manageCommand(\"undo\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(result instanceof UndoCommand, \"The command type should \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \"be UndoCommand\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    void commandHelpTest() throws DukeException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command result \u003d CommandManager.manageCommand(\"help\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(result instanceof HelpCommand, \"The command type should \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \"be HelpCommand\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 163
    }
  },
  {
    "path": "src/test/java/duke/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "//@@author lmtaek"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.commands.functional.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void showHelpCommands() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        ArrayList\u003cString\u003e testHelpCommands \u003d new HelpCommand().getHelpCommands();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(testHelpCommands.size() \u003e 0, \"HelpCommand\u0027s help commands\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + \"could not be accessed.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 20
    }
  },
  {
    "path": "src/test/java/duke/models/assignedtasks/AssignedTaskManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "//@@author WEIFENG-NUSCEG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.models.assignedtasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class AssignedTaskManagerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void getAssignedTaskTest() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cAssignedTask\u003e assignedTasksTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask1 \u003d new AssignedTaskWithPeriod(4,8,false,false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"22/10/2014 1200\",\"06/01/2019 1200\",\"period\",1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask7 \u003d new AssignedTaskWithDate(7,11,false,false,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"07/12/2011 1200\",\"deadline\",2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask7);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTaskManager assignedTaskManagerTest \u003d new AssignedTaskManager(assignedTasksTest);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertEquals(assignedTaskManagerTest.getAssignTasks(),assignedTasksTest);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void addPatientTaskTest() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cAssignedTask\u003e assignedTasksTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask1 \u003d new AssignedTaskWithPeriod(4,8,false,false,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"22/10/2014 1200\",\"06/01/2019 1200\",\"period\",1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask7 \u003d new AssignedTaskWithDate(6,11,false,false,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"07/12/2011 1200\",\"deadline\",2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask7);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTaskManager assignedTaskManagerTest \u003d new AssignedTaskManager(assignedTasksTest);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask2 \u003d new AssignedTaskWithPeriod(42,3,false,false,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"11/11/2013 1200\",\"06/08/2019 1200\",\"period\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTaskManagerTest.addPatientTask(assignedTask2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask100 \u003d new AssignedTaskWithPeriod(42,3,false,false,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"11/11/2013 1200\",\"06/08/2019 1200\",\"period\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTaskManagerTest.addPatientTask(assignedTask100);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertEquals(assignedTaskManagerTest.getAssignTasks().size(), 4);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void deletePatientTaskByUniqueIdTest() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cAssignedTask\u003e assignedTasksTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask2 \u003d new AssignedTaskWithPeriod(42,3,false,false,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"11/11/2013 1200\",\"06/08/2019 1200\",\"period\",1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask3 \u003d new AssignedTaskWithPeriod(7,100,false,false,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"06/11/2011 1200\",\"11/11/2019 1200\",\"period\",2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask3);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTaskManager assignedTaskManagerTest \u003d new AssignedTaskManager(assignedTasksTest);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTaskManagerTest.deletePatientTaskByUniqueId(1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertTrue(assignedTaskManagerTest.getAssignTasks().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void deleteAssignedTaskByTaskIdTest() throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cAssignedTask\u003e assignedTasksTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask2 \u003d new AssignedTaskWithPeriod(42,3,false,false,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"11/11/2013 1200\",\"06/08/2019 1200\",\"period\",1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask3 \u003d new AssignedTaskWithPeriod(7,100,false,false,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"06/11/2011 1200\",\"11/11/2019 1200\",\"period\",2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTaskManager assignedTaskManagerTest \u003d new AssignedTaskManager(assignedTasksTest);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTaskManagerTest.deleteAllAssignedTaskByTaskId(3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertTrue(assignedTaskManagerTest.getAssignTasks().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void deleteAllAssignedTaskByTaskIdTest() throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cAssignedTask\u003e assignedTasksTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask2 \u003d new AssignedTaskWithPeriod(42,3,false,false,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"11/11/2013 1200\",\"06/08/2019 1200\",\"period\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask3 \u003d new AssignedTaskWithPeriod(7,3,false,false,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"06/11/2011 1200\",\"11/11/2019 1200\",\"period\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask3);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTaskManager assignedTaskManagerTest \u003d new AssignedTaskManager(assignedTasksTest);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTaskManagerTest.deleteAllAssignedTaskByTaskId(3);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertTrue(assignedTaskManagerTest.getAssignTasks().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void doesPatientIdExistTest() throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cAssignedTask\u003e assignedTasksTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask2 \u003d new AssignedTaskWithPeriod(42,3,false,false,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"11/11/2013 1200\",\"06/08/2019 1200\",\"period\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask3 \u003d new AssignedTaskWithPeriod(7,3,false,false,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"06/11/2011 1200\",\"11/11/2019 1200\",\"period\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask3);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTaskManager assignedTaskManagerTest \u003d new AssignedTaskManager(assignedTasksTest);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertFalse(assignedTaskManagerTest.doesPatientIdExist(8));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertTrue(assignedTaskManagerTest.doesPatientIdExist(7));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void doesUidExistTest() throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cAssignedTask\u003e assignedTasksTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask2 \u003d new AssignedTaskWithPeriod(42,3,false,false,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"11/11/2013 1200\",\"06/08/2019 1200\",\"period\",3);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask3 \u003d new AssignedTaskWithPeriod(7,3,false,false,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"06/11/2011 1200\",\"11/11/2019 1200\",\"period\",1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask3);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTaskManager assignedTaskManagerTest \u003d new AssignedTaskManager(assignedTasksTest);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertFalse(assignedTaskManagerTest.doesUidExist(8));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertTrue(assignedTaskManagerTest.doesUidExist(1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void isSameStartEndTimeExistTest() throws DukeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cAssignedTask\u003e assignedTasksTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask2 \u003d new AssignedTaskWithPeriod(42,3,false,false,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"11/11/2013 1200\",\"06/08/2019 1200\",\"period\",1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask3 \u003d new AssignedTaskWithPeriod(7,3,false,false,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"06/11/2011 1200\",\"11/11/2019 1200\",\"period\",2);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask100 \u003d new AssignedTaskWithPeriod(42,3,false,false,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"11/11/2013 1200\",\"06/08/2019 1200\",\"period\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask3);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask4 \u003d new AssignedTaskWithPeriod(7,11,false,false,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"05/12/2011 1200\",\"06/03/2019 1200\",\"period\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTaskManager assignedTaskManagerTest \u003d new AssignedTaskManager(assignedTasksTest);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertTrue(assignedTaskManagerTest.isSameStartEndTimeExist(assignedTask100));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertFalse(assignedTaskManagerTest.isSameStartEndTimeExist(assignedTask4));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void isSameDeadlineExistTest() throws DukeException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cAssignedTask\u003e assignedTasksTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask2 \u003d new AssignedTaskWithPeriod(42,3,false,false,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"11/11/2013 1200\",\"06/08/2019 1200\",\"period\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask3 \u003d new AssignedTaskWithPeriod(7,3,false,false,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"06/11/2011 1200\",\"11/11/2019 1200\",\"period\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask5 \u003d new AssignedTaskWithDate(7,11,false,false,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"05/02/2011 1200\",\"deadline\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask2);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask3);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask5);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask6 \u003d new AssignedTaskWithDate(7,11,false,false,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"05/02/2011 1200\",\"deadline\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask7 \u003d new AssignedTaskWithDate(7,11,false,false,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"05/12/2011 1100\",\"deadline\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTaskManager assignedTaskManagerTest \u003d new AssignedTaskManager(assignedTasksTest);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertTrue(assignedTaskManagerTest.isSameDeadlineExist(assignedTask6));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertFalse(assignedTaskManagerTest.isSameStartEndTimeExist(assignedTask7));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void deleteAssignedTaskBelongToThePatientFromUniqueIdMapTest() throws DukeException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cAssignedTask\u003e assignedTasksTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask2 \u003d new AssignedTaskWithPeriod(42,3,false,false,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"11/11/2013 1200\",\"06/08/2019 1200\",\"period\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask3 \u003d new AssignedTaskWithPeriod(7,3,false,false,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"06/11/2011 1200\",\"11/11/2019 1200\",\"period\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask2);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask3);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTaskManager assignedTaskManagerTest \u003d new AssignedTaskManager(assignedTasksTest);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTaskManagerTest.deleteAssignedTaskBelongToThePatientFromUniqueIdMap(42);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertTrue(assignedTaskManagerTest.getAssignTasks().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void deleteAllTasksBelongToThePatientTest() throws DukeException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cAssignedTask\u003e assignedTasksTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask2 \u003d new AssignedTaskWithPeriod(42,3,false,false,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"11/11/2013 1200\",\"06/08/2019 1200\",\"period\",1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask3 \u003d new AssignedTaskWithPeriod(7,3,false,false,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"06/11/2011 1200\",\"11/11/2019 1200\",\"period\",2);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask4 \u003d new AssignedTaskWithPeriod(42,3,false,false,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"11/11/2013 1200\",\"06/08/2019 1200\",\"period\",3);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask2);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask3);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask4);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTaskManager assignedTaskManagerTest \u003d new AssignedTaskManager(assignedTasksTest);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTaskManagerTest.deleteAllTasksBelongToThePatient(42);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertTrue(assignedTaskManagerTest.getAssignTasks().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void getPatientTaskTest() throws DukeException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cAssignedTask\u003e assignedTasksTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask2 \u003d new AssignedTaskWithPeriod(42,3,false,false,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"11/11/2013 1200\",\"06/08/2019 1200\",\"period\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask3 \u003d new AssignedTaskWithPeriod(7,3,false,false,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"06/11/2011 1200\",\"11/11/2019 1200\",\"period\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask4 \u003d new AssignedTaskWithPeriod(42,3,false,false,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"11/11/2013 1200\",\"06/08/2019 1200\",\"period\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask2);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask3);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask4);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTaskManager assignedTaskManagerTest \u003d new AssignedTaskManager(assignedTasksTest);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertTrue(assignedTaskManagerTest.getPatientTask(42).size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void getTaskPatientTest() throws DukeException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cAssignedTask\u003e assignedTasksTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask2 \u003d new AssignedTaskWithPeriod(42,3,false,false,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"11/11/2013 1200\",\"06/08/2019 1200\",\"period\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask3 \u003d new AssignedTaskWithPeriod(7,3,false,false,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"06/11/2011 1200\",\"11/11/2019 1200\",\"period\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask4 \u003d new AssignedTaskWithPeriod(42,3,false,false,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"11/11/2013 1200\",\"06/08/2019 1200\",\"period\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask2);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask3);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask4);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTaskManager assignedTaskManagerTest \u003d new AssignedTaskManager(assignedTasksTest);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertTrue(assignedTaskManagerTest.getTaskPatient(3).size() \u003d\u003d 3);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 219
    }
  },
  {
    "path": "src/test/java/duke/models/counter/CounterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "//@@author qjie7"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package duke.models.counter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.commands.CommandManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * Junit test for Counter class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * @author Qian Jie"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class CounterTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void runCounterLogic_CommandType_CommandTable() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final Command c1 \u003d CommandManager.manageCommand(\"add patient :name :NRIC :room :remark\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final Command c2 \u003d CommandManager.manageCommand(\"add task :Walk the dog\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final Command c3 \u003d CommandManager.manageCommand(\"assign deadline task :patient name :#2 :02/02/2002 2222\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final Command c4 \u003d CommandManager.manageCommand(\"assign period task :#2 :#1 :01/02/2003 1234 :06/05/2004 2312\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final Command c5 \u003d CommandManager.manageCommand(\"list patients\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final Command c6 \u003d CommandManager.manageCommand(\"list tasks\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final Command c7 \u003d CommandManager.manageCommand(\"delete assigned task :#2 :#5\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final Command c8 \u003d CommandManager.manageCommand(\"delete patient :#123\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final Command c9 \u003d CommandManager.manageCommand(\"delete task :#10\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final Command c10 \u003d CommandManager.manageCommand(\"find patient :name\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final Command c11 \u003d CommandManager.manageCommand(\"find task :Walk the dog\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final Command c13 \u003d CommandManager.manageCommand(\"update patient :name :field :new data\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        final Command c14 \u003d CommandManager.manageCommand(\"update task :task name :new description\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(c1.getClass().getSimpleName(), \"AddPatientCommand\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(c2.getClass().getSimpleName(), \"AddTaskCommand\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(c3.getClass().getSimpleName(), \"AssignDeadlineTaskCommand\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(c4.getClass().getSimpleName(), \"AssignPeriodTaskCommand\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(c5.getClass().getSimpleName(), \"ListPatientsCommand\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(c6.getClass().getSimpleName(), \"ListTasksCommand\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(c7.getClass().getSimpleName(), \"DeleteAssignedTaskCommand\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(c8.getClass().getSimpleName(), \"DeletePatientCommand\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(c9.getClass().getSimpleName(), \"DeleteTaskCommand\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(c10.getClass().getSimpleName(), \"FindPatientCommand\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(c11.getClass().getSimpleName(), \"FindTaskCommand\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(c13.getClass().getSimpleName(), \"UpdatePatientCommand\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(c14.getClass().getSimpleName(), \"UpdateTaskCommand\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Map\u003cString, Integer\u003e commandTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String[] commandName \u003d {\"AddPatientCommand\", \"AddTaskCommand\", \"AssignDeadlineTaskCommand\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                                \"AssignPeriodTaskCommand\", \"ListPatientsCommand\", \"ListTasksCommand\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                                \"DeleteAssignedTaskCommand\", \"DeletePatientCommand\", \"DeleteTaskCommand\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                                \"FindPatientCommand\", \"FindTaskCommand\", \"UpdatePatientCommand\", \"UpdateTaskCommand\"};"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        for (int i \u003d 0; i \u003c 13; i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            int count \u003d commandTable.containsKey(commandName[i])"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                    ? commandTable.get(commandName[i]) : 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            commandTable.put(commandName[i], count + 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        for (int value : commandTable.values()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            assertEquals(value, 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        assertEquals(commandTable.size(), 13);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 78
    }
  },
  {
    "path": "src/test/java/duke/models/patients/PatientManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "//@@author kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "package duke.models.patients;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "public class PatientManagerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void doesExistTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cPatient\u003e testPatientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient1 \u003d new Patient(1,\"Lisa\",\"S1234567T\",\"12A\",\"Nil\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testPatientList.add(patient1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient2 \u003d new Patient(2,\"Helen\",\"S2234567I\",\"3B\",\"Nil\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testPatientList.add(patient2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        PatientManager patientManager \u003d new PatientManager(testPatientList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertTrue(patientManager.doesExist(1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertTrue(patientManager.doesExist(2));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertFalse(patientManager.doesExist(3));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertFalse(patientManager.doesExist(4));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void getPatientTest() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cPatient\u003e testPatientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient1 \u003d new Patient(1,\"Lisa\",\"S1234567T\",\"12A\",\"Nil\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testPatientList.add(patient1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient2 \u003d new Patient(2,\"Helen\",\"S2234567I\",\"3B\",\"Nil\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testPatientList.add(patient2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        PatientManager patientManager \u003d new PatientManager(testPatientList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(patientManager.getPatient(1),patient1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(patientManager.getPatient(2),patient2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientManager.getPatient(3);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! The patient with id 3 does not exist.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void getPatientByNameTest() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cPatient\u003e testPatientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient1 \u003d new Patient(1,\"Lisa Chew\",\"S1234567T\",\"12A\",\"Nil\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testPatientList.add(patient1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient2 \u003d new Patient(2,\"Helen Teo\",\"S2234567I\",\"3B\",\"Nil\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testPatientList.add(patient2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient3 \u003d new Patient(3,\"Helen Kok\",\"S2434597A\",\"5D\",\"Nil\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testPatientList.add(patient3);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient4 \u003d new Patient(4,\"\",\"S2534569I\",\"6C\",\"Nil\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testPatientList.add(patient4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        PatientManager patientManager \u003d new PatientManager(testPatientList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cPatient\u003e expectedPatientList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        expectedPatientList1.add(patient1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(patientManager.getPatientByName(\"Lisa\"),expectedPatientList1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cPatient\u003e expectedPatientList2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        expectedPatientList2.add(patient2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        expectedPatientList2.add(patient3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(patientManager.getPatientByName(\"Helen\"),expectedPatientList2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(patientManager.getPatientByName(\"Anni\"),new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void nameIsValidTest() throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        PatientManager patientManager \u003d new PatientManager(new ArrayList\u003cPatient\u003e());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientManager.nameIsValid(\",,\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! The patient\u0027s name cannot contain any special characters.\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientManager.nameIsValid(\"123\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! The patient\u0027s name must have at least 3 alphabets.\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void nricIsValidTest() throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cPatient\u003e testPatientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient1 \u003d new Patient(1,\"Lisa Chew\",\"S1234567T\",\"12A\",\"Nil\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        PatientManager patientManager \u003d new PatientManager(testPatientList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientManager.nricIsValid(\"S1234567T\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! The NRIC is existed.\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientManager.nricIsValid(\"A1234567*\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! The patient\u0027s NRIC cannot contain any special characters.\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientManager.nricIsValid(\"A1234567T\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! The first letter of NRIC can only be S, T, F or G.\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientManager.nricIsValid(\"S12345677I\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! NRIC must contain exactly 9 characters.\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientManager.nricIsValid(\"S123A568I\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! The NRIC can only be numerical except the first and last character.\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientManager.nricIsValid(\"S123A5686\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! The last character of NRIC can only be alphabet.\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void roomIsValidTest() throws DukeException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        PatientManager patientManager \u003d new PatientManager(new ArrayList\u003cPatient\u003e());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientManager.roomIsValid(\"\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! The patient\u0027s Room No. cannot be empty.\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientManager.roomIsValid(\"12A\u0026\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! The patient\u0027s Room No. cannot contain any special characters.\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void addPatientTest() throws DukeException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cPatient\u003e testPatientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient1 \u003d new Patient(\"Lisa Chew\",\"S1234567T\",\"12A\",\"Nil\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testPatientList.add(patient1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient2 \u003d new Patient(\"Helen Teo\",\"S2234567I\",\"3B\",\"Nil\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testPatientList.add(patient2);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient3 \u003d new Patient(\"Anni\",\"S2534569I\",\"6C\",\"Nil\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testPatientList.add(patient3);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        PatientManager patientManager \u003d new PatientManager(new ArrayList\u003cPatient\u003e());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        patientManager.addPatient(patient1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        patientManager.addPatient(patient2);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        patientManager.addPatient(patient3);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(patientManager.getPatientList().size(), 3);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient4 \u003d new Patient(\"Anni*\",\"S2534569I\",\"6C\",\"Nil\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientManager.addPatient(patient4);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! The patient\u0027s name cannot contain any special characters.\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient5 \u003d new Patient(\"Anni\",\"S2534569I\",\"\",\"Nil\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientManager.addPatient(patient5);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! The patient\u0027s Room No. cannot be empty.\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient6 \u003d new Patient(\"Anni\",\"\",\"32C\",\"Nil\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientManager.addPatient(patient6);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! NRIC must contain exactly 9 characters.\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void getPatientListTest() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cPatient\u003e testPatientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient1 \u003d new Patient(1,\"Lisa Chew\",\"S1234567T\",\"12A\",\"Nil\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testPatientList.add(patient1);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient2 \u003d new Patient(2,\"Helen Teo\",\"S2234567I\",\"3B\",\"Nil\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testPatientList.add(patient2);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        PatientManager patientManager \u003d new PatientManager(testPatientList);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(patientManager.getPatientList(),testPatientList);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void deletePatientTest() throws DukeException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cPatient\u003e testPatientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient1 \u003d new Patient(1,\"Lisa Chew\",\"S1234567T\",\"12A\",\"Nil\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testPatientList.add(patient1);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Patient patient2 \u003d new Patient(2,\"Helen Teo\",\"S2234567I\",\"3B\",\"Nil\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testPatientList.add(patient2);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        PatientManager patientManager \u003d new PatientManager(testPatientList);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        patientManager.deletePatient(1);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(patientManager.getPatientList().size(), 1);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            patientManager.deletePatient(3);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! The patient with id 3 does not exist.\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 231
    }
  },
  {
    "path": "src/test/java/duke/models/tasks/TaskManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "//@@author kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "package duke.models.tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "public class TaskManagerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void getTaskByDescriptionTest() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cTask\u003e testTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task1 \u003d new Task(1,\"Take medicine Panadol\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testTaskList.add(task1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task2 \u003d new Task(2,\"Do injection\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testTaskList.add(task2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task3 \u003d new Task(3,\"Meeting with doctor\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testTaskList.add(task3);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task4 \u003d new Task(4,\"Take medicine Decolgen\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testTaskList.add(task4);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager(testTaskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cTask\u003e actualTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        actualTaskList.add(task2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(taskManager.getTaskByDescription(\"injection\"),actualTaskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        actualTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        actualTaskList.add(task1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        actualTaskList.add(task4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(taskManager.getTaskByDescription(\"Take medicine\"),actualTaskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        actualTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(taskManager.getTaskByDescription(\"Help with operation\"),actualTaskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void addTaskTest() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cTask\u003e testTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task1 \u003d new Task(0,\"Do mammogram\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        taskManager.addTask(task1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task2 \u003d new Task(0,\"Do blood test\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        taskManager.addTask(task2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(taskManager.getTaskList().size(),2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(taskManager.getTask(1).getDescription(),task1.getDescription());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(taskManager.getTask(2).getDescription(),task2.getDescription());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task3 \u003d new Task(0,\"abc\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            taskManager.addTask(task3);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! The task description is too short.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task4 \u003d new Task(0,\"Do blood test\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            taskManager.addTask(task4);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! The task \u0027Do blood test\u0027 already existed.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void deleteTaskTest() throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cTask\u003e testTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task1 \u003d new Task(1,\"Take medicine Panadol\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testTaskList.add(task1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task2 \u003d new Task(2,\"Do injection\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testTaskList.add(task2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task3 \u003d new Task(3,\"Meeting with doctor\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testTaskList.add(task3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task4 \u003d new Task(4,\"Take medicine Decolgen\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testTaskList.add(task4);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager(testTaskList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        taskManager.deleteTask(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(taskManager.getTaskList().size(), 3);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        taskManager.deleteTask(2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(taskManager.getTaskList().size(),2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            taskManager.deleteTask(5);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! The task with id 5 does not exist.\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void doesExistTest() throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cTask\u003e testTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task1 \u003d new Task(1,\"Take medicine Panadol\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testTaskList.add(task1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task2 \u003d new Task(2,\"Do injection\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testTaskList.add(task2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager(testTaskList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertTrue(taskManager.doesExist(1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertTrue(taskManager.doesExist(2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertFalse(taskManager.doesExist(3));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertFalse(taskManager.doesExist(4));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void getTaskTest() throws DukeException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cTask\u003e testTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task1 \u003d new Task(1,\"Take medicine Panadol\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testTaskList.add(task1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task2 \u003d new Task(2,\"Do injection\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testTaskList.add(task2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager(testTaskList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(taskManager.getTask(1),task1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(taskManager.getTask(2),task2);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            taskManager.getTask(3);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String expectedMessage \u003d \"Oops! The task with id 3 does not exist.\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void getTaskListTest() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ArrayList\u003cTask\u003e testTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task1 \u003d new Task(1,\"Take medicine Panadol\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testTaskList.add(task1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task2 \u003d new Task(2,\"Do injection\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testTaskList.add(task2);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task3 \u003d new Task(3,\"Meeting with doctor\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        testTaskList.add(task3);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task4 \u003d new Task(4,\"Take medicine Decolgen\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager(testTaskList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(taskManager.getTaskList(),testTaskList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 147
    }
  },
  {
    "path": "src/test/java/duke/storages/StorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.storages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.assignedtasks.AssignedTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.patients.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.models.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Junit test for Storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * @author HUANGXUANKUN"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private Path resourceDirectory \u003d Paths.get(\"src\",\"test\",\"testdata\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String testDataPath \u003d resourceDirectory.toFile().getAbsolutePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private StorageManager storageManager \u003d new StorageManager(testDataPath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    void readPatientsTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cPatient\u003e patients;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            patients \u003d storageManager.loadPatients();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(3, patients.size(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \"3 patients are expected to be loaded, instead of \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + patients.size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            Patient firstPatient \u003d patients.get(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(1, firstPatient.getId(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \"Id is expected to be 1 instead of \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + firstPatient.getId());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(\"John Doe\", firstPatient.getName(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \"Name is expected to be \u0027John Doe\u0027 instead of \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + firstPatient.getName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(\"G00012345L\", firstPatient.getNric(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \"NRIC is expected to be \u0027G00012345L\u0027 instead of \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + firstPatient.getNric());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(\"3A-1\", firstPatient.getRoom(), \"Room is expected to be \u00273A-1\u0027 instead of \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + firstPatient.getRoom());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(\"Hasn\u0027t had an appetite for past 2 days\", firstPatient.getRemark(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \"Remark is expected to be \u0027Hasn\u0027t had an appetite for past 2 days\u0027 instead of \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + firstPatient.getRemark());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            fail(\"Loading patient from patients.csv fails\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    void readTasksTest() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d storageManager.loadTasks();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            Task firstTask \u003d tasks.get(0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(3, tasks.size(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \"3 tasks are expected to be loaded, instead of \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + tasks.size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(1, firstTask.getId(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \"Id is expected to be 1 instead of \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + firstTask.getId());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(\"Take Medicine A\", firstTask.getDescription(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \"Description is expected to be \u0027Take Medicine A\u0027 instead of \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + firstTask.getDescription());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            fail(\"Loading task from tasks.csv fails\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    void readAssignedTasksTest() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            ArrayList\u003cAssignedTask\u003e assignedTasks \u003d storageManager.loadAssignedTasks();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            AssignedTask firstAssignedTask \u003d assignedTasks.get(0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(1, assignedTasks.size(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \"One assigned task is expected to be loaded, instead of \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + assignedTasks.size());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(1, firstAssignedTask.getPid());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(1, firstAssignedTask.getTid());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertFalse(firstAssignedTask.getIsDone());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertFalse(firstAssignedTask.getIsRecursive());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(\"null\", firstAssignedTask.getTodoDateRaw());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(\"01/11/2019 1600\", firstAssignedTask.getStartDateRaw());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(\"02/11/2019 1600\", firstAssignedTask.getEndDateRaw());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(\"period\", firstAssignedTask.getType());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(15, firstAssignedTask.getUuid());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            fail(\"Loading task from assignedTasks.csv fails\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    void readCounterTest() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            Map\u003cString, Integer\u003e commandFrequency \u003d storageManager.loadCommandFrequency();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(5, commandFrequency.size(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \"5 command-frequency records is expected, instead of \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + commandFrequency.size());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            Map.Entry\u003cString,Integer\u003e entry \u003d commandFrequency.entrySet().iterator().next();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String firstKey \u003d entry.getKey();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            int firstValue \u003d entry.getValue();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(\"DeleteTaskCommand\", firstKey);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(8, firstValue);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            fail(\"Loading task from counter.csv fails\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 118
    }
  },
  {
    "path": "src/test/java/duke/util/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "//@@author lmtaek"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String patientDummyInput \u003d \"add patient :name :NRIC :room :remark\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String taskDummyInput \u003d \"add task :Walk the dog\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String assignPatientToDeadlineTask \u003d \"assign deadline task :patient name :#2 :02/02/2002 2222\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String assignPatientToPeriodTask \u003d \"assign period task :#2 :#1 :01/02/2003 1234 :06/05/2004 2312\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String deletePatientInputWithID \u003d \"delete patient :#123\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String deletePatientInputWithName \u003d \"delete patient :billy joe\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String deleteTaskInputWithID \u003d \"delete task :#10\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String deleteTaskInputWithName \u003d \"delete task :Take medicine\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String deleteAssignedTaskInputWithUniqueID \u003d \"delete assigned task :#3\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String updatePatientInput \u003d \"update patient :name :field :new data\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String updateTaskInput \u003d \"update task :task name :new description\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String findPatientInputWithName \u003d \"find patient :name\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String findPatientInputWithID \u003d \"find patient :#200\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String findAssignedTasksInput \u003d \"find patient tasks :jane doe\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseAddPatientTest() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParser \u003d new Parser(patientDummyInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] desiredOutput \u003d {\"name\", \"NRIC\", \"room\", \"remark\"};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] testOutput \u003d testParser.parseUserInput();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredOutput.length \u003d\u003d testOutput.length);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c desiredOutput.length; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            assertTrue(desiredOutput[i].equals(testOutput[i]), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + desiredOutput[i] + \" but got: \" + testOutput[i]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseAddTask() throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParser \u003d new Parser(taskDummyInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String testOutput \u003d testParser.parseUserInput()[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(testOutput.equals(\"Walk the dog\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                \"Task description did not parse correctly. Expected \u0027Walk the dog\u0027 but got: \" + testOutput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseAssignDeadlineAndPeriodTasks() throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserDeadline \u003d new Parser(assignPatientToDeadlineTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserPeriod \u003d new Parser(assignPatientToPeriodTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        final String[] testDeadlineOutput \u003d testParserDeadline.parseUserInput();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        final String[] testPeriodOutput \u003d testParserPeriod.parseUserInput();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] desiredDeadlineOutput \u003d {\"patient name\", \"#2\", \"02/02/2002 2222\"};"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] desiredPeriodOutput \u003d {\"#2\", \"#1\", \"01/02/2003 1234\", \"06/05/2004 2312\"};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredDeadlineOutput.length \u003d\u003d testDeadlineOutput.length);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c desiredDeadlineOutput.length; i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            assertTrue(desiredDeadlineOutput[i].equals(testDeadlineOutput[i]), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + desiredDeadlineOutput[i] + \" but got: \" + testDeadlineOutput[i]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredPeriodOutput.length \u003d\u003d testPeriodOutput.length);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c desiredPeriodOutput.length; i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            assertTrue(desiredPeriodOutput[i].equals(testPeriodOutput[i]), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + desiredPeriodOutput[i] + \" but got: \" + testPeriodOutput[i]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseDeletePatient() throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserID \u003d new Parser(deletePatientInputWithID);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserName \u003d new Parser(deletePatientInputWithName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String testOutputID \u003d testParserID.parseUserInput()[0];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String testOutputName \u003d testParserName.parseUserInput()[0];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(testOutputID.charAt(0) \u003d\u003d \u0027#\u0027 \u0026\u0026 testOutputID.equals(\"#123\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                \"Delete patient by ID parsing failed. Expected \u0027#123\u0027 but got: \" + testOutputID);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(testOutputName.equals(\"billy joe\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                \"Delete patient by name parsing failed. Expected \u0027billy joe\u0027 but got: \" + testOutputName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseDeleteTask() throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserID \u003d new Parser(deleteTaskInputWithID);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserName \u003d new Parser(deleteTaskInputWithName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String testOutputID \u003d testParserID.parseUserInput()[0];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String testOutputName \u003d testParserName.parseUserInput()[0];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(testOutputID.charAt(0) \u003d\u003d \u0027#\u0027 \u0026\u0026 testOutputID.equals(\"#10\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                \"Delete task by ID parsing failed. Expected \u0027#10\u0027 but got: \" + testOutputID);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(testOutputName.equals(\"Take medicine\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                \"Delete task by name parsing failed. Expected \u0027Take medicine\u0027 but got: \" + testOutputName);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseDeleteAssignedTask() throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserUniqueID \u003d new Parser(deleteAssignedTaskInputWithUniqueID);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] testOutputUniqueID \u003d testParserUniqueID.parseUserInput();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] desiredOutputUniqueID \u003d {\"#3\"};"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredOutputUniqueID[0].equals(testOutputUniqueID[0]), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + desiredOutputUniqueID[0] + \" but got: \" + testOutputUniqueID[0]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseUpdatePatientTest() throws DukeException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParser \u003d new Parser(updatePatientInput);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] testOutput \u003d testParser.parseUserInput();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] desiredOutput \u003d {\"name\", \"field\", \"new data\"};"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredOutput.length \u003d\u003d testOutput.length);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c desiredOutput.length; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            assertTrue(desiredOutput[i].equals(testOutput[i]), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + desiredOutput[i] + \" but got: \" + testOutput[i]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseUpdateTaskTest() throws DukeException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParser \u003d new Parser(updateTaskInput);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] testOutput \u003d testParser.parseUserInput();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] desiredOutput \u003d {\"task name\", \"new description\"};"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredOutput.length \u003d\u003d testOutput.length);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c desiredOutput.length; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            assertTrue(desiredOutput[i].equals(testOutput[i]), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + desiredOutput[i] + \" but got: \" + testOutput[i]);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseFindPatientTest() throws DukeException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserID \u003d new Parser(findPatientInputWithID);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String testOutputID \u003d testParserID.parseUserInput()[0];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String desiredOutputID \u003d \"#200\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredOutputID.equals(testOutputID), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + desiredOutputID + \" but got: \" + testOutputID);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserName \u003d new Parser(findPatientInputWithName);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String testOutputName \u003d testParserName.parseUserInput()[0];"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String desiredOutputName \u003d \"name\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredOutputName.equals(testOutputName), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + desiredOutputName + \" but got: \" + testOutputName);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseFindAssignedTasksTest() throws DukeException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParser \u003d new Parser(findAssignedTasksInput);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String testOutput \u003d testParser.parseUserInput()[0];"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String desiredOutput \u003d \"jane doe\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredOutput.equals(testOutput), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + desiredOutput + \" but got: \" + testOutput);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 172
    }
  },
  {
    "path": "src/test/java/duke/util/TypoCorrectorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "//@@author HUANGXUANKUN"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Junit test for TypoCorrector class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * @author HUANG XUAN KUN"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class TypoCorrectorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    //ArrayList of pairs \u003ccommand, commandToBeCorrected\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final ArrayList\u003cString[]\u003e COMMANDS_TO_BE_CORRECTED \u003d new ArrayList\u003cString[]\u003e("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Arrays.asList("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            new String[]{\"by e\", \"bye\"},"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            new String[]{\"list patant\", \"list patients\"},"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            new String[]{\"DE lte Ptients:#12\", \"delete patient:#12\"},"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            new String[]{\"deleot tasksa :task description\", \"delete task:task description\"},"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            new String[]{\"delette   tasks:#1\", \"delete task:#1\"},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            new String[]{\"addd patents:name :nric :room :remark\", \"add patient:name :nric :room :remark\"},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            new String[]{\"addd task :abc\", \"add task:abc\"},"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            new String[]{\"asgn deadli task: #1 :12 :12/12/2019 1645\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \"assign deadline task: #1 :12 :12/12/2019 1645\"},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            new String[]{\"asSGn perio tk :#1 :12 :12/12/2019 1645 :12/12/2020 1645\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \"assign period task:#1 :12 :12/12/2019 1645 :12/12/2020 1645\"},"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            new String[]{\"fi n d p atin t: #1\", \"find patient: #1\"},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            new String[]{\"up date pait ent :#12:Room:2A\", \"update patient:#12:Room:2A\"}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String[] NOT_CORRECTED_COMMANDS \u003d {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        \"\", \" \", \"list patients\", \"an invalid command\", \"b yyy e\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Test commands which should be corrected."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    void commandCorrectionTest() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        for (String[] testPair : COMMANDS_TO_BE_CORRECTED) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            TypoCorrector typoCorrector \u003d new TypoCorrector(testPair[0]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertTrue(typoCorrector.isCommandCorrected(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \"The command \u003c \" + testPair[0] + \" \u003e should be corrected to \u003c \" + testPair[1] + \" \u003e\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String correctedOutput \u003d typoCorrector.getCorrectedCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(testPair[1], correctedOutput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            //System.out.println for debugging purposes in test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"Input Command:     \" + testPair[0]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"Expected Command:  \" + testPair[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"Corrected Command: \" + correctedOutput + \"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Test commands which should not be corrected."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Use test cases which contain unrecognised or valid command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    void unCorrectedCommandTest() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        for (String command : NOT_CORRECTED_COMMANDS) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            TypoCorrector typoCorrector \u003d new TypoCorrector(command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertFalse(typoCorrector.isCommandCorrected(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \"The command: \" + command + \" should not be corrected\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String correctedOutput \u003d typoCorrector.getCorrectedCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(command, correctedOutput);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            //System.out.println for debugging purposes in test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"Input Command:     \" + command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"Expected Command:  \" + command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"Corrected Command: \" + correctedOutput);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 81
    }
  },
  {
    "path": "src/test/java/duke/util/mementopattern/MementoManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "//@@author WEIFENG-NUSCEG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.util.mementopattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.assignedtasks.AssignedTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskWithDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.assignedtasks.AssignedTaskWithPeriod;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.patients.Patient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.patients.PatientManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.tasks.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.models.tasks.TaskManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class MementoManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void addTest() throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cAssignedTask\u003e assignedTasksTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask1 \u003d new AssignedTaskWithPeriod(4,8,false,false,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"22/10/2014 1200\",\"06/01/2019 1200\",\"period\",1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask7 \u003d new AssignedTaskWithDate(7,11,false,false,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"07/12/2011 1200\",\"deadline\",2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask7);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        final AssignedTaskManager assignedTaskManagerTest \u003d new AssignedTaskManager(assignedTasksTest);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cPatient\u003e testPatientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Patient patient1 \u003d new Patient(1,\"Lisa Chew\",\"S1234567T\",\"12A\",\"Nil\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        testPatientList.add(patient1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Patient patient2 \u003d new Patient(2,\"Helen Teo\",\"S2234567I\",\"3B\",\"Nil\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        testPatientList.add(patient2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        PatientManager patientManager \u003d new PatientManager(testPatientList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cTask\u003e testTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Task task1 \u003d new Task(1,\"Take medicine Panadol\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        testTaskList.add(task1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Task task2 \u003d new Task(2,\"Do injection\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        testTaskList.add(task2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Task task3 \u003d new Task(3,\"Meeting with doctor\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        testTaskList.add(task3);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Task task4 \u003d new Task(4,\"Take medicine Decolgen\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        testTaskList.add(task4);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager(testTaskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Memento mementoTest \u003d new Memento(taskManager, assignedTaskManagerTest, patientManager);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        MementoManager mementoManager \u003d new MementoManager();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        mementoManager.add(mementoTest);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertTrue(mementoManager.pop() \u003d\u003d mementoTest);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void popTest() throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cAssignedTask\u003e assignedTasksTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask1 \u003d new AssignedTaskWithPeriod(4,8,false,false,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"22/10/2014 1200\",\"06/01/2019 1200\",\"period\",1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask7 \u003d new AssignedTaskWithDate(7,11,false,false,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"07/12/2011 1200\",\"deadline\",2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask7);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        final AssignedTaskManager assignedTaskManagerTest \u003d new AssignedTaskManager(assignedTasksTest);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cPatient\u003e testPatientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Patient patient1 \u003d new Patient(1,\"Lisa Chew\",\"S1234567T\",\"12A\",\"Nil\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        testPatientList.add(patient1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Patient patient2 \u003d new Patient(2,\"Helen Teo\",\"S2234567I\",\"3B\",\"Nil\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        testPatientList.add(patient2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        PatientManager patientManager \u003d new PatientManager(testPatientList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cTask\u003e testTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Task task1 \u003d new Task(1,\"Take medicine Panadol\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        testTaskList.add(task1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Task task2 \u003d new Task(2,\"Do injection\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        testTaskList.add(task2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Task task3 \u003d new Task(3,\"Meeting with doctor\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        testTaskList.add(task3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Task task4 \u003d new Task(4,\"Take medicine Decolgen\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        testTaskList.add(task4);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager(testTaskList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Memento mementoTest \u003d new Memento(taskManager, assignedTaskManagerTest, patientManager);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        MementoManager mementoManager \u003d new MementoManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        mementoManager.add(mementoTest);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertTrue(mementoManager.pop() \u003d\u003d mementoTest);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void saveDukeStateToMementoTest() throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cAssignedTask\u003e assignedTasksTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask1 \u003d new AssignedTaskWithPeriod(4,8,false,false,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"22/10/2014 1200\",\"06/01/2019 1200\",\"period\",1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        AssignedTask assignedTask7 \u003d new AssignedTaskWithDate(7,11,false,false,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                \"07/12/2011 1200\",\"deadline\",2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assignedTasksTest.add(assignedTask7);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        final AssignedTaskManager assignedTaskManagerTest \u003d new AssignedTaskManager(assignedTasksTest);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cPatient\u003e testPatientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Patient patient1 \u003d new Patient(1,\"Lisa Chew\",\"S1234567T\",\"12A\",\"Nil\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        testPatientList.add(patient1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Patient patient2 \u003d new Patient(2,\"Helen Teo\",\"S2234567I\",\"3B\",\"Nil\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        testPatientList.add(patient2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        final PatientManager patientManager \u003d new PatientManager(testPatientList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cTask\u003e testTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Task task1 \u003d new Task(1,\"Take medicine Panadol\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        testTaskList.add(task1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Task task2 \u003d new Task(2,\"Do injection\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        testTaskList.add(task2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Task task3 \u003d new Task(3,\"Meeting with doctor\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        testTaskList.add(task3);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        Task task4 \u003d new Task(4,\"Take medicine Decolgen\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        testTaskList.add(task4);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        TaskManager taskManager \u003d new TaskManager(testTaskList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        MementoManager mementoManager \u003d new MementoManager();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        assertNotNull(mementoManager.saveDukeStateToMemento(taskManager, assignedTaskManagerTest,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                patientManager).getPatientState());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 124
    }
  }
]
