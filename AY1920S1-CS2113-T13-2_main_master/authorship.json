[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"mid\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"v1.1\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    compile \"org.apache.commons:commons-csv:1.7\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    compile group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002723.5-jre\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"duke/Duke\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 1,
      "-": 41,
      "HUANGXUANKUN": 1
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.core.CommandManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.PatientStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storage.PatientTaskStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents Duke, a Personal Assistant to help"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * users tracking their progress."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Storage object that handles reading tasks from a local"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * file and saving them to the same file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private TaskStorage taskStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private PatientStorage patientStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private PatientTaskStorage patientTaskStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A TaskList object that deals with add, delete, mark as done,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * find functions of a list of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private PatientTaskList patientTaskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private TaskManager taskManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private PatientManager patientManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Ui object that deals with interactions with the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private Ui ui \u003d Ui.getUi();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a Duke object with a relative file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialize the user interface and reads tasks from the specific text file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath A string that represents the path of the local file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *          used for storing tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        taskStorage \u003d new TaskStorage(filePath + \"/standardTasks.csv\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientStorage \u003d new PatientStorage(filePath + \"/patients.csv\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        patientTaskStorage \u003d new PatientTaskStorage(filePath + \"/patientsTasks.csv\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            patientTaskList \u003d new PatientTaskList(patientTaskStorage.load());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            taskManager \u003d new TaskManager(taskStorage.load());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            patientManager \u003d new PatientManager(patientStorage.load());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs the Duke program."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads user input until a \"bye\" message is received."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                Command c \u003d CommandManager.manageCommand(fullCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                c.execute(patientTaskList,taskManager,patientManager, ui, patientTaskStorage, taskStorage, patientStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Starts the Duke thread and Reminder thread concurrently"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * by passing a filepath to duke and a global ui object\u0026"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * task list to Reminder."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args The command line arguments."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        new Duke(\"./data\").run();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 8,
      "WEIFENG-NUSCEG": 9,
      "qjie7": 15,
      "-": 55,
      "HUANGXUANKUN": 7
    }
  },
  {
    "path": "src/main/java/duke/command/AddPatientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.PatientStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storage.PatientTaskStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class AddPatientCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private Patient newPatient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public AddPatientCommand(String[] patientInfo) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            this.newPatient \u003d new Patient(patientInfo[0], patientInfo[1], patientInfo[2], patientInfo[3]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(\"Please follow the format \u0027add patient \u003cname\u003e \u003cNRIC\u003e \u003cRoom\u003e \u003cremark\u003e\u0027. \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void execute(PatientTaskList patientTask, TaskManager tasks, PatientManager patientList, Ui ui, PatientTaskStorage patientTaskStorage, TaskStorage taskStorage, PatientStorage patientStorage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientList.addPatient(newPatient);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientStorage.save(patientList.getPatientList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui.patientAdded(newPatient);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 9,
      "WEIFENG-NUSCEG": 2,
      "qjie7": 2,
      "HUANGXUANKUN": 24
    }
  },
  {
    "path": "src/main/java/duke/command/AddStandardTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.PatientStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storage.PatientTaskStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddStandardTaskCommand extends Command{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private Task newStandardTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public AddStandardTaskCommand(String taskDescription) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.newStandardTask \u003d new Task(taskDescription);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void execute(PatientTaskList patientTask, TaskManager taskList, PatientManager patientList, Ui ui, PatientTaskStorage patientTaskStorage, TaskStorage taskStorage, PatientStorage patientStorage) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addTask(newStandardTask);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        taskStorage.save(taskList.getTaskList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        ui.taskAdded(newStandardTask);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 2,
      "WEIFENG-NUSCEG": 4,
      "qjie7": 3,
      "-": 22
    }
  },
  {
    "path": "src/main/java/duke/command/AssignTaskToPatientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.EventPatientTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.StandardPatientTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storage.PatientStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storage.PatientTaskStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class AssignTaskToPatientCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private PatientTask newPatientTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public AssignTaskToPatientCommand(String cmd) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.command \u003d cmd;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void execute(PatientTaskList patientTaskList, TaskManager tasksList, PatientManager patientList, Ui ui, PatientTaskStorage patientTaskStorage, TaskStorage taskStorage, PatientStorage patientStorage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.newPatientTask \u003d finalPatientTask(command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (patientList.isExist(newPatientTask.getPatientId()) \u0026\u0026 tasksList.doesExist(newPatientTask.getTaskID()))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            patientTaskList.addPatientTask(newPatientTask);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            patientTaskStorage.save(patientTaskList.fullPatientTaskList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            ui.patientTaskAssigned(newPatientTask, patientList.getPatient(newPatientTask.getPatientId()).getName(), tasksList.getTask(newPatientTask.getTaskID()).getDescription());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        else"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(\"Either the patient or the task does not exist in our data record\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public PatientTask finalPatientTask(String cmd) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        String[] tempCommand \u003d command.split(\"\\\\s+\",4 );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (tempCommand[0].equals(\"S\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            String type \u003d tempCommand[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            int patientId \u003d Integer.parseInt(tempCommand[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            int taskId \u003d Integer.parseInt(tempCommand[2]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            String deadline \u003d tempCommand[3];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            StandardPatientTask sPatientTask \u003d new StandardPatientTask(patientId, taskId, deadline, type);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return sPatientTask;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } else if (tempCommand[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            String type \u003d tempCommand[0];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            int patientId \u003d Integer.parseInt(tempCommand[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            int taskId \u003d Integer.parseInt(tempCommand[2]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            String sTime \u003d tempCommand[3].split(\" /to \", 2)[0];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            String eTime \u003d tempCommand[3].split(\" /to \", 2)[1];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            EventPatientTask ePatientTask \u003d new EventPatientTask(patientId, taskId, sTime, eTime, type);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return  ePatientTask;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(\"Parsing failed! Please ensure the format you have entered is correct!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 67
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.PatientStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storage.PatientTaskStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command class received from user. It is an abstract"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * class that can not be instantiated, its child class represents different kind"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * of user command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public abstract void execute(PatientTaskList patientTask, TaskManager tasks, PatientManager patientList, Ui ui, PatientTaskStorage patientTaskStorage, TaskStorage taskStorage, PatientStorage patientStorage) throws DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decide whether duke should exist."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *         otherwise."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 4,
      "qjie7": 2,
      "-": 20,
      "HUANGXUANKUN": 2
    }
  },
  {
    "path": "src/main/java/duke/command/DeletePatientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.PatientStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storage.PatientTaskStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class DeletePatientCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public DeletePatientCommand(String command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void execute(PatientTaskList patientTask, TaskManager tasks, PatientManager patientManager, Ui ui, PatientTaskStorage patientTaskStorage, TaskStorage taskStorage, PatientStorage patientStorage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        char firstChar \u003d command.charAt(0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (firstChar \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            int id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                id \u003d Integer.parseInt(command.substring(1, command.length()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }catch(Exception e){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                throw new DukeException(\"Please follow the format \u0027delete patient #\u003cid\u003e\u0027.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            Patient patientToBeDeleted \u003d patientManager.getPatient(id);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            boolean toDelete \u003d ui.confirmPatientToBeDeleted(patientToBeDeleted);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (toDelete){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                patientManager.deletePatient(id);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                ui.patientDeleted();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                patientStorage.save(patientManager.getPatientList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            ArrayList\u003cPatient\u003e patientsWithSameName \u003d patientManager.getPatientByName(command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            ui.patientsFoundByName(patientsWithSameName, command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (patientsWithSameName.size() \u003e\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                int numberChosen \u003d ui.choosePatientToDelete(patientsWithSameName.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                if (numberChosen \u003e\u003d 1){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    boolean toDelete \u003d ui.confirmPatientToBeDeleted(patientsWithSameName.get(numberChosen-1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    if (toDelete){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                        patientManager.deletePatient(patientsWithSameName.get(numberChosen-1).getID());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        ui.patientDeleted();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                        patientStorage.save(patientManager.getPatientList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 3,
      "qjie7": 8,
      "HUANGXUANKUN": 52
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.PatientStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storage.PatientTaskStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command to exit Duke. The command.ExitCommand class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * extends from the Command class for the user to quit the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * program"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a ExitCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Indicates whether Duke should exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *         otherwise."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * run the command with the respect TaskList, UI, and storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks   The task list where tasks are saved."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui      The user interface."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param  patientList object that handles local text file update"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void execute(PatientTaskList patientTask, TaskManager tasks, PatientManager patientList, Ui ui, PatientTaskStorage patientTaskStorage, TaskStorage taskStorage, PatientStorage patientStorage){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.exitInformation();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 4,
      "qjie7": 3,
      "-": 35,
      "HUANGXUANKUN": 4
    }
  },
  {
    "path": "src/main/java/duke/command/FindPatientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.PatientStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storage.PatientTaskStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class FindPatientCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public FindPatientCommand(String command){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void execute(PatientTaskList patientTask, TaskManager tasks, PatientManager patientManager, Ui ui, PatientTaskStorage patientTaskStorage, TaskStorage taskStorage, PatientStorage patientStorage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        char firstChar \u003d command.charAt(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (firstChar \u003d\u003d \u0027#\u0027){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            int id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                id \u003d Integer.parseInt(command.substring(1, command.length()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }catch(Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                throw new DukeException(\"Please follow the format \u0027find patient #\u003cid\u003e\u0027 or \u0027find patient \u003cname\u003e\u0027.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            Patient patient \u003d patientManager.getPatient(id);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            ui.patientsFoundById(patient);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            ArrayList\u003cPatient\u003e patientsWithSameName \u003d patientManager.getPatientByName(command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            ui.patientsFoundByName(patientsWithSameName, command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 3,
      "qjie7": 4,
      "HUANGXUANKUN": 37
    }
  },
  {
    "path": "src/main/java/duke/command/FindPatientTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.EventPatientTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.StandardPatientTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storage.PatientStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storage.PatientTaskStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.awt.*;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class FindPatientTaskCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public FindPatientTaskCommand(String cmd) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.command \u003d cmd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void execute(PatientTaskList patientTaskList, TaskManager tasksManager, PatientManager patientManager, Ui ui, PatientTaskStorage patientTaskStorage, TaskStorage taskStorage, PatientStorage patientStorage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        char firstChar \u003d command.charAt(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (firstChar \u003d\u003d \u0027#\u0027){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            int id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                id \u003d Integer.parseInt(command.substring(1, command.length()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                Patient patient \u003d patientManager.getPatient(id);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                ArrayList\u003cPatientTask\u003e patientTask \u003d patientTaskList.getPatientTask(id);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                ArrayList\u003cTask\u003e tempTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                for (PatientTask temppatientTask : patientTask){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    tempTask.add(tasksManager.getTask(temppatientTask.getTaskID()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                ui.patientTaskFound(patient, patientTask, tempTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }catch(Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(\"Please follow the format \u0027find patienttask #\u003cid\u003e\u0027 or \u0027find patient \u003cname\u003e\u0027.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            String name \u003d command.toLowerCase();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            ArrayList\u003cPatient\u003e patientsWithSameName \u003d patientManager.getPatientByName(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            ArrayList\u003cPatientTask\u003e patientWithTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            ArrayList\u003cTask\u003e tempTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                for (Patient patient : patientsWithSameName) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    if(patient.getName().toLowerCase().equals(name)){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                        patientWithTask \u003d patientTaskList.getPatientTask(patient.getID());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                for (PatientTask temppatientTask : patientWithTask){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    tempTask.add(tasksManager.getTask(temppatientTask.getTaskID()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    //System.out.println(temppatientTask.getTaskID() + \"\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                ui.patientTaskFound(patientsWithSameName.get(0), patientWithTask, tempTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }catch(Exception e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(e .getMessage() + \"Please follow the format \u0027find patienttask #\u003cid\u003e\u0027 or \u0027find patient \u003cname\u003e\u0027.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 76
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.PatientStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storage.PatientTaskStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void execute(PatientTaskList patientTask, TaskManager tasks, PatientManager patientList, Ui ui, PatientTaskStorage patientTaskStorage, TaskStorage taskStorage, PatientStorage patientStorage) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        //ui.showHelpCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 6,
      "qjie7": 16,
      "HUANGXUANKUN": 2
    }
  },
  {
    "path": "src/main/java/duke/command/ListPatientsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.PatientStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storage.PatientTaskStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class ListPatientsCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ListPatientsCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void execute(PatientTaskList patientTask, TaskManager tasks, PatientManager patientList, Ui ui, PatientTaskStorage patientTaskStorage, TaskStorage taskStorage, PatientStorage patientStorage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cPatient\u003e list \u003d patientList.getPatientList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui.listAllPatients(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 3,
      "qjie7": 2,
      "HUANGXUANKUN": 26
    }
  },
  {
    "path": "src/main/java/duke/command/ListTasksCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.storage.PatientStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storage.PatientTaskStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class ListTasksCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void execute(PatientTaskList patientTask, TaskManager tasks, PatientManager patientList, Ui ui, PatientTaskStorage patientTaskStorage, TaskStorage taskStorage, PatientStorage patientStorage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        ui.listAllTasks(list);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 21,
      "WEIFENG-NUSCEG": 3,
      "qjie7": 2
    }
  },
  {
    "path": "src/main/java/duke/command/UpdatePatientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.storage.PatientStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.storage.PatientTaskStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.storage.TaskStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class UpdatePatientCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private int Id;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private String targetInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private String updatedValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public UpdatePatientCommand(int Id , String targetInfo , String updatedValue) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.Id \u003d Id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.targetInfo \u003d targetInfo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.updatedValue \u003d updatedValue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void execute(PatientTaskList patientTask, TaskManager tasks, PatientManager patientManager, Ui ui, PatientTaskStorage patientTaskStorage, TaskStorage taskStorage, PatientStorage patientStorage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Patient targetPatient \u003d patientManager.getPatient(Id);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            if (targetInfo.equals(\"name\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                targetPatient.setName(updatedValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            } else if (targetInfo.equals(\"nric\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                targetPatient.setNric(updatedValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            } else if (targetInfo.equals(\"room\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                targetPatient.setRoom(updatedValue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                throw new DukeException(\"No such Patient information existed. Please Enter a valid Patient information\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            patientStorage.save(patientManager.getPatientList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            ui.showUpdateStatus(targetPatient , targetInfo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 3,
      "qjie7": 44
    }
  },
  {
    "path": "src/main/java/duke/core/CommandManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.EventPatientTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.StandardPatientTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * Represents a Parser that parses user input into a specific"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * type of Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class CommandManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Parses a Task from a string array."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param userInput The string array to be parsed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return The Command received from user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public static Command manageCommand(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        userInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String[] command \u003d userInput.split(\"\\\\s+\", 3);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String firstKeyword \u003d command[0].toLowerCase();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser parser \u003d new Parser(userInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        switch (firstKeyword) { //change this depending on how string is parsed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            case \"add\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    String secondKeyword \u003d command[1].toLowerCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    if (secondKeyword.equals(\"patient\")){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        String[] formattedInput \u003d parser.parseAdd();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        return new AddPatientCommand(formattedInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    else if (secondKeyword.equals(\"task\")){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        String formattedInput \u003d parser.parseAdd()[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        return new AddStandardTaskCommand(formattedInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        throw new DukeException(\"Invalid format. \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            case \"assign\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    String[] tempCommand \u003d command[1].split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    if (tempCommand[0].toLowerCase().equals(\"byid\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                        return new AssignTaskToPatientCommand(tempCommand[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    throw new DukeException(\"update command fails. \" + e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                    String[] tempCommand \u003d command[1].split(\"\\\\s+\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    if (tempCommand[0].toLowerCase().equals(\"patients\")){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        return new ListPatientsCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    else if (tempCommand[0].toLowerCase().equals(\"tasks\")){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                        return new ListTasksCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        throw new Exception(\"Invalid \u0027list\u0027 command. \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    throw new DukeException(\"List command fails. \" + e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                try{"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    secondKeyword \u003d command[1].toLowerCase();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    if (secondKeyword.equals(\"patient\")){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                            return new DeletePatientCommand(command[2]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        }catch(Exception e){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                            throw new Exception(\"Please follow the format \u0027delete patient #\u003cid\u003e\u0027.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                    else if (secondKeyword.equals(\"task\")){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                            return new DeleteTaskCommand(command[2]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                        }catch(Exception e){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                            throw new Exception(\"Please follow the format \u0027delete task #\u003cid\u003e\u0027.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        throw new Exception(\"Invalid format. \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } catch(Exception e){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    throw new DukeException(\"Delete command fails. \" + e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                try{"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    secondKeyword \u003d command[1].toLowerCase();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    if (secondKeyword.equals(\"patient\")){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                            return new FindPatientCommand(command[2]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        }catch(Exception e){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                            throw new Exception(\"Please follow the format \u0027find patient #\u003cid\u003e\u0027 or \u0027find patient \u003cname\u003e\u0027.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    else if (secondKeyword.equals(\"patienttask\")){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                            return new FindPatientTaskCommand(command[2]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                        }catch(Exception e){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                            throw new Exception(\"Please follow the format \u0027find patient #\u003cid\u003e\u0027 or \u0027find patient \u003cname\u003e\u0027.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        throw new Exception(\"Invalid format. \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } catch(Exception e){"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    throw new DukeException(\"Find command fails. \" + e.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            case \"update\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                    String[] descriptions \u003d command[1].split(\"\\\\s+\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                    int targetId \u003d Integer.parseInt(descriptions[1]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                    String targetInfo \u003d descriptions[2];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                    String updateValue \u003d descriptions[3];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                    return new UpdatePatientCommand(targetId, targetInfo, updateValue);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                    throw new DukeException(\"update command fails. \" + e.getMessage());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                throw new DukeException(\"Could not understand user input.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 37,
      "WEIFENG-NUSCEG": 20,
      "qjie7": 14,
      "-": 8,
      "HUANGXUANKUN": 53
    }
  },
  {
    "path": "src/main/java/duke/core/DateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * update the \u003ccode\u003e LocalDateTime \u003c/code\u003e constructor to save the date and time"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timeBeforeFormat the time retrieved from user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A LocalDateTime object that contains date and time information."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static LocalDateTime convertToLocalDateTime(String timeBeforeFormat) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        DateTimeFormatter parser \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            localDateTime \u003d LocalDateTime.parse(timeBeforeFormat, parser);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return localDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DateTimeParseException error) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Invalid format. Please Enter Date and Time in the format of dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string that representing the data and time for the task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * in a predefined English date time format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timeBeforeFormat A String that provides the data and time information in dd/MM/yyyy HHmm."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A String that provides date and time in English"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String convertToEnglishDateTime(String timeBeforeFormat) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        DateTimeFormatter stFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027st of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        DateTimeFormatter ndFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027nd of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        DateTimeFormatter rdFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027rd of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        DateTimeFormatter thFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027th of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            localDateTime \u003d convertToLocalDateTime(timeBeforeFormat);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if ((localDateTime.getDayOfMonth() % 10) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                return localDateTime.format(stFormatter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if ((localDateTime.getDayOfMonth() % 10) \u003d\u003d 2) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                return localDateTime.format(ndFormatter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if ((localDateTime.getDayOfMonth() % 10) \u003d\u003d 3) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                return localDateTime.format(rdFormatter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                return localDateTime.format(thFormatter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public static String convertToEnglishDateTimeBeforeParse(LocalDateTime localDateTime)  {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        DateTimeFormatter stFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027st of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        DateTimeFormatter ndFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027nd of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        DateTimeFormatter rdFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027rd of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        DateTimeFormatter thFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027th of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if ((localDateTime.getDayOfMonth() % 10) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return localDateTime.format(stFormatter);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } else if ((localDateTime.getDayOfMonth() % 10) \u003d\u003d 2) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return localDateTime.format(ndFormatter);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } else if ((localDateTime.getDayOfMonth() % 10) \u003d\u003d 3) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return localDateTime.format(rdFormatter);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return localDateTime.format(thFormatter);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 17,
      "qjie7": 9,
      "-": 46,
      "HUANGXUANKUN": 2
    }
  },
  {
    "path": "src/main/java/duke/core/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        super(\"Oops! \" + message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/java/duke/core/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String userInput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public Parser(String userInput) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String[] parseAdd() throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] parsedCommand \u003d userInput.toLowerCase().split(\"\\\\s+\", 3);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            if (parsedCommand[1].equals(\"patient\")) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                String[] patientInfo \u003d userInput.replace(\"add patient \", \"\").trim().split(\"\\\\s+\", 4);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return patientInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } else if (parsedCommand[1].equals(\"task\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                String[] taskInfo \u003d new String[1];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                taskInfo[0] \u003d userInput.replace(\"add task \", \"\").trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return taskInfo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            throw new DukeException(\"Please change the format for your \u0027add\u0027 command.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        throw new DukeException(\"Failed to parse \u0027add\u0027 command.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 18,
      "-": 9
    }
  },
  {
    "path": "src/main/java/duke/core/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * Represents the necessary ui elements for user interaction."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * weifeng"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Scanner to read user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Constructs a singleton Ui design pattern by using lazy initialization."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private Ui() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public static Ui getUi() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if (ui \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads user instruction."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A string that represents the user instruction."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showError(String e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"☹\" + e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void taskAdded(Task standardTask) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \\n\" + standardTask.getDescription());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showPatientInfo(Patient patient) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Name: \" + patient.getName() + \"  Id: \" + patient.getID()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + \"\\nNRIC: \" + patient.getNRIC() + \"  Room: \" + patient.getRoom()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + \"\\nRemark: \" + patient.getRemark());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showTaskInfo(Task task) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Task: \" + task.getDescription());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void patientsFoundByName(ArrayList\u003cPatient\u003e patients, String name) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (patients.size() \u003e 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"Got it. \" + patients.size() + \" patients is/are found with name: \" + name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Patient patient : patients) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                System.out.println(\"Patient #\" + i);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                showPatientInfo(patient);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                showLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"No patient was found with name: \" + name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tasksFoundByDescription(ArrayList\u003cTask\u003e tasks, String description) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Got it. \" + tasks.size() + \" tasks is/are found with description: \" + description);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Task #\" + i);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                showTaskInfo(task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                showLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"No task was found with description: \" + description);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void patientsFoundById(Patient patient) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Got it. The patient is found.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        showPatientInfo(patient);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void patientAdded(Patient patient) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Got it. The following patient has been added:  \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        showPatientInfo(patient);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void patientTaskAssigned(PatientTask patientTask, String patientName, String taskName) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        System.out.println(\"Got it. The following Patient ID: \" + patientTask.getPatientId() + \" \" + patientName + \" has been assigned the Task ID: \" + patientTask.getTaskID() + \" \" + taskName);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public int choosePatientToDelete(int numberOfPatients) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        int chosenNumber \u003d -1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"Enter the number of patient to delete, or enter number 0 to cancel: \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String command \u003d readCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                chosenNumber \u003d Integer.parseInt(command);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                System.out.println(\"Please enter a valid number!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (chosenNumber \u003e\u003d 0 \u0026\u0026 chosenNumber \u003c\u003d numberOfPatients) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                if (chosenNumber \u003d\u003d 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    System.out.println(\"Delete command is canceled\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return chosenNumber;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                System.out.println(\"The patient #\" + chosenNumber + \" does not exist. Please enter a valid number!\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public int chooseTaskToDelete(int numberOfTasks) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        int chosenNumber \u003d -1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Enter the number of task to delete, or enter number 0 to cancel: \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            String command \u003d readCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                chosenNumber \u003d Integer.parseInt(command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Please enter a valid number!\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            if (chosenNumber \u003e\u003d 0 \u0026\u0026 chosenNumber \u003c\u003d numberOfTasks) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                if (chosenNumber \u003d\u003d 0) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(\"Delete command is canceled\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                return chosenNumber;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"The task #\" + chosenNumber + \" does not exist. Please enter a valid number!\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean confirmPatientToBeDeleted(Patient patient) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        showPatientInfo(patient);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"The patient is to be deleted. Are you sure (Y/N)? \");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String command \u003d readCommand();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (command.toLowerCase().equals(\"y\")) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            } else if (command.toLowerCase().equals(\"n\")) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                System.out.println(\"Delete command is canceled\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                System.out.println(\"Please enter only Y/N to confirm/cancel deletion!\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void patientDeleted() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Got it. The patient is deleted.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void taskDeleted() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Got it. The task is deleted.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void listAllPatients(ArrayList\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        for (Patient patient : patients) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            showPatientInfo(patient);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            showLine();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void listAllTasks(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        System.out.println(\"Here\u0027s a list of your tasks: \\n\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            System.out.println(index"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \". \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + task.getDescription()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \"\\n\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean confirmTaskToBeDeleted(Task task) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        showTaskInfo(task);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"The task is to be deleted. Are you sure (Y/N)? \");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            String command \u003d readCommand();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            if (command.toLowerCase().equals(\"y\")) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (command.toLowerCase().equals(\"n\")) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Delete command is canceled\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Please enter only Y/N to confirm/cancel deletion!\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows a divider line."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows bye message to user."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void exitInformation() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows Duke logo and welcome message, and user input instructions."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String logo \u003d \" _____        _              _ _        _ \\n\" +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                \"|  __ \\\\      | |            (_) |      | |\\n\" +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                \"| |  | |_   _| | _____ _ __  _| |_ __ _| |\\n\" +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                \"| |  | | | | | |/ / _ \\\\ \u0027_ \\\\| | __/ _` | |\\n\" +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                \"| |__| | |_| |   \u003c  __/ |_) | | || (_| | |\\n\" +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                \"|_____/ \\\\__,_|_|\\\\_\\\\___| .__/|_|\\\\__\\\\__,_|_|\\n\" +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                \"                      | |                 \\n\" +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                \"                      |_|                 \\n\";"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\\n\\n\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        System.out.println(\"Enter \u0027help\u0027 to show a list of commands \");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void showUpdateStatus(Patient patient , String targetInfo) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        System.out.println(\"I have successfully updated the \" + targetInfo + \" of \" + patient.getName() + \" ID:\" + patient.getID()  );"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error in loading the file where past tasks are stored."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Failed to Load from local text file!\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void patientTaskFound(Patient patient, ArrayList\u003cPatientTask\u003e patientTask, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        System.out.println(\"The tasks of patient \" + patient.getID() + \" \" + patient.getName() + \" is found : \\n\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        for (int i \u003d 0; i \u003c patientTask.size(); i++){"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            showLine();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            System.out.println( tasks.get(i).getID() + \". \" + tasks.get(i).getDescription() +\"\\n\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            System.out.println( patientTask.get(i).toString());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            showLine();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 11,
      "WEIFENG-NUSCEG": 19,
      "qjie7": 29,
      "-": 139,
      "HUANGXUANKUN": 70
    }
  },
  {
    "path": "src/main/java/duke/patient/Patient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a Patient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private int id \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String nric;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String remark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String room;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Patient(int id, String name, String nric, String room, String remark) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Initialises the minimum fields required to setup a Patient."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param name   A String that represent the full name of the patient."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param remark Remark leaves by nurses."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Patient(String name, String nric, String room, String remark) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return name; //return tick or X symbols"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public int getID() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String getRemark() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String getRoom() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return room;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String getNRIC() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void setID(int id){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void setNric(String nric) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void setRoom(String room) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 14,
      "HUANGXUANKUN": 57
    }
  },
  {
    "path": "src/main/java/duke/patient/PatientManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class PatientManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private HashMap\u003cInteger, Patient\u003e patientIdMap \u003d new HashMap\u003cInteger, Patient\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private int maxId \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * instantiate a new TaskList with a empty list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public PatientManager(ArrayList\u003cPatient\u003e patientList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        for (Patient patient : patientList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            patientIdMap.put(patient.getID(), patient);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (!patientList.isEmpty()){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            this.maxId \u003d patientList.get(patientList.size()-1).getID();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isExist(int id) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (patientIdMap.containsKey(id)){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Patient getPatient(int id) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (patientIdMap.containsKey(id)){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return patientIdMap.get(id);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(\"The patient with id \"+ id + \" does not exist.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ArrayList\u003cPatient\u003e getPatientByName(String name){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        name \u003d name.toLowerCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cPatient\u003e patientsWithThisName \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        for (Patient patient : patientIdMap.values()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if(patient.getName().toLowerCase().equals(name)){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                patientsWithThisName.add(patient);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return patientsWithThisName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (patient.getID() \u003d\u003d 0){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            maxId +\u003d 1; //Increment maxId by 1 for the new coming patient"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            patient.setID(maxId); //Set the unique id to patient"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        patientIdMap.put(patient.getID(), patient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ArrayList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return new ArrayList\u003c\u003e(patientIdMap.values());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void deletePatient(int id) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (patientIdMap.containsKey(id)){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            patientIdMap.remove(id);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(\"The patient with id \"+ id + \" does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 9,
      "qjie7": 8,
      "HUANGXUANKUN": 57
    }
  },
  {
    "path": "src/main/java/duke/relation/EventPatientTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.relation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class EventPatientTask extends PatientTask {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private LocalDateTime startTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private LocalDateTime endTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private String startTimeRaw;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private String endTimeRaw;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private long duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public EventPatientTask(int pid, int tid, String stime, String eTime, String type){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super(pid, tid, type);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.startTimeRaw \u003d stime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.endTimeRaw \u003d eTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            this.startTime \u003d DateTimeParser.convertToLocalDateTime(stime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            this.endTime \u003d DateTimeParser.convertToLocalDateTime(eTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        duration \u003d Duration.between(startTime, endTime).toMillis();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public EventPatientTask(int pid, int tid, boolean isdone, boolean isrecurrsive, String stime, String eTime, String type){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super(pid, tid, isdone, isrecurrsive,type);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.startTimeRaw \u003d stime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.endTimeRaw \u003d eTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            this.startTime \u003d DateTimeParser.convertToLocalDateTime(stime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            this.endTime \u003d DateTimeParser.convertToLocalDateTime(eTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        duration \u003d Duration.between(startTime, endTime).toMillis();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getStartTimeRaw(){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return startTimeRaw;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getEndTimeRaw(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return endTimeRaw;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void updateStartTime(String time){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            this.startTime \u003d DateTimeParser.convertToLocalDateTime(time);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void updateEndTime(String time){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            this.endTime \u003d DateTimeParser.convertToLocalDateTime(time);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public long retrieveDuration()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.duration;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return super.printStatus() + \" From \" + DateTimeParser.convertToEnglishDateTimeBeforeParse(startTime) + \"To\" + DateTimeParser.convertToEnglishDateTimeBeforeParse(endTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 81
    }
  },
  {
    "path": "src/main/java/duke/relation/PatientTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.relation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public abstract class PatientTask {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private Integer patientId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private Integer taskID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private boolean isRecurrsive \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private String taskType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public PatientTask(int pid, int tid, String type) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.patientId \u003d pid;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.taskID \u003d tid;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.taskType \u003d type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public PatientTask(int pid, int tid, boolean isdone, boolean isrecurrsive, String type) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.patientId \u003d pid;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.taskID \u003d tid;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.taskType \u003d type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.isDone \u003d isdone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.isRecurrsive \u003d isrecurrsive;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public Integer getPatientId(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return patientId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public Integer getTaskID(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return taskID;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getTaskType(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return  taskType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isRecurrsive() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return isRecurrsive;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void markDone() {this.isDone \u003d true;}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void markRecurr() {this.isRecurrsive \u003d true;}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void undoRecurr(){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.isRecurrsive \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void undoIsDone(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void updateId(int pid, int tid){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.patientId \u003d pid;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.taskID \u003d tid;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getRecurrsiveIcon(){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return (isRecurrsive ? \"\\u0298\" : \"\\u0275\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String printStatus() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + \"[\" + this.getRecurrsiveIcon() + \"] \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 76
    }
  },
  {
    "path": "src/main/java/duke/relation/PatientTaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.relation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import com.google.common.collect.Multimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import com.google.common.collect.ArrayListMultimap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * Represents a list of Task that can perform operations such as"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * add and delete on the tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class PatientTaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * An ArrayList structure."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private Multimap\u003cInteger, PatientTask\u003e patientTaskIdMap \u003d ArrayListMultimap.create();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public PatientTaskList(ArrayList\u003cPatientTask\u003e newPatientTaskList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        for (PatientTask patientTasK : newPatientTaskList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            patientTaskIdMap.put(patientTasK.getPatientId(), patientTasK);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public ArrayList\u003cPatientTask\u003e fullPatientTaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return new ArrayList\u003cPatientTask\u003e(patientTaskIdMap.values());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void addPatientTask(PatientTask t) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        patientTaskIdMap.put(t.getPatientId(), t);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void deletePatientTask(Integer pid, Integer tid) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (patientTaskIdMap.containsKey(pid)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            for (PatientTask patientTask : patientTaskIdMap.get(pid)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                if (patientTask.getTaskID().equals(tid)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    patientTaskIdMap.remove(pid, patientTask);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    throw new DukeException(\"The patient with id: \" + pid + \" has not been assigned with such task: \" + tid);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(\"Patient id: \" + pid + \" does not have any tasks!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void deleteEntirePatientTask(Integer pid) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (patientTaskIdMap.containsKey(pid)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            patientTaskIdMap.removeAll(pid);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(\"Patient id: \" + pid + \" does not have any tasks!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public ArrayList\u003cPatientTask\u003e getPatientTask(int pid) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (patientTaskIdMap.containsKey(pid)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            ArrayList\u003cPatientTask\u003e tempArray \u003d new ArrayList\u003cPatientTask\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            tempArray.addAll(patientTaskIdMap.get(pid));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return tempArray;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(\"The patient with id \" + pid + \" does not have any tasks.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public ArrayList\u003cPatientTask\u003e getTaskPatient(int tid) throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cPatientTask\u003e tempArray \u003d new ArrayList\u003cPatientTask\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        for (PatientTask patientTask : patientTaskIdMap.values()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (patientTask.getTaskID() \u003d\u003d tid) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                tempArray.add(patientTask);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (tempArray.size() !\u003d 0){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return tempArray;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(\"The Task with id \" + tid + \" has not been assigned to any patients\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 86
    }
  },
  {
    "path": "src/main/java/duke/relation/StandardPatientTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.relation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.DateTimeParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class StandardPatientTask extends PatientTask {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private String deadlineRaw;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public StandardPatientTask(int pid, int tid, String timeBeforeFormat, String type){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super(pid, tid, type);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.deadlineRaw \u003d timeBeforeFormat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            this.deadline \u003d DateTimeParser.convertToLocalDateTime(timeBeforeFormat);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public StandardPatientTask(int pid, int tid, boolean isdone, boolean isrecurrsive, String timeBeforeFormat, String type){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super(pid, tid, isdone, isrecurrsive,type);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.deadlineRaw \u003d timeBeforeFormat;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            this.deadline \u003d DateTimeParser.convertToLocalDateTime(timeBeforeFormat);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getDeadline(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.deadlineRaw;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void updateDeadline(String time){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            this.deadline \u003d DateTimeParser.convertToLocalDateTime(time);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return super.printStatus() + \" \" + DateTimeParser.convertToEnglishDateTimeBeforeParse(deadline);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 53
    }
  },
  {
    "path": "src/main/java/duke/storage/PatientStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.apache.commons.csv.CSVFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.apache.commons.csv.CSVPrinter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.apache.commons.csv.CSVRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class PatientStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * A string that represents a relative file path from the project folder."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructs a Storage object with a specific file path."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param filePath A string that represents the path of the file to read or"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *                 write."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public PatientStorage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ArrayList\u003cPatient\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cPatient\u003e patientList \u003d new ArrayList\u003cPatient\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            Reader in \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            Iterable\u003cCSVRecord\u003e records \u003d CSVFormat.EXCEL.withFirstRecordAsHeader().parse(in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (CSVRecord record : records) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                int id \u003d Integer.parseInt(record.get(\"Id\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String name \u003d record.get(\"Name\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String nric \u003d record.get(\"NRIC\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String remark \u003d record.get(\"Remark\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String room \u003d record.get(\"Room\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                patientList.add(new Patient(id, name, nric, room, remark));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return patientList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void save(ArrayList\u003cPatient\u003e patients) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            BufferedWriter writer \u003d Files.newBufferedWriter(Paths.get(filePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            CSVPrinter csvPrinter \u003d new CSVPrinter(writer, CSVFormat.DEFAULT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    .withHeader(\"Id\", \"Name\", \"NRIC\", \"Room\", \"Remark\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Patient patient : patients) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                int id \u003d patient.getID();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String room \u003d patient.getRoom();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String NRIC \u003d patient.getNRIC();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String name \u003d patient.getName();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String remark \u003d patient.getRemark();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                csvPrinter.printRecord(id, name, NRIC, room, remark);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            csvPrinter.flush();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 1,
      "HUANGXUANKUN": 67
    }
  },
  {
    "path": "src/main/java/duke/storage/PatientTaskStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.EventPatientTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.StandardPatientTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import org.apache.commons.csv.CSVFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import org.apache.commons.csv.CSVPrinter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import org.apache.commons.csv.CSVRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class PatientTaskStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * A string that represents a relative file path from the project folder."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Constructs a Storage object with a specific file path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param filePath A string that represents the path of the file to read or"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *                 write."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public PatientTaskStorage(String filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public ArrayList\u003cPatientTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cPatientTask\u003e patientTaskList \u003d new ArrayList\u003cPatientTask\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            Reader in \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            Iterable\u003cCSVRecord\u003e records \u003d CSVFormat.EXCEL.withFirstRecordAsHeader().parse(in);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            for (CSVRecord record : records) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                Integer pid \u003d Integer.parseInt(record.get(\"PID\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                Integer tid \u003d Integer.parseInt(record.get(\"TID\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                boolean isDone \u003d Boolean.parseBoolean(record.get(\"DONE\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                boolean isRecursive \u003d Boolean.parseBoolean(record.get(\"RECURRENCE\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                String deadline \u003d record.get(\"DEADLINE\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                String startTime \u003d record.get(\"STARTTIME\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                String endTime \u003d record.get(\"ENDTIME\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                String taskType \u003d record.get(\"TASKTYPE\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                if (taskType.equals(\"S\")){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    patientTaskList.add(new StandardPatientTask(pid,tid,isDone,isRecursive,deadline,taskType));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                else if (taskType.equals(\"E\")){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    patientTaskList.add(new EventPatientTask(pid,tid,isDone,isRecursive,startTime,endTime,taskType));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return patientTaskList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void save(ArrayList\u003cPatientTask\u003e patientTask) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            BufferedWriter writer \u003d Files.newBufferedWriter(Paths.get(filePath));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            CSVPrinter csvPrinter \u003d new CSVPrinter(writer, CSVFormat.DEFAULT"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    .withHeader(\"PID\", \"TID\", \"DONE\", \"RECURRENCE\", \"DEADLINE\", \"STARTTIME\", \"ENDTIME\", \"TASKTYPE\" ));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            for (PatientTask patient : patientTask) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                int pid \u003d patient.getPatientId();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                int tid \u003d patient.getTaskID();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                boolean isDone \u003d patient.isDone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                boolean isRecurr \u003d patient.isRecurrsive();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                String deadline \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                String startTime \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                String endTime \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                String type \u003d patient.getTaskType();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                if (patient instanceof  StandardPatientTask)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    deadline \u003d ((StandardPatientTask) patient).getDeadline();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                else if (patient instanceof EventPatientTask)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    startTime \u003d ((EventPatientTask) patient).getStartTimeRaw();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    endTime \u003d ((EventPatientTask) patient).getEndTimeRaw();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                csvPrinter.printRecord(pid, tid, String.valueOf(isDone), String.valueOf(isRecurr), deadline, startTime,endTime,type);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            csvPrinter.flush();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 90
    }
  },
  {
    "path": "src/main/java/duke/storage/TaskStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.apache.commons.csv.CSVFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.apache.commons.csv.CSVPrinter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.apache.commons.csv.CSVRecord;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class TaskStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * A string that represents a relative file path from the project folder."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a Storage object with a specific file path."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath A string that represents the path of the file to read or"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *             write."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public TaskStorage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Read tasks from the file and store into a ArrayList of task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A ArrayList of tasks from the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If file is not found."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            Reader in \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Iterable\u003cCSVRecord\u003e records \u003d CSVFormat.EXCEL.withFirstRecordAsHeader().parse(in);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            for (CSVRecord record : records) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                int id \u003d Integer.parseInt(record.get(\"Id\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                String description \u003d record.get(\"Description\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                taskList.add(new Task(id, description));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Saves tasks to the local file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasks The TaskList storing tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If writing to the local file failed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            BufferedWriter writer \u003d Files.newBufferedWriter(Paths.get(filePath));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            CSVPrinter csvPrinter \u003d new CSVPrinter(writer, CSVFormat.DEFAULT"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                    .withHeader(\"Id\", \"Description\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : tasks){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                int id \u003d task.getID();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                csvPrinter.printRecord(id, description);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            csvPrinter.flush();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        catch(IOException e){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 1,
      "-": 42,
      "HUANGXUANKUN": 34
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a task.  Task is an abstract class that can not be"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * instantiated"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private int id \u003d 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(int id, String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string with the status icon and the description of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A string in a specific format with the status and description of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String printDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return \" \" + description + \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A string that represents the specific activity associated with"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *         the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getID() { return id; }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setID(int id) { this.id \u003d id; }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 1,
      "WEIFENG-NUSCEG": 8,
      "-": 34
    }
  },
  {
    "path": "src/main/java/duke/task/TaskManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a list of Task that can perform operations such as"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * add and delete on the tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, Task\u003e taskIdMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int maxId \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * An ArrayList structure."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Constructor used when Duke successfully loads a TaskList from a saved file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Takes loaded taskList and uses it during Duke\u0027s new session."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskManager(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            taskIdMap.put(task.getID(), task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!taskList.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            this.maxId \u003d taskList.get(taskList.size()-1).getID();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Constructor used when Duke cannot successfully load a TaskList from a saved file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Instantiates a new TaskList with an empty list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public TaskManager() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskByDescription(String description){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        description \u003d description.toLowerCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tasksWithThisDescription \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : taskIdMap.values()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            if(task.getDescription().toLowerCase().equals(description)){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                tasksWithThisDescription.add(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasksWithThisDescription;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Adds a Task to the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task The Task to be added to the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (task.getID() \u003d\u003d 0){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            maxId +\u003d 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            task.setID(maxId);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        taskIdMap.put(task.getID(), task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Removes the Task with the given index from the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param id The index of the Task to be deleted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteTask(int id) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (taskIdMap.containsKey(id)){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            taskIdMap.remove(id);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"The task with id \"+ id + \" does not exist.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public boolean doesExist(int id) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (taskIdMap.containsKey(id)){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Returns the Task in the list with the given index."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param id The index of the Task."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return The Task in the list with the specific index."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task getTask(int id) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (taskIdMap.containsKey(id)){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return taskIdMap.get(id);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"The task with id \"+ id + \" does not exist.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(taskIdMap.values());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 9,
      "WEIFENG-NUSCEG": 28,
      "kkeejjuunn": 1,
      "qjie7": 2,
      "-": 50,
      "HUANGXUANKUN": 19
    }
  },
  {
    "path": "src/test/java/duke/core/CommandManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class CommandManagerTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test the return command type of Parser.parse(userInput)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException referencing a Duke specified exception with error log"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandTypeTest() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command c1 \u003d CommandManager.manageCommand(\"bye\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command c2 \u003d CommandManager.manageCommand(\"done 1\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command c3 \u003d CommandManager.manageCommand(\"delete 2\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command c4 \u003d CommandManager.manageCommand(\"list\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command c5 \u003d CommandManager.manageCommand(\"find MEETING\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command c6 \u003d CommandManager.manageCommand(\"todo abc\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command c7 \u003d CommandManager.manageCommand(\"event Meeting /at 27/07/2020 1630\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command c8 \u003d CommandManager.manageCommand(\"deadline event Homework ABC /by 27/07/2020 1630\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command c9 \u003d CommandManager.manageCommand(\"view 16/09/2019\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command c10 \u003d CommandManager.manageCommand(\"period periodTaskTest /from 27/07/2020 1630 /to 27/08/2020 1630\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command c11 \u003d CommandManager.manageCommand(\"reschedule 1 27/07/2020 1630\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(c1 instanceof ExitCommand, \"The command type should be \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(c2 instanceof DoneCommand, \"The command type should be \u0027DoneCommand\u0027\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(c3 instanceof DeleteCommand, \"The command type should be \u0027DeleteCommand\u0027\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(c4 instanceof ListCommand, \"The command type should be \u0027ListCommand\u0027\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(c5 instanceof FindCommand, \"The command type should be \u0027FindCommand\u0027\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(c6 instanceof AddCommand, \"The command type should be \u0027AddCommand\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(c7 instanceof AddCommand, \"The command type should be \u0027AddCommand\u0027\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(c8 instanceof AddCommand, \"The command type should be \u0027AddCommand\u0027\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(c9 instanceof ViewCommand, \"The command type should be \u0027ViewCommand\u0027\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertTrue(c10 instanceof AddCommand, \"The command type should be \u0027AddCommand\u0027\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertTrue(c11 instanceof RescheduleCommand, \"The command type should be \u0027RescheduleCommand\u0027\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 12,
      "-": 25,
      "HUANGXUANKUN": 2
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test the Deadline.toString()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deadlineStringTest() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals( \"[D][\\u2718] abc (by: 2nd of December 1996, 12PM)\", new Deadline(\"abc\", \"02/12/1996 1235\").toString(),\"Deadline toString() is not expected\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test the Deadline.writeTxt()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void writeFormatTest() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"D | 0 | deadlineTest | 02/12/1996 1235 | ONCE\",new Deadline(\"deadlineTest\", \"02/12/1996 1235\").writeTxt(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test the Deadline.isDone() after a new Deadline object is being initialized"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void doneStatusTest() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(new Deadline(\"abc\", \"02/12/1996 1235\").isDone(), \"The newly created Deadline should not be done\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * A general test case to test Deadline class"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test steps:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Create a Deadline object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Verify Deadline.isdone(), Deadline.toString(), Deadline.writeTxt()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Mark the Deadline object to isDone status."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Repeat step 2"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if markAsDone is applied to a done task, throw exception with log"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deadlineTestCase() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a new deadline and check its toString() and writeTxt()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"deadlineTest\", \"02/12/1996 1235\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deadline.isDone(), \"The newly created deadline should not be done\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals( \"[D][\\u2718] deadlineTest (by: 2nd of December 1996, 12PM)\",deadline.toString(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"D | 0 | deadlineTest | 02/12/1996 1235 | ONCE\",deadline.writeTxt(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mark the deadline as done and check its toString() and writeTxt()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deadline.isDone(), \"The deadline should be marked as done\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[D][\\u2713] deadlineTest (by: 2nd of December 1996, 12PM)\", deadline.toString(), \"The deadline.toString() is not expected\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"D | 1 | deadlineTest | 02/12/1996 1235 | ONCE\",deadline.writeTxt(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "HUANGXUANKUN": 3
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test the Event.toString()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void EventStringTest() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[E][\\u2718] eventTest (at: 2nd of December 1996, 12PM)\", new Event(\"eventTest\", \"02/12/1996 1235\").toString(), \"toString result is not expected\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test the Event.writeTxt()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void writeFormatTest() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"E | 0 | test | 02/12/1996 1235 | ONCE\",new Event(\"test\", \"02/12/1996 1235\").writeTxt(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test the Event.isDone() after a new Event object is being initialized"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void doneStatusTest() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(new Event(\"test\", \"02/12/1996 1235\").isDone(), \"The newly created Deadline should not be done\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * A general test case to test Event class"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test steps:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Create a Event object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Verify Event.isdone(), Event.toString(), Event.writeTxt()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Mark the Event object to isDone status."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Repeat step 2"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if markAsDone is applied to a done task, throw exception with log"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void eventTestCase() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Creata a new event and check its toString() and writeTxt()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Event event \u003d new Event(\"eventTest\", \"02/12/1996 1235\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(event.isDone(), \"The newly created event should not be done\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals( \"[E][\\u2718] eventTest (at: 2nd of December 1996, 12PM)\",event.toString(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"E | 0 | eventTest | 02/12/1996 1235 | ONCE\",event.writeTxt(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mark the event as done and check its toString() and writeTxt()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(event.isDone(), \"The event should be marked as done\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[E][\\u2713] eventTest (at: 2nd of December 1996, 12PM)\", event.toString(), \"The event.toString() is not expected\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"E | 1 | eventTest | 02/12/1996 1235 | ONCE\",event.writeTxt(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "HUANGXUANKUN": 3
    }
  },
  {
    "path": "src/test/java/duke/task/FixedDurationTaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "public class FixedDurationTaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Test the FixedDurationTask.toString()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void FixedDurationTaskStringTest() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals(\"[F][\\u2718] FixedDurationTaskTest (duration: 2 hours)\", new FixedDurationTask(\"FixedDurationTaskTest\", \"2 hours\").toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Test the fixeddurationtask.writeTxt()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void writeFormatTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        assertEquals( \"F | 0 | FixedDurationTest | 1 hour | false\",new FixedDurationTask(\"FixedDurationTest\", \"1 hour\").writeTxt(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 24
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test the todo.toString()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void todoStringTest(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Todo(\"todoTest\").toString(), \"[T][\\u2718] todoTest\", \"todo string test fails\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test the todo.writeTxt()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void writeFormatTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"T | 0 | todoTest | ONCE\",new Todo(\"todoTest\").writeTxt(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test the todo.isDone() after a new Todo object is being initialized"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void doneStatusTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(new Todo(\"abc\").isDone(), \"The newly created Deadline should not be done\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * A general test case to test Todo class"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test steps:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Create a Todo object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Verify todo.isdone(), todo.toString(), todo.writeTxt()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Mark the todo object to isDone status."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Repeat step 2"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if markAsDone is applied to a done task, throw exception with log"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void todoTestCase() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Creata a new task and check its toString() and writeTxt()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Todo todo \u003d new Todo(\"todoTest\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(todo.isDone(), \"The newly created todo should not be done\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals( \"[T][\\u2718] todoTest\",todo.toString(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"T | 0 | todoTest | ONCE\",todo.writeTxt(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mark the task as done and check its toString() and writeTxt()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(todo.isDone(), \"The todo should be marked as done\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"[T][\\u2713] todoTest\", todo.toString(), \"The todo.toString() is not expected\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertEquals( \"T | 1 | todoTest | ONCE\",todo.writeTxt(), \"The writeToFile format is not expected\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "HUANGXUANKUN": 3
    }
  }
]
