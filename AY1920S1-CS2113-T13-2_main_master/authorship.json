[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"mid\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"v1.1\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    compile \"org.apache.commons:commons-csv:1.7\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    compile \u0027org.apache.commons:commons-text:1.8\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    compile group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002723.5-jre\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"duke/Duke\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 1,
      "-": 41,
      "HUANGXUANKUN": 2
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.core.CommandManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.ShortCutter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.statistic.Counter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents Duke, a Personal Assistant to help"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * users tracking their progress."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Storage object that handles reading tasks from a local"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * file and saving them to the same file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * A TaskList object that deals with add, delete, mark as done,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * find functions of a list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private PatientTaskList patientTaskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private TaskManager taskManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private PatientManager patientManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private Counter counter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Ui object that deals with interactions with the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private static final Ui ui \u003d Ui.getUi();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a Duke object with a relative file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialize the user interface and reads tasks from the specific text file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath A string that represents the path of the local file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *                 used for storing tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        storageManager \u003d new StorageManager(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            patientTaskList \u003d new PatientTaskList(storageManager.loadAssignedTasks());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            taskManager \u003d new TaskManager(storageManager.loadTasks());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            patientManager \u003d new PatientManager(storageManager.loadPatients());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            counter \u003d new Counter(storageManager.loadCommandFrequency());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            taskManager \u003d new TaskManager();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs the Duke program."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads user input until a \"bye\" message is received."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                Command c \u003d CommandManager.manageCommand(fullCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                c.execute(patientTaskList, taskManager, patientManager,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    ui, storageManager);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                counter.runCommandCounter(c, storageManager, counter);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Starts the Duke thread and Reminder thread concurrently"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * by passing a filepath to duke and a global ui object\u0026"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * task list to Reminder."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param args The command line arguments."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        new Duke(\"./data\").run();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 7,
      "WEIFENG-NUSCEG": 5,
      "qjie7": 14,
      "-": 53,
      "HUANGXUANKUN": 19
    }
  },
  {
    "path": "src/main/java/duke/command/AddPatientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class AddPatientCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private Patient newPatient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientInfo ."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public AddPatientCommand(String[] patientInfo) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            this.newPatient \u003d new Patient(patientInfo[0], patientInfo[1], patientInfo[2], patientInfo[3]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(\"Please follow the format \u0027add patient \u003cname\u003e \u003cNRIC\u003e \u003cRoom\u003e \u003cremark\u003e\u0027. \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(PatientTaskList patientTask, TaskManager tasks, PatientManager patientList, Ui ui,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        patientList.addPatient(newPatient);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        storageManager.savePatients(patientList.getPatientList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ui.patientAdded(newPatient);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 8,
      "WEIFENG-NUSCEG": 1,
      "qjie7": 7,
      "HUANGXUANKUN": 30
    }
  },
  {
    "path": "src/main/java/duke/command/AddStandardTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class AddStandardTaskCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private Task newStandardTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskDescription ."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public AddStandardTaskCommand(String taskDescription) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.newStandardTask \u003d new Task(taskDescription);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientTask        ."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskList           ."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientList        ."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui                 ."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager ."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(PatientTaskList patientTask, TaskManager taskList, PatientManager patientList,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList.addTask(newStandardTask);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        storageManager.saveTasks(taskList.getTaskList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        ui.taskAdded(newStandardTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 2,
      "WEIFENG-NUSCEG": 2,
      "qjie7": 9,
      "-": 18,
      "HUANGXUANKUN": 18
    }
  },
  {
    "path": "src/main/java/duke/command/AssignTaskToPatientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.EventPatientTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.relation.StandardPatientTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class AssignTaskToPatientCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String[] taskAssignmentInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private PatientTask newPatientTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskAssignmentInfo ."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public AssignTaskToPatientCommand(String[] taskAssignmentInfo) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.taskAssignmentInfo \u003d taskAssignmentInfo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientTaskList    ."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasksList          ."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientList        ."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui                 ."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager ."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(PatientTaskList patientTaskList, TaskManager tasksList, PatientManager patientList,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        char firstChar \u003d taskAssignmentInfo[1].charAt(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (taskAssignmentInfo[0].equals(\"S\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                if (firstChar \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    int tempPid \u003d Integer.parseInt(taskAssignmentInfo[1].replace(\"#\",\"\").trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    int tempTid \u003d Integer.parseInt(taskAssignmentInfo[2]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    String temptime \u003d taskAssignmentInfo[3];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    newPatientTask \u003d new StandardPatientTask(tempPid, tempTid, temptime, taskAssignmentInfo[0]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    int tempPid \u003d patientList.getPatientByName(taskAssignmentInfo[1]).get(0).getID();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    int tempTid \u003d tasksList.getTaskByDescription(taskAssignmentInfo[2]).get(0).getID();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    String temptime \u003d taskAssignmentInfo[3];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    newPatientTask \u003d new StandardPatientTask(tempPid, tempTid, temptime, taskAssignmentInfo[0]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            } else if (taskAssignmentInfo[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                if (firstChar \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    int tempPid \u003d Integer.parseInt(taskAssignmentInfo[1].replace(\"#\",\"\").trim());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    int tempTid \u003d Integer.parseInt(taskAssignmentInfo[2]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    String stime \u003d taskAssignmentInfo[3].split(\" to \", 2)[0];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    String etime \u003d taskAssignmentInfo[3].split(\" to \", 2)[1];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    newPatientTask \u003d new EventPatientTask(tempPid, tempTid, stime, etime,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                            taskAssignmentInfo[0]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    int tempPid \u003d patientList.getPatientByName(taskAssignmentInfo[1]).get(0).getID();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    int tempTid \u003d tasksList.getTaskByDescription(taskAssignmentInfo[2]).get(0).getID();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    String stime \u003d taskAssignmentInfo[3].split(\" to \", 2)[0];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    String etime \u003d taskAssignmentInfo[3].split(\" to \", 2)[1];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    newPatientTask \u003d new EventPatientTask(tempPid, tempTid, stime, etime,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                            taskAssignmentInfo[0]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(\"You are using the wrong format for the assign command\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (patientList.isExist(newPatientTask.getPatientId()) \u0026\u0026 tasksList.doesExist(newPatientTask.getTaskID())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (patientTaskList.doesUidExist(newPatientTask.getUid())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    || patientTaskList.isSameTaskExist(newPatientTask)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(\"Either the unique task id is repeated or the same task exists\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                patientTaskList.addPatientTask(newPatientTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                storageManager.saveAssignedTasks(patientTaskList.fullPatientTaskList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                ui.patientTaskAssigned(newPatientTask, patientList.getPatient(newPatientTask.getPatientId()).getName(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        tasksList.getTask(newPatientTask.getTaskID()).getDescription());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(\"Either the patient or the task does not exist in our data record\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 6,
      "WEIFENG-NUSCEG": 67,
      "qjie7": 5,
      "HUANGXUANKUN": 27
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command class received from user. It is an abstract"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * class that can not be instantiated, its child class represents different kind"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * of user command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientTask    ."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasks          ."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientList    ."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui             ."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager ."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    void execute(PatientTaskList patientTask, TaskManager tasks, PatientManager patientList, Ui ui,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                 StorageManager storageManager) throws DukeException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decide whether duke should exist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    boolean isExit();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 5,
      "-": 22,
      "HUANGXUANKUN": 10
    }
  },
  {
    "path": "src/main/java/duke/command/DeletePatientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.relation.PatientTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class DeletePatientCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private String deletedPatientInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Patient patientToBeDeleted;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * It saves the delete patient command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param deletedPatientInfo it contains the information of the patient to be deleted."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeletePatientCommand(String deletedPatientInfo) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.deletedPatientInfo \u003d deletedPatientInfo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * It extracts patient id from the delete patient command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * It checks whether user is deleting by id or name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * It retrieves patient based on the id extracted."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param deletedPatientInfo contains the delete patient command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui allows user to choose the patient to delete."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param patientManager retrieves patient based on patient id."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return patient to be deleted."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if no matched patient found."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Patient getPatientByDeletePatientCommand(String deletedPatientInfo, Ui ui,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                                                    PatientManager patientManager) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        char firstChar \u003d deletedPatientInfo.charAt(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Patient patient \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if (firstChar \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            int id;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                id \u003d Integer.parseInt(deletedPatientInfo.substring(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                throw new DukeException(\"Please follow format \u0027delete patient #\u003cid\u003e\u0027. \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                patient \u003d patientManager.getPatient(id);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"The patient id does not exist. \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            ArrayList\u003cPatient\u003e patientsWithSameName \u003d patientManager.getPatientByName(deletedPatientInfo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            if (patientsWithSameName.size() \u003e\u003d 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.patientsFoundByName(patientsWithSameName, deletedPatientInfo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                int numberChosen \u003d ui.choosePatientToDelete(patientsWithSameName.size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                if (numberChosen \u003e\u003d 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                    patient \u003d patientsWithSameName.get(numberChosen - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"There is no patients matched this name.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return patient;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * It deletes the patient returned from getPatientByDeletePatientCommand."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * It checks whether this patient is assigned to any tasks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * It deletes the relationship between this patient and any tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param patientTaskList contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskManager contains information of all the tasks."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param patientManager contains information of all the patients."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui interacts with user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storageManager save the changes in csv file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException if there is error deleting the patient."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(PatientTaskList patientTaskList, TaskManager taskManager, PatientManager patientManager,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            patientToBeDeleted \u003d getPatientByDeletePatientCommand(deletedPatientInfo, ui, patientManager);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean toDelete;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showPatientInfo(patientToBeDeleted);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            ArrayList\u003cPatientTask\u003e patientTask \u003d patientTaskList.getPatientTask(patientToBeDeleted.getID());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            ArrayList\u003cTask\u003e tempTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            for (PatientTask tempPatientTask : patientTask) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                tempTask.add(taskManager.getTask(tempPatientTask.getTaskID()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.patientTaskFound(patientToBeDeleted, patientTask, tempTask);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            toDelete \u003d ui.confirmPatientToBeDeleted(patientToBeDeleted, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            if (toDelete) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                patientTaskList.deleteAllTasksBelongToThePatient(patientToBeDeleted.getID());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                storageManager.saveAssignedTasks(patientTaskList.fullPatientTaskList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            toDelete \u003d ui.confirmPatientToBeDeleted(patientToBeDeleted,false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (toDelete) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            patientManager.deletePatient(patientToBeDeleted.getID());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            storageManager.savePatients(patientManager.getPatientList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.patientDeleted();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * It terminates the Dukepital."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 1,
      "WEIFENG-NUSCEG": 3,
      "qjie7": 50,
      "-": 72,
      "HUANGXUANKUN": 1
    }
  },
  {
    "path": "src/main/java/duke/command/DeletePatientTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class DeletePatientTaskCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private int patientId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private String deletedPatientInfo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private String[] command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *  ."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param deleteInfo ."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public DeletePatientTaskCommand(String[] deleteInfo) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        char firstChar \u003d deleteInfo[0].charAt(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (firstChar \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                this.patientId \u003d Integer.parseInt(deleteInfo[0].substring(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            } else if (firstChar \u003d\u003d \u0027%\u0027) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                this.taskId \u003d Integer.parseInt(deleteInfo[0].substring(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                this.deletedPatientInfo \u003d deleteInfo[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(\"Try to follow the format: delete patienttask %\u003ctaskUniqueID\u003e/#\u003cpatientID\u003e/\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    + \"\u003cpatientName\u003e\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *  ."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param patientTaskList ."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param tasks ."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param patientManager ."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param ui ."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager ."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void execute(PatientTaskList patientTaskList, TaskManager tasks, PatientManager patientManager, Ui ui,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        StorageManager storageManager)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (patientId !\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                Patient toBeDeletedPatient \u003d patientManager.getPatient(patientId);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                if (patientTaskList.doesPatientIdExist(patientId)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    patientTaskList.deleteAllTasksBelongToThePatient(patientId);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    storageManager.saveAssignedTasks(patientTaskList.fullPatientTaskList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    ui.patientTaskAllDeleted(patientManager.getPatient(patientId));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    throw new DukeException(\"This Patient does not have any tasks.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } else if (taskId !\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                patientTaskList.deletePatientTaskByUniqueId(taskId);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                storageManager.saveAssignedTasks(patientTaskList.fullPatientTaskList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                ui.patientTaskDeleted(taskId);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(\"Task is not found!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                String deletePatientName \u003d this.deletedPatientInfo;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                ArrayList\u003cPatient\u003e patientsWithSameName \u003d patientManager.getPatientByName(deletePatientName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                int tempPatientId \u003d patientsWithSameName.get(0).getID();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                if (patientTaskList.doesPatientIdExist(tempPatientId)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    patientTaskList.deleteAllTasksBelongToThePatient(tempPatientId);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    storageManager.saveAssignedTasks(patientTaskList.fullPatientTaskList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    ui.patientTaskAllDeleted(patientManager.getPatient(tempPatientId));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    throw new DukeException(\"This Patient does not have any tasks.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 97,
      "qjie7": 1,
      "HUANGXUANKUN": 6
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "//@@author kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.relation.PatientTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "public class DeleteTaskCommand implements Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private String deletedTaskInfo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    private Task taskToBeDeleted;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It keeps the delete task command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param deletedTaskInfo contains the information of the patient to be deleted."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public DeleteTaskCommand(String deletedTaskInfo) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        this.deletedTaskInfo \u003d deletedTaskInfo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It extracts the task id from the delete task command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It checks whether user is trying to delete a task by id or description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It retrieves task based on the id extracted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param deletedTaskInfo contains the delete command received from parser class which is a string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param ui allow user choose the correct task to be deleted."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskManager retrieves the task to be deleted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return the task to be deleted."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException if no match task found."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public Task getTaskByDeleteTaskCommand(String deletedTaskInfo, Ui ui,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                                           TaskManager taskManager) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        char firstChar \u003d deletedTaskInfo.charAt(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (firstChar \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            int id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                id \u003d Integer.parseInt(deletedTaskInfo.substring(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                task \u003d taskManager.getTask(id);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw new DukeException(\"The task id does not exist. \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            ArrayList\u003cTask\u003e tasksWithSameDescription \u003d taskManager.getTaskByDescription(deletedTaskInfo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            if (tasksWithSameDescription.size() \u003e\u003d 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                int numberChosen \u003d ui.chooseTaskToDelete(tasksWithSameDescription.size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                if (numberChosen \u003e\u003d 1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    task \u003d tasksWithSameDescription.get(numberChosen - 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                throw new DukeException(\"There is no task matched this description. \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It deletes the task returned from getTaskByDeleteTaskCommand."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It checks whether this task is assigned to any patient."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It deletes the relation between this task and any patients"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientTaskList contains the information between all the tasks and patients."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskManager contains information of all tasks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientManager contains information of all patients."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param ui interacts with user."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param storageManager save the changes in csv file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @throws DukeException if there is error deleting the task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void execute(PatientTaskList patientTaskList, TaskManager taskManager, PatientManager patientManager,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            taskToBeDeleted \u003d getTaskByDeleteTaskCommand(deletedTaskInfo, ui, taskManager);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        ui.showTaskInfo(taskToBeDeleted);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        boolean toDelete;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            ArrayList\u003cPatientTask\u003e patientTasks \u003d patientTaskList.getTaskPatient(taskToBeDeleted.getID());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            ArrayList\u003cPatient\u003e relatedPatients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            for (PatientTask patientTask : patientTasks) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                relatedPatients.add(patientManager.getPatient(patientTask.getPatientId()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            ui.taskPatientFound(taskToBeDeleted, patientTasks, relatedPatients);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            toDelete \u003d ui.confirmTaskToBeDeleted(taskToBeDeleted, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            if (toDelete) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                patientTaskList.deleteAllPatientTaskByTaskId(taskToBeDeleted.getID());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                storageManager.saveAssignedTasks(patientTaskList.fullPatientTaskList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            toDelete \u003d ui.confirmTaskToBeDeleted(taskToBeDeleted,false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        if (toDelete) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            taskManager.deleteTask(taskToBeDeleted.getID());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            storageManager.saveTasks(taskManager.getTaskList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            ui.taskDeleted();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It terminates the Dukepital."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kkeejjuunn": 128
    }
  },
  {
    "path": "src/main/java/duke/command/DukeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.ShortCutter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.statistic.Counter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class DukeCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param patientTask    ."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param tasks          ."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param patientManager ."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param ui             ."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param storageManager ."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void execute(PatientTaskList patientTask, TaskManager tasks, PatientManager patientManager,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                        Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Counter counter \u003d new Counter(storageManager.loadCommandFrequency());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        ShortCutter shortCutter \u003d new ShortCutter(counter, ui);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        shortCutter.runShortCut().execute(patientTask, tasks, patientManager, ui, storageManager);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Decide whether duke should exist."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 45
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command to exit Duke. The command.ExitCommand class"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * extends from the Command class for the user to quit the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * program"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a ExitCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Indicates whether Duke should exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A boolean. True if the command tells Duke to exit, false otherwise."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * run the command with the respect TaskList, UI, and storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasks       The task list where tasks are saved."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui          The user interface."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientList object that handles local text file update"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(PatientTaskList patientTask, TaskManager tasks,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        PatientManager patientList, Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.exitInformation();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 1,
      "qjie7": 6,
      "-": 31,
      "HUANGXUANKUN": 7
    }
  },
  {
    "path": "src/main/java/duke/command/FindPatientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class FindPatientCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public FindPatientCommand(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param patientTask        ."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param tasks              ."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param patientManager     ."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param ui                 ."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager ."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void execute(PatientTaskList patientTask, TaskManager tasks, PatientManager patientManager,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        char firstChar \u003d command.charAt(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if (firstChar \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            int id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                id \u003d Integer.parseInt(command.substring(1, command.length()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                throw new DukeException(\"Please follow the format \u0027find patient #\u003cid\u003e\u0027 or \u0027find patient \u003cname\u003e\u0027.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            Patient patient \u003d patientManager.getPatient(id);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            ui.patientsFoundById(patient);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            ArrayList\u003cPatient\u003e patientsWithSameName \u003d patientManager.getPatientByName(command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            ui.patientsFoundByName(patientsWithSameName, command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 56,
      "HUANGXUANKUN": 3
    }
  },
  {
    "path": "src/main/java/duke/command/FindPatientTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.relation.PatientTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class FindPatientTaskCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param cmd ."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public FindPatientTaskCommand(String cmd) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.command \u003d cmd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientTaskList    ."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasksManager       ."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientManager     ."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param ui                 ."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager ."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void execute(PatientTaskList patientTaskList, TaskManager tasksManager, PatientManager patientManager,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        char firstChar \u003d command.charAt(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (firstChar \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            int id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            id \u003d Integer.parseInt(command.substring(1, command.length()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            Patient patient \u003d patientManager.getPatient(id);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (patientTaskList.doesPatientIdExist(id)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                ArrayList\u003cPatientTask\u003e patientTask \u003d patientTaskList.getPatientTask(id);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                ArrayList\u003cTask\u003e tempTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                for (PatientTask tempPatientTask : patientTask) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    tempTask.add(tasksManager.getTask(tempPatientTask.getTaskID()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                ui.patientTaskFound(patient, patientTask, tempTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(\"This patient does not have any tasks.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            String name \u003d command.toLowerCase();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            ArrayList\u003cPatient\u003e patientsWithSameName \u003d patientManager.getPatientByName(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            ArrayList\u003cPatientTask\u003e patientWithTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            ArrayList\u003cTask\u003e tempTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                for (Patient patient : patientsWithSameName) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    if (patient.getName().toLowerCase().equals(name)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                        patientWithTask \u003d patientTaskList.getPatientTask(patient.getID());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                for (PatientTask tempPatientTask : patientWithTask) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                    tempTask.add(tasksManager.getTask(tempPatientTask.getTaskID()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                ui.patientTaskFound(patientsWithSameName.get(0), patientWithTask, tempTask);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                throw new DukeException(\"The patient does not have any tasks\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 63,
      "qjie7": 1,
      "HUANGXUANKUN": 21
    }
  },
  {
    "path": "src/main/java/duke/command/ListPatientsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class ListPatientsCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public ListPatientsCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param patientTask        ."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param tasks              ."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param patientList        ."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param ui                 ."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager ."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void execute(PatientTaskList patientTask, TaskManager tasks, PatientManager patientList,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        Ui ui, StorageManager storageManager) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        ArrayList\u003cPatient\u003e list \u003d patientList.getPatientList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        ui.listAllPatients(list);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 38,
      "HUANGXUANKUN": 3
    }
  },
  {
    "path": "src/main/java/duke/command/ListTasksCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class ListTasksCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param patientTask        ."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param tasks              ."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param patientList        ."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param ui                 ."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager ."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void execute(PatientTaskList patientTask, TaskManager tasks, PatientManager patientList,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        Ui ui, StorageManager storageManager) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d tasks.getTaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        ui.listAllTasks(list);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 33,
      "HUANGXUANKUN": 3
    }
  },
  {
    "path": "src/main/java/duke/command/UpdatePatientCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class UpdatePatientCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String[] command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param command ."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public UpdatePatientCommand(String[] command) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param patientTask        ."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param tasks              ."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param patientManager     ."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param ui                 ."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager ."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void execute(PatientTaskList patientTask, TaskManager tasks, PatientManager patientManager,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        char firstChar \u003d command[0].charAt(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if (firstChar \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            int id;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                id \u003d Integer.parseInt(command[0].substring(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                Patient patientToBeUpdated \u003d patientManager.getPatient(id);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                if (command[1].toLowerCase().equals(\"name\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    patientToBeUpdated.setName(command[2]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (command[1].toLowerCase().equals(\"nric\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    patientToBeUpdated.setNric(command[2]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (command[1].toLowerCase().equals(\"room\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    patientToBeUpdated.setRoom(command[2]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                    throw new DukeException(\"You can only update \u0027Name\u0027, \u0027NRIC\u0027, or \u0027Room\u0027 of the patient\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                storageManager.savePatients(patientManager.getPatientList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                ui.showUpdatedSuccessfully();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                ui.showPatientInfo(patientToBeUpdated);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                throw new DukeException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Please follow the format \u0027update patient :#\u003cid\u003e :\u003cName/NRIC/Room\u003e :\u003cnew information\u003e\u0027.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            throw new DukeException("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"Please follow the format \u0027update patient :#\u003cid\u003e :\u003cName/NRIC/Room\u003e :\u003cnew information\u003e\u0027.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 2,
      "qjie7": 59,
      "-": 12,
      "HUANGXUANKUN": 4
    }
  },
  {
    "path": "src/main/java/duke/command/UpdateTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "//@@kkeejjuunn"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.patient.PatientManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.relation.PatientTaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.task.TaskManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class UpdateTaskCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String[] command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param command ."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public UpdateTaskCommand(String[] command) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param patientTask        ."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param taskManager        ."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param patientManager     ."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param ui                 ."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param storageManager ."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void execute(PatientTaskList patientTask, TaskManager taskManager, PatientManager patientManager,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        char firstChar \u003d command[0].charAt(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if (firstChar \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            int id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                id \u003d Integer.parseInt(command[0].substring(1, command[0].length()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                Task taskToBeUpdated \u003d taskManager.getTask(id);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                if (command[1].toLowerCase().equals(\"description\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskToBeUpdated.setDescription(command[2]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                    throw new DukeException(\"You can only update \u0027Description\u0027 of the task\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                storageManager.saveTasks(taskManager.getTaskList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                ui.showUpdatedSuccessfully();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                ui.showTaskInfo(taskToBeUpdated);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                throw new DukeException("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Please follow the format \u0027update task :#\u003cid\u003e :description :\u003cnew description\u003e\u0027.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 2,
      "qjie7": 51,
      "-": 7,
      "HUANGXUANKUN": 5
    }
  },
  {
    "path": "src/main/java/duke/core/CommandManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "//@@lmtaek"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.AddPatientCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.AddStandardTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.AssignTaskToPatientCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.DeletePatientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.DeletePatientTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.DeleteTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.DukeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.FindPatientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.FindPatientTaskCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.ListPatientsCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.ListTasksCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.UpdatePatientCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.UpdateTaskCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * Represents a Parser that parses user input into a specific"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " * type of Command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class CommandManager {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Decides which command to execute based on keywords available in the user\u0027s input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param userInput The user\u0027s input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return The command dictated by the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public static Command manageCommand(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        userInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String possibleCommand \u003d TypoCorrector.commandCorrection(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (!possibleCommand.equals(userInput)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (Ui.getUi().confirmTypoCorrection(possibleCommand, userInput)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                userInput \u003d possibleCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] command \u003d userInput.toLowerCase().split(\":\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String keyWord \u003d command[0].trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser parser \u003d new Parser(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        switch (keyWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"add patient\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new AddPatientCommand(parser.parseAddPatient());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"add task\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new AddStandardTaskCommand(parser.parseAddTask());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"assign deadline task\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new AssignTaskToPatientCommand(parser.parseAssignDeadlineTask());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"assign event task\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new AssignTaskToPatientCommand(parser.parseAssignEventTask());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"list patients\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new ListPatientsCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"list tasks\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new ListTasksCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"delete assigned task\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new DeletePatientTaskCommand(parser.parseDeleteAssignedTask());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"delete patient\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new DeletePatientCommand(parser.parseDeletePatient());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"delete task\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new DeleteTaskCommand(parser.parseDeleteTask());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"find patient\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new FindPatientCommand((parser.parseFindPatient()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"find assigned tasks\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new FindPatientTaskCommand((parser.parseFindAssignedTasks()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"update patient\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new UpdatePatientCommand(parser.parseUpdatePatient());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        case \"update task\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return new UpdateTaskCommand(parser.parseUpdateTask());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        case \"duke\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new DukeCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            ExitCommand exitCommand \u003d new ExitCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return exitCommand;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            throw new DukeException(\"Could not understand user input.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 49,
      "qjie7": 25,
      "HUANGXUANKUN": 7
    }
  },
  {
    "path": "src/main/java/duke/core/DateTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * update the \u003ccode\u003e LocalDateTime \u003c/code\u003e constructor to save the date and time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timeBeforeFormat the time retrieved from user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A LocalDateTime object that contains date and time information."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static LocalDateTime convertToLocalDateTime(String timeBeforeFormat) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        DateTimeFormatter parser \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            localDateTime \u003d LocalDateTime.parse(timeBeforeFormat, parser);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return localDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DateTimeParseException error) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Invalid format. Please Enter Date and Time in the format of dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    //@@author qjie7"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Returns a string that representing the data and time for the task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * in a predefined English date time format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param timeBeforeFormat A String that provides the data and time information in dd/MM/yyyy HHmm."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return A String that provides date and time in English"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public static String convertToEnglishDateTime(String timeBeforeFormat) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        DateTimeFormatter stFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027st of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        DateTimeFormatter ndFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027nd of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        DateTimeFormatter rdFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027rd of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        DateTimeFormatter thFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027th of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            localDateTime \u003d convertToLocalDateTime(timeBeforeFormat);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            if ((localDateTime.getDayOfMonth() % 10) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                return localDateTime.format(stFormatter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            } else if ((localDateTime.getDayOfMonth() % 10) \u003d\u003d 2) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                return localDateTime.format(ndFormatter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            } else if ((localDateTime.getDayOfMonth() % 10) \u003d\u003d 3) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                return localDateTime.format(rdFormatter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                return localDateTime.format(thFormatter);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *  ."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param localDateTime ."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public static String convertToEnglishDateTimeBeforeParse(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        DateTimeFormatter stFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027st of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        DateTimeFormatter ndFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027nd of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        DateTimeFormatter rdFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027rd of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        DateTimeFormatter thFormatter \u003d DateTimeFormatter.ofPattern(\"d\u0027th of\u0027 MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if ((localDateTime.getDayOfMonth() % 10) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return localDateTime.format(stFormatter);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if ((localDateTime.getDayOfMonth() % 10) \u003d\u003d 2) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return localDateTime.format(ndFormatter);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if ((localDateTime.getDayOfMonth() % 10) \u003d\u003d 3) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return localDateTime.format(rdFormatter);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return localDateTime.format(thFormatter);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 57,
      "-": 23,
      "HUANGXUANKUN": 1
    }
  },
  {
    "path": "src/main/java/duke/core/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *  ."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param message ."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        super(\"Oops! \" + message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 1,
      "-": 6,
      "HUANGXUANKUN": 4
    }
  },
  {
    "path": "src/main/java/duke/core/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "//@@lmtaek"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String userInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String[] parsedInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Constructor for the Parser class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @param userInput Takes in user\u0027s raw input and stores it to use in its methods, parsing it"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *                  into a format that is appropriate for the command it invokes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public Parser(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.userInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            parsedInput \u003d userInput.split(\":\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            throw new DukeException(\"Could not parse user input!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Parses user input so that it is compatible with `add patient` command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * `add patient` output: patient_name, patient_NRIC, patient_room, patient_remark"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return A formatted string that will work for the available `add patient` command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @throws DukeException If the method is unable to parse the userInput correctly, it will throw"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *                       a DukeException."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String[] parseAddPatient() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] formattedOutput \u003d new String[4];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d formattedOutput.length; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                formattedOutput[i - 1] \u003d parsedInput[i].trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return formattedOutput;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            throw new DukeException(\"Please follow the  \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \"`add patient :\u003cpatient name\u003e :\u003cNRIC\u003e :\u003cpatient room\u003e :\u003cpatient_remark\u003e` \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \"format.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Parses user input so that it is compatible with `add task` command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * `add task` output: task_description"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return A formatted string that will work for the available `add task` command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @throws DukeException If the method is unable to parse the userInput correctly, it will throw"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *                       a DukeException."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String parseAddTask() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String formattedOutput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            formattedOutput \u003d parsedInput[1].trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            throw new DukeException(\"Please follow the `add task :\u003ctask description\u003e` format.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        return formattedOutput;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Takes the user input and formats it so it is compatible with `assign deadline task` commands."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * `assign standard task` output: patient_name or #patient_id, task_name or #task_id, deadline"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return A string of formatted output to be used by `assign deadline task` command."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @throws DukeException Thrown when the user input cannot be parsed in the desired manner."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String[] parseAssignDeadlineTask() throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] formattedInput \u003d new String[3];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d formattedInput.length; i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                formattedInput[i - 1] \u003d parsedInput[i].trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return formattedInput;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            throw new DukeException(\"Please follow the \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \"`assign deadline task :\u003cpatient name\u003e or #\u003cpatient id\u003e :#\u003ctask id\u003e or \u003ctask name\u003e \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \":\u003cdd/MM/YYYY HHmm\u003e` format.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Takes the user input and formats it so it is compatible with `assign event task` command."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * `assign event task` output: patient_name or #patient_id, task_name or #task_id, start_time, end_time"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return A string of formatted output to be used by `assign event task` command."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @throws DukeException Thrown when the user input cannot be parsed in the desired manner."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String[] parseAssignEventTask() throws DukeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] formattedInput \u003d new String[4];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            String[] parsedTimes \u003d parsedInput[3].split(\" to \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            for (int i \u003d 1; i \u003c (formattedInput.length - 1); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                formattedInput[i - 1] \u003d parsedInput[i].trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            formattedInput[2] \u003d parsedTimes[0];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            formattedInput[3] \u003d parsedTimes[1];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return formattedInput;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            throw new DukeException(\"Please follow the \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \"`assign event task :\u003cpatient name\u003e or #\u003cpatient id\u003e :#\u003ctask ID\u003e or \u003ctask name\u003e \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \":\u003cdd/MM/YYYY HHmm\u003e to \u003cdd/MM/YYYY HHmm\u003e` format.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Takes the user input and formats it so it is compatible with \u0027delete patient\u0027 command."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * `delete patient` output: patient_name or #patient_id"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return A string of formatted output to be used by \u0027delete patient\u0027 commands."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @throws DukeException Thrown when the user input cannot be parsed in the desired manner."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String parseDeletePatient() throws DukeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            String formattedInput;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            formattedInput \u003d parsedInput[1].trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return formattedInput;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            throw new DukeException(\"Please follow the `delete patient :\u003cpatient name\u003e or #\u003cpatient id\u003e` format\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Takes the user input and formats it so it is compatible with \u0027delete task\u0027 command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * `delete task` output: task_id or task_name"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return A string of formatted output to be used by \u0027delete task\u0027 commands."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @throws DukeException Thrown when the user input cannot be parsed in the desired manner."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String parseDeleteTask() throws DukeException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            String formattedInput;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            formattedInput \u003d parsedInput[1].trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return formattedInput;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            throw new DukeException(\"Please follow the `delete task :\u003ctask name\u003e or #\u003ctask id\u003e` format\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Takes user input and formats it so it is compatible with \u0027delete assigned task\u0027 command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * `delete assigned task` output: patient_name or #patient_id, task_name or #task_id"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * `delete assigned task` output: assigned_task_unique_id"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return Array of strings to be used by \u0027delete assigned task\u0027 command."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @throws DukeException when user input cannot be parsed properly."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String[] parseDeleteAssignedTask() throws DukeException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            String[] formattedInput \u003d new String[2];"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            if (parsedInput.length \u003c\u003d 2) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                formattedInput[0] \u003d parsedInput[1];"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return formattedInput;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d formattedInput.length; i++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    formattedInput[i - 1] \u003d parsedInput[i].trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                return formattedInput;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            throw new DukeException(\"Please follow the `delete assigned task :\u003cpatient name\u003e or #\u003cpatient id\u003e\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \" :\u003ctask name\u003e or #\u003ctask id\u003e` or \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \" `delete patient task :%\u003cunique assigned task id\u003e` format.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Takes the user input and formats it so it is compatible with \u0027update patient\u0027 command."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * `update patient` output: patient_name or #patient_id, edited_field, updated_info"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return A string of formatted output to be used by \u0027update patient\u0027 commands."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @throws DukeException Thrown when the user input cannot be parsed in the desired manner."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String[] parseUpdatePatient() throws DukeException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            String[] formattedInput \u003d new String[3];"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d formattedInput.length; i++) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                formattedInput[i - 1] \u003d parsedInput[i].trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return formattedInput;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            throw new DukeException(\"Please use the `update patient :\u003cpatient name\u003e or #\u003cpatient id\u003e\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \":\u003cedited info type\u003e :\u003cupdated info\u003e` format.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Takes the user input and formats it so it is compatible with \u0027update task\u0027 command."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * `update task` output: task_name or #task_id, updated_description"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return A string of formatted output to be used by \u0027update task\u0027 commands."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @throws DukeException Thrown when the user input cannot be parsed in the desired manner."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String[] parseUpdateTask() throws DukeException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            String[] formattedInput \u003d new String[2];"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d formattedInput.length; i++) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                formattedInput[i - 1] \u003d parsedInput[i].trim();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return formattedInput;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            throw new DukeException(\"Please use the `update task :\u003ctask name\u003e or #\u003ctask id\u003e\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + \" :\u003cupdated description\u003e` format.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Takes the user input and formats it so it is compatible with \u0027find patient\u0027 command."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * `find patient` output: patient_name or #patient_id"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return A string of formatted output to be used by \u0027find patient\u0027 command."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @throws DukeException Thrown when the user input cannot be parsed in the desired manner."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String parseFindPatient() throws DukeException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            String formattedInput \u003d parsedInput[1].trim();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            return formattedInput;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            throw new DukeException(\"Please use the `find patient :\u003cpatient name\u003e or #\u003cpatient id\u003e` format.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Takes the user input and formats it so it is compatible with \u0027find assigned tasks\u0027 command."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * `find assigned tasks` output: patient_name or #patient_id"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @return A string of formatted output to be used by \u0027find assigned tasks\u0027 command."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * @throws DukeException Thrown when the user input cannot be parsed in the desired manner."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public String parseFindAssignedTasks() throws DukeException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            String formattedInput \u003d parsedInput[1].trim();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            return formattedInput;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            throw new DukeException(\"Please use the `find assigned tasks :\u003cpatient name\u003e or #\u003cpatient id\u003e` format.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 214,
      "-": 17,
      "HUANGXUANKUN": 14
    }
  },
  {
    "path": "src/main/java/duke/core/ShortCutter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.AddPatientCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.AddStandardTaskCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.DeletePatientCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.DeleteTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.FindPatientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.ListPatientsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.ListTasksCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.UpdatePatientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.UpdateTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.statistic.Counter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": "//@@author qjie7"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * This is a ShortCutter class to provide short cut implementation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * DukeCommand will be used to activate the short cut mode."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * This is not a simple UI implementation but also considered user\u0027s"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * daily work behavior to provide  personalised short cut solution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * @author QIAN JIE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * @version 1.3"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class ShortCutter {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private Counter counter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public ShortCutter() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * A constructor for ShortCutter class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param counter receive a counter object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param ui      receive a ui object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public ShortCutter(Counter counter, Ui ui) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.counter \u003d counter;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private Map\u003cString, Integer\u003e sortedCommandTable;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private Map\u003cInteger, String\u003e topUsedCommandTable;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * This function is used to allow map to be sorted by its values."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param map a command frequency table in Map structure with key"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *            as the command type and value as the command frequency."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return a Map structure that is sorted according to param\u0027s value"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *         which is the used command frequency."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public static \u003cK, V extends Comparable\u003cV\u003e\u003e Map\u003cK, V\u003e sortByValues(final Map\u003cK, V\u003e map) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Comparator\u003cK\u003e valueComparator \u003d (k1, k2) -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            int compare \u003d map.get(k2).compareTo(map.get(k1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            if (compare \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                return compare;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        };"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Map\u003cK, V\u003e sortedByValues \u003d new TreeMap\u003cK, V\u003e(valueComparator);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        sortedByValues.putAll(map);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return sortedByValues;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * This function is used to generate a topUsedCommandTable based on"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * the data provided from sortedCommandTable."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param sortedCommandTable a sorted command frequency table from high to low in Map structure with key"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *                           as the command type and value as the command frequency."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return a Map structure with key being the index number for user to choose"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *         and value be the command type."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public Map\u003cInteger, String\u003e mapSorter(Map\u003cString, Integer\u003e sortedCommandTable) throws DukeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Map\u003cInteger, String\u003e topCommandTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        ArrayList\u003cString\u003e keys \u003d new ArrayList\u003c\u003e(sortedCommandTable.keySet());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        System.out.println(\"\u003c Most Frequently Used Commands \u003e\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if (sortedCommandTable.size() \u003c 5) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            for (int i \u003d 0; i \u003c sortedCommandTable.size(); i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                int index \u003d i + 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                topCommandTable.put(index, keys.get(i));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                System.out.println(\"[\" + index + \"] \" + commandNameConverter(keys.get(i)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            for (int i \u003d 0; i \u003c 5; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                int index \u003d i + 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                topCommandTable.put(index, keys.get(i));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                System.out.println(\"[\" + index + \"] \" + commandNameConverter(keys.get(i)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        System.out.println(\"Please choose one of these commands\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return topCommandTable;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * This function is used to run the short cut UI logic by getting"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * necessary information from user to provide the target output."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return command the command that is to be executed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @throws DukeException throw a dukeException with error message for debugging."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @author QIAN JIE"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public Command runShortCut() throws DukeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        sortedCommandTable \u003d sortByValues(counter.getCommandTable());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        topUsedCommandTable \u003d mapSorter(sortedCommandTable);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String commandName;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String choiceIndex \u003d ui.readCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        switch (choiceIndex) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            commandName \u003d topUsedCommandTable.get(1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            command \u003d shortCutChecker(commandName);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        case \"2\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            commandName \u003d topUsedCommandTable.get(2);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            command \u003d shortCutChecker(commandName);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        case \"3\":"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            commandName \u003d topUsedCommandTable.get(3);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            command \u003d shortCutChecker(commandName);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        case \"4\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            commandName \u003d topUsedCommandTable.get(4);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            command \u003d shortCutChecker(commandName);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        case \"5\":"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            commandName \u003d topUsedCommandTable.get(5);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            command \u003d shortCutChecker(commandName);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            throw new DukeException(\"Please enter a valid index number shown here\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * This function is used to provide check/filter on possible"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * type of command that is chosen by the user. This check is"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * necessary due the the constantly changing behavior on the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * ranking of the command usages."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return command the command that is to be executed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @throws DukeException throw a dukeException with error message for debugging."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public Command shortCutChecker(String commandName) throws DukeException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if (commandName.equals(\"AddPatientCommand\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String patientName \u003d ui.getPatientInfo(\"name\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String nric \u003d ui.getPatientInfo(\"nric\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String room \u003d ui.getPatientInfo(\"room\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String remark \u003d ui.getPatientInfo(\"remark\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String[] patientInfo \u003d new String[]{patientName, nric, room, remark};"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new AddPatientCommand(patientInfo);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandName.equals(\"AddStandardTaskCommand\")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String taskName \u003d ui.getTaskInfo(\"name\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new AddStandardTaskCommand(taskName);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandName.equals(\"DeletePatientCommand\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String patientId \u003d ui.getPatientInfo(\"id\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new DeletePatientCommand(patientId);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandName.equals(\"DeleteTaskCommand\")) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String taskId \u003d ui.getTaskInfo(\"id\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new DeleteTaskCommand(taskId);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandName.equals(\"FindPatientCommand\")) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String patientId \u003d ui.getPatientInfo(\"id\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new FindPatientCommand(patientId);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandName.equals(\"ListPatientsCommand\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new ListPatientsCommand();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandName.equals(\"ListTasksCommand\")) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new ListTasksCommand();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandName.equals(\"UpdatePatientCommand\")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String patientId \u003d ui.getPatientInfo(\"id\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String infoType \u003d ui.getPatientInfo(\"change\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String changeValue \u003d ui.getPatientInfo((\"changeValue\"));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String[] patientInfo \u003d new String[]{patientId, infoType, changeValue};"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new UpdatePatientCommand(patientInfo);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandName.equals(\"UpdateTaskCommand\")) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String taskId \u003d ui.getTaskInfo(\"id\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String change \u003d ui.getTaskInfo(\"change\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String changeValue \u003d ui.getTaskInfo(\"changeValue\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String[] patientInfo \u003d new String[]{taskId, change, changeValue};"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return new UpdateTaskCommand(patientInfo);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            //Assign patient task will be add..."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            //FindPatientTask will be added...."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            throw new DukeException(\"No matching command!\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * This function is used to convert the provided command class name"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * into a string that is much user friendly and easy to read by the user."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param commandClassName the command class name chosen by the user"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return a String that is easy to read by the user."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @throws DukeException throw a dukeException with error message for debugging."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public String commandNameConverter(String commandClassName) throws DukeException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        String convertedName;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if (commandClassName.equals(\"AddPatientCommand\")) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Add Patient\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"AddStandardTaskCommand\")) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Add a Standard Task\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"DeletePatientCommand\")) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Delete a Patient\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"DeleteTaskCommand\")) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Delete a Task\";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"FindPatientCommand\")) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Find a Patient\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"FindPatientTaskCommand\")) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Find a patient with task \";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"ListPatientsCommand\")) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Show all the patient\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"ListTasksCommand\")) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Show all the tasks\";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"UpdatePatientCommand\")) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Update Patient information\";"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"UpdateTaskCommand\")) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Update Task information\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (commandClassName.equals(\"AssignTaskToPatientCommand\")) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            convertedName \u003d \"Assign a task to a patient\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return convertedName;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            throw new DukeException(\"No matching command!\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 269
    }
  },
  {
    "path": "src/main/java/duke/core/TypoCorrector.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.apache.commons.text.similarity.LevenshteinDistance;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * This is a command typo corrector for Duke user command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * It provides a method TypoCorrector.CommandCorrection which takes in an invalid input command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * and return a possible matched command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * @author HUANG XUAN KUN"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * @version 1.2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class TypoCorrector {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    //The maximum ratio changes of a text in % that is acceptable"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final double MAX_DISTANCE_DIFF_RATIO \u003d 0.5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    //Sets of \"Dictionaries\" for the command keyword, categorised by number of keywords contain in a supported commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String[] simpleCommands \u003d {\"bye\", \"duke\", \"help\", \"list patients\", \"list tasks\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String[] otherCommands \u003d {\"update patient\", \"update task\", \"delete patient\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        \"delete task\", \"delete assigned task\", \"add task\", \"add patient\", \"find patient\", \"find task\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        \"find assigned task\", \"assign deadline task\", \"assign event task\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * This method take in an user input command with typo and return a possible matches"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * If the return string is equal to the input command, there is no match."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param command the full userInput command without parsing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a string of correctedCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public static String commandCorrection(String command) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String[] splitCommand \u003d command.split(\":\", 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        int commandSize \u003d splitCommand.length;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String closestMatch;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (commandSize \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            // Type A command with only command keywords"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String fullCommand \u003d command.trim().toLowerCase();//Ignore spaces(back and fore)and upper/lower cases"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            closestMatch \u003d matchStringFromDict(fullCommand, simpleCommands); //get closest match"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (isSimilar(fullCommand, closestMatch)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return closestMatch;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else if (commandSize \u003d\u003d 2) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            // Type B command with command keywords and other info/data"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String keyword \u003d splitCommand[0].trim().toLowerCase(); //Ignore spaces(back and fore)and upper/lower cases"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            closestMatch \u003d matchStringFromDict(keyword, otherCommands); //get closest match"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (isSimilar(keyword, closestMatch)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                splitCommand[0] \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return closestMatch + \" \" + String.join(\":\", splitCommand).trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return command; // The input command will be return if there is no matched found"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Get the closest match string from the array targetDict."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param str the arbitrary string"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return the closest matching from the target dict"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static String matchStringFromDict(String str, String[] targetDict) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        int minDist \u003d 256;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        String closestMatch \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        for (String keyword : targetDict) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            int currDist \u003d getDistance(keyword, str);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (currDist \u003c minDist) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                if (currDist \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    return keyword;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                minDist \u003d currDist;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                closestMatch \u003d keyword;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return closestMatch;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Get Levenshtein distance between target and an arbitrary string."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param str the arbitrary string"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return the difference of two strings measured in distance"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static Integer getDistance(String str, String target) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        LevenshteinDistance distance \u003d new LevenshteinDistance();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return distance.apply(str, target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Method indicating if a message can be considered similar, based on Levenshtein distance"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * calculation with an allowed variation of 50%."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * \u003cb\u003eNote:\u003c/b\u003e Max tolerated distance is derived from the current scenario\u0027s error message"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * The arbitrary MAX_DISTANCE_DIFF_RATIO (50%) means we consider 10% change to be acceptable"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param referenceText the reference text"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param targetText    the target text for the comparison"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return true if the can be considered similar else false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public static boolean isSimilar(String referenceText, String targetText) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        int threshold \u003d (int) Math.round(MAX_DISTANCE_DIFF_RATIO * referenceText.length());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        LevenshteinDistance levenshteinDistance \u003d new LevenshteinDistance(threshold);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return levenshteinDistance.apply(referenceText, targetText) !\u003d -1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 103
    }
  },
  {
    "path": "src/main/java/duke/core/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.relation.PatientTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * Represents the necessary ui elements for user interaction."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Scanner to read user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Constructs a singleton Ui design pattern by using lazy initialization."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private Ui() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * static method to create instance of Singleton class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return Ui"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public static Ui getUi() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if (ui \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads user instruction."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return A string that represents the user instruction."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Display the error message start with an emoji."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param errorMessage the message of error/exception"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"\\u2639\" + errorMessage); // Emoji of sad face"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Print out message to indicate task is added."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param standardTask the standard task contains its description"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void taskAdded(Task standardTask) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + standardTask.getDescription());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Print out message to show Patient\u0027s info."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patient it contains patient\u0027s information"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void showPatientInfo(Patient patient) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Name: \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + patient.getName()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + \"  Id: \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + patient.getID()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + \"\\nNRIC: \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + patient.getNric()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + \"  Room: \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + patient.getRoom()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + \"\\nRemark: \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + patient.getRemark());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Print out the info of a task."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param task any task which contains description"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showTaskInfo(Task task) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Task: \" + task.getDescription());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Display all the patients with the similar name."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patients a list contains patient with similar name"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param name     the name given by user for search"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void patientsFoundByName(ArrayList\u003cPatient\u003e patients, String name) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (patients.size() \u003e 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"Got it. \" + patients.size() + \" patients is/are found with name: \" + name);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Patient patient : patients) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                System.out.println(\"Patient #\" + i);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                showPatientInfo(patient);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                showLine();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"No patient was found with name: \" + name);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Display all the tasks with same description name."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasks       task with same name being found"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param description the description of task being search"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tasksFoundByDescription(ArrayList\u003cTask\u003e tasks, String description) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Got it. \" + tasks.size() + \" tasks is/are found with description: \" + description);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            int i \u003d 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Task #\" + i);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                showTaskInfo(task);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                showLine();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"No task was found with description: \" + description);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Print out patient is being found."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patient patient being found"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void patientsFoundById(Patient patient) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Got it. The patient is found.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        showPatientInfo(patient);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Print message of a patient is being added."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patient it contains info of the patient being added"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void patientAdded(Patient patient) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Got it. The following patient has been added:  \");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        showPatientInfo(patient);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Print message of a patient is being assigned to task."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientTask it contains the patient task relation and its info"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patientName the name of patient being assigned"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskName    the name of task which is associated with the patient"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void patientTaskAssigned(PatientTask patientTask, String patientName, String taskName) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        System.out.println(\"Got it. The following Patient ID: \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + patientTask.getPatientId()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + patientName"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + \" has been assigned the Task ID: \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + patientTask.getTaskID()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + \" \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + taskName);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * It asks user to choose a patient to be deleted from a list of patients."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param numberOfPatients the number of patients contain in the list"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return the number being choosen by user. If return -1, it means user canceled the deletion"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public int choosePatientToDelete(int numberOfPatients) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        int chosenNumber \u003d -1;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"Enter the index number of the patient to delete, or enter number 0 to cancel: \");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String command \u003d readCommand();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                chosenNumber \u003d Integer.parseInt(command);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                System.out.println(\"Please enter a valid number!\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (chosenNumber \u003e\u003d 0 \u0026\u0026 chosenNumber \u003c\u003d numberOfPatients) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                if (chosenNumber \u003d\u003d 0) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    System.out.println(\"Delete command is canceled.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                return chosenNumber;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                System.out.println(\"The patient #\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        + chosenNumber"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        + \" does not exist. Please enter a valid index number!\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    //@@author kkeejjuunn"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It asks user to choose a task to be deleted from a list of tasks."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param numberOfTasks the number of task contain in the list"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return the index being chosen by user. If return -1, it means user canceled the deletion"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public int chooseTaskToDelete(int numberOfTasks) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        int chosenNumber \u003d -1;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            System.out.println(\"Enter the index of task to delete, or enter number 0 to cancel: \");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String command \u003d readCommand();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                chosenNumber \u003d Integer.parseInt(command);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                System.out.println(\"Please enter a valid number!\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            if (chosenNumber \u003e\u003d 0 \u0026\u0026 chosenNumber \u003c\u003d numberOfTasks) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                if (chosenNumber \u003d\u003d 0) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    System.out.println(\"Delete command is canceled\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                return chosenNumber;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                System.out.println(\"The task #\" + chosenNumber + \" does not exist. Please enter a valid number!\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It confirms with user on the deletion of a patient."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It reminds user that the tasks assigned to this user will be delete"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * If user confirms, key in \u0027Y\u0027. Otherwise key in \u0027N\u0027."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patient it contains patient\u0027s info"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param withTasksAssigned it indicates whether the patient is assigned to any tasks"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return true if user confirmed the deletion. False otherwise."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public boolean confirmPatientToBeDeleted(Patient patient, boolean withTasksAssigned) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            if (withTasksAssigned) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                System.out.println(\"The patient with above tasks assigned is to be deleted. Are you sure (Y/N)?\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                System.out.println(\"The patient is to be deleted. Are you sure (Y/N)? \");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String command \u003d readCommand();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            if (command.toLowerCase().equals(\"y\")) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } else if (command.toLowerCase().equals(\"n\")) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                System.out.println(\"Delete command is canceled\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                System.out.println(\"Please enter only Y/N to confirm/cancel deletion!\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It shows message of a patient being deleted."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void patientDeleted() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        System.out.println(\"Got it. The patient is deleted.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    //@@author kkeejjuunn"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It shows message of a task being deleted successfully."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void taskDeleted() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        System.out.println(\"Got it. The task is deleted.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It lists out all info of patients."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param id the patients to be listed out"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void patientTaskDeleted(int id) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        System.out.println(\"Got it. The task with unique ID: \" + id + \" has been deleted\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It lists out all info of patients."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patient the patients to be listed out"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void patientTaskAllDeleted(Patient patient) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        System.out.println(\"Got it. The tasks belong to: \");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        System.out.println(patient.getName());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        System.out.println(\"has been deleted\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It lists out all info of patients."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patients the patients to be listed out"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void listAllPatients(ArrayList\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        for (Patient patient : patients) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            showPatientInfo(patient);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            showLine();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It lists out all info of tasks."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param taskList the tasks to be listed out"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void listAllTasks(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        System.out.println(\"Here\u0027s a list of your tasks: \\n\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            System.out.println(index"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    + \". \""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    + task.getDescription()"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    + \" (ID: \""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    + task.getID()"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    + \")\""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                    + \"\\n\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    //@@author kkeejjuunn"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It confirms with user on the deletion of a task."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It alerts user that the deletion will cause the current patient who assigned"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * to this task will no longer assigned to this task."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * If user confirms, key in \u0027Y\u0027. Otherwise key in \u0027N\u0027."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param task contains task\u0027s info"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param assignedToAnyPatient indicates whether the task is assigned to any patient"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return true if user confirmed the deletion. False otherwise."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public boolean confirmTaskToBeDeleted(Task task, boolean assignedToAnyPatient) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            if (assignedToAnyPatient) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                System.out.println(\"The task is to be deleted. These patients will no \""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                        + \"longer assigned to this task. Are you sure (Y/N)?\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                System.out.println(\"The task is to be deleted. Are you sure (Y/N)? \");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String command \u003d readCommand();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            if (command.toLowerCase().equals(\"y\")) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } else if (command.toLowerCase().equals(\"n\")) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                System.out.println(\"Delete command is canceled\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                System.out.println(\"Please enter only Y/N to confirm/cancel deletion!\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It confirms with user on the deletion of a task."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * If user confirms, key in \u0027Y\u0027. Otherwise key in \u0027N\u0027."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param correctedCommand the correctedCommand"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @return true if user confirmed the deletion. False otherwise."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public boolean confirmTypoCorrection(String correctedCommand, String userInput) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        System.out.println(\"Ambiguous format! Did you mean(Y/N): \\n\" + correctedCommand);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            String command \u003d readCommand();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            if (command.toLowerCase().equals(\"y\")) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } else if (command.toLowerCase().equals(\"n\")) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                System.out.println(\"Proceed with original command: \" + userInput);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                System.out.println(\"Please enter only Y/N to proceed with recommended command: \" + correctedCommand);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Shows a divider line."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Shows bye message to user."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void exitInformation() {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Shows Duke logo and welcome message, and user input instructions."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        String logo \u003d \" _____        _              _ _        _ \\n\""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                \"|  __ \\\\      | |            (_) |      | |\\n\""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                \"| |  | |_   _| | _____ _ __  _| |_ __ _| |\\n\""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                \"| |  | | | | | |/ / _ \\\\ \u0027_ \\\\| | __/ _` | |\\n\""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                \"| |__| | |_| |   \u003c  __/ |_) | | || (_| | |\\n\""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                \"|_____/ \\\\__,_|_|\\\\_\\\\___| .__/|_|\\\\__\\\\__,_|_|\\n\""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                \"                      | |                 \\n\""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                \"                      |_|                 \\n\";"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\\n\\n\");"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        System.out.println(\"Enter \u0027help\u0027 to show a list of commands \");"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Show information is being updated successfully."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void showUpdatedSuccessfully() {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        System.out.println(\"I have successfully updated the following information: \\n\");"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * Show message of loading failure."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        System.out.println(\"Failed to load from local data file!\");"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It shows all info of patientTasks found which are associated with the patient given by user."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patient     patient given by user"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientTask list of patienttasks being found associated with the patient"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param tasks       list of tasks relate to patienttasks found"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void patientTaskFound(Patient patient, ArrayList\u003cPatientTask\u003e patientTask, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        System.out.println(\"The tasks of patient \" + patient.getID() + \" \" + patient.getName() + \" is found : \\n\");"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        for (int i \u003d 0; i \u003c patientTask.size(); i++) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            showLine();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            System.out.println(tasks.get(i).getID() + \". \" + tasks.get(i).getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            System.out.println(patientTask.get(i).toString());"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            showLine();"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    //@@author kkeejjuunn"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * It shows all info of patientTasks found which are associated with the task given by user."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param task     task given by user"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patientTask list of patienttasks being found associated with the task"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     * @param patients       list of patients relate to task"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public void taskPatientFound(Task task, ArrayList\u003cPatientTask\u003e patientTask, ArrayList\u003cPatient\u003e patients) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        System.out.println(\"The task \" + task.getID() + \" \" + task.getDescription()"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "                + \" assigned to following patient(s) is/are found : \\n\");"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        for (int i \u003d 0; i \u003c patientTask.size(); i++) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            showLine();"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            System.out.println(patients.get(i).getID() + \". \" + patients.get(i).getName() + \"\\n\");"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            System.out.println(patientTask.get(i).toString());"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "            showLine();"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    //@@author qjie7"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Provide the necessary task details from the user for short cut feature."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param info The type of task information that want to be retrieved."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return Either the task name or task id depend on the parameter info."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @throws DukeException throw a dukeException with error message for debugging."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @author QIAN JIE"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @version 1.3"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public String getTaskInfo(String info) throws DukeException {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if (info.equals(\"name\")) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            System.out.println(\"Task Name ?\");"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String taskName \u003d ui.readCommand();"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return taskName;"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (info.equals(\"id\")) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            System.out.println(\"Task ID?\");"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String taskId \u003d \"#\" + ui.readCommand();"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return taskId;"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (info.equals(\"change\")) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            System.out.println(\"What would you like to change??\");"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String change \u003d ui.readCommand();"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return change;"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (info.equals(\"changeValue\")) {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            System.out.println(\"Change to ?\");"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String changeValue \u003d ui.readCommand();"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return changeValue;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            throw new DukeException(\"Please provide a proper parameter into getPatient function!\");"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * Provide the necessary patient details from the user for short cut feature."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param info The type of task information that want to be retrieved."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @return Either the task name or task id depend on the parameter info."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @throws DukeException throw a dukeException with error message for debugging."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @author QIAN JIE"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @version 1.3"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public String getPatientInfo(String info) throws DukeException {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if (info.equals(\"name\")) {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            System.out.println(\"Patient Name ?\");"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String patientName \u003d ui.readCommand();"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return patientName;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (info.equals(\"id\")) {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            System.out.println(\"Patient ID Number ?\");"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String patientId \u003d \"#\" + ui.readCommand();"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return patientId;"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (info.equals(\"nric\")) {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            System.out.println(\"NRIC?\");"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String nric \u003d ui.readCommand();"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return nric;"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (info.equals(\"room\")) {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            System.out.println(\"Room??\");"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String room \u003d ui.readCommand();"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return room;"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (info.equals(\"remark\")) {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            System.out.println(\"Remarks?\");"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String remark \u003d ui.readCommand();"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return remark;"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (info.equals(\"change\")) {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            System.out.println(\"what would you like to change?\");"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String change \u003d ui.readCommand();"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return change;"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else if (info.equals(\"changeValue\")) {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            System.out.println(\"Change to ?\");"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String changeValue \u003d ui.readCommand();"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return changeValue;"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            throw new DukeException(\"Please provide a proper parameter into getPatient function!\");"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 1,
      "WEIFENG-NUSCEG": 5,
      "kkeejjuunn": 270,
      "qjie7": 93,
      "-": 84,
      "HUANGXUANKUN": 105
    }
  },
  {
    "path": "src/main/java/duke/patient/Patient.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a Patient."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class Patient {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private int id \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String nric;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String remark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String room;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param id     ."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param name   ."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param nric   ."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param room   ."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param remark ."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Patient(int id, String name, String nric, String room, String remark) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Initialises the minimum fields required to setup a Patient."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param name   A String that represent the full name of the patient."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param remark Remark leaves by nurses."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Patient(String name, String nric, String room, String remark) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return name; //return tick or X symbols"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public int getID() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String getRemark() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String getRoom() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return room;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public String getNric() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return nric;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param id ."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void setID(int id) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param name ."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param nric ."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void setNric(String nric) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.nric \u003d nric;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param room ."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void setRoom(String room) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 11,
      "HUANGXUANKUN": 112
    }
  },
  {
    "path": "src/main/java/duke/patient/PatientManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.patient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class PatientManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private HashMap\u003cInteger, Patient\u003e patientIdMap \u003d new HashMap\u003cInteger, Patient\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private int maxId \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * instantiate a new TaskList with a empty list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public PatientManager(ArrayList\u003cPatient\u003e patientList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        for (Patient patient : patientList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            patientIdMap.put(patient.getID(), patient);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (!patientList.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            this.maxId \u003d patientList.get(patientList.size() - 1).getID();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param id ."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isExist(int id) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (patientIdMap.containsKey(id)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param id ."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Patient getPatient(int id) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (patientIdMap.containsKey(id)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            return patientIdMap.get(id);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(\"The patient with id \" + id + \" does not exist.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param name ."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ArrayList\u003cPatient\u003e getPatientByName(String name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        name \u003d name.toLowerCase();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cPatient\u003e patientsWithThisName \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        for (Patient patient : patientIdMap.values()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (patient.getName().toLowerCase().equals(name)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                patientsWithThisName.add(patient);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return patientsWithThisName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patient ."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void addPatient(Patient patient) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (patient.getID() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            maxId +\u003d 1; //Increment maxId by 1 for the new coming patient"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            patient.setID(maxId); //Set the unique id to patient"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        patientIdMap.put(patient.getID(), patient);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ArrayList\u003cPatient\u003e getPatientList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return new ArrayList\u003c\u003e(patientIdMap.values());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param id ."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void deletePatient(int id) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        if (patientIdMap.containsKey(id)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            patientIdMap.remove(id);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(\"The patient with id \" + id + \" does not exist.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 7,
      "qjie7": 8,
      "HUANGXUANKUN": 92
    }
  },
  {
    "path": "src/main/java/duke/relation/EventPatientTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.relation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class EventPatientTask extends PatientTask {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private LocalDateTime startTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private LocalDateTime endTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private String startTimeRaw;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private String endTimeRaw;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private long duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param pid   ."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tid   ."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param stime ."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param etime ."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param type  ."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public EventPatientTask(int pid, int tid, String stime, String etime, String type) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super(pid, tid, type);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.startTimeRaw \u003d stime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.endTimeRaw \u003d etime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            this.startTime \u003d DateTimeParser.convertToLocalDateTime(stime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            this.endTime \u003d DateTimeParser.convertToLocalDateTime(etime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(\"The date time format is wrong!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        duration \u003d Duration.between(startTime, endTime).toMillis();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param pid          ."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tid          ."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param isDone       ."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param isRecurrsive ."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param stime        ."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param etime        ."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param type         ."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public EventPatientTask(int pid, int tid, boolean isDone,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                            boolean isRecurrsive, String stime, String etime, String type) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super(pid, tid, isDone, isRecurrsive, type);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.startTimeRaw \u003d stime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.endTimeRaw \u003d etime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            this.startTime \u003d DateTimeParser.convertToLocalDateTime(stime);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            this.endTime \u003d DateTimeParser.convertToLocalDateTime(etime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(\"The date time format is wrong!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        duration \u003d Duration.between(startTime, endTime).toMillis();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getStartTimeRaw() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return startTimeRaw;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getEndTimeRaw() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return endTimeRaw;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public LocalDateTime getEndTime() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param time ."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void updateStartTime(String time) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            this.startTime \u003d DateTimeParser.convertToLocalDateTime(time);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param time ."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void updateEndTime(String time) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            this.endTime \u003d DateTimeParser.convertToLocalDateTime(time);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public long retrieveDuration() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.duration;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return super.printStatus() + \" From \" + DateTimeParser"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                .convertToEnglishDateTimeBeforeParse(startTime)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + \" To \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                + DateTimeParser.convertToEnglishDateTimeBeforeParse(endTime);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 82,
      "HUANGXUANKUN": 67
    }
  },
  {
    "path": "src/main/java/duke/relation/PatientTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.relation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public abstract class PatientTask {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private Integer patientId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private Integer taskID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private Integer uuid \u003d 0;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private boolean isRecurrsive \u003d false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private String taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param pid  ."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tid  ."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param type ."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public PatientTask(int pid, int tid, String type) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.patientId \u003d pid;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.taskID \u003d tid;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.taskType \u003d type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param id ."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void setUid(int id) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.uuid \u003d id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param pid          ."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tid          ."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param isdone       ."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param isrecurrsive ."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param type         ."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public PatientTask(int pid, int tid, boolean isdone, boolean isrecurrsive, String type) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.patientId \u003d pid;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.taskID \u003d tid;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.taskType \u003d type;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.isDone \u003d isdone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.isRecurrsive \u003d isrecurrsive;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public int getUid() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.uuid;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public Integer getPatientId() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return patientId;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public Integer getTaskID() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return taskID;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isRecurrsive() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return isRecurrsive;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void markRecurr() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.isRecurrsive \u003d true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void undoRecurr() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.isRecurrsive \u003d false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void undoIsDone() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param pid ."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tid ."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void updateId(int pid, int tid) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.patientId \u003d pid;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.taskID \u003d tid;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); // unicode icon"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getRecurrsiveIcon() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return (isRecurrsive ? \"\\u0298\" : \"\\u0275\"); // unicode icon"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String printStatus() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return \" Unique ID \" + uuid + \" \" + \"[\" + this.getStatusIcon() + \"] \" + \"[\" + this.getRecurrsiveIcon() + \"] \";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 88,
      "HUANGXUANKUN": 87
    }
  },
  {
    "path": "src/main/java/duke/relation/PatientTaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.relation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import com.google.common.collect.ArrayListMultimap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import com.google.common.collect.Multimap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * Represents a list of Task that can perform operations such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * add and delete on the tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class PatientTaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * An ArrayList structure."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private Multimap\u003cInteger, PatientTask\u003e patientTaskIdMap \u003d ArrayListMultimap.create();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    int maxId \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param newPatientTaskList ."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public PatientTaskList(ArrayList\u003cPatientTask\u003e newPatientTaskList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        for (PatientTask patientTasK : newPatientTaskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (patientTasK.getUid() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                maxId +\u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                patientTasK.setUid(maxId);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            patientTaskIdMap.put(patientTasK.getPatientId(), patientTasK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (!newPatientTaskList.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            this.maxId \u003d newPatientTaskList.get(newPatientTaskList.size() - 1).getUid();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public ArrayList\u003cPatientTask\u003e fullPatientTaskList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return new ArrayList\u003cPatientTask\u003e(patientTaskIdMap.values());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param t ."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void addPatientTask(PatientTask t) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (t.getUid() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            maxId +\u003d 1; //Increment maxId by 1 for the new coming patient"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            t.setUid(maxId); //Set the unique id to patient"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        patientTaskIdMap.put(t.getPatientId(), t);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param uid ."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void deletePatientTaskByUniqueId(int uid) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        for (PatientTask patientTask : patientTaskIdMap.values()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (patientTask.getUid() \u003d\u003d uid) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                patientTaskIdMap.remove(patientTask.getPatientId(), patientTask);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @param id ."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void deleteAllPatientTaskByTaskId(int id) throws DukeException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        for (PatientTask patientTask : patientTaskIdMap.values()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (patientTask.getTaskID() \u003d\u003d id) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                patientTaskIdMap.remove(patientTask.getPatientId(), patientTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean doesUidExist(int id) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        for (PatientTask patientTask: patientTaskIdMap.values()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (patientTask.getUid() \u003d\u003d id) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean doesPatientIdExist(int id) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (patientTaskIdMap.containsKey(id)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public boolean isSameTaskExist(PatientTask patientTask) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        for (PatientTask newPatientTask: patientTaskIdMap.values()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (newPatientTask.equals(patientTask)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param pid ."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void deleteAllTasksBelongToThePatient(Integer pid) throws DukeException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (patientTaskIdMap.containsKey(pid)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            patientTaskIdMap.removeAll(pid);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(\"Patient id: \" + pid + \" does not have any tasks!\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param pid ."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public ArrayList\u003cPatientTask\u003e getPatientTask(int pid) throws DukeException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (patientTaskIdMap.containsKey(pid)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            ArrayList\u003cPatientTask\u003e tempArray \u003d new ArrayList\u003cPatientTask\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            tempArray.addAll(patientTaskIdMap.get(pid));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return tempArray;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(\"The patient with id \" + pid + \" does not have any tasks.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tid ."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException ."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public ArrayList\u003cPatientTask\u003e getTaskPatient(int tid) throws DukeException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        ArrayList\u003cPatientTask\u003e tempArray \u003d new ArrayList\u003cPatientTask\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        for (PatientTask patientTask : patientTaskIdMap.values()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            if (patientTask.getTaskID() \u003d\u003d tid) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                tempArray.add(patientTask);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        if (tempArray.size() !\u003d 0) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return tempArray;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(\"The Task with id \" + tid + \" has not been assigned to any patients\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 146,
      "HUANGXUANKUN": 43
    }
  },
  {
    "path": "src/main/java/duke/relation/StandardPatientTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "package duke.relation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class StandardPatientTask extends PatientTask {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    private String deadlineRaw;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param pid ."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tid ."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param timeBeforeFormat ."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param type ."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public StandardPatientTask(int pid, int tid, String timeBeforeFormat, String type) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super(pid, tid, type);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.deadlineRaw \u003d timeBeforeFormat;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            this.deadline \u003d DateTimeParser.convertToLocalDateTime(timeBeforeFormat);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(\"The date time format is wrong!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *  ."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param pid ."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tid ."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param isdone ."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param isrecurrsive ."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param timeBeforeFormat ."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param type ."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public StandardPatientTask(int pid, int tid, boolean isdone, boolean isrecurrsive,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "                               String timeBeforeFormat, String type) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        super(pid, tid, isdone, isrecurrsive, type);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.deadlineRaw \u003d timeBeforeFormat;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            this.deadline \u003d DateTimeParser.convertToLocalDateTime(timeBeforeFormat);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            throw new DukeException(\"The date time format is wrong!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *  ."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public LocalDateTime getDeadline() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return  this.deadline;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     *  ."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String getDeadlineRaw() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return this.deadlineRaw;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *  ."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param time ."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public void updateDeadline(String time) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            this.deadline \u003d DateTimeParser.convertToLocalDateTime(time);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *  ."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return super.printStatus() + \" \" + DateTimeParser.convertToEnglishDateTimeBeforeParse(deadline);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WEIFENG-NUSCEG": 53,
      "HUANGXUANKUN": 34
    }
  },
  {
    "path": "src/main/java/duke/statistic/Counter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package duke.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.DukeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qjie7"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qjie7"
        },
        "content": "//@@author qjie7"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qjie7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * This is a Counter class that mainly used for counting purpose."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * @author QIAN JIE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qjie7"
        },
        "content": " * @version 1.3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qjie7"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class Counter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    private Map\u003cString, Integer\u003e commandTable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public Counter(Map\u003cString, Integer\u003e commandTable) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        this.commandTable \u003d commandTable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public Map\u003cString, Integer\u003e getCommandTable() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        return commandTable;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * This function is used to run the command counter."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param command the command type that is being processed"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @param counter get the Counter object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @author QIAN JIE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     * @version 1.3"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qjie7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public void runCommandCounter(Command command, StorageManager storageManager,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                                  Counter counter) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        if (!(command instanceof ExitCommand || command instanceof DukeCommand)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            String commandName \u003d command.getClass().getSimpleName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            int count \u003d commandTable.containsKey(commandName)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qjie7"
        },
        "content": "                    ? commandTable.get(commandName) : 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            commandTable.put(commandName, count + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qjie7"
        },
        "content": "            storageManager.saveCounters(counter.getCommandTable());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qjie7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 50,
      "HUANGXUANKUN": 1
    }
  },
  {
    "path": "src/main/java/duke/storage/CsvStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.apache.commons.csv.CSVFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.apache.commons.csv.CSVPrinter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.apache.commons.csv.CSVRecord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class CsvStorage extends Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Constructs a Storage object with a specific file path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param filePath A string that represents the path of the file to read or"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *                 write."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public CsvStorage(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param infoList A list of records to be to be written in rows to csv file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param headers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void write(ArrayList\u003cArrayList\u003cString\u003e\u003e infoList, String[] headers) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            BufferedWriter writer \u003d Files.newBufferedWriter(Paths.get(this.filePath));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            // Set up csv printer with headers given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            CSVPrinter csvPrinter \u003d new CSVPrinter(writer, CSVFormat.DEFAULT.withHeader(headers));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (ArrayList\u003cString\u003e row : infoList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                csvPrinter.printRecord(row);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            csvPrinter.flush();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Read data from the file and store into a ArrayList of task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A list of rows in Map with header as key and column in row as value"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException If file is not found."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ArrayList\u003cMap\u003cString, String\u003e\u003e read() throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Initialize capacity for 3000 rows of records."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cMap\u003cString, String\u003e\u003e infoList \u003d new ArrayList\u003c\u003e(3000);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        File csvFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            if (csvFile.createNewFile()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                System.out.println(\"File \" + filePath + \" is created.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                Reader in \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                Iterable\u003cCSVRecord\u003e records \u003d CSVFormat.EXCEL.withFirstRecordAsHeader().parse(in);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                for (CSVRecord record : records) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    // There are maximum 9 columns per row"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    Map\u003cString, String\u003e headerValueMap \u003d record.toMap();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    infoList.add(headerValueMap);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            return infoList;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(\"Loading of \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + filePath"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + \" is unsuccessful.\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    + \"e.getMessage()\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 84
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public abstract class Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Write info to local csv files."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param infoList A list of records to be to be written in rows to csv file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException throw exception with error message when i/o fails"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public abstract void write(ArrayList\u003cArrayList\u003cString\u003e\u003e infoList, String[] headers) throws DukeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Load the patients\u0027 info from local csv files."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A list of rows in Map with header as key and column in row as value"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException throw a dukeException with error message for debugging"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public abstract ArrayList\u003cMap\u003cString, String\u003e\u003e read() throws DukeException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 25
    }
  },
  {
    "path": "src/main/java/duke/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.patient.Patient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.relation.EventPatientTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.relation.PatientTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.relation.StandardPatientTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * It is a centralized class to manage all the storages related to data w/r."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * It provides API for saving during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String COMMAND_COUNTER_FILENAME \u003d \"counter.csv\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String PATIENT_FILENAME \u003d \"patients.csv\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String ASSIGNED_TASK_FILENAME \u003d \"patientsTasks.csv\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String STANDARD_TASK_FILENAME \u003d \"standardTasks.csv\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String[] COMMAND_COUNTER_HEADERS \u003d {\"Command Name\", \"Frequency\"};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String[] ASSIGNED_TASK_HEADERS \u003d {\"PID\", \"TID\", \"DONE\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        \"RECURRENCE\", \"DEADLINE\", \"STARTTIME\", \"ENDTIME\", \"TASKTYPE\", \"uuid\"};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String[] PATIENT_HEADERS \u003d {\"Id\", \"Name\", \"NRIC\", \"Room\", \"Remark\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private static final String[] STANDARD_TASK_HEADERS \u003d {\"Id\", \"Description\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private CsvStorage commandCounterStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private CsvStorage patientStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private CsvStorage assignedTaskStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private CsvStorage standardTaskStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Initialize all storages to perform save/load of all data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param filePath relative path of where all local data store"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public StorageManager(String filePath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.commandCounterStorage \u003d new CsvStorage(filePath + \"/\" + COMMAND_COUNTER_FILENAME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.patientStorage \u003d new CsvStorage(filePath + \"/\" + PATIENT_FILENAME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.assignedTaskStorage \u003d new CsvStorage(filePath + \"/\" + ASSIGNED_TASK_FILENAME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.standardTaskStorage \u003d new CsvStorage(filePath + \"/\" + STANDARD_TASK_FILENAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Save patient data in the format of(\"Id\", \"Name\", \"NRIC\", \"Room\", \"Remark\") to local csv files."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param patients a list containing patient\u0027s info"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void savePatients(ArrayList\u003cPatient\u003e patients) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Initialize capacity of 3000 rows of patient\u0027s information"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e infoList \u003d new ArrayList\u003c\u003e(3000);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Patient patient : patients) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                ArrayList\u003cString\u003e row \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                row.add(String.valueOf(patient.getID())); // Append value of column ID in a row"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                row.add(patient.getName()); // Append value of column Name in a row"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                row.add(patient.getNric()); // Append value of column Nric in a row"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                row.add(patient.getRoom()); // Append value of column Room in a row"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                row.add(patient.getRemark()); // Append value of column Remark in a row"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                infoList.add(row);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            patientStorage.write(infoList, PATIENT_HEADERS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Save task data in the format of (\"Id\", \"Description\") to local csv files."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param tasks a list containing task\u0027s info"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void saveTasks(ArrayList\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Initialize capacity of 30 rows of standard task\u0027s info"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e infoList \u003d new ArrayList\u003c\u003e(3000);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                ArrayList\u003cString\u003e row \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                row.add(String.valueOf(task.getID())); // Append value of column ID in a row"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                row.add(task.getDescription()); // Append value of column description in a row"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                infoList.add(row);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            standardTaskStorage.write(infoList, STANDARD_TASK_HEADERS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Save patientTask data in the format of (\"Id\", \"Description\") to local csv files."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param assignedTasks a list of patientTask"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException show saving error message"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void saveAssignedTasks(ArrayList\u003cPatientTask\u003e assignedTasks) throws DukeException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Initialize capacity of 200 rows of patient-specified task\u0027s info"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e infoList \u003d new ArrayList\u003c\u003e(200);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (PatientTask assignedTask : assignedTasks) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String pid \u003d String.valueOf(assignedTask.getPatientId());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String tid \u003d String.valueOf(assignedTask.getTaskID());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String uniqueId \u003d String.valueOf(assignedTask.getUid());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String isDone \u003d String.valueOf(assignedTask.isDone());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String isRecurr \u003d String.valueOf(assignedTask.isRecurrsive());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String deadline \u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String startTime \u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String endTime \u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String type \u003d assignedTask.getTaskType();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                if (assignedTask instanceof StandardPatientTask) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    deadline \u003d ((StandardPatientTask) assignedTask).getDeadlineRaw();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } else if (assignedTask instanceof EventPatientTask) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    startTime \u003d ((EventPatientTask) assignedTask).getStartTimeRaw();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    endTime \u003d ((EventPatientTask) assignedTask).getEndTimeRaw();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                ArrayList\u003cString\u003e row \u003d new ArrayList\u003cString\u003e(Arrays.asList(pid, tid, isDone, isRecurr,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    deadline, startTime, endTime, type, uniqueId));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                infoList.add(row);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assignedTaskStorage.write(infoList, ASSIGNED_TASK_HEADERS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Save command frequency to local csv files."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param counts A map containing commands as keys and frequent count as values"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void saveCounters(Map\u003cString, Integer\u003e counts) throws DukeException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Initialize capacity of 20 commands type."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cArrayList\u003cString\u003e\u003e infoList \u003d new ArrayList\u003c\u003e(20);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Map.Entry\u003cString, Integer\u003e entry : counts.entrySet()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                ArrayList\u003cString\u003e row \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                row.add(entry.getKey()); // Append value of column \"Command Name\" in a row"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                row.add(entry.getValue().toString()); // Append value of column \u0027Frequency\u0027 in a row"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                infoList.add(row); // Append row to the list of rows"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            commandCounterStorage.write(infoList, COMMAND_COUNTER_HEADERS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Load a list of patients."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a list of patients containing patient\u0027s info"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException show loading warning message"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ArrayList\u003cPatient\u003e loadPatients() throws DukeException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Load a list of Map\u003cheader, values\u003e from local data file"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cMap\u003cString, String\u003e\u003e patientsMap \u003d patientStorage.read();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cPatient\u003e patientList \u003d new ArrayList\u003cPatient\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Map\u003cString, String\u003e patientInfo : patientsMap) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                int id \u003d Integer.parseInt(patientInfo.get(PATIENT_HEADERS[0]));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String name \u003d patientInfo.get(PATIENT_HEADERS[1]);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String nric \u003d patientInfo.get(PATIENT_HEADERS[2]);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String room \u003d patientInfo.get(PATIENT_HEADERS[3]);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String remark \u003d patientInfo.get(PATIENT_HEADERS[4]);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                patientList.add(new Patient(id, name, nric, room, remark));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return patientList;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Load task info from local csv data files."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return a list of tasks"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException return load error exception"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTasks() throws DukeException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Load a list of Map\u003cheader, values\u003e from local data file"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cMap\u003cString, String\u003e\u003e tasksMap \u003d standardTaskStorage.read();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Map\u003cString, String\u003e taskInfo : tasksMap) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                int id \u003d Integer.parseInt(taskInfo.get(STANDARD_TASK_HEADERS[0]));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String description \u003d taskInfo.get(STANDARD_TASK_HEADERS[1]);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                taskList.add(new Task(id, description));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Load patient assigned task."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return list of patient task relation"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException return load error exception"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public ArrayList\u003cPatientTask\u003e loadAssignedTasks() throws DukeException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Load a list of Map\u003cheader, values\u003e from local data file"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cMap\u003cString, String\u003e\u003e assignedTaskMap \u003d assignedTaskStorage.read();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cPatientTask\u003e assignedTaskList \u003d new ArrayList\u003cPatientTask\u003e();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Map\u003cString, String\u003e assignedTaskInfo : assignedTaskMap) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                int pid \u003d Integer.parseInt(assignedTaskInfo.get(ASSIGNED_TASK_HEADERS[0]));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                int tid \u003d Integer.parseInt(assignedTaskInfo.get(ASSIGNED_TASK_HEADERS[1]));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                boolean isDone \u003d Boolean.parseBoolean(assignedTaskInfo.get(ASSIGNED_TASK_HEADERS[2]));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                boolean isRecursive \u003d Boolean.parseBoolean(assignedTaskInfo.get(ASSIGNED_TASK_HEADERS[3]));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String deadline \u003d assignedTaskInfo.get(ASSIGNED_TASK_HEADERS[4]);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String startTime \u003d assignedTaskInfo.get(ASSIGNED_TASK_HEADERS[5]);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String endTime \u003d assignedTaskInfo.get(ASSIGNED_TASK_HEADERS[6]);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String taskType \u003d assignedTaskInfo.get(ASSIGNED_TASK_HEADERS[7]);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                int uniqueId \u003d Integer.parseInt(assignedTaskInfo.get(ASSIGNED_TASK_HEADERS[8]));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                if (taskType.equals(\"S\")) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    assignedTaskList.add(new StandardPatientTask(pid, tid, isDone, isRecursive, deadline, taskType));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                } else if (taskType.equals(\"E\")) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    assignedTaskList.add(new EventPatientTask(pid, tid, isDone, isRecursive,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                        startTime, endTime, taskType));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return assignedTaskList;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * To load command counter frequency."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return return the command with frequency counts"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException return load error exception"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public Map\u003cString, Integer\u003e loadCommandFrequency() throws DukeException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        // Load a list of Map\u003cheader, values\u003e from local data file"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cMap\u003cString, String\u003e\u003e counterMap \u003d commandCounterStorage.read();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        Map\u003cString, Integer\u003e integratedCounterMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            for (Map\u003cString, String\u003e rowInfo : counterMap) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                String commandName \u003d rowInfo.get(COMMAND_COUNTER_HEADERS[0]);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                int frequency \u003d Integer.parseInt(rowInfo.get(COMMAND_COUNTER_HEADERS[1]));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                integratedCounterMap.put(commandName, frequency);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return integratedCounterMap;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 254
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a task.  Task is an abstract class that can not be"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * instantiated"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private int id \u003d 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param id          ."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param description ."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(int id, String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param description ."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Returns a string with the status icon and the description of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * @return A string in a specific format with the status and description of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    public String printDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        return \" \" + description + \" \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return A string that represents the specific activity associated with the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public int getID() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param id ."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void setID(int id) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param description ."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 1,
      "WEIFENG-NUSCEG": 8,
      "-": 47,
      "HUANGXUANKUN": 19
    }
  },
  {
    "path": "src/main/java/duke/task/TaskManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.core.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Represents a list of Task that can perform operations such as"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " * add and delete on the tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, Task\u003e taskIdMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private int maxId \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * An ArrayList structure."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Constructor used when Duke successfully loads a TaskList from a saved file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Takes loaded taskList and uses it during Duke\u0027s new session."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param taskList ."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskManager(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            taskIdMap.put(task.getID(), task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!taskList.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            this.maxId \u003d taskList.get(taskList.size() - 1).getID();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Constructor used when Duke cannot successfully load a TaskList from a saved file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     * Instantiates a new TaskList with an empty list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    public TaskManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param description ."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskByDescription(String description) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        description \u003d description.toLowerCase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tasksWithThisDescription \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : taskIdMap.values()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.getDescription().toLowerCase().equals(description)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                tasksWithThisDescription.add(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasksWithThisDescription;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Adds a Task to the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task The Task to be added to the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (task.getID() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            maxId +\u003d 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            task.setID(maxId);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        taskIdMap.put(task.getID(), task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Removes the Task with the given index from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param id The index of the Task to be deleted."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteTask(int id) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (taskIdMap.containsKey(id)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            taskIdMap.remove(id);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"The task with id \" + id + \" does not exist.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @param id ."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkeejjuunn"
        },
        "content": "    public boolean doesExist(int id) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (taskIdMap.containsKey(id)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Returns the Task in the list with the given index."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param id The index of the Task."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return The Task in the list with the specific index."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task getTask(int id) throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (taskIdMap.containsKey(id)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return taskIdMap.get(id);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"The task with id \" + id + \" does not exist.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @return ."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(taskIdMap.values());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "WEIFENG-NUSCEG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 9,
      "WEIFENG-NUSCEG": 26,
      "kkeejjuunn": 1,
      "qjie7": 2,
      "-": 46,
      "HUANGXUANKUN": 40
    }
  },
  {
    "path": "src/test/java/duke/core/CommandManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.command.AssignTaskToPatientCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.command.DeleteTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.command.AddPatientCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.command.AddStandardTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.command.DeletePatientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.command.FindPatientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.command.FindPatientTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.command.ListPatientsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.command.ListTasksCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.command.UpdatePatientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.command.UpdateTaskCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "public class CommandManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * Test the return command type of Parser.parse(userInput)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     * @throws DukeException referencing a Duke specified exception with error log"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    public void commandTypeTest() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Command c1 \u003d CommandManager.manageCommand(\"bye\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertTrue(c1 instanceof ExitCommand, \"The command type should be \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 15,
      "qjie7": 1,
      "HUANGXUANKUN": 15
    }
  },
  {
    "path": "src/test/java/duke/core/CounterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qjie7"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qjie7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qjie7"
        },
        "content": "public class CounterTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qjie7"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qjie7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qjie7": 5
    }
  },
  {
    "path": "src/test/java/duke/core/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "//@@lmtaek"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String patientDummyInput \u003d \"add patient :name :NRIC :room :remark\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String taskDummyInput \u003d \"add task :Walk the dog\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String assignPatientToDeadlineTask \u003d \"assign deadline task :patient name :#2 :02/02/2002 2222\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String assignPatientToEventTask \u003d \"assign event task :#2 :#1 :01/02/2003 1234 to 06/05/2004 2312\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String deletePatientInputWithID \u003d \"delete patient :#123\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String deletePatientInputWithName \u003d \"delete patient :billy joe\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String deleteTaskInputWithID \u003d \"delete task :#10\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String deleteTaskInputWithName \u003d \"delete task :Take medicine\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String deleteAssignedTaskInputWithID \u003d \"delete assigned task :#2 :#5\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String deleteAssignedTaskInputWithName \u003d \"delete assigned task :patient name :task name\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String deleteAssignedTaskInputWithUniqueID \u003d \"delete assigned task :%3\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String updatePatientInput \u003d \"update patient :name :field :new data\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String updateTaskInput \u003d \"update task :task name :new description\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String findPatientInputWithName \u003d \"find patient :name\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String findPatientInputWithID \u003d \"find patient :#200\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    String findAssignedTasksInput \u003d \"find patient tasks :jane doe\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseAddPatientTest() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParser \u003d new Parser(patientDummyInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] desiredOutput \u003d {\"name\", \"NRIC\", \"room\", \"remark\"};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] testOutput \u003d testParser.parseAddPatient();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredOutput.length \u003d\u003d testOutput.length);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c desiredOutput.length; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            assertTrue(desiredOutput[i].equals(testOutput[i]), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + desiredOutput[i] + \" but got: \" + testOutput[i]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseAddTask() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParser \u003d new Parser(taskDummyInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String testOutput \u003d testParser.parseAddTask();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(testOutput.equals(\"Walk the dog\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                \"Task description did not parse correctly. Expected \u0027Walk the dog\u0027 but got: \" + testOutput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseAssignDeadlineAndEventTasks() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserDeadline \u003d new Parser(assignPatientToDeadlineTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserEvent \u003d new Parser(assignPatientToEventTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        final String[] testDeadlineOutput \u003d testParserDeadline.parseAssignDeadlineTask();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        final String[] testEventOutput \u003d testParserEvent.parseAssignEventTask();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] desiredDeadlineOutput \u003d {\"patient name\", \"#2\", \"02/02/2002 2222\"};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] desiredEventOutput \u003d {\"#2\", \"#1\", \"01/02/2003 1234\", \"06/05/2004 2312\"};"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredDeadlineOutput.length \u003d\u003d testDeadlineOutput.length);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c desiredDeadlineOutput.length; i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            assertTrue(desiredDeadlineOutput[i].equals(testDeadlineOutput[i]), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + desiredDeadlineOutput[i] + \" but got: \" + testDeadlineOutput[i]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredEventOutput.length \u003d\u003d testEventOutput.length);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c desiredEventOutput.length; i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            assertTrue(desiredEventOutput[i].equals(testEventOutput[i]), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + desiredEventOutput[i] + \" but got: \" + testEventOutput[i]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseDeletePatient() throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserID \u003d new Parser(deletePatientInputWithID);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserName \u003d new Parser(deletePatientInputWithName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String testOutputID \u003d testParserID.parseDeletePatient();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String testOutputName \u003d testParserName.parseDeletePatient();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertTrue(testOutputID.charAt(0) \u003d\u003d \u0027#\u0027 \u0026\u0026 testOutputID.equals(\"#123\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \"Delete patient by ID parsing failed. Expected \u0027#123\u0027 but got: \" + testOutputID);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertTrue(testOutputName.equals(\"billy joe\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \"Delete patient by name parsing failed. Expected \u0027billy joe\u0027 but got: \" + testOutputName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseDeleteTask() throws DukeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserID \u003d new Parser(deleteTaskInputWithID);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserName \u003d new Parser(deleteTaskInputWithName);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String testOutputID \u003d testParserID.parseDeleteTask();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String testOutputName \u003d testParserName.parseDeleteTask();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(testOutputID.charAt(0) \u003d\u003d \u0027#\u0027 \u0026\u0026 testOutputID.equals(\"#10\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                \"Delete task by ID parsing failed. Expected \u0027#10\u0027 but got: \" + testOutputID);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        assertTrue(testOutputName.equals(\"Take medicine\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                \"Delete task by name parsing failed. Expected \u0027Take medicine\u0027 but got: \" + testOutputName);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseDeleteAssignedTask() throws DukeException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserID \u003d new Parser(deleteAssignedTaskInputWithID);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] testOutputID \u003d testParserID.parseDeleteAssignedTask();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] desiredOutputID \u003d {\"#2\", \"#5\"};"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredOutputID.length \u003d\u003d testOutputID.length);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c desiredOutputID.length; i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            assertTrue(desiredOutputID[i].equals(testOutputID[i]), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + desiredOutputID[i] + \" but got: \" + testOutputID[i]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserName \u003d new Parser(deleteAssignedTaskInputWithName);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] testOutputName \u003d testParserName.parseDeleteAssignedTask();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] desiredOutputName \u003d {\"patient name\", \"task name\"};"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredOutputName.length \u003d\u003d testOutputName.length);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c desiredOutputName.length; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            assertTrue(desiredOutputName[i].equals(testOutputName[i]), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + desiredOutputName[i] + \" but got: \" + testOutputName[i]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserUniqueID \u003d new Parser(deleteAssignedTaskInputWithUniqueID);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] testOutputUniqueID \u003d testParserUniqueID.parseDeleteAssignedTask();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] desiredOutputUniqueID \u003d {\"%3\"};"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredOutputUniqueID[0].equals(testOutputUniqueID[0]), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + desiredOutputUniqueID[0] + \" but got: \" + testOutputUniqueID[0]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseUpdatePatientTest() throws DukeException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParser \u003d new Parser(updatePatientInput);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] testOutput \u003d testParser.parseUpdatePatient();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] desiredOutput \u003d {\"name\", \"field\", \"new data\"};"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredOutput.length \u003d\u003d testOutput.length);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c desiredOutput.length; i++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            assertTrue(desiredOutput[i].equals(testOutput[i]), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + desiredOutput[i] + \" but got: \" + testOutput[i]);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseUpdateTaskTest() throws DukeException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParser \u003d new Parser(updateTaskInput);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] testOutput \u003d testParser.parseUpdateTask();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String[] desiredOutput \u003d {\"task name\", \"new description\"};"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredOutput.length \u003d\u003d testOutput.length);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        for (int i \u003d 0; i \u003c desiredOutput.length; i++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "            assertTrue(desiredOutput[i].equals(testOutput[i]), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                    + desiredOutput[i] + \" but got: \" + testOutput[i]);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseFindPatientTest() throws DukeException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserID \u003d new Parser(findPatientInputWithID);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String testOutputID \u003d testParserID.parseFindPatient();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String desiredOutputID \u003d \"#200\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredOutputID.equals(testOutputID), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + desiredOutputID + \" but got: \" + testOutputID);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParserName \u003d new Parser(findPatientInputWithName);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String testOutputName \u003d testParserName.parseFindPatient();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String desiredOutputName \u003d \"name\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredOutputName.equals(testOutputName), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + desiredOutputName + \" but got: \" + testOutputName);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    public void parseFindAssignedTasksTest() throws DukeException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        Parser testParser \u003d new Parser(findAssignedTasksInput);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String testOutput \u003d testParser.parseFindAssignedTasks();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        String desiredOutput \u003d \"jane doe\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "        assertTrue(desiredOutput.equals(testOutput), \"Parsing failed. Expected: \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "                + desiredOutput + \" but got: \" + testOutput);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lmtaek"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lmtaek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lmtaek": 177,
      "-": 7,
      "HUANGXUANKUN": 6
    }
  },
  {
    "path": "src/test/java/duke/core/TypoCorrectorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * Junit test for TypoCorrector class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * @author HUANG XUAN KUN"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " * @version 1.2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "public class TypoCorrectorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    void stringMatchTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        ArrayList\u003cString[]\u003e testCases \u003d new ArrayList\u003cString[]\u003e("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            Arrays.asList("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                new String[]{\"b q e\", \"bye\"},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                new String[]{\"d uke \", \"duke\"},"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                new String[]{\"dbKe\", \"duke\"},"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                new String[]{\"l si t patant\", \"list patients\"},"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                new String[]{\"lsf vs ta kss\", \"list tasks\"},"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                new String[]{\"DEe lte Pti ents:#12\", \"delete patient :#12\"},"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                new String[]{\"deleot tasksa :task description\", \"delete task :task description\"},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                new String[]{\"delette   tasks:#1\", \"delete task :#1\"},"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                new String[]{\"addd patents:name :nric :room :remark\", \"add patient :name :nric :room :remark\"},"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                new String[]{\"dad tsak:a very long task name\", \"add task :a very long task name\"},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                new String[]{\"addd task :abc\", \"add task :abc\"},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                new String[]{\"asgn deadli task: #1 :12 :12/12/2019 1645\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    \"assign deadline task : #1 :12 :12/12/2019 1645\"},"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                new String[]{\"asSGn even tk :#1 :12 :12/12/2019 1645 :12/12/2020 1645\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                    \"assign event task :#1 :12 :12/12/2019 1645 :12/12/2020 1645\"},"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                new String[]{\"fi n d p atin t: #1\", \"find patient : #1\"},"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                new String[]{\"u p da te pa i t en s :#12:Room:2A\", \"update patient :#12:Room:2A\"},"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                new String[]{\"\", \"\"},"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "                new String[]{\" \", \" \"}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        for (String[] testPair : testCases) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            String correctedOutput \u003d TypoCorrector.commandCorrection(testPair[0]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"Input Command:     \" + testPair[0]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"Expected Command:  \" + testPair[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println(\"Corrected Command: \" + correctedOutput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "            assertEquals(testPair[1], correctedOutput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HUANGXUANKUN"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HUANGXUANKUN": 51
    }
  }
]
