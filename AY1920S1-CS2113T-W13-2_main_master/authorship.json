[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    configFile \u003d file(\"config/checkstyle/checkstyle.xml\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    archiveBaseName \u003d \"[CS2113T-W13-2][JavaCake]\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    archiveVersion \u003d \"\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "//jar {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "//    manifest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "//        attributes \u0027Main-Class\u0027: \u0027javacake.Launcher\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "//    from {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "//        configurations.runTimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "//}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    //mainClassName \u003d \"javacake.Duke\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    mainClassName \u003d \"javacake.Launcher\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    //compile files(\"${System.properties[\u0027java.home\u0027]}/../lib/tools.jar\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.6\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    compile group: \u0027org.fxmisc.richtext\u0027, name: \u0027richtextfx\u0027, version: \u00270.10.2\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    // https://mvnrepository.com/artifact/commons-io/commons-io"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    compile group: \u0027commons-io\u0027, name: \u0027commons-io\u0027, version: \u00272.6\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    testImplementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    //    testCompile \"org.testfx:testfx-core:4.0.16-alpha\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    //    testCompile \"org.testfx:testfx-junit5:4.0.16-alpha\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    //    testCompile group: \u0027org.hamcrest\u0027, name: \u0027hamcrest\u0027, version: \u00272.1\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        exceptionFormat \u003d \u0027full\u0027"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 10,
      "RusdiHaizim": 38,
      "-": 40
    }
  },
  {
    "path": "src/main/java/javacake/JavaCake.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class JavaCake {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static Logic logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static boolean isCliMode \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static StorageManager storageManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    //    public static Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    //    public static Profile profile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static boolean isFirstTimeUser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String userName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static int userProgress \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static Logger logger \u003d Logger.getLogger(\"JavaCake\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Constructor for main class to initialise the settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public JavaCake() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logger.log(Level.INFO, \"Starting JavaCake Constructor!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            logic \u003d Logic.getInstance();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            userProgress \u003d storageManager.profile.getTotalProgress();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            System.out.println(\"userProgress is \" + userProgress);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            userName \u003d storageManager.profile.getUsername();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            System.out.println(\"userName is \" + userName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            // Default username when creating new profile"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            checkIfNewUser(\"NEW_USER_!@#\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (CakeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            logger.log(Level.WARNING, \"Profile set-up failed.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Constructor for main class to initialise the settings[TEST]."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public JavaCake(String testFilePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        logger.log(Level.INFO, \"Starting JavaCake Constructor!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            logic \u003d Logic.getInstance();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            storageManager \u003d new StorageManager(testFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            userProgress \u003d storageManager.profile.getTotalProgress();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            userName \u003d storageManager.profile.getUsername();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            // Default username when creating new profile"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            checkIfNewUser(\"NEW_USER_!@#\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (CakeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            logger.log(Level.WARNING, \"Profile set-up failed.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void checkIfNewUser(String defaultUsername) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (userName.equals(defaultUsername)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            isFirstTimeUser \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            isFirstTimeUser \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * CLI method to overwrite username if initially default"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * and print the required welcome messages."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void initialiseWelcomeCliMode() throws CakeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        ui.showMessage(Ui.showWelcomeMsgPhaseA(isFirstTimeUser));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (isFirstTimeUser) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            userName \u003d ui.readCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            loadCake();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //To overwrite \"NEW_USER_!@# with new inputted username if needed"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (isFirstTimeUser) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                storageManager.profile.overwriteName(userName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } catch (CakeException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                logger.log(Level.WARNING, \"Profile overwrite failed.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        ui.showMessage(Ui.showWelcomeMsgPhaseB(isFirstTimeUser, userName, storageManager));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Method to load cake ASCII."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void loadCake() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ui.showMessage(Ui.getTextFile(new BufferedReader("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    new FileReader(\"src/main/resources/content/cake.txt\"))));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (CakeException | FileNotFoundException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            logger.log(Level.WARNING, \"Failed to load cake.txt!\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Run the rest of the code here: CLI MODE."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void runAsCli() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            initialiseWelcomeCliMode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (CakeException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showMessage(c.execute(logic, ui, storageManager));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } catch (CakeException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Public Method to get String response: GUI MODE."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logger.log(Level.INFO, \"Getting response from input...\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (isCliMode) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            isCliMode \u003d false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return c.execute(logic, ui, storageManager);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (CakeException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Public Method to get type of mode being run."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return true if is CLI mode"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static boolean isCliMode() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return isCliMode;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Program Start."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        new JavaCake().runAsCli();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 81,
      "RusdiHaizim": 87,
      "kishore03109": 1
    }
  },
  {
    "path": "src/main/java/javacake/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 12
    }
  },
  {
    "path": "src/main/java/javacake/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import edu.emory.mathcs.backport.java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.net.URLDecoder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.security.CodeSource;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.zip.ZipEntry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.zip.ZipFile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.zip.ZipInputStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String defaultFilePath \u003d \"content/MainList\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static String currentFilePath \u003d \"content/MainList\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private List\u003cString\u003e listOfFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static boolean isDirectory \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private int numOfFiles \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Private constructor to ensure exactly one logic object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private Logic() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static final Logic INSTANCE \u003d new Logic();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Using Singleton pattern to ensure exactly one logic object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return The only instance of logic object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static Logic getInstance() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return INSTANCE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Stores all files in the currentFilePath into listOfFiles."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void loadFiles() throws CakeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] tempListFiles \u003d splitFilePathIntoPartitions();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        int currFileSlashCounter \u003d tempListFiles.length;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        listOfFiles.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            CodeSource src \u003d generateCodeSource();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (runningFromJar()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                processJarFile(src, currFileSlashCounter);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                processNonJarFile();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Content not found!\\n\" + \"Pls key \u0027back\u0027 or \u0027list\u0027 to view previous content!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if current file is running from Jar."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if current file is a Jar file."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static boolean runningFromJar() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String jarFilePath \u003d new File(Logic.class"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    .getProtectionDomain()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    .getCodeSource()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    .getLocation()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    .getPath())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    .toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            jarFilePath \u003d URLDecoder.decode(jarFilePath, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            try (ZipFile zipFile \u003d new ZipFile(jarFilePath)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                ZipEntry zipEntry \u003d zipFile.getEntry(\"META-INF/MANIFEST.MF\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                return zipEntry !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Splits current file path into their partitions."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String array after splitting the current file path by slashes."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String[] splitFilePathIntoPartitions() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String slash \u003d \"/\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return currentFilePath.split(slash);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Generates code source used for Jar files."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return Code source based on current logic class."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private CodeSource generateCodeSource() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return Logic.class.getProtectionDomain().getCodeSource();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Processes Non-Jar file by reading the files in current file path."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If file does not exist."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void processNonJarFile() throws CakeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        InputStream inputStream;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        BufferedReader br;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            inputStream \u003d generateInputStream();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            br \u003d generateBufferedReader(inputStream);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            readAndWrite(br);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sortFiles();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            updateNumberOfFiles();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(e.getMessage());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Generates buffered reader based on current input stream."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputStream Input stream based on current file path."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return Buffered Reader based on current input stream."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private BufferedReader generateBufferedReader(InputStream inputStream) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return new BufferedReader(new InputStreamReader(inputStream));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Generates input stream based on current file path."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return InputStream based on current file path."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private InputStream generateInputStream() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return ClassLoader.getSystemClassLoader().getResourceAsStream(currentFilePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Sorts the strings in listOfFiles."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void sortFiles() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        Collections.sort(listOfFiles);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Reads and writes into listOfFiles used in Non-Jar files."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param br BufferedReader to read file names in non-jar files."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If line does not exist."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void readAndWrite(BufferedReader br) throws CakeException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String currentLine;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            while ((currentLine \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                listOfFiles.add(currentLine);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(e.getMessage());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Processes Jar files."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param src CodeSource in Jar file."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param currFileSlashCounter Current number of file slashes."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If the file does not exist."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void processJarFile(CodeSource src, int currFileSlashCounter) throws CakeException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        URL jar \u003d src.getLocation();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            ZipInputStream zip \u003d new ZipInputStream(jar.openStream());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            processZipFile(zip, currFileSlashCounter);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(e.getMessage());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void processZipFile(ZipInputStream zip, int currFileSlashCounter) throws CakeException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        ZipEntry e;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            while ((e \u003d zip.getNextEntry()) !\u003d null) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                String name \u003d e.getName();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                updateListOfFiles(name, currFileSlashCounter);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(err.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Verifies if it is a child file and starts with current file path."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Get the name of the child file and adds it to the list of files."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Sorts the file collection and updates the total number of files."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param name Name of current file entry."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param currFileSlashCounter Current number of file slashes."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void updateListOfFiles(String name, int currFileSlashCounter) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (name.startsWith(currentFilePath)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            String[] listingFiles \u003d name.split(\"/\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (isChildDirectory(listingFiles, currFileSlashCounter)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                String childFile;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                childFile \u003d nameOfChildFile(listingFiles, currFileSlashCounter);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                addFileToListOfFiles(childFile);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                sortFileCollection();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                updateNumberOfFiles();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Adds current file to the list number of files."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param childFile Name of the child file."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void addFileToListOfFiles(String childFile) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        listOfFiles.add(childFile);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Updates the total number of files."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void updateNumberOfFiles() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        numOfFiles \u003d listOfFiles.size();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Sorts all the file in the collection."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void sortFileCollection() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        Collections.sort(listOfFiles);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Returns the name of the child file."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param listingFiles All the files within a file path."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param currFileSlashCounter Total number of file slashes."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return name of child file."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String nameOfChildFile(String[] listingFiles, int currFileSlashCounter) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return listingFiles[currFileSlashCounter];"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if the current file is a child directory."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if the number of listing files equals to slash counter + 1."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param listingFiles All the files within a file path."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param currFileSlashCounter Total number of file slashes."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return true if it is child directory."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean isChildDirectory(String[] listingFiles, int currFileSlashCounter) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return (listingFiles.length \u003d\u003d currFileSlashCounter + 1);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Returns the total number of files."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return the total number of files."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public int getNumOfFiles() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        return numOfFiles;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Method is only invoked when List command is called."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void setDefaultFilePath() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        currentFilePath \u003d defaultFilePath;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public String getFullFilePath() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        return currentFilePath;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Method is invoked when GoTo command is called."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Based on the index, return the particular filePath."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param index Index of the new path found in filePathQueries."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return the particular filePath based on the input index."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String gotoFilePath(int index) throws CakeException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return listOfFiles.get(index);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(e.getMessage() + \"\\n Pls key \u0027back\u0027 or \u0027list\u0027 to view previous content\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Update the currentFilePath by concatenating the updatedPath."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * updatedPath is given by gotoFilePath method."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param updatedPath particular path to be updated into currentFilePath."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void updateFilePath(String updatedPath) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        currentFilePath +\u003d (\"/\" + updatedPath);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if file in currentFilePath is a directory or file."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Returns once if it is a directory."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Returns twice if it is a file."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Used for BackCommand."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void backToPreviousPath() throws CakeException {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (isNotAFileOrMainList()) { // if it is not a file or main list"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            currentFilePath \u003d gotoParentFilePath(currentFilePath);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (isATextFile()) {  // if it is a text file"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            currentFilePath \u003d gotoParentFilePath(gotoParentFilePath(currentFilePath));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if current file path contains a text file."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if current file path contains a text file."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean isATextFile() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return (currentFilePath.contains(\".txt\"));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if current file path is not main list and not a text file."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if current file path is not main list and not a text file."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean isNotAFileOrMainList() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return (!currentFilePath.equals(defaultFilePath) \u0026\u0026 !currentFilePath.contains(\".txt\"));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Creates a file path to parent directory by"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * removing child file or directory name from filePath."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param filePath input file path to be reduced."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return file path to parent directory relative to initial file path."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If file path does not have parameter."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String gotoParentFilePath(String filePath) throws CakeException {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String[] filesCapture \u003d filePath.split(\"/\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            StringBuilder reducedFilePath \u003d new StringBuilder();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            for (int i \u003d 0; i \u003c filesCapture.length - 1; i++) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                reducedFilePath.append(filesCapture[i]).append(\"/\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String parentFilePath \u003d reducedFilePath.toString();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            parentFilePath \u003d parentFilePath.substring(0, parentFilePath.length() - 1);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return parentFilePath;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(e.getMessage());"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Displays the all directories found in currentFilePath."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String displayDirectories() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        sb.append(\"Here are the \").append(listOfFiles.size()).append(\" subtopics available!\\n\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        for (String queries : listOfFiles) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sb.append(queries).append(\"\\n\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        sb.append(\"Key in the index to learn more about the topic or do the quiz!\").append(\"\\n\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Reads the content in content text file."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException When the text file in currentFilePath is not found."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String readQuery() throws CakeException {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            InputStream inputStream \u003d ClassLoader.getSystemClassLoader().getResourceAsStream(currentFilePath);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new InputStreamReader(inputStream));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String sentenceRead;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            while ((sentenceRead \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                sb.append(sentenceRead).append(\"\\n\");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Unable to read text file\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks current directory contains directory or text files."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return true if current directory contains directory."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public boolean containsDirectory() {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (isDirectory) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Calls insertQueries method to instantiate new file paths."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if new file path accesses a directory or file."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * If directory, display all the file names within the directory."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Else read the content of the text file."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of formatted file names or text file content."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException when file or directory is not found."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String processQueries() throws CakeException {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        insertQueries();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (isDirectory) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return displayDirectories();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return readQuery();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Clears all file paths in filePathQueries."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Load all files in currentFilePath."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Update isDirectory if current directory contains directories."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Adds new list of file names in filePathQueries to be processed."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void insertQueries() throws CakeException {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        clearQueries();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        loadFiles();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        for (String listOfFile : listOfFiles) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (listOfFile.contains(\".txt\")) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                isDirectory \u003d false;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                isDirectory \u003d true;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Clears all entries in listOfFiles."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void clearQueries() {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        listOfFiles.clear();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 392,
      "RusdiHaizim": 43,
      "kishore03109": 12
    }
  },
  {
    "path": "src/main/java/javacake/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static String savedDataPath \u003d \"data/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private JavaCake javaCake \u003d new JavaCake();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            GridPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setJavaCake(javaCake);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setStage(stage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //stage.setResizable(false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //stage.initStyle(StageStyle.UNDECORATED);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stage.setMinHeight(600);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stage.setMinWidth(880);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stage.showingProperty().addListener((observable, oldValue, showing) -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (showing) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    stage.setMinHeight(stage.getMinHeight());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    stage.setMinWidth(stage.getMinWidth());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stage.getIcons().add(new Image(this.getClass().getResourceAsStream(\"/images/app_icon.jpg\")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stage.setTitle(\"JavaCake\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 29,
      "RusdiHaizim": 22
    }
  },
  {
    "path": "src/main/java/javacake/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.ChangeColorCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.BackCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.CreateNoteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.DeleteNoteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.EditNoteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.GoToCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.ListNoteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.OverviewCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.ReminderCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.ResetCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.ScoreCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.ViewNoteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ui.MainWindow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Allows the user input to be parsed before running \u0027execute\u0027."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand String inputted by user, which needs to be parsed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              to identify the intent"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return a subclass of the Command Class along"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *         with their respective intent"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException Shows error when unknown command is inputted"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static Command parse(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] buffer \u003d inputCommand.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String commandWord \u003d buffer[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        helper(commandWord);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case (\"exit\"): return new ExitCommand(inputCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case (\"list\"): return new ListCommand(inputCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case (\"back\"): return new BackCommand(inputCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case (\"score\"): return new ScoreCommand(inputCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case (\"reset\"): return new ResetCommand(inputCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case (\"help\"): return new HelpCommand(inputCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case (\"overview\"): return new OverviewCommand(inputCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case (\"listnote\"): return new ListNoteCommand(inputCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case (\"reminder\"): return new ReminderCommand(inputCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case (\"goto\"): return new GoToCommand(inputCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case (\"createnote\"): return new CreateNoteCommand(inputCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case (\"editnote\"): return new EditNoteCommand(inputCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case (\"deletenote\"): return new DeleteNoteCommand(inputCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case (\"viewnote\"): return new ViewNoteCommand(inputCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case (\"deadline\"): return new AddCommand(inputCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case (\"done\"): return new DoneCommand(inputCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case (\"delete\"): return new DeleteCommand(inputCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case (\"snooze\"): return new EditCommand(inputCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case (\"change\"):"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //MainWindow.isChanged \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return new ChangeColorCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * Method to help handle small typo made by user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * Types of typo handled are:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * 1) if user types one alphabet wrongly, eg. trre instead of tree."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * 2) if user accidentally types extra or less letter, eg. treee or tre instead of tree."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static void helper(String input) throws CakeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] commands \u003d {\"exit\", \"list\", \"back\", \"help\", \"score\", \"reset\", \"goto\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \"overview\", \"deadline\", \"editnote\", \"createnote\", \"listnote\", \"deletenote\", \"change\"};"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        for (int i \u003d 0; i \u003c commands.length; i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            boolean isTypo \u003d false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            String command \u003d commands[i];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            int length \u003d command.length();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (length \u003d\u003d input.length()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                int similarity \u003d 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                for (int j \u003d 0; j \u003c length; j++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    if (input.charAt(j) \u003d\u003d command.charAt(j)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                        similarity++;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                if (similarity + 1 \u003d\u003d length) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    isTypo \u003d true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            boolean isOneLetterApart \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (command.length() \u003d\u003d input.length() + 1 || command.length() \u003d\u003d input.length() - 1) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                isOneLetterApart \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (!command.equals(input) \u0026\u0026 isOneLetterApart) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                if (command.contains(input) || input.contains(command)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    isTypo \u003d true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (isTypo) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                throw new CakeException(\"Sorry, but do you mean this : \" + command);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 34,
      "RusdiHaizim": 36,
      "claysmilesoil": 2,
      "kishore03109": 40
    }
  },
  {
    "path": "src/main/java/javacake/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Constructor for Adding of commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param str Input string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public AddCommand(String str) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.DEADLINE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Execute addition of tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException Shows error when deletion is not possible"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String output \u003d TaskList.runDeadline(storageManager.storage.getData(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                input, TaskList.TaskState.NOT_DONE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Storage.generateFolder(new File(\"data/tasks/\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        storageManager.storage.write(storageManager.storage.getData());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 6,
      "RusdiHaizim": 32
    }
  },
  {
    "path": "src/main/java/javacake/commands/BackCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class BackCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Constructor for BackCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks that no parameters are included."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Back command from user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If other parameter is appended to command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public BackCommand(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        checksParam(inputCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.BACK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Execute going back to previous index."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException Error thrown when unable to close file reader"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logic.backToPreviousPath();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logic.insertQueries();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (logic.containsDirectory()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return (logic.displayDirectories());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            logic.updateFilePath(logic.gotoFilePath(0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return (logic.readQuery());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 29,
      "RusdiHaizim": 10
    }
  },
  {
    "path": "src/main/java/javacake/commands/ChangeColorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class ChangeColorCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"Changed color mode!\\nType \u0027list\u0027 for more commands\\nType \u0027help\u0027 for command info\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 1,
      "RusdiHaizim": 13
    }
  },
  {
    "path": "src/main/java/javacake/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    protected CmdType type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Types of commands that are possible."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public enum CmdType {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        EXIT, LIST, FIND, DONE, DELETE, TODO, DEADLINE, REMIND, VIEWSCH,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        EDIT, BACK, GOTO, QUIZ, HELP, OVERVIEW, CREATE_NOTE, EDIT_NOTE,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        LIST_NOTE, DELETE_NOTE, VIEW_NOTE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static final char[] ILLEGAL_CHARACTERS \u003d { \u0027/\u0027, \u0027\\n\u0027, \u0027\\r\u0027, \u0027\\t\u0027,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        \u0027\\0\u0027, \u0027\\f\u0027, \u0027`\u0027, \u0027?\u0027, \u0027*\u0027, \u0027\\\\\u0027, \u0027\u003c\u0027, \u0027\u003e\u0027, \u0027|\u0027, \u0027\\\"\u0027, \u0027:\u0027, \u0027.\u0027, \u0027,\u0027};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public abstract String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if input command has no other parameter appended."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Command input from user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If parameter is appended to command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static void checksParam(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String bySpaces \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] subStrings \u003d inputCommand.split(bySpaces);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (subStrings.length \u003e 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Please ensure there is no parameter(s) for this command\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks for illegal character methods for commands."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Command input from user"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if command contains illegal characters."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static boolean containsIllegalCharacter(String inputCommand) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String bySpaces \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] subStrings \u003d inputCommand.split(bySpaces);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (subStrings.length \u003e 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String word \u003d subStrings[1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return checkForIllegalChar(word);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks for illegal characters in a keyword."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param word Parameter within a input command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if illegal character is found."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static boolean checkForIllegalChar(String word) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        for (char illegalChar : ILLEGAL_CHARACTERS) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return (word.indexOf(illegalChar) \u003e\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to check whether command is of type exit."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return true if type is exit, false otherwise"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return this.type \u003d\u003d CmdType.EXIT;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 50,
      "RusdiHaizim": 24
    }
  },
  {
    "path": "src/main/java/javacake/commands/CreateNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class CreateNoteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String defaultFileName \u003d \"Notes\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String userGivenFileName \u003d \"Notes\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static int defaultFileNameCounter \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String defaultDirectoryPath \u003d \"data/notes/\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static final char[] ILLEGAL_CHARACTERS \u003d { \u0027/\u0027, \u0027\\n\u0027, \u0027\\r\u0027, \u0027\\t\u0027,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        \u0027\\0\u0027, \u0027\\f\u0027, \u0027`\u0027, \u0027?\u0027, \u0027*\u0027, \u0027\\\\\u0027, \u0027\u003c\u0027, \u0027\u003e\u0027, \u0027|\u0027, \u0027\\\"\u0027, \u0027:\u0027, \u0027.\u0027, \u0027,\u0027};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Constructor for CreateNoteCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Input Command from the user to create note."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If the input command is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public CreateNoteCommand(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        type \u003d CmdType.CREATE_NOTE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        updateDefaultDirectoryPath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        checksValidityOfCommand(inputCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Updates default directory path according the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void updateDefaultDirectoryPath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        defaultDirectoryPath \u003d Storage.returnNotesDefaultFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Creates a file based on auto-generated file name, if no parameter is given."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if auto-generated file name exist."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Concatenates defaultFileName with number if file name already exists."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if specified file name is valid if inputCommand has a parameter."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Creates file if specified file name is valid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Input Command from the user to create note."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If the input command is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void checksValidityOfCommand(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String bySpaces \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] wordsInInputCommand \u003d inputCommand.split(bySpaces);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (createNoteCommandHasSpecifiedFileName(inputCommand)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String userSpecifiedFileName \u003d wordsInInputCommand[1];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            checksForIllegalCharacters(userSpecifiedFileName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (validCommandWithNoSpecifiedFileName(inputCommand)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            generateFileName();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Invalid command: To write notes, \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    + \"type \u0027createnote\u0027 followed by desired (optional) filename.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Generates new unique file name to create new file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void generateFileName() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        while (noteFileAlreadyExist(defaultDirectoryPath + userGivenFileName + \".txt\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            generateNewDefaultFileName();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if file name contains illegal characters."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param fileName Name of the file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If file name contains illegal characters."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void checksForIllegalCharacters(String fileName) throws CakeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (noIllegalCharacters(fileName)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            userGivenFileName \u003d fileName;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Invalid file name: Illegal character in file name detected!\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if CreateNoteCommand has a specified file name."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Input Command from the user to create note."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if CreateNoteCommand has a specified file name."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean createNoteCommandHasSpecifiedFileName(String inputCommand) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String bySpaces \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] wordsInInputCommand \u003d inputCommand.split(bySpaces);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (wordsInInputCommand.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if CreateNoteCommand with no parameter is valid."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Input Command from the user to create note."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if CreateNoteCommand with no parameter is valid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean validCommandWithNoSpecifiedFileName(String inputCommand) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] wordsInInputCommand \u003d inputCommand.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (wordsInInputCommand.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if the input file name contains any illegal characters."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputFileName Specified file name by user."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if file name does not contains illegal characters."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static boolean noIllegalCharacters(String inputFileName) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        for (char illegalChar : ILLEGAL_CHARACTERS) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (containsIllegal(inputFileName, illegalChar)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if file name contains illegal characters."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputFileName Name of input file."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param illegalChar Characters that are not allowed in file name."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if file name contains illegal character."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static boolean containsIllegal(String inputFileName, char illegalChar) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return inputFileName.indexOf(illegalChar) \u003e\u003d 0;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Generates file name for user."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Generated by concatenating number to defaultFileName."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void generateNewDefaultFileName() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        userGivenFileName \u003d defaultFileName + defaultFileNameCounter;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        defaultFileNameCounter++;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if file name already exists."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * If file name does not exist, create note for user."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param logic tracks current location in program"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return Message when note is created successfully."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If file does not exists."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(userGivenFileName).append(\".txt\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        //String formattedFileName \u003d sb.toString();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.insert(0, defaultDirectoryPath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String newFilePath \u003d sb.toString();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (noteFileAlreadyExist(newFilePath)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String errorMessage \u003d \"File already exists, please type \u0027editnote \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    + userGivenFileName + \"\u0027 to edit the file instead\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(errorMessage);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            File file \u003d new File(newFilePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            createFile(file, userGivenFileName);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return \"File [\" + userGivenFileName + \"] has been created successfully!\\n\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Creates file using given file name."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Verifies if file creation is successful."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param file File to be created as note."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param formattedFileName Formatted file name used for new file."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If file creation is unsuccessful."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void createFile(File file, String formattedFileName) throws CakeException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (!file.createNewFile()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                throw new CakeException(\"File \u0027\" + formattedFileName + \"\u0027 was not created! Pls try again!\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(e.getMessage());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if file specified in file path exists."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param filePath Path to the file to be created."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if file already exists."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean noteFileAlreadyExist(String filePath) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        File tempFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return tempFile.exists();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 199,
      "RusdiHaizim": 2
    }
  },
  {
    "path": "src/main/java/javacake/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public DeleteCommand(String str) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.DELETE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Execute deletion of task in tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException Shows error when deletion is not possible"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (input.length() \u003c\u003d 7) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new CakeException(\"[!] No deadline mentioned!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d input.substring(7);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            int num \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            --num;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            boolean isInsideData \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            for (int i \u003d 0; i \u003c progressStack.size(); ++i) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (i \u003d\u003d num) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    String stringBuilder \u003d \"Noted. I\u0027ve removed this task: \" + \"\\n      \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                            + progressStack.get(i).getFullString() + \"\\nNow you have \" + (progressStack.size() - 1)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                            + \" tasks in the list.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    progressStack.remove(i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    ui.showMessage(stringBuilder);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    isWithinData \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "             */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            for (int i \u003d 0; i \u003c storageManager.storage.getData().size(); ++i) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (i \u003d\u003d num) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    storageManager.storage.getData().remove(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    storageManager.storage.write(storageManager.storage.getData());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    isInsideData \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (!isInsideData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showError(\"Task number is out of bounds! [Done]\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                throw new CakeException(\"[!] Task number is out of bounds!\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + \"Task number must be \u003c\u003d \u0027\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + storageManager.storage.getData().size()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + \"\u0027!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new CakeException(\"[!] Task number is invalid! [Delete]\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 11,
      "RusdiHaizim": 56
    }
  },
  {
    "path": "src/main/java/javacake/commands/DeleteNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.utilities.IFileUtilities;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class DeleteNoteCommand extends Command implements IFileUtilities {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String fullFilePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String defaultFilePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static final char[] ILLEGAL_CHARACTERS \u003d { \u0027/\u0027, \u0027\\n\u0027, \u0027\\r\u0027, \u0027\\t\u0027,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        \u0027\\0\u0027, \u0027\\f\u0027, \u0027`\u0027, \u0027?\u0027, \u0027*\u0027, \u0027\\\\\u0027, \u0027\u003c\u0027, \u0027\u003e\u0027, \u0027|\u0027, \u0027\\\"\u0027, \u0027:\u0027, \u0027.\u0027, \u0027,\u0027};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Constructor for DeleteNoteCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Command used to delete a specific existing notes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Command input from the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If user does not input parameter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public DeleteNoteCommand(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        validateFileName(inputCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        type \u003d CmdType.DELETE_NOTE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String nameOfFile \u003d returnFileName(inputCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        this.fileName \u003d IFileUtilities.returnOriginalFileName(defaultFilePath, nameOfFile);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        System.out.println(\"fileName is:\" + fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Returns the name of file after validation checks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Delete note command by user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return Name of file specified for deletion."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String returnFileName(String inputCommand) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String bySpaces \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] parametersInCommand \u003d inputCommand.split(bySpaces);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return parametersInCommand[1];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Executes the deleting process."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Verifies if the file specified by the user has been deleted."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param logic TaskList containing current tasks."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param ui the Ui responsible for outputting messages."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param storageManager storage container."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return Notification messages depending delete outcome."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If file does not exist."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            File tempFile \u003d new File(fullFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (tempFile.delete()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                return \"File [\" + fileName + \"] has been deleted successfully!\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                return \"Unable to delete [\" + fileName + \"]!\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Method used for verification process."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks for illegal characters and if file exists."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Assigns inputFileName to fileName to prepare for deletion."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Input command by user."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If illegal character or invalid file name detected."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void validateFileName(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String bySpaces \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] parameters \u003d inputCommand.split(bySpaces);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (hasNoFileName(parameters)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Please indicate the file name you wish to delete\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (hasMultipleParams(parameters)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Please only enter one file name! E.g. deletenote [name of file]\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (hasIllegalCharacters(parameters[1])) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Invalid file name: Illegal character in file name detected!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (fileDoesNotExist(parameters[1])) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Invalid file name: No such file!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if delete note command contains more than one parameter."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param parameters Array of parameters on top of delete note command keyword."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if there is more than 2 parameters in command."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean hasMultipleParams(String[] parameters) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return (parameters.length \u003e 2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if parameter is specified in the delete note command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param parameters Array of parameters on top of delete note command keyword."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if there is no parameter."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean hasNoFileName(String[] parameters) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return (parameters.length \u003d\u003d 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Method to generate full file path to the file to be deleted."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Concatenates the desired file name with the default path to notes."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputFileName name of file user wants to delete."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return Full file path to the file to be deleted."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String processFilePath(String inputFileName) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String filePath \u003d updateDefaultDirectoryPath();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        System.out.println(filePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        defaultFilePath \u003d filePath;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        fullFilePath \u003d filePath + inputFileName + \".txt\" + \"/\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return fullFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Updates default directory path according the storage."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return updated default file path."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String updateDefaultDirectoryPath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return Storage.returnNotesDefaultFilePath();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if the input file name contains any illegal characters."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputFileName Specified file name by user."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if file name contains illegal characters."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static boolean hasIllegalCharacters(String inputFileName) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        for (char illegalChar : ILLEGAL_CHARACTERS) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (containsIllegal(inputFileName, illegalChar)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if file name contains illegal characters."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputFileName Name of input file."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param illegalChar Characters that are not allowed in file name."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if file name contains illegal character."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static boolean containsIllegal(String inputFileName, char illegalChar) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return inputFileName.indexOf(illegalChar) \u003e\u003d 0;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if file exists in the note storage."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputFileName name of file user wants to delete."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if file does not exist."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean fileDoesNotExist(String inputFileName) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String fullFilePath \u003d processFilePath(inputFileName);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        File tempFile \u003d new File(fullFilePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return (!tempFile.exists());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 167
    }
  },
  {
    "path": "src/main/java/javacake/commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public DoneCommand(String str) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.DONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Execute checking of task in tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException Shows error when task number is invalid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (input.length() \u003c\u003d 5) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new CakeException(\"[!] No deadline mentioned!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d input.substring(5);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            int num \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            --num;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(num);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            boolean isInsideData \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            /*for (int i \u003d 0; i \u003c progressStack.size(); ++i) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (i \u003d\u003d num) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    if (progressStack.get(i).isDone()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        ui.showMessage(progressStack.get(i).toString().substring(3) + \" is already done!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        isInsideData \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    progressStack.get(i).markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    ui.showMessage(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    ui.showMessage(\"    [✗] \" + progressStack.get(i).toString().substring(3));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    isInsideData \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }*/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            for (int i \u003d 0; i \u003c storageManager.storage.getData().size(); ++i) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (i \u003d\u003d num) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    storageManager.storage.getData().get(i).markAsDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    storageManager.storage.write(storageManager.storage.getData());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    isInsideData \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (!isInsideData) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showError(\"Task number is out of bounds! [Done]\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                throw new CakeException(\"[!] Not a valid Task Number!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new CakeException(\"[!] Not a valid Task Number!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 15,
      "RusdiHaizim": 52
    }
  },
  {
    "path": "src/main/java/javacake/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kishore03109"
        },
        "content": " * EDIT commands should be of the following format:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kishore03109"
        },
        "content": " * edit TASKINDEX  NEWDATE."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kishore03109"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public EditCommand(String str) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        type \u003d CmdType.EDIT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (input.length() \u003c\u003d 6) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new CakeException(\"[!] No deadline mentioned!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d input.substring(6);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(\"Task: \" + input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            String[] buffer \u003d input.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(\"Task num: \" + buffer[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(buffer[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            --taskIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (!buffer[2].equals(\"/by\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                throw new CakeException(\"[!] Wrong format\\nPlease input:\\n\u0027deadline TASK /by TASK_DATE\u0027\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (taskIndex \u003e\u003d storageManager.storage.getData().size() || taskIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                throw new CakeException(\"[!] Task number is out of bounds!\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + \"Task number must be \u003c\u003d \u0027\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + storageManager.storage.getData().size()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + \"\u0027!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            String newDateString \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            for (int i \u003d 0; i \u003c buffer.length; ++i) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (i \u003c\u003d 2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                newDateString +\u003d buffer[i];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (i !\u003d buffer.length - 1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    newDateString +\u003d \" \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            Date newDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            boolean isInsideData \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                List\u003cDateGroup\u003e groups \u003d parser.parse(newDateString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                newDate \u003d groups.get(0).getDates().get(0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                storageManager.storage.getData().get(taskIndex).changeDate(newDateString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                System.out.println(\"Snoozed to: \" + newDateString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                storageManager.storage.write(storageManager.storage.getData());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                isInsideData \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                throw new CakeException(\"[!] Date cannot be parsed: \" + newDateString);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (!isInsideData) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                throw new CakeException(\"[!] Task number is out of bounds [Edit]\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new CakeException(\"[!] Task number is invalid! [Edit]\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 4,
      "RusdiHaizim": 52,
      "kishore03109": 22
    }
  },
  {
    "path": "src/main/java/javacake/commands/EditNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.JavaCake;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.utilities.IFileUtilities;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import org.apache.commons.io.FilenameUtils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class EditNoteCommand extends Command implements IFileUtilities {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String defaultDirectoryPath \u003d \"data/notes/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String nameOfEditFile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String currentFilePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String headingMessage \u003d \"Write your notes below!\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            + \"To save edited content, type \u0027/save\u0027 and enter!\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String endingMessage \u003d \"has been saved!\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Constructor for EditNoteCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if command has two parameters - \"editnote\" and \"name of file to be edited\"."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if \"name of file to be edited\" exists."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * If former checks passed, update nameOfEditFile and currentFilePath variables."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Else inform user to either provide valid file name or valid EditNoteCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Input command from the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException if invalid command or invalid file name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public EditNoteCommand(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.logger.log(Level.INFO, \"Processing EditNoteCommand: \" + inputCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        type \u003d CmdType.EDIT_NOTE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        updateDefaultDirectoryPath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        verifyCommand(inputCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Updates default directory path according the storage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void updateDefaultDirectoryPath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        defaultDirectoryPath \u003d Storage.returnNotesDefaultFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Verifies if command contains parameter."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Editnote command from user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If user did not specify file name."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void verifyCommand(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String bySpaces \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] wordsInInputCommand \u003d inputCommand.split(bySpaces);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (wordsInInputCommand.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String fileName \u003d wordsInInputCommand[1];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            checkIfFileExist(fileName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            JavaCake.logger.log(Level.INFO, inputCommand + \" invalid EditNoteCommand.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Pls enter a valid editnote command:\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    + \" \u0027editnote - [name of the file you wish you edit]\u0027\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if file exist."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Updates current file path and nameOfEditFile if file exists."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param fileName Name of the file to be edited."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If input file name contains illegal characters."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void checkIfFileExist(String fileName) throws CakeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (fileExist(fileName)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            nameOfEditFile \u003d IFileUtilities.returnOriginalFileName(defaultDirectoryPath, fileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            createCurrentFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            JavaCake.logger.log(Level.INFO, fileName + \" contains illegal file name.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Pls enter a valid file name! Type \u0027listnote\u0027 to view available notes!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if name of the file exists in directory path."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param fileName Name of the file to be checked and edited."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if the file exists in directory path, false otherwise."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean fileExist(String fileName) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        File file \u003d new File(defaultDirectoryPath + fileName + \".txt\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.logger.log(Level.INFO, \"Checking if file: \" + fileName + \" exist.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            JavaCake.logger.log(Level.INFO, fileName + \" exist.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.logger.log(Level.INFO, fileName + \" does not exist.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Updates currentFilePath with file path to the file to be edited."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void createCurrentFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        currentFilePath \u003d defaultDirectoryPath + nameOfEditFile + \".txt\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if file in currentFilePath is empty by checking its size."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param currentFilePath file path to the current file to be edited."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return true if the file is empty, false otherwise."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static boolean checkFileIsEmpty(String currentFilePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        File file \u003d new File(currentFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return file.length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Read content stored in text file to be edited."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of the content stored in the text file."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException if the file does not exist."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String displayContentInFile() throws CakeException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return IFileUtilities.readFile(currentFilePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * For CLI only."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Read input from user and write into specified note file."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * If \u0027/save\u0027 is called, file will be saved."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException File does not exist."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void readAndSaveNewContent() throws CakeException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        BufferedWriter bw;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            bw \u003d new BufferedWriter(new FileWriter(new File(currentFilePath)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            writeNewLine(bw);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(e.getMessage());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Writes new line into edit file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param bw BufferedWriter to write new line into edit file."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If file does not exist."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void writeNewLine(BufferedWriter bw) throws CakeException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String lineRead;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            while (!(lineRead \u003d ui.readCommand()).equals(\"/save\")) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                bw.write(lineRead);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(e.getMessage());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Executes the EditNoteCommand accordingly depends on CLI or GUI."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * If CLI, use ui and readAndSaveNewContent method to generate message for user."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * If GUI, return !@#_EDIT_NOTE to notify MainWindow class to call GUI methods."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param logic tracks current location in program"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return endingMessage if CLI is used, else return !@#_EDIT_NOTE to request MainWindow class to handle."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException File does not exist."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (JavaCake.isCliMode()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (checkFileIsEmpty(currentFilePath)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                ui.showMessage(\"Write your notes below!\\n\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                ui.showMessage(\"To save edited content, type \u0027/save\u0027 and enter!\\n\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                readAndSaveNewContent();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                return endingMessage;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                ui.showMessage(\"Below is your previous saved content! \""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        + \"Copy your previous content and edit accordingly\\n\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                ui.showMessage(\"To save edited content, type \u0027/save\u0027 and enter!\\n\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                ui.showMessage(displayContentInFile());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                readAndSaveNewContent();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                return endingMessage;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return \"!@#_EDIT_NOTE\"; // used for GUI"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Informs user if the file to be edited is empty."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * If file is empty, print headingMessage."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Else, print secondHeadingMessage and the content of the edit file."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String containing heading message and content if available."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException if the file does not exists."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static String getHeadingMessage() throws CakeException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (checkFileIsEmpty(currentFilePath)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return headingMessage;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String secondHeadingMessage \u003d \"Below is your previous saved content! \""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    + \"Copy your previous content and edit accordingly\\n\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    + \"To save edited content, type \u0027/save\u0027 and enter!\\n\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return secondHeadingMessage + readTextFileContent();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Removes all content of text file before user can edit file."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * EditFileCommand does not append content to file."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException File does not exist."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static void clearTextFileContent() throws CakeException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(currentFilePath);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(e.getMessage());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Read content in the text file to be edited."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of all the content in file to be edited."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException File does not exist."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String readTextFileContent() throws CakeException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return IFileUtilities.readFile(currentFilePath);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Method used for GUI."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Write input content from user into file to be edited."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Read new content in the file to be edited."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param input notes from the user."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return heading message and new content in text file."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException File does not exist."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static String writeSaveGui(String input) throws CakeException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        BufferedWriter bw;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            bw \u003d new BufferedWriter(new FileWriter(new File(currentFilePath), true));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            bw.write(input);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            bw.newLine();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(e.getMessage());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return headingMessage + readTextFileContent();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Generates formatted message when the file is saved successfully."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of message when file is saved."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static String successSaveMessage() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return \"File: [\" + nameOfEditFile + \"] \" + endingMessage;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 269,
      "RusdiHaizim": 2
    }
  },
  {
    "path": "src/main/java/javacake/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Constructor for ExitCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks that no parameters are included."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Exit command from user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If other parameter is appended to command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ExitCommand(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        checksParam(inputCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.EXIT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Executes exiting the program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 17,
      "RusdiHaizim": 17
    }
  },
  {
    "path": "src/main/java/javacake/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String str) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        type \u003d CmdType.FIND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes finding tasks corresponding to the keyword in \u0027input\u0027."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException Shows error when unable to access list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d input.substring(5);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        /*if (progressStack.size() \u003e 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isInside \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isStarting \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            for (int i \u003d 0; i \u003c progressStack.size(); ++i) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                if (progressStack.get(i).toString().contains(input)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (isStarting) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        isStarting \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        ui.showMessage(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    int temp \u003d i + 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    ui.showMessage(temp + \". \" + progressStack.get(i).getFullString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    isInside \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!isInside) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showError(\"Keyword not in List\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showError(\"Empty List!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 12,
      "RusdiHaizim": 4,
      "-": 31
    }
  },
  {
    "path": "src/main/java/javacake/commands/GoToCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.JavaCake;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.QuestionDifficulty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.QuestionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.QuizSession;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class GoToCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private Queue\u003cString\u003e indexQueue \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * constructor for goto command. Contains a queue of index in which user wants to navigate into."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Splits command into 2, space delimiter, max size of inputDivider \u003d 2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * @param inputCommand Parsed goto command by user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public GoToCommand(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] inputDivider \u003d inputCommand.split(\"\\\\s+\", 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String gotoIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (inputDivider.length \u003d\u003d 1) { // no goto index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Please specify the index you wish to go!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            gotoIndex \u003d inputDivider[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (gotoIndex.matches(\"\\\\d+\")) { //check if input is numeric"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            indexQueue.add(gotoIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            processMultipleIndexes(gotoIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Queues the index when multiple indexes are detected."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param gotoIndex Index user wants to view."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void processMultipleIndexes(String gotoIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] buffer \u003d gotoIndex.split(\"\\\\.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        indexQueue.addAll(Arrays.asList(buffer));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Execute jumping to given index."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param logic tracks current location in program"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param storageManager storage container."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException Error thrown when unable to close reader or error in quiz format"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throws CakeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        int intIndex \u003d Integer.parseInt(indexQueue.poll()) - 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logic.updateFilePath(logic.gotoFilePath(intIndex));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String filePath \u003d logic.getFullFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (filePath.contains(\"Quiz\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            QuizSession.setProfile(storageManager.profile);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (!filePath.substring(filePath.length() - 4).equals(\"Quiz\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                throw new CakeException(\"Sorry, please type \u0027back\u0027 or \u0027list\u0027 instead.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            return handleQuiz(logic, ui, storageManager);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logic.insertQueries();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        if (logic.containsDirectory()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (indexQueue.size() !\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                return execute(logic, ui, storageManager);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            return (logic.displayDirectories());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            logic.updateFilePath(logic.gotoFilePath(0));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (indexQueue.size() !\u003d 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                return execute(logic, ui, storageManager);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            return (logic.readQuery());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String handleQuiz(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        String filePath \u003d logic.getFullFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        QuestionType qnType;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        QuestionDifficulty qnDifficulty;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        if (filePath.contains(\"1. Java Basics\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            qnType \u003d QuestionType.BASIC;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        } else if (filePath.contains(\"2. Object-Oriented Programming\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            qnType \u003d QuestionType.OOP;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (filePath.contains(\"3. Extensions\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            qnType \u003d QuestionType.EXTENSIONS;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            qnType \u003d QuestionType.ALL;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        if (filePath.contains(\"1. Easy Quiz\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            qnDifficulty \u003d QuestionDifficulty.EASY;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        } else if (filePath.contains(\"2. Medium Quiz\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            qnDifficulty \u003d QuestionDifficulty.MEDIUM;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            qnDifficulty \u003d QuestionDifficulty.HARD;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (JavaCake.isCliMode()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return new QuizSession(qnType, qnDifficulty, JavaCake.isCliMode())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    .execute(logic, ui, storageManager);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            String response \u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            logic.insertQueries();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            QuizSession.logic \u003d logic;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            switch (qnType) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            case BASIC:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                response \u003d \"!@#_QUIZ_1\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            case OOP:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                response \u003d \"!@#_QUIZ_2\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            case EXTENSIONS:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                response \u003d \"!@#_QUIZ_3\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                response \u003d \"!@#_QUIZ_4\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            switch (qnDifficulty) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            case EASY:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                response +\u003d \"EZ\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            case MEDIUM:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                response +\u003d \"MED\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                response +\u003d \"HARD\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            return response;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 51,
      "RusdiHaizim": 14,
      "claysmilesoil": 17,
      "kishore03109": 63
    }
  },
  {
    "path": "src/main/java/javacake/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Constructor for HelpCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param str Input command from user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public HelpCommand(String str) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.HELP;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Execute S.O.S."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param logic tracks current location in program"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException Error thrown when unable to close reader"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return method for the related help requested."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case \"help\" : return mainHelp();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case \"help back\" : return backHelp();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case \"help change\" : return changeHelp();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case \"help deadline\" : return deadlineHelp();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case \"help delete\" : return deleteHelp();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case \"help done\" : return doneHelp();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case \"help exit\" : return exitHelp();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case \"help goto\": return gotoHelp();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case \"help help\": return helpHelp();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case \"help list\": return listHelp();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case \"help reset\" : return resetHelp();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case \"help score\": return scoreHelp();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case \"help snooze\": return snoozeHelp();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case \"help overview\": return overviewHelp();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case \"help createnote\": return createNoteHelp();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case \"help editnote\": return editNoteHelp();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case \"help listnote\": return listNoteHelp();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        default: throw new CakeException(\"No such command found. Try again.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Displays list of built-in commands."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return List of commands that users can execute."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String mainHelp() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Here is the list of available commands:\\n\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"back\").append(\"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"change\").append(\"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"deadline\").append(\"\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"delete\").append(\"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"done\").append(\"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"exit\").append(\"\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"goto \u0027X\u0027 [X \u003d {1,2,..}]\").append(\"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"help\").append(\"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"list\").append(\"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"- \").append(\"overview\").append(\"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"reset\").append(\"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"score\").append(\"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"snooze\").append(\"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"- \").append(\"createnote\").append(\"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"- \").append(\"editnote\").append(\"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"- \").append(\"listnote\").append(\"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"\\nType \u0027help COMMAND_NAME\u0027 to learn more in-depth!\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Provides a brief explanation on how back command work."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of instructions to guide user on back command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String backHelp() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"back\").append(\"\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to jump back to previous state after calling \u0027goto X\u0027\").append(\"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Provides a brief explanation on how change command work."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String of instructions to guide user on back command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String changeHelp() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"change\").append(\"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to switch between:\\n -LIGHT_MODE[default]\\n -DARK_MODE\").append(\"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Provides a brief explanation on how deadline command work."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String of instructions to guide user on back command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String deadlineHelp() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"deadline TASK_NAME /by TASK_DATE\").append(\"\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to add a deadline task\").append(\"\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Provides a brief explanation on how delete command work."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String of instructions to guide user on back command."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String deleteHelp() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"delete TASK_NUM\").append(\"\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to delete a deadline task\").append(\"\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Provides a brief explanation on how done command work."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String of instructions to guide user on back command."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String doneHelp() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"done TASK_NUM\").append(\"\\n\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to set a deadline task as done\").append(\"\\n\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Provides a brief explanation on how exit command work."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of instructions to guide user on exit command."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String exitHelp() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"exit\").append(\"\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to exit from the program\").append(\"\\n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Provides a brief explanation on how goto command work."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of instructions to guide user on goto command."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String gotoHelp() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        stringBuilder.append(\"- \").append(\"\u0027goto X\u0027 OR \u0027goto X.Y\u0027 [X and Y are positive integers]\").append(\"\\n\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"Command to jump to next index of content!\").append(\"\\n\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"\\n\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"- \").append(\"E.g. goto \u00271\u0027 will bring you to the content in index 1.\").append(\"\\n\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"- \").append(\"E.g. goto \u00271.2\u0027 will bring you to \");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"- \").append(\"index 1 followed by 2!\").append(\"\\n\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"- \").append(\"You get the point!\").append(\"\\n\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Provides a brief explanation on how help command work."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of instructions to guide user on help command."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String helpHelp() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"help\").append(\"\\n\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"I am trying to help you!!!\").append(\"\\n\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Provides a brief explanation on how list command work."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of instructions to guide user on list command."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String listHelp() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"list\").append(\"\\n\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to display table-of-contents\").append(\"\\n\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Provides a brief explanation on how reset command work."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String of instructions to guide user on back command."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String resetHelp() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"reset\").append(\"\\n\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to reset the user profile\")"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                .append(\"\\n\").append(\"Confirmation will be requested before reset\").append(\"\\n\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Provides a brief explanation on how score command work."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of instructions to guide user on score command."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String scoreHelp() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"score\").append(\"\\n\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to get your current overall score for JavaCake!\").append(\"\\n\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Provides a brief explanation on how snooze command work."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String of instructions to guide user on back command."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String snoozeHelp() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"snooze TASK_NUM /by TASK_DATE\").append(\"\\n\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to reschedule a deadline task\").append(\"\\n\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Provides a brief explanation on how overview command work."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of instructions to guide user on overview command."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String overviewHelp() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"- \").append(\"overview\").append(\"\\n\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"Command to view all the content installed in JavaCake!\").append(\"\\n\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Provides a brief explanation on how createnote command work."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of instructions to guide user on createnote command."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String createNoteHelp() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"- \").append(\"createnote\").append(\"\\n\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"Command to create your own notes in JavaCake!\").append(\"\\n\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"Simply type in \u0027createnote\u0027 or \u0027createnote [desired name of note]\u0027!\").append(\"\\n\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"And please keep your file name in alphanumeric to avoid illegal characters!\")"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Provides a brief explanation on how editnote command work."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of instructions to guide user on editnote command."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String editNoteHelp() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"- \").append(\"editnote\").append(\"\\n\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"Command to edit the pre-existing note created by you!\").append(\"\\n\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"View the notes available on the right window!\").append(\"\\n\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"Simply type in \u0027editnote [name of note]\u0027 to edit!\").append(\"\\n\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"Remember \u0027.txt\u0027 must be omitted!\").append(\"\\n\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Provides a brief explanation on how listnote command work."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of instructions to guide user on listnote command."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String listNoteHelp() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"- \").append(\"listnote\").append(\"\\n\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"Command to list all the pre-existing note created by you!\").append(\"\\n\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"Simply type in \u0027listnote\u0027 to refresh the list of notes!\").append(\"\\n\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 113,
      "RusdiHaizim": 138,
      "kishore03109": 1
    }
  },
  {
    "path": "src/main/java/javacake/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Constructor for ListCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks that no parameters are included."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand List command from user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If other parameter is appended to command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ListCommand(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        checksParam(inputCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.LIST;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Execute the listing of current tasks on the Ui."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logic.setDefaultFilePath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return (logic.processQueries());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 15,
      "RusdiHaizim": 17
    }
  },
  {
    "path": "src/main/java/javacake/commands/ListNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.notes.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.notes.NoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class ListNoteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Constructor for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks that no parameters are included."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand List command from user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If other parameter is appended to command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ListNoteCommand(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        checksParam(inputCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        type \u003d CmdType.LIST_NOTE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Prints out the names of all the notes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Notes can be stored beforehand or created when program is running using CreateNoteCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of the file names of the notes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If file does not exist."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        ArrayList\u003cNote\u003e notesArchive \u003d new NoteList().compileNotes();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(\"You have \").append(notesArchive.size()).append(\" note(s) available!\").append(\"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        for (Note n : notesArchive) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sb.append(index).append(\". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sb.append(n.getName()).append(\"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 43,
      "RusdiHaizim": 4
    }
  },
  {
    "path": "src/main/java/javacake/commands/OverviewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import edu.emory.mathcs.backport.java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.net.URLDecoder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.security.CodeSource;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.zip.ZipEntry;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.zip.ZipFile;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.zip.ZipInputStream;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class OverviewCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String currentFilePath \u003d \"content/MainList\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static int expectedForwardSlash \u003d 3;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static int indentations \u003d 5;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Constructor for OverviewCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks that no parameters are included."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Overview command from user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If other parameter is appended to command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public OverviewCommand(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        checksParam(inputCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        type \u003d CmdType.OVERVIEW;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Executing MegaListCommand prints the entire directory tree of content files."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Set to defaultFilePath and insertQueries to enable link to GoToCommand."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Walk function recursively finds files that are directory and insert into result list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return formatted directory of content."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException when file is not found."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logic.setDefaultFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logic.insertQueries();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(\"Here is the lesson directory!\").append(\"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        CodeSource src \u003d Logic.class.getProtectionDomain().getCodeSource();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (runningFromJar()) { //jar"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sb.append(processJarFile(src));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sb.append(processNonJarFile());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Processes Jar Files by unzipping the jar file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Looks for file names that corresponds to current file path."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param src Source of the code."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of names of directories."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If file path does not exist."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String processJarFile(CodeSource src) throws CakeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        List\u003cString\u003e collectionOfNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        List\u003cString\u003e result;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            URL jar \u003d src.getLocation();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ZipInputStream zip \u003d new ZipInputStream(jar.openStream());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            processZipFile(collectionOfNames, zip);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Collections.sort(collectionOfNames);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            result \u003d processFileNames(collectionOfNames);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sb.append(String.join(\"\\n\", result)).append(\"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sb.append(getEndingMessage());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Loops through all the file entries within a zip."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Finds all entries that start with current file path."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Stores entries in collectionOfNames to be processed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param collectionOfNames Name of files that are in currentFilePath."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param zip Zip file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If zip file does not exist."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void processZipFile(List\u003cString\u003e collectionOfNames, ZipInputStream zip) throws CakeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ZipEntry e;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            while ((e \u003d zip.getNextEntry()) !\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                String name \u003d e.getName();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                if (name.startsWith(currentFilePath)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    collectionOfNames.add(name);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(e.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Processes in Non-Jar files such as IDEs."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Uses Depth-First-Search to process files that are directories."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Returns the list of names used for processing."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of names of directories."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If file path does not exist."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String processNonJarFile() throws CakeException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Stream\u003cPath\u003e walk \u003d Files.walk(Paths.get(\"src/main/resources/content/MainList\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            List\u003cString\u003e result \u003d walk.filter(Files::isDirectory)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    .map(x -\u003e x.toString()).collect(Collectors.toList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            result \u003d processFileNamesIfNotJar(result);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sb.append(String.join(\"\\n\", result)).append(\"\\n\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sb.append(getEndingMessage());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(e.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Method used to format the directory names."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Based on the number of \u0027\\\u0027, prepend a multiple of 5 of spaces."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Remove first directory name as it is misleading."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param listOfFilesNames contains file names generated from file walk."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return formatted list of file names ready to be displayed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private List\u003cString\u003e processFileNames(List\u003cString\u003e listOfFilesNames) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        List\u003cString\u003e processedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        for (String filesNames : listOfFilesNames) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String[] individualPath \u003d filesNames.split(\"/\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (!(individualPath[individualPath.length - 1]).contains(\".txt\")) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                int numberOfSpaces \u003d individualPath.length - expectedForwardSlash;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                sb.append(\" \".repeat(Math.max(0, numberOfSpaces) * indentations));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                sb.append(individualPath[individualPath.length - 1]);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                processedList.add(sb.toString());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        processedList.remove(0);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return processedList;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Method used to format the directory names."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Based on the number of \u0027\\\u0027, prepend a multiple of 5 of spaces."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Remove first directory name as it is misleading."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param listOfFilesNames contains file names generated from file walk."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return formatted list of file names ready to be displayed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private List\u003cString\u003e processFileNamesIfNotJar(List\u003cString\u003e listOfFilesNames) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        List\u003cString\u003e processedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        for (String filesNames : listOfFilesNames) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String[] individualPath \u003d filesNames.split(\"\\\\\\\\\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            int numberOfSpaces \u003d individualPath.length - 6;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sb.append(\" \".repeat(Math.max(0, numberOfSpaces) * 5));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sb.append(individualPath[individualPath.length - 1]);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            processedList.add(sb.toString());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        processedList.remove(0);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return processedList;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if the program is running in a JAR file."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if the program is running in a JAR file."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static boolean runningFromJar() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String jarFilePath \u003d new File(OverviewCommand.class"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    .getProtectionDomain()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    .getCodeSource()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    .getLocation()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    .getPath())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    .toString();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            jarFilePath \u003d URLDecoder.decode(jarFilePath, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            try (ZipFile zipFile \u003d new ZipFile(jarFilePath)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                ZipEntry zipEntry \u003d zipFile.getEntry(\"META-INF/MANIFEST.MF\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                return zipEntry !\u003d null;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Displays ending message to improve user interface."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of ending message."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String getEndingMessage() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(\"Type \u0027goto [index]\u0027 to access the topics you are interested in!\").append(\"\\n\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(\"E.g. \u0027goto 1.2\u0027 will bring you to 1. Java Basics -\u003e 2. Read\").append(\"\\n\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 212,
      "RusdiHaizim": 4,
      "kishore03109": 1
    }
  },
  {
    "path": "src/main/java/javacake/commands/ReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Constructor for ReminderCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks that no parameters are included."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Reminder command from user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If other parameter is appended to command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ReminderCommand(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        checksParam(inputCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.REMIND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        ArrayList\u003cTask\u003e deadlineList \u003d storageManager.storage.getData();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        /*for (Task task : logic.getData()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (task.getTaskType() \u003d\u003d Task.TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                deadlineList.add(task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        sortTasksByDate(deadlineList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        int idx \u003d 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (deadlineList.size() \u003e 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //ui.showMessage(\"Here are the upcoming Deadlines:\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(\"~~Upcoming Deadlines!~~\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            for (Task task : deadlineList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                stringBuilder.append(idx++).append(\".\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                stringBuilder.append(task.getFullString()).append(\"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                //ui.showMessage(stringBuilder.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //ui.showError(\"You have no deadlines as of now.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(\"You have no deadlines as of now.\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static void sortTasksByDate(ArrayList\u003cTask\u003e scheduleList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        scheduleList.sort((o1, o2) -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (o1.getDateTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else if (o2.getDateTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (o1.getDateTime().before(o2.getDateTime())) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else if (o1.getDateTime().after(o2.getDateTime())) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 18,
      "RusdiHaizim": 51
    }
  },
  {
    "path": "src/main/java/javacake/commands/ResetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class ResetCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Constructor for ResetCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks that no parameters are included."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Reset command from user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If other parameter is appended to command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ResetCommand(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        checksParam(inputCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return \"Confirm reset and deletion of current Profile?\\nType \u0027yes\u0027 to confirm\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                + \"Type anything else to cancel\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 24,
      "RusdiHaizim": 1
    }
  },
  {
    "path": "src/main/java/javacake/commands/ScoreCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.quiz.QuestionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class ScoreCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    //3 different levels: EZ, MED, HARD"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int questionDifficulties \u003d 3;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    //Number of questions per level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int questionSize \u003d QuestionList.MAX_QUESTIONS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    //4 different quizzes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int questionTypes \u003d 4;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int totalQuestionQuantum \u003d questionDifficulties * questionTypes * questionSize;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Constructor for ScoreCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks that no parameters are included."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Score command from user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If other parameter is appended to command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ScoreCommand(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        checksParam(inputCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Executes showing quiz score."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return getQuizResults(storageManager.profile);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get quiz score."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param profile the user\u0027s profile"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String with quiz score message"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String getQuizResults(Profile profile) throws CakeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            str.append(\"Here\u0027s your quiz progress so far :D\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            str.append(\"(\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            for (int i \u003d 0; i \u003c questionTypes; ++i) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                str.append(\" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                for (int j \u003d 0; j \u003c questionDifficulties; ++j) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    for (int k \u003d 0; k \u003c questionSize; ++k) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        if (k \u003c profile.getIndividualContentMarks((i * questionDifficulties) + j)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                            str.append(\"#\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                            str.append(\"-\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    str.append(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (i !\u003d questionTypes - 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    str.append(\"|\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            str.append(\") \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            int progress \u003d (int) ((double) profile.getTotalProgress() / totalQuestionQuantum * 100);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            str.append(progress).append(\"%\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return str.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Null pointer exception here\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 19,
      "RusdiHaizim": 58
    }
  },
  {
    "path": "src/main/java/javacake/commands/ViewNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.utilities.IFileUtilities;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class ViewNoteCommand extends Command implements IFileUtilities {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String defaultFilePath \u003d Storage.returnNotesDefaultFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Constructor for ViewNoteCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Validates the command by checking parameters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Instantiates command object if validation passed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand ViewNoteCommand by user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If command is not validated."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ViewNoteCommand(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        validateCommand(inputCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        type \u003d CmdType.VIEW_NOTE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        this.fileName \u003d returnFileName(inputCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Returns the name of file after validation checks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand View note command by user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return Name of file specified for viewing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String returnFileName(String inputCommand) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String bySpaces \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] parametersInCommand \u003d inputCommand.split(bySpaces);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return parametersInCommand[1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks the parameters of input by user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if user inputs file name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if command contains multiple parameters."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if command contains illegal characters."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if file exists in save directory."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if file specified is empty."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand View note command by user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If one of the above conditions is met."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void validateCommand(String inputCommand) throws CakeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (doesNotContainFileName(inputCommand)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Please input the name of the file you wish to view!\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            + \"E.g. viewnote [name of file]\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (containsMultipleParameters(inputCommand)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Please only enter one file name! E.g. viewnote [name of file]\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (Command.containsIllegalCharacter(inputCommand)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Invalid file name: Illegal character in file name detected!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (fileDoesNotExist(inputCommand)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"File specified does not exist! \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            + \"Please refer to the notes window to view existing notes file!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (fileIsEmpty(inputCommand)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"File specified is empty! \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            + \"Use \u0027editnote [name of file]\u0027 to write new content!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if file specified by user is empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand View note command by user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if file specified by user is empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean fileIsEmpty(String inputCommand) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String bySpaces \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] parametersInCommand \u003d inputCommand.split(bySpaces);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String fileName \u003d parametersInCommand[1];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String filePath \u003d defaultFilePath + fileName + \".txt\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        File tempFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return (tempFile.length() \u003d\u003d 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if file exists."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand View note command by user."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if file does not exist."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean fileDoesNotExist(String inputCommand) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String bySpaces \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] parametersInCommand \u003d inputCommand.split(bySpaces);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String fileName \u003d parametersInCommand[1];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String filePath \u003d defaultFilePath + fileName + \".txt\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        File tempFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return !tempFile.exists();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if user inputs multiple parameters."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand View note command by user."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if user inputs multiple parameters."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean containsMultipleParameters(String inputCommand) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String bySpaces \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] parametersInCommand \u003d inputCommand.split(bySpaces);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return (parametersInCommand.length \u003e 2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if user inputs name of file to view."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand View note command by user."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if user does not input name of file to view."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean doesNotContainFileName(String inputCommand) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String bySpaces \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] parametersInCommand \u003d inputCommand.split(bySpaces);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return (parametersInCommand.length \u003d\u003d 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Returns the full path to the note file to be viewed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return Full path to the note file to be viewed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String generateCurrentFilePath() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return defaultFilePath + fileName + \".txt\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Views the content of the note file specified by the user."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Allows user to view the content without having to commit to any editing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param logic tracks current location in program"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param storageManager storage container."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return Content in the file specified by the user."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If file does not exist."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String filePath \u003d generateCurrentFilePath();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return \"Below is the file [\" + fileName + \"] that you want to view!\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                + IFileUtilities.readFile(filePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 141
    }
  },
  {
    "path": "src/main/java/javacake/commands/ViewScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewScheduleCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewScheduleCommand(String str) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        type \u003d CmdType.VIEWSCH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (input.length() \u003d\u003d 12) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"     ☹ OOPS!!! The description of a viewschedule cannot be empty.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d input.substring(13);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Date currDate \u003d getDate(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar calendar \u003d GregorianCalendar.getInstance();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.setTime(currDate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        int currDay \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        int currMonth \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        int currYear \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e scheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        /*for (Task task : progressStack.getData()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.getTaskType() \u003d\u003d Task.TaskType.EVENT || task.getTaskType() \u003d\u003d Task.TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                calendar.setTime(task.getDateTime());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                int taskDay \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                int taskMonth \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                int taskYear \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                if (taskYear \u003d\u003d currYear \u0026\u0026 taskMonth \u003d\u003d currMonth \u0026\u0026 taskDay \u003d\u003d currDay) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    scheduleList.add(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        sortTasksByDate(scheduleList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String outputDate \u003d new SimpleDateFormat(\"dd MMM yyyy\").format(currDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (scheduleList.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showMessage(\"No tasks on \" + outputDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showMessage(\"Here are your tasks for \" + outputDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : scheduleList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                String output \u003d counter + \". \" + task.getFullString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showMessage(output);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static void sortTasksByDate(ArrayList\u003cTask\u003e scheduleList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        scheduleList.sort((o1, o2) -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            if (o1.getDateTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (o2.getDateTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            if (o1.getDateTime().before(o2.getDateTime())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (o1.getDateTime().after(o2.getDateTime())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private Date getDate(String input) throws CakeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cDateGroup\u003e groups \u003d parser.parse(input);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            date \u003d groups.get(0).getDates().get(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"   Date cannot be parsed: \" + input);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 9,
      "RusdiHaizim": 5,
      "-": 77
    }
  },
  {
    "path": "src/main/java/javacake/exceptions/CakeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class CakeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for customised Exception class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message The error message thrown by other methods"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public CakeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 2,
      "RusdiHaizim": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/javacake/notes/Note.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public Note(String name) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 14
    }
  },
  {
    "path": "src/main/java/javacake/notes/NoteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import org.apache.commons.io.FilenameUtils;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class NoteList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ArrayList\u003cNote\u003e al \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Using Depth-First-Search to find all text files."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * In current directory, the text files are notes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return ArrayList storing all the notes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If text file does not exist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ArrayList\u003cNote\u003e compileNotes() throws CakeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Stream\u003cPath\u003e walk \u003d Files.walk(Paths.get(Storage.returnNotesDefaultFilePath()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            List\u003cString\u003e result \u003d walk.filter(Files::isRegularFile)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    .map(x -\u003e x.toString()).collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            for (String resultName : result) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                String processedName \u003d processFileNames(resultName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                al.add(new Note(processedName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (NullPointerException | IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Content not found!\" + \"\\nPls key \u0027back\u0027 or \u0027list\u0027 to view previous content!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return al;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Format the names to only display the last partition of file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param resultName File paths that are not processed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String containing the last partition of file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If index of array does not exist."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String processFileNames(String resultName) throws CakeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            File file \u003d new File(resultName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String fileName \u003d file.getName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return FilenameUtils.removeExtension(fileName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 60
    }
  },
  {
    "path": "src/main/java/javacake/quiz/Question.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private String userAnswer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private int numberOfOptions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Constructor for a multiple choice Question object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param question the question text."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param answer the correct option for the question"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param options number of answer options the question has."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public Question(String question, String answer, int options) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        this.numberOfOptions \u003d options;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public int getNumberOfOptions() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return numberOfOptions;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public void setUserAnswer(String userInput) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        userAnswer \u003d userInput;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public String getUserAnswer() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return userAnswer;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * Checks if user\u0027s answer to the question is correct."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param input user\u0027s inputted answer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @return true if input matches answer, false otherwise."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public boolean isAnswerCorrect(String input) throws CakeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        if (!isWithinNumberOfOptions(input)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            throw new CakeException(\"[!] Please enter option number between 1 and \" + numberOfOptions + \"! [!]\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        return (input.trim().equals(answer));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private boolean isWithinNumberOfOptions(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        int tmp \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        if (tmp \u003c 1 || tmp \u003e numberOfOptions) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claysmilesoil": 60,
      "kishore03109": 2
    }
  },
  {
    "path": "src/main/java/javacake/quiz/QuestionDifficulty.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public enum QuestionDifficulty {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    EASY, MEDIUM, HARD"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claysmilesoil": 5
    }
  },
  {
    "path": "src/main/java/javacake/quiz/QuestionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import static javacake.quiz.QuizSession.logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class QuestionList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private ArrayList\u003cInteger\u003e chosenQuestionsIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private ArrayList\u003cQuestion\u003e chosenQuestions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /** The maximum number of questions in one session of a quiz. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public static final int MAX_QUESTIONS \u003d 5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private QuestionType questionType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private int totalNumOfQns \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Initialize a list of randomly chosen questions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param type the type of question to choose."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException when there is an error loading files."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public QuestionList(QuestionType type) throws CakeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        questionType \u003d type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        this.filePath \u003d logic.getFullFilePath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        totalNumOfQns \u003d logic.getNumOfFiles();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        chosenQuestionsIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        chosenQuestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        pickQuestions();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        loadQuestions();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public ArrayList\u003cQuestion\u003e getQuestionList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return chosenQuestions;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public String getQuestion(int index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return index + 1 + \"/\" + MAX_QUESTIONS + \"\\n\" + chosenQuestions.get(index).getQuestion();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public String getAnswers(int index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return \"Your answer: \" + chosenQuestions.get(index).getUserAnswer()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                + \"\\nCorrect answer: \" + chosenQuestions.get(index).getAnswer();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public boolean setAndCheckUserAnswer(int index, String input) throws CakeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        chosenQuestions.get(index).setUserAnswer(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return (chosenQuestions.get(index).isAnswerCorrect(input));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Method to get questions from current directory with indexes from chosenQuestionsIndex."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void loadQuestions() throws CakeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        for (Integer i : chosenQuestionsIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                i +\u003d 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                String fileContentPath \u003d filePath + \"/Qn\" + i + \".txt\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                InputStream inputStream \u003d ClassLoader.getSystemClassLoader().getResourceAsStream(fileContentPath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                assert inputStream !\u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                BufferedReader reader \u003d new BufferedReader(new InputStreamReader(inputStream));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                String sentenceRead;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                while ((sentenceRead \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                    stringBuilder.append(sentenceRead).append(\"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                reader.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                String read \u003d stringBuilder.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                String[] questions \u003d read.substring(0, stringBuilder.length() - 1).split(\"\\\\|\\\\s*\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                this.chosenQuestions.add(new Question(questions[0],"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                        questions[1].trim(), Integer.parseInt(questions[2])));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                throw new CakeException(\"Error in loading file :(\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        assert chosenQuestions.size() \u003e 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private void pickQuestions() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_QUESTIONS; i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            int randomNum;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                randomNum \u003d rand.nextInt(totalNumOfQns);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } while (chosenQuestionsIndex.contains(randomNum)); // prevents repeat questions"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            chosenQuestionsIndex.add(randomNum);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        assert (chosenQuestionsIndex.size() \u003d\u003d MAX_QUESTIONS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public QuestionType getQuestionType() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return questionType;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 5,
      "RusdiHaizim": 4,
      "claysmilesoil": 82,
      "kishore03109": 9
    }
  },
  {
    "path": "src/main/java/javacake/quiz/QuestionType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public enum QuestionType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    BASIC, OOP, EXTENSIONS, ALL"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claysmilesoil": 5
    }
  },
  {
    "path": "src/main/java/javacake/quiz/QuizManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public interface QuizManager {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    String getQuestion(int index);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    String parseInput(int index, String input) throws CakeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 2,
      "claysmilesoil": 7
    }
  },
  {
    "path": "src/main/java/javacake/quiz/QuizSession.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.JavaCake;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.TopBar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class QuizSession implements QuizManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private QuestionList questionList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private QuestionType qnType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private QuestionDifficulty qnDifficulty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int currScore \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static Profile profile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ScoreGrade scoreGrade;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public int totalNumOfQns \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static Logic logic \u003d Logic.getInstance();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private boolean isQuizComplete;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public static final int MAX_QUESTIONS \u003d 5;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public static final double PERCENTAGE_1 \u003d 0.5;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public static final double PERCENTAGE_2 \u003d 1.0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public static final int levelsOfDifficulty \u003d 3;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public static int TotalMaxQuestions \u003d MAX_QUESTIONS * levelsOfDifficulty;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public enum ScoreGrade {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        BAD, OKAY, GOOD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * QuizCommand constructor for topic-based quiz."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param questionType the topic of the quiz."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public QuizSession(QuestionType questionType, QuestionDifficulty questionDifficulty, boolean isCli)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throws CakeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        questionList \u003d new QuestionList(questionType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        qnType \u003d questionType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        qnDifficulty \u003d questionDifficulty;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        if (!isCli) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            runGui();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        isQuizComplete \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Method to get the question string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param index question index between 0 and MAX_QUESTIONS-1."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @return question string."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public String getQuestion(int index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return questionList.getQuestion(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Parses valid user input for quiz session."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param index question index between 0 and MAX_QUESTIONS-1."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param input user input, either as user\u0027s answer or commands available on results page."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @return command identifier if on result page, null otherwise."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException if user answer is not integer value during quiz, or command is invalid on results page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String parseInput(int index, String input) throws CakeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        if (isQuizComplete) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            switch (input) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            case (\"review\"):"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                return \"!@#_REVIEW\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            case (\"back\"):"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                // TODO tie BackCommand identifier to MainWindow"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                return \"!@#_BACK\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                throw new CakeException(\"[!] Invalid command at this point in the program [!]\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + \"    Try \\\"review\\\" or \\\"back\\\".\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + \"\\n\\n\" + getQuizResult());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                checkAnswer(index, input);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } catch (CakeException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                throw new CakeException(e.getMessage() + getQuestion(index));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public QuestionList getQuestionList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return questionList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public static void setProfile(Profile profile) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        QuizSession.profile \u003d profile;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Executes the quiz."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param ui the UI responsible for inputs and outputs of the program."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param storageManager storage container."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @return execution of next command from input at results screen."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException Error thrown when there is a problem with score calculation."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logic.insertQueries();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assert !logic.containsDirectory();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        this.filePath \u003d logic.getFullFilePath();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        totalNumOfQns \u003d logic.getNumOfFiles();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_QUESTIONS; i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            Question question \u003d questionList.getQuestionList().get(i);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            ui.displayQuiz(question.getQuestion(), i + 1, MAX_QUESTIONS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            String userAnswer \u003d ui.readCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            questionList.getQuestionList().get(i).setUserAnswer(userAnswer);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            if (question.isAnswerCorrect(userAnswer)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                currScore++;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        if (currScore \u003e MAX_QUESTIONS) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Something went wrong when calculating the score:\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                    + \"Calculated score is greater than maximum possible score.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        overwriteOldScore(currScore, profile);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        ui.displayResults(currScore, MAX_QUESTIONS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        String nextCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        if (nextCommand.equals(\"review\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            return new ReviewSession(questionList).execute(logic, ui, storageManager);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            Command newCommand \u003d Parser.parse(nextCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return newCommand.execute(logic, ui, storageManager);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * Method to execute but for GUI."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void runGui() throws CakeException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        totalNumOfQns \u003d logic.getNumOfFiles();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * Method to overwrite the old totalScore of user,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * if it\u0027s less than the current totalScore."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * @param totalScore new totalScore of user"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param profile profile object of user"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException error if question type is undefined"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void overwriteOldScore(int totalScore, Profile profile) throws CakeException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        int individualTopicIdx;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        int overallTopicIdx;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        switch (qnType) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case BASIC:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            overallTopicIdx \u003d 0;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case OOP:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            overallTopicIdx \u003d 1;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case EXTENSIONS:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            overallTopicIdx \u003d 2;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            overallTopicIdx \u003d 3;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Topic Idx out of bounds!\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        switch (qnDifficulty) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        case EASY:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            individualTopicIdx \u003d overallTopicIdx * levelsOfDifficulty;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        case MEDIUM:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            individualTopicIdx \u003d overallTopicIdx * levelsOfDifficulty + 1;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        case HARD:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            individualTopicIdx \u003d overallTopicIdx * levelsOfDifficulty + 2;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Topic Idx out of bounds!\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        if (totalScore \u003e profile.getIndividualContentMarks(individualTopicIdx)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            profile.setIndividualMarks(individualTopicIdx,totalScore);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            if (individualTopicIdx % levelsOfDifficulty \u003d\u003d 0) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                totalScore +\u003d profile.getIndividualContentMarks(individualTopicIdx + 1);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                totalScore +\u003d profile.getIndividualContentMarks(individualTopicIdx + 2);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } else if (individualTopicIdx % levelsOfDifficulty \u003d\u003d 1) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                totalScore +\u003d profile.getIndividualContentMarks(individualTopicIdx + 1);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                totalScore +\u003d profile.getIndividualContentMarks(individualTopicIdx - 1);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } else if (individualTopicIdx % levelsOfDifficulty \u003d\u003d 2) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                totalScore +\u003d profile.getIndividualContentMarks(individualTopicIdx - 2);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                totalScore +\u003d profile.getIndividualContentMarks(individualTopicIdx - 1);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            profile.setOverallMarks(overallTopicIdx, totalScore);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (!JavaCake.isCliMode()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                switch (overallTopicIdx) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                case 0:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    JavaCake.logger.log(Level.INFO, totalScore + \" YEET\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    TopBar.progValueA \u003d (double) totalScore / TotalMaxQuestions;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    TopBar.progValueB \u003d (double) totalScore / TotalMaxQuestions;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                case 2:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    TopBar.progValueC \u003d (double) totalScore / TotalMaxQuestions;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                case 3:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    TopBar.progValueD \u003d (double) totalScore / TotalMaxQuestions;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                TopBar.progValueT \u003d (double) profile.getTotalProgress() / (TotalMaxQuestions * 4);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Method to set user answer and check if answer is correct."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * If it is, then update the score."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param input the answer inputted by the user"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException error thrown if user inputs wrong type of answer."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void checkAnswer(int index, String input) throws CakeException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        if (!isNumeric(input)) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            String userWarning \u003d \"[!] Please input answers in the form of integer [!]\\n\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            throw new CakeException(userWarning);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        if (questionList.setAndCheckUserAnswer(index, input)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            currScore++;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private static boolean isNumeric(String input) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Method to get the results of the quiz."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String containing what Cake said about the quiz."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException error thrown if failed to overwrite score."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String getQuizResult() throws CakeException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"This is your score:\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        stringBuilder.append(\"    \").append(currScore).append(\" / \").append(MAX_QUESTIONS).append(\"\\n\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        if ((double)currScore / MAX_QUESTIONS \u003c\u003d PERCENTAGE_1) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(\"Aw, that\u0027s too bad! Try revising the topics and try again. Don\u0027t give up!\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            scoreGrade \u003d ScoreGrade.BAD;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } else if ((double)currScore / MAX_QUESTIONS !\u003d PERCENTAGE_2) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(\"Almost there! Clarify some of your doubts and try again.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            scoreGrade \u003d ScoreGrade.OKAY;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(\"Congrats! Full marks, you\u0027re amazing!\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            scoreGrade \u003d ScoreGrade.GOOD;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        stringBuilder.append(\"\\nType \\\"review\\\" to review your answers.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"\\nType \\\"back\\\" to go back to the table of contents.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        overwriteOldScore(currScore, profile);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        isQuizComplete \u003d true;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 52,
      "RusdiHaizim": 58,
      "claysmilesoil": 113,
      "kishore03109": 57
    }
  },
  {
    "path": "src/main/java/javacake/quiz/ReviewSession.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.commands.BackCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import static javacake.quiz.QuestionList.MAX_QUESTIONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class ReviewSession implements QuizManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private QuestionList answeredQuestions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private boolean isExitReview \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * ReviewSession constructor to load the list of questions to review."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param questionList list of questions from a quiz session. userAnswer in all questions must not be null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public ReviewSession(QuestionList questionList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        answeredQuestions \u003d questionList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Method to get question string, user answer and correct answer strings."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param index the index of the question, between 0 and MAX_QUESTIONS-1."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @return the string to be outputted."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public String getQuestion(int index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        String message \u003d \"Type the question number to navigate to that question.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                + \"Type \\\"back\\\" to return to table of contents.\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return message + answeredQuestions.getQuestion(index) + \"\\n\\n\" + answeredQuestions.getAnswers(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Parses valid user input for review session."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param index index of current question. Unused."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param input user input which can be index which is valid between 1 and MAX_QUESTIONS, or \"back\"."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @return Valid question index between 0 and MAX_QUESTIONS-1, or BackCommand identifier."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException if input is neither a valid question index or \"back\"."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String parseInput(int index, String input) throws CakeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        if (input.equals(\"back\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            // TODO tie BackCommand identifier to MainWindow"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            return \"!@#_BACK\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } else if (isValidInput(input)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            int tmp \u003d Integer.parseInt(input) - 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            return String.valueOf(tmp); // echo back input with proper indexing for the next getQuestion"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            throw new CakeException(\"That question number is out of range! Try again.\\n\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                    + getQuestion(index));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Executes the review of a quiz after a quiz is completed. For CLI mode."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param logic how far the program is currently in in the table of contents."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param ui the UI responsible for inputs and outputs of the program."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param storageManager storage container."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @return execution of back command when input is equal to \"back\"."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException This method does not throw this exception."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        while (!isExitReview) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                Question question \u003d answeredQuestions.getQuestionList().get(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                ui.displayReview(question, index + 1, answeredQuestions.getQuestionList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                String command \u003d ui.readCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                if (command.trim().equals(\"back\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    //Command.checksParam(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                    isExitReview \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    index \u003d Integer.parseInt(command) - 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                ui.showError(\"Invalid index! Range of question: 1 - \" + answeredQuestions.getQuestionList().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                index \u003d 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                ui.showError(\"That isn\u0027t a number! Try again.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return new BackCommand(\"back\").execute(logic, ui, storageManager);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private static boolean isValidInput(String input) throws CakeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        int tmp;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            tmp \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            if (tmp \u003e MAX_QUESTIONS || tmp \u003c\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            throw new CakeException(\"You can\u0027t use that command here! Type a valid question number or \\\"back\\\".\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 10,
      "claysmilesoil": 95
    }
  },
  {
    "path": "src/main/java/javacake/storage/Profile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.JavaCake;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.nio.file.attribute.PosixFilePermission;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class Profile {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static String filepath \u003d \"data\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private ArrayList\u003cInteger\u003e overalltopicsDone \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private ArrayList\u003cInteger\u003e individualTopicsDone \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    int totalNumOfMainTopics \u003d 4;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    int levelsOfDifficulty \u003d 3;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static boolean isResetFresh \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public Profile() throws CakeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this(\"data\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Constructor for profile."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param filename String of filepath"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException when unable to create profile"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public Profile(String filename) throws CakeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        filepath \u003d filename;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        filepath +\u003d \"/save/savefile.txt\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.logger.log(Level.INFO,\"Filepath: \" + filepath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                initialiseUser(file, filename);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                System.out.println(\"before reader\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                throw new CakeException(\"Failed to create new file\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            readColorConfig();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(filepath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            int count \u003d -1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (count \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    username \u003d line;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                } else if (count \u003c 4) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    overalltopicsDone.add(Integer.parseInt(line));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    individualTopicsDone.add(Integer.parseInt(line));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ++count;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(\"after reader\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Failed to close reader\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to hard reset profile."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static void resetProfile() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        isResetFresh \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(\"deleting: \" + file.getPath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to overwrite Username."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param oldname old username"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException when unable to write progress"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void overwriteName(String oldname) throws CakeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        username \u003d oldname;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        writeProgress();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to set topic score."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param contentIdx idx of content"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException when unable to write progress"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void setOverallMarks(int contentIdx, int marks) throws CakeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        overalltopicsDone.set(contentIdx, marks);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        writeProgress();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void setIndividualMarks(int contentIdx, int marks) throws CakeException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        individualTopicsDone.set(contentIdx, marks);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        writeProgress();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get topic score."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param contentIdx idx of content"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return score of the specified topic"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public int getOverallContentMarks(int contentIdx) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        return overalltopicsDone.get(contentIdx);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public int getIndividualContentMarks(int contentIdx) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        return individualTopicsDone.get(contentIdx);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get total progress."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return total progress status"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public int getTotalProgress() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        for (int i : overalltopicsDone) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            count +\u003d i;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to write config file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param isLight whether isLight mode is on"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws CakeException when unable to create file"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static void writeColorConfig(boolean isLight) throws CakeException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        File configFile \u003d new File(\"data/colorconfig/color.txt\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (!configFile.getParentFile().getParentFile().exists()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                configFile.getParentFile().getParentFile().mkdirs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                configFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                configFile.createNewFile();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else if (!configFile.getParentFile().exists()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                configFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                configFile.createNewFile();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                configFile.createNewFile();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            PrintWriter out \u003d new PrintWriter(configFile.getPath());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(configFile.getPath());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (isLight) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                out.println(\"1\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                out.println(\"0\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new CakeException(\"Failed to change color!\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void readColorConfig() throws CakeException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        File configFile \u003d new File(\"data/colorconfig/color.txt\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (configFile.exists()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                BufferedReader reader \u003d new BufferedReader(new FileReader(configFile.getPath()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                String line;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                String output \u003d \"\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                int count \u003d -1;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    output +\u003d line;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (output.equals(\"0\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    MainWindow.isChanged \u003d true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                reader.close();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                throw new CakeException(\"Config failed\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * Method that creates data to be written into savefile.txt."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void initialiseUser(File file, String filename) throws IOException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        boolean isCleanSlate \u003d true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (!file.getParentFile().getParentFile().exists()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            file.getParentFile().getParentFile().mkdir();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            JavaCake.logger.log(Level.INFO, \"ProfileGrandpa\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (!file.getParentFile().exists()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            file.getParentFile().mkdir();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            JavaCake.logger.log(Level.INFO, \"ProfilePapa\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            JavaCake.logger.log(Level.INFO, \"ProfileP\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            isCleanSlate \u003d false;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            JavaCake.logger.log(Level.INFO, filepath + \" is found!\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (!isResetFresh \u0026\u0026 isCleanSlate \u0026\u0026 filename.equals(\"data\")) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            username \u003d \"BakaTester\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            PrintWriter out \u003d new PrintWriter(filepath);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.println(username);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //for stupid fking testers"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            for (int i \u003d 0; i \u003c 3; ++i) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                out.println(\"3\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.println(\"0\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            for (int i \u003d 0; i \u003c 9; ++i) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                out.println(\"1\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            for (int i \u003d 0; i \u003c 3; ++i) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                out.println(\"0\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (isCleanSlate) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            username \u003d \"NEW_USER_!@#\";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            PrintWriter out \u003d new PrintWriter(filepath);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.println(username);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            for (int i \u003d 0; i \u003c totalNumOfMainTopics * (levelsOfDifficulty + 1); ++i) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                out.println(\"0\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void writeProgress() throws CakeException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            PrintWriter out \u003d new PrintWriter(filepath);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.println(username);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            for (int i : overalltopicsDone) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                out.println(\"\" + i);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            for (int i: individualTopicsDone) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                out.println(\"\" + i);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Cannot initialise file\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 17,
      "RusdiHaizim": 213,
      "kishore03109": 29
    }
  },
  {
    "path": "src/main/java/javacake/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.JavaCake;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.notes.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private int stringBuffer \u003d 7;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static ArrayList\u003cTask\u003e tempTaskData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static ArrayList\u003cNote\u003e noteCollection \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static TaskList currentTaskData;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static String defaultFilePath \u003d \"data\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private TaskType dataType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static boolean isResetFresh \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public enum TaskType {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        TODO, DEADLINE, TODO_DAILY, TODO_WEEKLY, TODO_MONTHLY"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Constructor for storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public Storage() throws CakeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this(defaultFilePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Initialises the \u0027data\u0027 based on previous data"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * from filepath."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param altPath The storage path of the saved data"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException Exception when file is not found"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public Storage(String altPath) throws CakeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this.currentTaskData \u003d new TaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        defaultFilePath \u003d altPath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        //Initialise new deadline file"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        filepath \u003d defaultFilePath + \"/tasks/deadline.txt\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        File tasksFile \u003d new File(filepath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //Initialise new notes directory"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        File notesFile \u003d new File(defaultFilePath + \"/notes/\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        generateFolder(notesFile);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.logger.log(Level.INFO,\"Filepath: \" + filepath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            initialiseStorage(tasksFile, altPath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //            if (!tasksFile.getParentFile().getParentFile().exists()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //                tasksFile.getParentFile().getParentFile().mkdir();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //                tasksFile.getParentFile().mkdir();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //                tasksFile.createNewFile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //                //System.out.println(\"A\" + tasksFile.getParentFile().getParentFile().getPath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //            } else if (!tasksFile.getParentFile().exists()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //                tasksFile.getParentFile().mkdir();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //                tasksFile.createNewFile();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //                //System.out.println(\"B\" + tasksFile.getParentFile().getPath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //            } else if (!tasksFile.exists()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //                tasksFile.createNewFile();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //                //System.out.println(\"C\" + tasksFile.getPath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //                JavaCake.logger.log(Level.INFO, filepath + \" is found!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            JavaCake.logger.log(Level.WARNING, \"Unable to create deadline file\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Failed to create storage.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(filepath));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                StringTokenizer stringTokenizer \u003d new StringTokenizer(line, \"|\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                int count \u003d 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                StringBuilder finalOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                String currStr;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                boolean isChecked \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                while (stringTokenizer.hasMoreTokens()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    currStr \u003d stringTokenizer.nextToken();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    if (count \u003d\u003d 1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        if (currStr.equals(\"D\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                            finalOutput \u003d new StringBuilder(\"deadline \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                            this.dataType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    } else if (count \u003d\u003d 2 \u0026\u0026 currStr.equals(\"✓\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        isChecked \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    } else if (count \u003d\u003d 3) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        finalOutput.append(currStr);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    } else if (count \u003d\u003d 4) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        if (this.dataType \u003d\u003d TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                            finalOutput.append(\" /by \").append(currStr);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                if (!isChecked) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    TaskList.runDeadline(tempTaskData, finalOutput.toString(), TaskList.TaskState.NOT_DONE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    this.currentTaskData.add(tempTaskData.get(0));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    tempTaskData.clear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    TaskList.runDeadline(tempTaskData, finalOutput.toString(), TaskList.TaskState.DONE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    this.currentTaskData.add(tempTaskData.get(0));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    tempTaskData.clear();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            JavaCake.logger.log(Level.WARNING, \"Unable to find deadline file\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Failed to create storage.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void initialiseStorage(File tasksFile, String altPath) throws IOException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        boolean isCleanSlate \u003d true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (!tasksFile.getParentFile().getParentFile().exists()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            tasksFile.getParentFile().getParentFile().mkdir();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            JavaCake.logger.log(Level.INFO, \"StoreGrandpa\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (!tasksFile.getParentFile().exists()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            tasksFile.getParentFile().mkdir();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            JavaCake.logger.log(Level.INFO, \"StorePapa\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (!tasksFile.exists()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            tasksFile.createNewFile();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            JavaCake.logger.log(Level.INFO, \"StoreP\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            isCleanSlate \u003d false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            JavaCake.logger.log(Level.INFO, filepath + \" is found!\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //populate with testing trash"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (!isResetFresh \u0026\u0026 isCleanSlate \u0026\u0026 altPath.equals(\"data\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            PrintWriter out \u003d new PrintWriter(filepath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.println(\"D|✗|testmessage to show the39characterlimit|01 01 2019 0001\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.println(\"D|✗|finish javacake|31-12-19 23:59\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.println(\"D|✗|start dieting on java|01/01/2019\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static String returnNotesDefaultFilePath() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return defaultFilePath + \"/notes/\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to hard reset profile."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static void resetStorage() throws CakeException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        isResetFresh \u003d true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            FileUtils.deleteDirectory(new File(defaultFilePath));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            tempTaskData.clear();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            currentTaskData.getData().clear();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Unable to reset Storage\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Generates starting folder when program starts."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param sampleFile File that is auto-generated when program starts."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If file does not exist."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static void generateFolder(File sampleFile) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (!sampleFile.getParentFile().exists()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sampleFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sampleFile.mkdirs();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (!sampleFile.exists()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            sampleFile.mkdirs();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Loads the currently initialised ArrayList of Tasks."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return ArrayList of Tasks that has been initialised"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return tempTaskData;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Writes current taskList onto the save file."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param tasks ArrayList of Tasks needing to be written"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     *              onto the save file"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException when no file is found"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void write(ArrayList\u003cTask\u003e tasks) throws CakeException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            PrintWriter out \u003d new PrintWriter(filepath);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            for (Task task : tempTaskData) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                out.println(doInternalWrite(task));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                out.println(doInternalWrite(task));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"No file found\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String doInternalWrite(Task task) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String st1;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        st1 \u003d task.toString().substring(1, 2);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String st4 \u003d null;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        //Appends extra task details for all task types excent \u0027Todo\u0027"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (st1.equals(\"D\") || st1.equals(\"E\") || st1.equals(\"d\") || st1.equals(\"m\") || st1.equals(\"w\")) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            st4 \u003d task.getExtra();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String st2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        st2 \u003d task.getStatusIcon();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String st3;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        st3 \u003d task.toString().substring(3);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (st4 !\u003d null \u0026\u0026 st3.contains(st4)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            st3 \u003d st3.replace(st4, \"\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            //STRING_BUFFER removes the \" (by: )\" / \" (at: )\" from st3"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            st3 \u003d st3.substring(0, st3.length() - stringBuffer);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        str.append(st1);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        str.append(\"|\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        str.append(st2);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        str.append(\"|\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        str.append(st3);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (st4 !\u003d null) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            str.append(\"|\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            str.append(st4);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return str.toString();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Method to get size of internal data."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return size of internal data"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static int getInternalDataSize() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return currentTaskData.size();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public ArrayList\u003cTask\u003e getData() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return this.currentTaskData.getData();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 164,
      "RusdiHaizim": 94
    }
  },
  {
    "path": "src/main/java/javacake/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public Storage storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public Profile profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public StorageManager() throws CakeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this.profile \u003d new Profile();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public StorageManager(String filepath) throws CakeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this.storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this.profile \u003d new Profile(filepath);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 2,
      "RusdiHaizim": 16
    }
  },
  {
    "path": "src/main/java/javacake/storage/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.RecurringTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ArrayList\u003cTask\u003e data;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public enum TaskState {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        NOT_DONE, DONE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Initialises data from current taskList being passed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param taskList the existing taskList loaded from save file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        data \u003d new ArrayList\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Creates a new arrayList for the taskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this.data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get the Task from index \u0027position\u0027."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param position Index of task in taskList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return Task at index \u0027position\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException Shows error when bounds are exceeded"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public Task get(int position) throws CakeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (position \u003e\u003d data.size() || position \u003c 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Out of bounds of data!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return data.get(position);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to remove the Task from index \u0027position\u0027."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param position Index of task in taskList"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException Shows error when bounds are exceeded"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void remove(int position) throws CakeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (position \u003e\u003d data.size() || position \u003c 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Task is not within list size!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        data.remove(position);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get the current size of data."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return Size of current data"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return data.size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get the taskList."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return ArrayList of current tasks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public ArrayList\u003cTask\u003e getData() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this.data.add(task);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Creates a new \u0027toBeDone\u0027 task, before adding it to current list,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * then returning the output by Duke."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param data ArrayList of Tasks that\u0027s currently being stored"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param input Command input by user"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param state The type of output needed:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              0 : Needs to return a string"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              1 : Returns null string with unchecked task"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              2 : Returns null string with checked task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String which highlights what Duke processed"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String runTodo(ArrayList\u003cTask\u003e data, String input, TaskList.TaskState state) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d input.substring(5);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Task tempTask \u003d new ToDo(input);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return getString(data, state, tempTask);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Creates a new \u0027Deadline\u0027 task, before adding it to current list,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * then returning the output by Duke."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param data ArrayList of Tasks that\u0027s currently being stored"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param input Command input by user"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param state The type of output needed:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              0 : Needs to return a string"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              1 : Returns null string with unchecked task"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              2 : Returns null string with checked task"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String which highlights what Duke processed"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static String runDeadline(ArrayList\u003cTask\u003e data, String input, TaskState state) throws CakeException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (input.length() \u003c\u003d 9) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"[!] No task description\\nPlease input:\\n\u0027deadline TASK /by TASK_DATE\u0027\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d input.substring(9);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String[] listStr \u003d input.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (listStr.length \u003c 3) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new CakeException(\"[!] Improper format\\nPlease input:\\n\u0027deadline TASK /by TASK_DATE\u0027\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String taskInput \u003d \"\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String argumentDate \u003d \"\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        int idxSlash \u003d -1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        for (int i \u003d 0; i \u003c listStr.length; ++i) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (listStr[i].equals(\"/by\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                idxSlash \u003d i;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (idxSlash \u003d\u003d -1 || idxSlash \u003d\u003d (listStr.length - 1)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new CakeException(\"[!] Improper format\\nPlease input:\\n\u0027deadline TASK /by TASK_DATE\u0027\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            for (int i \u003d 0; i \u003c idxSlash; ++i) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                taskInput +\u003d listStr[i];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (i !\u003d idxSlash - 1) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    taskInput +\u003d \" \";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            for (int i \u003d idxSlash + 1; i \u003c listStr.length; ++i) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                argumentDate +\u003d listStr[i];"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (i !\u003d listStr.length - 1) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    argumentDate +\u003d \" \";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        System.out.println(\"Task: \" + taskInput);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        System.out.println(\"Date: \" + argumentDate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (taskInput.length() \u003e 39) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new CakeException(\"[!] Task length too long\\nPlease input task with \u003c 40 characters!\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Task tempTask \u003d new Deadline(taskInput, argumentDate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return getString(data, state, tempTask);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to run recurring tasks."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param data ArrayList of Tasks that\u0027s currently being stored"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param input Command input by user"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param state The type of output needed:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              0 : Needs to return a string"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              1 : Returns null string with unchecked task"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              2 : Returns null string with checked task"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param freq daily, weekly or monthly"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String which highlights what Duke processed"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException Shows error when cannot parse date"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String runRecurring(ArrayList\u003cTask\u003e data, String input,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                                      TaskList.TaskState state, String freq) throws CakeException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d input.substring(5).trim();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String tt1;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String tt2;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        int token;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        token \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        tt1 \u003d input.substring(0, token - 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (freq.equals(\"daily\")) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            tt2 \u003d input.substring(token + 7);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (freq.equals(\"weekly\")) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            tt2 \u003d input.substring(token + 8);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            tt2 \u003d input.substring(token + 9);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        // parse date here"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Date startDate \u003d parseDate(tt2);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Task tempTask \u003d new RecurringTask(tt1, startDate, freq);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return getString(data, state, tempTask);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to return parsed Date."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param tt2 String to be parsed into Date"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return Date parsed from the string"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If date cannot be parsed"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static Date parseDate(String tt2) throws CakeException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            com.joestelmach.natty.Parser parser \u003d new com.joestelmach.natty.Parser();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            List\u003cDateGroup\u003e groups \u003d parser.parse(tt2);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return groups.get(0).getDates().get(0);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"[!] Date cannot be parsed: \" + tt2);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static String getString(ArrayList\u003cTask\u003e data, TaskList.TaskState state, Task tempTask) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (state \u003d\u003d TaskList.TaskState.DONE) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            tempTask.markAsDone();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        data.add(tempTask);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Got it. I\u0027ve added this task:\").append(\"\\n\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(tempTask.getFullString()).append(\"\\n\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Now you have \")"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                .append(Storage.getInternalDataSize()).append(\" tasks in the list.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 14,
      "RusdiHaizim": 202
    }
  },
  {
    "path": "src/main/java/javacake/tasks/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String dateString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Date dateNow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Initialises the description of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param description String containing description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *                    of the task inputted by user"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param inputDate The details of when task is to be done"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public Deadline(String description, String inputDate) throws CakeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        taskType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String formatDate \u003d getFormattedDateX(inputDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        boolean noTime \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (formatDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            formatDate \u003d getFormattedDate(inputDate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            noTime \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            assert formatDate !\u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(formatDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            simpleDateFormat.setLenient(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            dateNow \u003d simpleDateFormat.parse(inputDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            this.dateString \u003d inputDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (noTime) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                inputDate +\u003d \" 0000\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                formatDate \u003d getFormattedDateX(inputDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                simpleDateFormat \u003d new SimpleDateFormat(formatDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                simpleDateFormat.setLenient(false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                dateNow \u003d simpleDateFormat.parse(inputDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(\"Format:\" + formatDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (ParseException | NullPointerException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new CakeException(\"[!] Date cannot be parsed: \" + inputDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        List\u003cDateGroup\u003e groups \u003d parser.parse(by);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        dateNow \u003d groups.get(0).getDates().get(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        System.out.println(\"Date:\" + dateNow.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Gets the task type in [] format and"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * its description."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String containing type and description"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"[D]\" + description + \" (by: \" + dateString + \")\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String getFullString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description + \"\\n(by: \" + dateString + \")\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get date of task if possible."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String containing the date of Task"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return dateNow;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get details of extra details"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * concerning the task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String containing details of when task"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *         is to be done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String getExtra() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return this.dateString;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void changeDate(String newDate) throws CakeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String formatDate \u003d getFormattedDateX(newDate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        boolean noTime \u003d false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (formatDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            formatDate \u003d getFormattedDate(newDate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            noTime \u003d true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            assert formatDate !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(formatDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            simpleDateFormat.setLenient(false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            dateNow \u003d simpleDateFormat.parse(newDate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            this.dateString \u003d newDate;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (noTime) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                newDate +\u003d \" 0000\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                formatDate \u003d getFormattedDateX(newDate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                simpleDateFormat \u003d new SimpleDateFormat(formatDate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                simpleDateFormat.setLenient(false);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                dateNow \u003d simpleDateFormat.parse(newDate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(\"Format:\" + formatDate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (ParseException | NullPointerException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new CakeException(\"[!] Date cannot be parsed: \" + newDate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    //no time mode"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static final Map\u003cString, String\u003e DATE_FORMAT_REGEXPS \u003d new HashMap\u003cString, String\u003e() {{"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{8}$\", \"ddMMyyyy\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{6}$\", \"ddMMyy\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //normal mode"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}-\\\\d{1,2}-\\\\d{4}$\", \"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}-\\\\d{1,2}-\\\\d{2}$\", \"dd-MM-yy\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}/\\\\d{1,2}/\\\\d{4}$\", \"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}/\\\\d{1,2}/\\\\d{2}$\", \"dd/MM/yy\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}\\\\s\\\\d{1,2}\\\\s\\\\d{4}$\", \"dd MM yyyy\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}\\\\s\\\\d{1,2}\\\\s\\\\d{2}$\", \"dd MM yy\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}\\\\s[a-z]{3}\\\\s\\\\d{4}$\", \"dd MMM yyyy\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}\\\\s[a-z]{3}\\\\s\\\\d{2}$\", \"dd MMM yy\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}\\\\s[a-z]{4,}\\\\s\\\\d{4}$\", \"dd MMMM yyyy\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}\\\\s[a-z]{4,}\\\\s\\\\d{2}$\", \"dd MMMM yy\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String getFormattedDate(String dateString) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        for (String regexp : DATE_FORMAT_REGEXPS.keySet()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (dateString.toLowerCase().matches(regexp)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return DATE_FORMAT_REGEXPS.get(regexp);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    //with time mode"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static final Map\u003cString, String\u003e DATE_FORMAT_REGEXPS_X \u003d new HashMap\u003cString, String\u003e() {{"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //no space in date"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{8}\\\\s\\\\d{4}$\", \"ddMMyyyy HHmm\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{6}\\\\s\\\\d{4}$\", \"ddMMyy HHmm\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{8}\\\\s\\\\d{1,2}:\\\\d{2}$\", \"ddMMyyyy HH:mm\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{6}\\\\s\\\\d{1,2}:\\\\d{2}$\", \"ddMMyy HH:mm\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //no colon"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}-\\\\d{1,2}-\\\\d{4}\\\\s\\\\d{1,2}\\\\d{2}$\", \"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}-\\\\d{1,2}-\\\\d{2}\\\\s\\\\d{1,2}\\\\d{2}$\", \"dd-MM-yy HHmm\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}/\\\\d{1,2}/\\\\d{4}\\\\s\\\\d{1,2}\\\\d{2}$\", \"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}/\\\\d{1,2}/\\\\d{2}\\\\s\\\\d{1,2}\\\\d{2}$\", \"dd/MM/yy HHmm\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}\\\\s\\\\d{1,2}\\\\s\\\\d{4}\\\\s\\\\d{1,2}\\\\d{2}$\", \"dd MM yyyy HHmm\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}\\\\s\\\\d{1,2}\\\\s\\\\d{2}\\\\s\\\\d{1,2}\\\\d{2}$\", \"dd MM yy HHmm\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}\\\\s[a-z]{3}\\\\s\\\\d{4}\\\\s\\\\d{1,2}\\\\d{2}$\", \"dd MMM yyyy HHmm\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}\\\\s[a-z]{3}\\\\s\\\\d{2}\\\\s\\\\d{1,2}\\\\d{2}$\", \"dd MMM yy HHmm\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}\\\\s[a-z]{4,}\\\\s\\\\d{4}\\\\s\\\\d{1,2}\\\\d{2}$\", \"dd MMMM yyyy HHmm\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}\\\\s[a-z]{4,}\\\\s\\\\d{2}\\\\s\\\\d{1,2}\\\\d{2}$\", \"dd MMMM yy HHmm\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //colon in time"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}-\\\\d{1,2}-\\\\d{4}\\\\s\\\\d{1,2}:\\\\d{2}$\", \"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}-\\\\d{1,2}-\\\\d{2}\\\\s\\\\d{1,2}:\\\\d{2}$\", \"dd-MM-yy HH:mm\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}/\\\\d{1,2}/\\\\d{4}\\\\s\\\\d{1,2}:\\\\d{2}$\", \"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}/\\\\d{1,2}/\\\\d{2}\\\\s\\\\d{1,2}:\\\\d{2}$\", \"dd/MM/yy HH:mm\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}\\\\s\\\\d{1,2}\\\\s\\\\d{4}\\\\s\\\\d{1,2}:\\\\d{2}$\", \"dd MM yyyy HH:mm\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}\\\\s\\\\d{1,2}\\\\s\\\\d{2}\\\\s\\\\d{1,2}:\\\\d{2}$\", \"dd MM yy HH:mm\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}\\\\s[a-z]{3}\\\\s\\\\d{4}\\\\s\\\\d{1,2}:\\\\d{2}$\", \"dd MMM yyyy HH:mm\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}\\\\s[a-z]{3}\\\\s\\\\d{2}\\\\s\\\\d{1,2}:\\\\d{2}$\", \"dd MMM yy HH:mm\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}\\\\s[a-z]{4,}\\\\s\\\\d{4}\\\\s\\\\d{1,2}:\\\\d{2}$\", \"dd MMMM yyyy HH:mm\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            put(\"^\\\\d{1,2}\\\\s[a-z]{4,}\\\\s\\\\d{2}\\\\s\\\\d{1,2}:\\\\d{2}$\", \"dd MMMM yy HH:mm\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String getFormattedDateX(String dateString) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        for (String regexp : DATE_FORMAT_REGEXPS_X.keySet()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (dateString.toLowerCase().matches(regexp)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return DATE_FORMAT_REGEXPS_X.get(regexp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 1,
      "RusdiHaizim": 183,
      "kishore03109": 3
    }
  },
  {
    "path": "src/main/java/javacake/tasks/RecurringTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class RecurringTask extends ToDo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Frequency frequency;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String freq;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public enum Frequency {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        DAILY, WEEKLY, MONTHLY"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for recurring tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Task description"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDateTime Starting date of task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param frequency daily, weekly or monthly"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public RecurringTask(String description, Date startDateTime, String frequency) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.date \u003d startDateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            setFrequency(frequency);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (CakeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            //e.getMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        //update date if it is past current date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        while (date.before(currentDate)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            unmark();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            c.setTime(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (this.frequency) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            case DAILY:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                c.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            case WEEKLY:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                c.add(Calendar.WEEK_OF_YEAR, 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            case MONTHLY:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                c.add(Calendar.MONTH, 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            date \u003d c.getTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void setFrequency(String freq) throws CakeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (freq) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"daily\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            this.frequency \u003d Frequency.DAILY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            this.freq \u003d \"d\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"weekly\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            this.frequency \u003d Frequency.WEEKLY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            this.freq \u003d \"w\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"monthly\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            this.frequency \u003d Frequency.MONTHLY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            this.freq \u003d \"m\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"Please enter a frequency: daily, weekly or monthly\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"[\" + freq + \"]\" + description);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFullString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"[R][\" + freq + \"]\" + \"[\" + getStatusIcon() + \"] \" + description + \" (at: \" + date + \")\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getExtra() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.date.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to get frequency."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Frequency type"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Frequency getFrequency() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.frequency;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 4,
      "RusdiHaizim": 1,
      "-": 97
    }
  },
  {
    "path": "src/main/java/javacake/tasks/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public enum TaskType {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        TODO, DEADLINE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialises description of task and sets it to !isDone."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing description"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *                    of the task inputted by user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the status icon based on \u0027isDone\u0027."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing the status icon"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"✓\" : \"✗\"); //return tick or X symbols"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to check whether task is done."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true when task is done, false otherwise"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFullString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to mark task as done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void unmark() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract Date getDateTime();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String getExtra();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public abstract void changeDate(String newDate) throws CakeException;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 5,
      "-": 61,
      "kishore03109": 1
    }
  },
  {
    "path": "src/main/java/javacake/tasks/ToDo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialises the description of the task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing description"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     *                    of the task inputted by user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the task type in [] format and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * its description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing type and description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T]\" + description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFullString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T][\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * No extra in this task type."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Null String"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getExtra() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * No date in this task type."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Null String"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * Empty method as Event does not have date."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * @param newDate New scheduled date for task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public void changeDate(String newDate) { "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 1,
      "-": 48,
      "kishore03109": 8
    }
  },
  {
    "path": "src/main/java/javacake/ui/AvatarScreen.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.Animation;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class AvatarScreen extends VBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private GridPane gridAvatar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ImageView avatarImage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private boolean isAvatarSwitched \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public enum AvatarMode {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        HAPPY, EXTHAPPY, SAD, POUT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private Image avatarHappy1 \u003d new Image(this.getClass().getResourceAsStream("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \"/images/avatar/happyopen.png\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private Image avatarHappy2 \u003d new Image(this.getClass().getResourceAsStream("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \"/images/avatar/happyclose.png\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private Image avatarExtHappy1 \u003d new Image(this.getClass().getResourceAsStream("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \"/images/avatar/exthappyopen.png\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private Image avatarExtHappy2 \u003d new Image(this.getClass().getResourceAsStream("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \"/images/avatar/exthappyclose.png\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private Image avatarSad1 \u003d new Image(this.getClass().getResourceAsStream("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \"/images/avatar/sadopen.png\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private Image avatarSad2 \u003d new Image(this.getClass().getResourceAsStream("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \"/images/avatar/sadclose.png\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private Image avatarPout1 \u003d new Image(this.getClass().getResourceAsStream("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \"/images/avatar/poutopen.png\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private Image avatarPout2 \u003d new Image(this.getClass().getResourceAsStream("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \"/images/avatar/poutclose.png\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    List\u003cImage\u003e images \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int imageIndex \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int timeFrame \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static AvatarMode avatarMode;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void initialiseList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        images.add(avatarSad2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        images.add(avatarSad1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        images.add(avatarHappy2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        images.add(avatarHappy1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        images.add(avatarPout2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        images.add(avatarPout1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        images.add(avatarExtHappy2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        images.add(avatarExtHappy1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Constructor for setting Avatar\u0027s face."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param type Type of face Avatar makes"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public AvatarScreen(AvatarMode type) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/AvatarScreen.fxml\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        avatarImage.fitHeightProperty().bind(gridAvatar.heightProperty());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //avatarImage.setPreserveRatio(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        initialiseList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        avatarMode \u003d type;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        setStyleLoop();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to set Avatar."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param type Type of face Avatar makes"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return AvatarScreen object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static AvatarScreen setAvatar(AvatarMode type) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return new AvatarScreen(type);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void setStyleLoop() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Timeline timeline \u003d new Timeline(new KeyFrame(Duration.millis(200), ev -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (avatarMode \u003d\u003d AvatarMode.HAPPY) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (timeFrame % 16 \u003c\u003d 14) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    avatarImage.setImage(images.get(3));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    avatarImage.setImage(images.get(2));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else if (avatarMode \u003d\u003d AvatarMode.SAD) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (timeFrame % 16 \u003c\u003d 14) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    avatarImage.setImage(images.get(1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    avatarImage.setImage(images.get(0));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } else if (avatarMode \u003d\u003d AvatarMode.EXTHAPPY) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                if (timeFrame % 16 \u003c\u003d 14) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                    avatarImage.setImage(images.get(7));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                    avatarImage.setImage(images.get(6));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (timeFrame % 16 \u003c\u003d 14) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    avatarImage.setImage(images.get(5));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    avatarImage.setImage(images.get(4));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            timeFrame \u003d (timeFrame + 1) % 16;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 113,
      "claysmilesoil": 17
    }
  },
  {
    "path": "src/main/java/javacake/ui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.Animation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static boolean isSet \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static boolean isScrollingText \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String displayText \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private char[] charList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int charCount \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Timeline textTimeline;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String deadlineTextBase \u003d \"Deadlines:\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to create dialogbox with image."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param text text to display from Cake"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param img Image of Cake"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this.setPrefWidth(555);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        setStyleLoop();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //this.setMaxWidth(675);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        displayText \u003d text;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        charList \u003d displayText.toCharArray();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        dialog.setText(displayText.substring(0, 1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        setScrollText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        displayPicture.setFitHeight(69);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        displayPicture.setFitWidth(69);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to create dialogbox without image."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param text text to display from Cake"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private DialogBox(String text) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this.setPrefWidth(270);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //dialog.setPrefWidth(280);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        setStyleLoop();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        displayText \u003d text;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        charList \u003d displayText.toCharArray();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        setScrollText();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        dialog.setText(displayText.substring(0, 1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void setScrollText() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        textTimeline \u003d new Timeline(new KeyFrame(Duration.millis(10), ev -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (isScrollingText) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (charCount !\u003d charList.length) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    charCount++;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    dialog.setText(displayText.substring(0, charCount));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                dialog.setText(displayText);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        textTimeline.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        textTimeline.play();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void setStyleLoop() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (MainWindow.isLightMode) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            this.setStyle(\"-fx-background-color: #EE8EC7;\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    + \" -fx-background-radius: 20;\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    + \" -fx-border-color: white;\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    + \" -fx-border-radius: 20;\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            dialog.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            this.setStyle(\"-fx-background-color: #CCC;\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    + \" -fx-background-radius: 20;\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    + \" -fx-border-color: grey;\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    + \" -fx-border-radius: 20;\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            dialog.setStyle(\"-fx-text-fill: black\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Timeline timeline \u003d new Timeline(new KeyFrame(Duration.millis(50), ev -\u003e {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (charCount \u003d\u003d charList.length) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                textTimeline.stop();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (MainWindow.isLightMode) { //change to light mode"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                //if (isSet) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                this.setStyle(\"-fx-background-color: #EE8EC7;\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + \" -fx-background-radius: 20;\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + \" -fx-border-color: white;\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + \" -fx-border-radius: 20;\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                dialog.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                isSet \u003d false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                //}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (!MainWindow.isLightMode) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                //if (!isSet) { //change to dark mode"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                this.setStyle(\"-fx-background-color: #CCC;\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + \" -fx-background-radius: 20;\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + \" -fx-border-color: grey;\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + \" -fx-border-radius: 20;\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                dialog.setStyle(\"-fx-text-fill: black\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                isSet \u003d false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                //}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to obtain DialogBox."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param text text to display from Cake"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param img Image of Cake"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return a DialogBox containing both of them"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to obtain DialogBox."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param text text to display from Cake"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param img Image of Cake"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return a DialogBox containing both of them"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static DialogBox getJavaCakeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get TaskDialog."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param text text to display from Cake"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return a DialogBox containing text"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static DialogBox getTaskDialog(String text) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        var db \u003d new DialogBox(text);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 58,
      "RusdiHaizim": 141
    }
  },
  {
    "path": "src/main/java/javacake/ui/Handler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.JavaCake;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class Handler {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static JavaCake javaCake;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static MainWindow mw \u003d new MainWindow();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /*void handleExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        System.out.println(\"EXIT\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.logger.log(Level.INFO, \"EXITING PROGRAM!\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        // find out if exit condition"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        AvatarScreen.avatarMode \u003d AvatarScreen.AvatarMode.SAD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        mw.setIsExitToTrue();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String input \u003d mw.getInput();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        mw.setResponse(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        mw.getShowContentContainer();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        PauseTransition pause \u003d new PauseTransition(Duration.seconds(2));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        pause.setOnFinished(e -\u003e mw.hidePrimaryStage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        pause.play();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 29
    }
  },
  {
    "path": "src/main/java/javacake/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.JavaCake;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.EditNoteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.QuestionDifficulty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.QuestionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.QuestionType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.QuizSession;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.ReviewSession;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.Animation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.concurrent.atomic.AtomicBoolean;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.concurrent.atomic.AtomicLong;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.concurrent.atomic.AtomicReference;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import static javacake.quiz.QuestionList.MAX_QUESTIONS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class MainWindow extends GridPane {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private GridPane mainGrid;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private HBox topBar;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private VBox avatarScreen;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private VBox avatarDialog;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ScrollPane taskScreen;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private VBox taskContainer;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ScrollPane noteScreen;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private VBox noteContainer;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static boolean isLightMode \u003d true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static boolean isChanged \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static boolean doneDialog \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    //private Handler handler;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private JavaCake javaCake;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private Image javaCakeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/padoru.png\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private QuizSession quizSession;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private ReviewSession reviewSession;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private QuestionList tempQuestionList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private boolean isQuiz \u003d false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private int index \u003d 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private boolean isResult \u003d false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private boolean isReview \u003d false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private boolean isStarting \u003d true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private boolean isTryingReset \u003d false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean isWritingNote \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private boolean isExit \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String input \u003d \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String response \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Initialise the Main Window launched."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void initialize() throws CakeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //scrollPane.prefWidthProperty().bind(dialogContainer.widthProperty());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //scrollPane.minWidthProperty().bind(dialogContainer.widthProperty());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //scrollPane.maxWidthProperty().bind(dialogContainer.widthProperty());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        taskScreen.vvalueProperty().bind(taskContainer.heightProperty());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        noteScreen.vvalueProperty().bind(noteContainer.heightProperty());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        avatarScreen.getChildren().add(AvatarScreen.setAvatar(AvatarScreen.AvatarMode.HAPPY));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        topBar.getChildren().add(new TopBar());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        TopBar.setUpProgressBars();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (JavaCake.isFirstTimeUser) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            response \u003d Ui.showWelcomeMsgPhaseA(JavaCake.isFirstTimeUser);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            showContentContainer();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            response \u003d Ui.showWelcomeMsgPhaseA(JavaCake.isFirstTimeUser)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    + Ui.showWelcomeMsgPhaseB(JavaCake.isFirstTimeUser,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    JavaCake.userName, JavaCake.storageManager);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            showContentContainer();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        setAvatarDialogLoop();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        showListNotesBox();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        showRemindersBox();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        playGuiModeLoop();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //Resize contentDialog to fit the current scrollpane"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        playResizeLoop();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void setJavaCake(JavaCake d) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        javaCake \u003d d;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void setStage(Stage stage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        primaryStage \u003d stage;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing JavaCake\u0027s reply"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * and then appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * If quiz is in session, no other commands are executed"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //CHECKSTYLE:OFF"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (!isExit) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                input \u003d userInput.getText();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                String inputDivider[] \u003d input.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                // get input first, don\u0027t get response first..."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                userInput.clear();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                JavaCake.logger.log(Level.INFO, \"INPUT: \" + input);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                DialogBox.isScrollingText \u003d true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                AvatarScreen.avatarMode \u003d AvatarScreen.AvatarMode.HAPPY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                if (input.equals(\"exit\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    handleExit();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else if (isQuiz) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    handleOtherProcesses();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                } else if (input.equals(\"listnote\")) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    handleListNote();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                } else if (inputDivider[0].equals(\"deletenote\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    handleDeleteNote();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                } else if (inputDivider[0].equals(\"createnote\")) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    handleCreateNote();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                } else if (isStarting \u0026\u0026 JavaCake.isFirstTimeUser) { //set up new username"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    handleStartAndFirstTime();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else if (isTryingReset) { //confirmation of reset"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    handleResetConfirmation();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                } else if (isWritingNote) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    handleWriteNote();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                } else if (isResult) { // On results screen"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    handleIsResult();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                } else if (isReview) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    handleIsReview();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    handleOtherProcesses();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } catch (CakeException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                response \u003d e.getMessage();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                showContentContainer();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                JavaCake.logger.log(Level.WARNING, e.getMessage());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //CHECKSTYLE:ON"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void handleGuiMode() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (isLightMode) { //switches to Dark theme"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            isLightMode \u003d false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            mainGrid.setStyle(\"-fx-background-color: grey;\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            topBar.setStyle(\"-fx-background-color: #BBB; -fx-border-color: grey;\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            userInput.setStyle(\"-fx-background-color: #555; -fx-background-radius: 10;\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            dialogContainer.setStyle(\"-fx-background-color: grey;\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            avatarScreen.setStyle(\"-fx-background-color: black;\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            taskContainer.setStyle(\"-fx-background-color: grey;\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            noteContainer.setStyle(\"-fx-background-color: grey;\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            avatarDialog.setStyle(\"-fx-background-color: grey;\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            scrollPane.setStyle(\"-fx-background: grey;\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            taskScreen.setStyle(\"-fx-background: grey;\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            noteScreen.setStyle(\"-fx-background: grey;\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else { //switches to Light theme"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            isLightMode \u003d true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            mainGrid.setStyle(\"-fx-background-color: pink;\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            topBar.setStyle(\"-fx-background-color: #EE8EC7; -fx-border-color: white;\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            userInput.setStyle(\"-fx-background-color: #EE8EC7;\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    + \" -fx-background-radius: 10;\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            dialogContainer.setStyle(\"-fx-background-color: pink;\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            avatarScreen.setStyle(\"-fx-background-color: black;\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            taskContainer.setStyle(\"-fx-background-color: pink;\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            noteContainer.setStyle(\"-fx-background-color: pink;\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            avatarDialog.setStyle(\"-fx-background-color: pink;\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            scrollPane.setStyle(\"-fx-background: pink;\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            taskScreen.setStyle(\"-fx-background: pink;\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            noteScreen.setStyle(\"-fx-background: pink;\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void handleOtherProcesses() throws CakeException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.logger.log(Level.INFO, \"executing normal(else) mode!\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        response \u003d javaCake.getResponse(input);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (isFirstQuiz()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            JavaCake.logger.log(Level.INFO, \"First Quiz Incoming!\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (isQuiz) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(\"QUIZ MODE\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            handleQuiz();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (isDeadlineRelated()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            //handles \"deadline\" and \"reminder\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            JavaCake.logger.log(Level.INFO, \"deadline setting\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (isColorRelated()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(\"COLOR MODE\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            JavaCake.logger.log(Level.INFO, \"colormode setting\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (isFirstQuiz()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            JavaCake.logger.log(Level.INFO, \"First Quiz Incoming!\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (isFirstResetRequest()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            JavaCake.logger.log(Level.INFO, \"Reset command executed!\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (!isQuiz || isStarting) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            //default start: finding of response"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            isStarting \u003d false;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            JavaCake.logger.log(Level.INFO, \"Response: \" + response);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            //response \u003d JavaCake.getResponse(input);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (response.contains(\"!@#_EDIT_NOTE\")) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                handleEditNote();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                handleNormalCommand();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /*static void setExitToTrue() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    static void setResponse(String userResponse) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        response \u003d userResponse;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    static String getInput() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void handleIsResult() throws CakeException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        response \u003d quizSession.parseInput(0, input);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (response.equals(\"!@#_REVIEW\")) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            handleResultsScreenInput();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (response.equals(\"!@#_BACK\")) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            handleBackCommand();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void handleIsReview() throws CakeException {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        response \u003d reviewSession.parseInput(0, input);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (isNumeric(response)) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            handleGetReviewQuestion();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (response.equals(\"!@#_BACK\")) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            handleBackCommand();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String initQuizSession(String cmdMode) throws CakeException {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        QuestionType qnType;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        QuestionDifficulty qnDifficulty;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        if (cmdMode.contains(\"!@#_QUIZ_1\")) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            qnType \u003d QuestionType.BASIC;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        } else if (cmdMode.contains(\"!@#_QUIZ_2\")) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            qnType \u003d QuestionType.OOP;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        } else if (cmdMode.contains(\"!@#_QUIZ_3\")) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            qnType \u003d QuestionType.EXTENSIONS;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            qnType \u003d QuestionType.ALL;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        if (cmdMode.contains(\"EZ\")) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            qnDifficulty \u003d QuestionDifficulty.EASY;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        } else if (cmdMode.contains(\"MED\")) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            qnDifficulty \u003d QuestionDifficulty.MEDIUM;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            qnDifficulty \u003d QuestionDifficulty.HARD;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        quizSession \u003d new QuizSession(qnType, qnDifficulty, false);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return quizSession.getQuestion(0);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void handleDeleteNote() throws CakeException {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        response \u003d javaCake.getResponse(input);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        showContentContainer();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        showListNotesBox();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void handleNormalCommand() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.logger.log(Level.INFO, \"Normal commands mode!\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        System.out.println(\"starting BUT not firsttime\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        showContentContainer();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void handleEditNote() throws CakeException {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.logger.log(Level.INFO, \"Editing note initialised!\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        isWritingNote \u003d true;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        response \u003d EditNoteCommand.getHeadingMessage();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        //response.setEditable(false);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        DialogBox.isScrollingText \u003d false;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        showContentContainer();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        EditNoteCommand.clearTextFileContent();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void handleQuiz() throws CakeException {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        //Must be quizCommand: checking of answers"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.logger.log(Level.INFO, \"Quiz Mode!\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        System.out.println(\"quiz answer checking\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        DialogBox.isScrollingText \u003d false;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        handleGuiQuiz();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        showContentContainer();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void handleWriteNote() throws CakeException {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.logger.log(Level.INFO, \"isWritingNote...\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        DialogBox.isScrollingText \u003d false;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (input.equals(\"/save\")) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            isWritingNote \u003d false;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            response \u003d EditNoteCommand.successSaveMessage();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            response \u003d EditNoteCommand.writeSaveGui(input);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        showContentContainer();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void handleListNote() throws CakeException {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.logger.log(Level.INFO, \"`listnote` command\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        showListNotesBox();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void handleCreateNote() throws CakeException {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.logger.log(Level.INFO, \"`createnote` command\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        response \u003d javaCake.getResponse(input);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        showContentContainer();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        showListNotesBox();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        System.out.println(\"EXIT\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.logger.log(Level.INFO, \"EXITING PROGRAM!\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        // find out if exit condition"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        AvatarScreen.avatarMode \u003d AvatarScreen.AvatarMode.SAD;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        response \u003d javaCake.getResponse(input);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        showContentContainer();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        PauseTransition pause \u003d new PauseTransition(Duration.seconds(2));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        pause.setOnFinished(e -\u003e primaryStage.hide());"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        pause.play();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void handleStartAndFirstTime() throws CakeException {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        System.out.println(\"start and first\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.logger.log(Level.INFO, \"New user initialising...\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.userName \u003d input;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.storageManager.profile.overwriteName(JavaCake.userName);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        response \u003d Ui.showWelcomeMsgPhaseB(JavaCake.isFirstTimeUser, JavaCake.userName, JavaCake.storageManager);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        showContentContainer();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        isStarting \u003d false;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void handleResetConfirmation() throws CakeException {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.logger.log(Level.INFO, \"isTryingReset...\");"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        System.out.println(\"resetting time\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (input.equals(\"yes\")) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //resets"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Profile.resetProfile();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Storage.resetStorage();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            this.javaCake \u003d new JavaCake();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            javaCake.storageManager.profile.writeColorConfig(isLightMode);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            JavaCake.userProgress \u003d JavaCake.storageManager.profile.getTotalProgress();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            JavaCake.userName \u003d JavaCake.storageManager.profile.getUsername();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            JavaCake.isFirstTimeUser \u003d true;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            showRemindersBox();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            showListNotesBox();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            response \u003d \"Reset confirmed!\\nPlease type in new username:\\n\";"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            TopBar.resetProgress();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            isStarting \u003d true;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            JavaCake.logger.log(Level.INFO, \"Reset Confirmed!\");"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            response \u003d \"Reset cancelled.\\nType \u0027list\u0027 to get list of available commands.\";"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            JavaCake.logger.log(Level.INFO, \"Reset Rejected!\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        showContentContainer();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        isTryingReset \u003d false;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void handleGuiQuiz() throws CakeException {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        quizSession.parseInput(index, input);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        index++;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        if (index \u003c MAX_QUESTIONS) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            response \u003d quizSession.getQuestion(index);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            tempQuestionList \u003d quizSession.getQuestionList();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            isQuiz \u003d false;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            isResult \u003d true;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            DialogBox.isScrollingText \u003d true;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            response \u003d quizSession.getQuizResult();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            doneDialog \u003d true;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            if (quizSession.scoreGrade \u003d\u003d QuizSession.ScoreGrade.BAD) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                AvatarScreen.avatarMode \u003d AvatarScreen.AvatarMode.POUT;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                avatarDialog.getChildren().clear();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                avatarDialog.getChildren().add("
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                        DialogBox.getTaskDialog(\"You obviously can do better than that...\\nbaka\"));"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } else if (quizSession.scoreGrade \u003d\u003d QuizSession.ScoreGrade.OKAY) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                AvatarScreen.avatarMode \u003d AvatarScreen.AvatarMode.SAD;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                avatarDialog.getChildren().clear();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                avatarDialog.getChildren().add("
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                        DialogBox.getTaskDialog(\"soooOOOOO CLOOSEEE!\\nYou can do better next time!\"));"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } else if (quizSession.scoreGrade \u003d\u003d QuizSession.ScoreGrade.GOOD) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                AvatarScreen.avatarMode \u003d AvatarScreen.AvatarMode.EXTHAPPY;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                avatarDialog.getChildren().clear();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                avatarDialog.getChildren().add("
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                        DialogBox.getTaskDialog(\"WELL DONE!!!\\nYou rekt that cake!\"));"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private void handleResultsScreenInput() {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        isResult \u003d false;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        isReview \u003d true;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        reviewSession \u003d new ReviewSession(tempQuestionList);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        response \u003d reviewSession.getQuestion(0);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        JavaCake.logger.log(Level.INFO, \"Response: review session initialized\");"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        DialogBox.isScrollingText \u003d false;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        showContentContainer();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private void handleBackCommand() {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        isResult \u003d false;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        isReview \u003d false;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        index \u003d 0;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        response \u003d javaCake.getResponse(\"back\");"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        showContentContainer();"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private void handleGetReviewQuestion() {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        DialogBox.isScrollingText \u003d false;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        response \u003d reviewSession.getQuestion(Integer.parseInt(response));"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        showContentContainer();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void showContentContainer() {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        dialogContainer.getChildren().clear();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                DialogBox.getJavaCakeDialog(response, javaCakeImage));"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void showTaskContainer() {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        taskContainer.getChildren().clear();"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        taskContainer.getChildren().add("
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                DialogBox.getTaskDialog(response));"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void showNoteContainer() {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        noteContainer.getChildren().clear();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        noteContainer.getChildren().add("
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                DialogBox.getTaskDialog(response));"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void playGuiModeLoop() {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Timeline timeline \u003d new Timeline(new KeyFrame(Duration.millis(50), ev -\u003e {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (isLightMode \u0026\u0026 isChanged) { //change to dark mode"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                handleGuiMode();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                isChanged \u003d false;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (!isLightMode \u0026\u0026 isChanged) { //change to light mode"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                handleGuiMode();"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                isChanged \u003d false;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void playResizeLoop() {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        AtomicReference\u003cDouble\u003e prevDialogWidth \u003d new AtomicReference\u003c\u003e(dialogContainer.getWidth());"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        AtomicReference\u003cDouble\u003e prevTaskWidth \u003d new AtomicReference\u003c\u003e(taskContainer.getWidth());"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        AtomicReference\u003cDouble\u003e prevNoteWidth \u003d new AtomicReference\u003c\u003e(noteContainer.getWidth());"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        AtomicReference\u003cDouble\u003e prevAvatarWidth \u003d new AtomicReference\u003c\u003e(noteContainer.getWidth());"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Timeline timeline \u003d new Timeline(new KeyFrame(Duration.millis(100), ev -\u003e {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (Math.abs(scrollPane.getWidth() - prevDialogWidth.get()) \u003e 5) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                dialogContainer.setPrefWidth(scrollPane.getWidth() - 15);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                prevDialogWidth.set(dialogContainer.getWidth());"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (Math.abs(taskScreen.getWidth() - prevTaskWidth.get()) \u003e 5) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                taskContainer.setPrefWidth(taskScreen.getWidth() - 20);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                prevTaskWidth.set(taskContainer.getWidth());"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (Math.abs(noteScreen.getWidth() - prevNoteWidth.get()) \u003e 5) {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                noteContainer.setPrefWidth(noteScreen.getWidth() - 20);"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                prevNoteWidth.set(noteContainer.getWidth());"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (Math.abs(noteScreen.getWidth() - prevAvatarWidth.get()) \u003e 5) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                avatarDialog.setPrefWidth(noteScreen.getWidth() - 15);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                prevAvatarWidth.set(noteContainer.getWidth());"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private boolean isColorRelated() throws CakeException {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (input.equals(\"change\")) {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            isChanged \u003d true;"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            JavaCake.logger.log(Level.INFO, \"is changing color!\");"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            javaCake.storageManager.profile.writeColorConfig(!isLightMode);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean isDeadlineRelated() throws CakeException {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (input.length() \u003e\u003d 8 \u0026\u0026 input.substring(0, 8).equals(\"deadline\")) {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            //response \u003d JavaCake.getResponse(input);"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(response);"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (!response.contains(\"[!]\")) {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                deadlineExtracted();"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                JavaCake.logger.log(Level.INFO, \"Adding deadlines setting\");"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                response +\u003d \"\\nType \u0027reminder\u0027 to view deadlines\";"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                showTaskContainer();"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                JavaCake.logger.log(Level.WARNING, \"Deadline is not properly parsed!\");"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.length() \u003e\u003d 4 \u0026\u0026 input.substring(0, 4).equals(\"done\")) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(response);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (!response.contains(\"[!]\")) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                deadlineExtracted();"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                JavaCake.logger.log(Level.INFO, \"Removing deadlines setting\");"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                response +\u003d \"\\nType \u0027reminder\u0027 to view deadlines\";"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                showTaskContainer();"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                JavaCake.logger.log(Level.WARNING, \"Deadline is not properly parsed!\");"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.length() \u003e\u003d 6 \u0026\u0026 input.substring(0, 6).equals(\"delete\")) {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(response);"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (!response.contains(\"[!]\")) {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                deadlineExtracted();"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                JavaCake.logger.log(Level.INFO, \"Removing deadlines setting\");"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                response +\u003d \"\\nType \u0027reminder\u0027 to view deadlines\";"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                showTaskContainer();"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                JavaCake.logger.log(Level.WARNING, \"Deadline is not properly parsed!\");"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.length() \u003e\u003d 6 \u0026\u0026 input.substring(0, 6).equals(\"snooze\")) {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(response);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (!response.contains(\"[!]\")) {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                deadlineExtracted();"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                JavaCake.logger.log(Level.INFO, \"Changing deadlines setting\");"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                response +\u003d \"\\nType \u0027reminder\u0027 to view deadlines\";"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                showTaskContainer();"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                JavaCake.logger.log(Level.WARNING, \"Deadline is not properly parsed!\");"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"reminder\")) {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //response \u003d \"Reminders are shown over there! \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e\u003e\u003e\\n\";"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //showContentContainer();"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            showRemindersBox();"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            JavaCake.logger.log(Level.INFO, \"Reminder setting\");"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void deadlineExtracted() {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        response \u003d javaCake.getResponse(\"reminder\");"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        System.out.println(response);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //CHECKSTYLE:OFF"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        response \u003d response.replaceAll(\"✓\", \"\\u2713\");"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        response \u003d response.replaceAll(\"✗\", \"\\u2717\");"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //CHECKSTYLE:ON"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        showTaskContainer();"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean isFirstQuiz() throws CakeException {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (response.contains(\"!@#_QUIZ\")) {"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //checks for first execution of quizCommand"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            isQuiz \u003d true;"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            JavaCake.logger.log(Level.INFO, \"isFirstQuiz(): \" + response);"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            response \u003d initQuizSession(response);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            DialogBox.isScrollingText \u003d false;"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            showContentContainer();"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private boolean isFirstResetRequest() {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (response.contains(\"Confirm reset\")) {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //checks if resetCommand was executed"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            JavaCake.logger.log(Level.INFO, \"isFirstResetRequest(): Awaiting confirmation of reset\");"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            isTryingReset \u003d true;"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            showContentContainer();"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void showListNotesBox() throws CakeException {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        response \u003d Ui.showNoteList(JavaCake.storageManager);"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        showNoteContainer();"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void showRemindersBox() throws CakeException {"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        response \u003d Ui.showDeadlineReminder(JavaCake.storageManager);"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //CHECKSTYLE:OFF"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        response \u003d response.replaceAll(\"✓\", \"\\u2713\");"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        response \u003d response.replaceAll(\"✗\", \"\\u2717\");"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //CHECKSTYLE:ON"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        showTaskContainer();"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void setAvatarDialogLoop() {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        ArrayList\u003cString\u003e listToSay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        setList(listToSay);"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        avatarDialog.getChildren().add("
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                DialogBox.getTaskDialog(listToSay.get(0)));"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        AtomicLong counterTicks \u003d new AtomicLong();"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        AtomicBoolean isSet \u003d new AtomicBoolean();"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Timeline timeline \u003d new Timeline(new KeyFrame(Duration.millis(200), ev -\u003e {"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            if (counterTicks.get() \u003e 30 \u0026\u0026 !isExit \u0026\u0026 !isResult) {"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                avatarDialog.getChildren().clear();"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                avatarDialog.getChildren().add("
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        DialogBox.getTaskDialog(listToSay.get(rand.nextInt(listToSay.size()))));"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                counterTicks.set(0);"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else if (isExit \u0026\u0026 !isSet.get()) {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                avatarDialog.getChildren().clear();"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                avatarDialog.getChildren().add("
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        DialogBox.getTaskDialog(\"NoooOOOOO!!\\nDon\u0027t leeeeave meee\\n:( :( :(\"));"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                isSet.set(true);"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            counterTicks.getAndIncrement();"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void setList(ArrayList\u003cString\u003e list) {"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        list.add(\"Hi, Welcome to JavaCake!\\nWant sum cake?\\nAll you have to do is get 100%!\");"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        list.add(\"Akshay-sensei is my favourite prof!!!\");"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        list.add(\"Learning Java\\nis a piece of cake with JavaCake!! uWu\");"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        list.add(\"Learning Cake\\nis a piece of java with CakeJava!! wUw\");"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        list.add(\"I rather get Akshay than an A!\\n\");"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        list.add(\"I LOVE BIG CAKES AND I CANNOT LIE!\");"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        list.add(\"CAAAAAAAAAaaaaakkkke!\");"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //list.add(\"the cake...\\n     is a LIE!\");"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //list.add(\"Your momma so fat...\\nshe segfaulted on JavaCake\");"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //list.add(\"Want to know a secret?\\nYour waifu does not love you!\");"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //list.add(\"Hi, Welcome to JavaCake!\\nWant sum cake?\\nAll you have to do is get 100%!\");"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //list.add(\"late as heck but...\\nhappy halloween!!!\");"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //list.add(\"like my hat?\\nit ate my soul\");"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //list.add(\"Hi, Welcome to JavaCake!\\nWant sum cake?\\nAll you have to do is get 100%!\");"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private static boolean isNumeric(String input) {"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 216,
      "RusdiHaizim": 379,
      "claysmilesoil": 77,
      "kishore03109": 11
    }
  },
  {
    "path": "src/main/java/javacake/ui/TopBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.JavaCake;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.QuizSession;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.Animation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.control.ProgressIndicator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class TopBar extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ImageView cakeLeft;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Label quizA;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Label quizB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Label quizC;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Label quizD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ImageView cakeRight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ProgressBar progressA \u003d new ProgressBar();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static double progValueA \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ProgressBar progressB \u003d new ProgressBar();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static double progValueB \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ProgressBar progressC \u003d new ProgressBar();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static double progValueC \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ProgressBar progressD \u003d new ProgressBar();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static double progValueD \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ProgressIndicator progressTotal \u003d new ProgressIndicator();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static double progValueT \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Image cakeTiltLeft \u003d new Image(this.getClass().getResourceAsStream(\"/images/cake_left.png\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Image cakeTiltRight \u003d new Image(this.getClass().getResourceAsStream(\"/images/cake_right.png\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Image cakeOriginal \u003d new Image(this.getClass().getResourceAsStream(\"/images/cake.png\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int cakeCounter \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private boolean isSet \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Constructor for title bar."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public TopBar() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/TopBar.fxml\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        setAnimation();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        setStyleLoop();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to set TopBar."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return TopBar object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static TopBar setTitle() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return new TopBar();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void setStyleLoop() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Timeline timeline \u003d new Timeline(new KeyFrame(Duration.millis(50), ev -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (MainWindow.isLightMode) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (!isSet) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    progressTotal.getStylesheets().remove("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                            getClass().getResource(\"/css/progDark.css\").toExternalForm());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    title.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    quizA.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    quizB.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    quizC.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    quizD.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    isSet \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (isSet) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    progressTotal.getStylesheets().add("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                            getClass().getResource(\"/css/progDark.css\").toExternalForm());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    title.setStyle(\"-fx-text-fill: black\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    quizA.setStyle(\"-fx-text-fill: black\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    quizB.setStyle(\"-fx-text-fill: black\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    quizC.setStyle(\"-fx-text-fill: black\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    quizD.setStyle(\"-fx-text-fill: black\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    isSet \u003d false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void setAnimation() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Timeline timeline \u003d new Timeline(new KeyFrame(Duration.seconds(0.3), ev -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (cakeCounter % 4 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                cakeLeft.setImage(cakeTiltLeft);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                cakeRight.setImage(cakeTiltRight);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else if (cakeCounter % 4 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                cakeLeft.setImage(cakeOriginal);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                cakeRight.setImage(cakeOriginal);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else if (cakeCounter % 4 \u003d\u003d 2) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                cakeLeft.setImage(cakeTiltRight);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                cakeRight.setImage(cakeTiltLeft);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                cakeLeft.setImage(cakeOriginal);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                cakeRight.setImage(cakeOriginal);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            progressA.setProgress(progValueA);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            progressB.setProgress(progValueB);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            progressC.setProgress(progValueC);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            progressD.setProgress(progValueD);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            progressTotal.setProgress(progValueT);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            cakeCounter++;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to reset progress."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static void resetProgress() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        progValueA \u003d 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        progValueB \u003d 0;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        progValueC \u003d 0;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        progValueD \u003d 0;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        progValueT \u003d 0;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to set up progressBars."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static void setUpProgressBars() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        TopBar.progValueA \u003d (double) JavaCake.storageManager.profile.getOverallContentMarks(0)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                / QuizSession.TotalMaxQuestions;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        TopBar.progValueB \u003d (double) JavaCake.storageManager.profile.getOverallContentMarks(1)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                / QuizSession.TotalMaxQuestions;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        TopBar.progValueC \u003d (double) JavaCake.storageManager.profile.getOverallContentMarks(2)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                / QuizSession.TotalMaxQuestions;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        TopBar.progValueD \u003d (double) JavaCake.storageManager.profile.getOverallContentMarks(3)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                / QuizSession.TotalMaxQuestions;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        TopBar.progValueT \u003d (double) JavaCake.storageManager.profile.getTotalProgress()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                / (QuizSession.TotalMaxQuestions * 4);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 6,
      "RusdiHaizim": 155,
      "claysmilesoil": 6
    }
  },
  {
    "path": "src/main/java/javacake/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.ListNoteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.ScoreCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.QuizSession;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.ReminderCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.Question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static String cake \u003d \"cake\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static String border \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Constructor for Ui."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to obtain Welcome Message Part 1."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param isFirstTime boolean to check if first time"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String containing first part of welcome message for GUI"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String showWelcomeMsgPhaseA(boolean isFirstTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder strA \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        strA.append(\"\\nWelcome to JavaCake! \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        strA.append(\"where learning Java can be a Piece of Cake!\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (isFirstTime) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(\"\\nI see this is your first time here! \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(\"What name would you like to be called?\\n\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return strA.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to obtain Welcome Message Part 2."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param isFirstTime boolean to check if first time"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param userName username"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager progress of user"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String containing first part of welcome message for GUI"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String showWelcomeMsgPhaseB(boolean isFirstTime, String userName, StorageManager storageManager)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throws CakeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder strA \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (isFirstTime) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(\"\\nWelcome to JavaCake, \").append(userName).append(\"! \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(\"Now let\u0027s help you get started with Java! :3\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(helpMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(\"Hello \").append(userName).append(\"!\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(new ScoreCommand(\"score\").execute(Logic.getInstance(), new Ui(), storageManager));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(\"\\nWhat do you want to do today?\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(helpMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return strA.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static String showDeadlineReminder(StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return new ReminderCommand(\"remind\").execute(Logic.getInstance(), new Ui(), storageManager);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static String showNoteList(StorageManager storageManager) throws CakeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return new ListNoteCommand(\"listnote\").execute(Logic.getInstance(), new Ui(), storageManager);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Prints a new border to separate messages by Ui."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        System.out.println(border);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Prints help message to assist user."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String helpMessage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return \"\\nType \u0027list\u0027 to view main topics.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                + \"Type \u0027overview\u0027 to view all content.\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                + \"Type \u0027help\u0027 to view all commands available.\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"Type \u0027change\u0027 to change to a different color scheme.\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                + \"Type \u0027exit\u0027 to rage quit.\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to read command inputted by user."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String containing input by user"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Shows error when trying to load the save file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        System.out.println(\"No saved files detected.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Displays the error message on the Ui."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param e String containing the error message"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void showError(String e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        System.out.println(e);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Displays the message on the Ui."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param m String containing the message"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void showMessage(String m) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        System.out.print(m);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to display text from file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param reader BufferedReader to read in text from file"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException Error thrown when unable to close reader"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void displayTextFile(BufferedReader reader) throws CakeException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String lineBuffer;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            while ((lineBuffer \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                System.out.println(lineBuffer);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"File not found!\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get text from file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param reader BufferedReader to read in text from file"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException Error thrown when unable to close reader"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static String getTextFile(BufferedReader reader) throws CakeException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String lineBuffer;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            while ((lineBuffer \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                output +\u003d lineBuffer;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(\"File not found!\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Displays the quiz question."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param question the question to be shown to the user."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param index the current question the user is on."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param maxQuestions the maximum number of questions in the quiz session."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public void displayQuiz(String question, int index, int maxQuestions) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(index + \"/\" + maxQuestions);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(question);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Displays the results of a quiz."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param score the user\u0027s score in that quiz."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param maxScore the maximum score possible in that quiz."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public void displayResults(int score, int maxScore) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"This is your score:\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"    \" + score + \" / \" + maxScore);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        if ((double)score / maxScore \u003c\u003d 0.5) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            System.out.println(\"Aw, that\u0027s too bad! Try revising the topics and try again. Don\u0027t give up!\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } else if ((double)score / maxScore !\u003d 1.0) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            System.out.println(\"Almost there! Clarify some of your doubts and try again.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            System.out.println(\"Congrats! Full marks, you\u0027re amazing!\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"Type \\\"review\\\" to review your answers.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"Type \\\"back\\\" to go back to the table of contents.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Displays a question, along with the user\u0027s answer and the correct answer."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param question the question to display. User\u0027s answer must not be null."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param index the current question the user is on."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param maxQuestions the maximum number of questions in the quiz session."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public void displayReview(Question question, int index, int maxQuestions) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"Enter a number to go to that question. Type \\\"back\\\" to go back to table of contents.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        displayQuiz(question.getQuestion(), index, maxQuestions);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"Your answer: \" + question.getUserAnswer());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"Correct answer: \" + question.getAnswer());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 36,
      "RusdiHaizim": 125,
      "claysmilesoil": 47
    }
  },
  {
    "path": "src/main/java/javacake/utilities/IFileUtilities.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import org.apache.commons.io.FilenameUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public interface IFileUtilities {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Reads the file specified by the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of the content in the file specified by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If file does not exist."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    static String readFile(String currentFilePath) throws CakeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new java.io.FileReader(new File(currentFilePath)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                sb.append(line).append(\"\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Converts input file name by user with the actual case sensitive file name in system."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param defaultDirectoryPath Default file path to the directory of the notes file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param fileName Name of the file to be edited or deleted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of original file name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws CakeException If file does not exist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    static String returnOriginalFileName(String defaultDirectoryPath, String fileName) throws CakeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            File file \u003d new File(defaultDirectoryPath + fileName + \".txt\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return FilenameUtils.removeExtension(file.getCanonicalFile().getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new CakeException(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 47
    }
  },
  {
    "path": "src/main/resources/css/progDark.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-indicator {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-progress-color: black;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-indicator .percentage {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 7
    }
  },
  {
    "path": "src/main/resources/css/progLight.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-indicator {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-progress-color: black;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-indicator .percentage {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-fill: #ffffffff;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 7
    }
  },
  {
    "path": "src/main/resources/css/progressIndicator.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-indicator {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-progress-color: black;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-indicator .percentage {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-fill: #ffffff ;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 7
    }
  },
  {
    "path": "src/main/resources/css/progressbarA.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-length: 60;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-escape: true;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-flip: true;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-animation-time: 2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar \u003e .bar {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: 3 3 4 3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-padding: 0.75em;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar:indeterminate \u003e .bar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: linear-gradient(to left, transparent, -fx-accent);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar \u003e .track {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: 0, 0 0 1 0, 1 1 2 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 4, 3, 2; /* 10, 9, 8 */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 21
    }
  },
  {
    "path": "src/main/resources/css/progressbarB.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-length: 60;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-escape: true;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-flip: true;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-animation-time: 2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar \u003e .bar {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: 3 3 4 3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-padding: 0.75em;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar:indeterminate \u003e .bar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: linear-gradient(to left, transparent, -fx-accent);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar \u003e .track {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: 0, 0 0 1 0, 1 1 2 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 4, 3, 2; /* 10, 9, 8 */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 21
    }
  },
  {
    "path": "src/main/resources/css/progressbarC.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-length: 60;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-escape: true;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-flip: true;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-animation-time: 2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar \u003e .bar {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: 3 3 4 3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-padding: 0.75em;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar:indeterminate \u003e .bar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: linear-gradient(to left, transparent, -fx-accent);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar \u003e .track {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: 0, 0 0 1 0, 1 1 2 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 4, 3, 2; /* 10, 9, 8 */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 21
    }
  },
  {
    "path": "src/main/resources/css/progressbarD.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-length: 60;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-escape: true;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-flip: true;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-animation-time: 2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar \u003e .bar {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: purple;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: 3 3 4 3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-padding: 0.75em;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar:indeterminate \u003e .bar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: linear-gradient(to left, transparent, -fx-accent);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar \u003e .track {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: 0, 0 0 1 0, 1 1 2 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 4, 3, 2; /* 10, 9, 8 */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 21
    }
  },
  {
    "path": "src/main/resources/css/textfield.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".text-input {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-highlight-fill: derive(-fx-control-inner-background,-20%);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-highlight-text-fill: -fx-text-inner-color;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: 0, 1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 3, 2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-cursor: text;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-padding: 0.333333em 0.583em 0.333333em 0.583em; /* 4 7 4 7 */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".text-input:focused {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-highlight-fill: -fx-accent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-highlight-text-fill: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            -fx-focus-color,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            -fx-control-inner-background,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            -fx-faint-focus-color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: -0.2, 1, -1.4, 3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 3, 2, 4, 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-prompt-text-fill: transparent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 21
    }
  },
  {
    "path": "src/main/resources/view/AvatarScreen.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003cfx:root fillWidth\u003d\"false\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" type\u003d\"VBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cGridPane fx:id\u003d\"gridAvatar\" prefHeight\u003d\"174.0\" prefWidth\u003d\"277.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" valignment\u003d\"BOTTOM\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cImageView fx:id\u003d\"avatarImage\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" GridPane.columnSpan\u003d\"2147483647\" GridPane.halignment\u003d\"CENTER\" GridPane.rowSpan\u003d\"2147483647\" GridPane.valignment\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 23
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003cfx:root fx:id\u003d\"dialogHolder\" alignment\u003d\"TOP_RIGHT\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-background-color: #EE8EC7; -fx-background-radius: 20; -fx-border-color: white; -fx-border-radius: 20;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 12,
      "RusdiHaizim": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003cGridPane fx:id\u003d\"mainGrid\" prefHeight\u003d\"795.0\" prefWidth\u003d\"1035.0\" style\u003d\"-fx-background-color: pink;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"javacake.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"NEVER\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"NEVER\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "  \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"80.0\" prefHeight\u003d\"80.0\" vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"35.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" percentHeight\u003d\"12.0\" prefHeight\u003d\"20.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "  \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cHBox fx:id\u003d\"topBar\" fillHeight\u003d\"false\" prefHeight\u003d\"110.0\" prefWidth\u003d\"1030.0\" style\u003d\"-fx-background-color: #EE8EC7;\" GridPane.columnSpan\u003d\"2147483647\" GridPane.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"650.0\" prefWidth\u003d\"700.0\" style\u003d\"-fx-background: pink;\" vvalue\u003d\"1.0\" GridPane.columnSpan\u003d\"2\" GridPane.rowIndex\u003d\"1\" GridPane.rowSpan\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" style\u003d\"-fx-background-color: pink;\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"3.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cInsets bottom\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"40.0\" prefWidth\u003d\"700.0\" style\u003d\"-fx-background-color: #EE8EC7; -fx-background-radius: 10;\" stylesheets\u003d\"@../css/textfield.css\" GridPane.columnSpan\u003d\"2\" GridPane.rowIndex\u003d\"6\" GridPane.valignment\u003d\"BOTTOM\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cInsets bottom\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003c/TextField\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"taskScreen\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"300.0\" style\u003d\"-fx-background: pink;\" GridPane.columnIndex\u003d\"2\" GridPane.columnSpan\u003d\"2\" GridPane.rowIndex\u003d\"1\" GridPane.rowSpan\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cVBox fx:id\u003d\"taskContainer\" style\u003d\"-fx-background-color: pink;\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"noteScreen\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"300.0\" style\u003d\"-fx-background: pink;\" GridPane.columnIndex\u003d\"2\" GridPane.columnSpan\u003d\"2\" GridPane.rowIndex\u003d\"3\" GridPane.rowSpan\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cVBox fx:id\u003d\"noteContainer\" style\u003d\"-fx-background-color: pink;\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cVBox fx:id\u003d\"avatarScreen\" fillWidth\u003d\"false\" style\u003d\"-fx-background-color: black;\" GridPane.columnIndex\u003d\"2\" GridPane.columnSpan\u003d\"2\" GridPane.rowIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cVBox fx:id\u003d\"avatarDialog\" prefWidth\u003d\"290.0\" style\u003d\"-fx-background-color: pink;\" GridPane.columnIndex\u003d\"2\" GridPane.columnSpan\u003d\"2\" GridPane.rowIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 11,
      "RusdiHaizim": 68
    }
  },
  {
    "path": "src/main/resources/view/TopBar.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.control.ProgressIndicator?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003cfx:root prefWidth\u003d\"2000.0\" type\u003d\"HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cGridPane prefHeight\u003d\"80.0\" prefWidth\u003d\"2000.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"142.93335571289063\" minWidth\u003d\"0.0\" prefWidth\u003d\"71.79996490478516\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"390.4\" minWidth\u003d\"10.0\" prefWidth\u003d\"361.6000350952148\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"356.7999267578125\" minWidth\u003d\"10.0\" prefWidth\u003d\"346.13337402343757\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"171.46672363281243\" minWidth\u003d\"10.0\" prefWidth\u003d\"86.86662597656255\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cImageView fx:id\u003d\"cakeLeft\" fitHeight\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" GridPane.halignment\u003d\"CENTER\" GridPane.rowSpan\u003d\"2147483647\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003cimage\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cImage url\u003d\"@../images/cake.png\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003c/image\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cLabel fx:id\u003d\"title\" text\u003d\"JavaCake\" textFill\u003d\"WHITE\" GridPane.columnIndex\u003d\"1\" GridPane.columnSpan\u003d\"2147483647\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"38.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cInsets left\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cAnchorPane prefWidth\u003d\"519.0\" GridPane.columnIndex\u003d\"3\" GridPane.halignment\u003d\"RIGHT\" GridPane.rowSpan\u003d\"2147483647\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cProgressBar fx:id\u003d\"progressA\" layoutX\u003d\"40.0\" layoutY\u003d\"37.0\" prefHeight\u003d\"20.0\" prefWidth\u003d\"60.0\" progress\u003d\"0.0\" stylesheets\u003d\"@../css/progressbarA.css\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cProgressBar fx:id\u003d\"progressB\" layoutX\u003d\"120.0\" layoutY\u003d\"37.0\" prefHeight\u003d\"20.0\" prefWidth\u003d\"60.0\" progress\u003d\"0.0\" stylesheets\u003d\"@../css/progressbarB.css\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cProgressBar fx:id\u003d\"progressC\" layoutX\u003d\"200.0\" layoutY\u003d\"37.0\" prefHeight\u003d\"20.0\" prefWidth\u003d\"60.0\" progress\u003d\"0.0\" stylesheets\u003d\"@../css/progressbarC.css\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cProgressBar fx:id\u003d\"progressD\" layoutX\u003d\"280.0\" layoutY\u003d\"37.0\" prefHeight\u003d\"20.0\" prefWidth\u003d\"60.0\" progress\u003d\"0.0\" stylesheets\u003d\"@../css/progressbarD.css\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cLabel fx:id\u003d\"quizA\" layoutX\u003d\"52.0\" layoutY\u003d\"20.0\" text\u003d\"Quiz 1\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cLabel fx:id\u003d\"quizB\" layoutX\u003d\"133.0\" layoutY\u003d\"20.0\" text\u003d\"Quiz 2\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cLabel fx:id\u003d\"quizC\" layoutX\u003d\"213.0\" layoutY\u003d\"20.0\" text\u003d\"Quiz 3\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cProgressIndicator fx:id\u003d\"progressTotal\" layoutX\u003d\"358.0\" minHeight\u003d\"75.0\" minWidth\u003d\"75.0\" prefHeight\u003d\"70.0\" prefWidth\u003d\"70.0\" progress\u003d\"0.0\" stylesheets\u003d\"@../css/progressIndicator.css\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                     \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                     \u003c/padding\u003e\u003c/ProgressIndicator\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cLabel fx:id\u003d\"quizD\" layoutX\u003d\"286.0\" layoutY\u003d\"20.0\" text\u003d\"Quiz ALL\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cImageView fx:id\u003d\"cakeRight\" fitHeight\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" GridPane.columnIndex\u003d\"4\" GridPane.halignment\u003d\"CENTER\" GridPane.rowSpan\u003d\"2147483647\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003cimage\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cImage url\u003d\"@../images/cake.png\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003c/image\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 76
    }
  },
  {
    "path": "src/main/resources/view/style.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".lightHBox {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: #EE8EC7;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".lightTextField {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: #EE8EC7;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".lightScrollPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".lightVBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".lightLabel {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".buttonL {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: #FFF;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".text-field:focused {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: -fx-focus-color, -fx-background ;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 29
    }
  },
  {
    "path": "src/test/java/CreateNoteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.JavaCake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class CreateNoteTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static JavaCake javaCake;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    static void init() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            FileUtils.deleteDirectory(new File(\"testPath\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        javaCake \u003d new JavaCake(\"testPath\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Deletes test files."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    static void delete() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            FileUtils.deleteDirectory(new File(\"testPath\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    void illegalCharacterTestInCreateNoteCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String actualOutput;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String expectedOutput;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        actualOutput \u003d javaCake.getResponse(\"createnote ../hi\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        expectedOutput \u003d \"Invalid file name: Illegal character in file name detected!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        actualOutput \u003d javaCake.getResponse(\"createnote hi,hello\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        expectedOutput \u003d \"Invalid file name: Illegal character in file name detected!\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        actualOutput \u003d javaCake.getResponse(\"createnote \u003e__\u003c\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        expectedOutput \u003d \"Invalid file name: Illegal character in file name detected!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        actualOutput \u003d javaCake.getResponse(\"createnote txt.txt\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        expectedOutput \u003d \"Invalid file name: Illegal character in file name detected!\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        actualOutput \u003d javaCake.getResponse(\"createnote txt/\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        expectedOutput \u003d \"Invalid file name: Illegal character in file name detected!\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    void validTestCasesInCreateNoteCommand() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String actualOutput;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String expectedOutput;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        actualOutput \u003d javaCake.getResponse(\"createnote\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        expectedOutput \u003d \"File [Notes] has been created successfully!\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        actualOutput \u003d javaCake.getResponse(\"createnote \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        expectedOutput \u003d \"File [Notes1] has been created successfully!\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        actualOutput \u003d javaCake.getResponse(\"createnote @notes\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        expectedOutput \u003d \"File [@notes] has been created successfully!\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        actualOutput \u003d javaCake.getResponse(\"createnote ____\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        expectedOutput \u003d \"File [____] has been created successfully!\\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        actualOutput \u003d javaCake.getResponse(\"createnote editnote\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        expectedOutput \u003d \"File [editnote] has been created successfully!\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        actualOutput \u003d javaCake.getResponse(\"createnote 2113rocks!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        expectedOutput \u003d \"File [2113rocks!] has been created successfully!\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    void fileAlreadyExistNotificationInCreateNoteCommand() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String actualOutput;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String expectedOutput;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        actualOutput \u003d javaCake.getResponse(\"createnote Notes\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        expectedOutput \u003d \"File already exists, please type \u0027editnote Notes\u0027 to edit the file instead\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 104
    }
  },
  {
    "path": "src/test/java/DeadlineDeleteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.JavaCake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class DeadlineDeleteTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    JavaCake javaCake;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Initialise test files."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            FileUtils.deleteDirectory(new File(\"testPath\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        javaCake \u003d new JavaCake(\"testPath\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Deletes test files."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void free() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            FileUtils.deleteDirectory(new File(\"testPath\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void posTest1() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 42
    }
  },
  {
    "path": "src/test/java/DeadlineNegativeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.JavaCake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class DeadlineNegativeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    JavaCake javaCake;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Initialise test files."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            FileUtils.deleteDirectory(new File(\"testPath\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        javaCake \u003d new JavaCake(\"testPath\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Deletes test files."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            FileUtils.deleteDirectory(new File(\"testPath\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void test1() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String actualOut \u003d javaCake.getResponse(\"deadline a /by 32/01/2019\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String expOut \u003d \"[!] Date cannot be parsed: 32/01/2019\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        assertEquals(expOut, actualOut);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void test2() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String actualOut \u003d javaCake.getResponse(\"deadline a/by 31/01/2019\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String expOut \u003d \"[!] Improper format\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"Please input:\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"\u0027deadline TASK /by TASK_DATE\u0027\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        assertEquals(expOut, actualOut);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void test3() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String actualOut \u003d javaCake.getResponse(\"deadline a /by 29/02/2019\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String expOut \u003d \"[!] Date cannot be parsed: 29/02/2019\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        assertEquals(expOut, actualOut);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void test4() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String actualOut \u003d javaCake.getResponse(\"deadline a /by31/01/2019\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String expOut \u003d \"[!] Improper format\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"Please input:\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"\u0027deadline TASK /by TASK_DATE\u0027\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        assertEquals(expOut, actualOut);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void test5() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String actualOut \u003d javaCake.getResponse(\"deadline a by 31/01/2019\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String expOut \u003d \"[!] Improper format\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"Please input:\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"\u0027deadline TASK /by TASK_DATE\u0027\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        assertEquals(expOut, actualOut);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 81
    }
  },
  {
    "path": "src/test/java/DeadlinePositiveTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.JavaCake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class DeadlinePositiveTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    JavaCake javaCake;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    String actualOut \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    String expOut \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Initialise test files."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            FileUtils.deleteDirectory(new File(\"testPath\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        javaCake \u003d new JavaCake(\"testPath\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Deletes test files."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            FileUtils.deleteDirectory(new File(\"testPath\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void test1() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        actualOut \u003d javaCake.getResponse(\"deadline a /by 02/01/2019\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        expOut \u003d \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"[✗] a\\n(by: 02/01/2019)\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"Now you have 1 tasks in the list.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        assertEquals(expOut, actualOut);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        actualOut \u003d javaCake.getResponse(\"reminder\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        expOut \u003d \"~~Upcoming Deadlines!~~\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"1.[✗] a\\n(by: 02/01/2019)\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        assertEquals(expOut, actualOut);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void test2() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        actualOut \u003d javaCake.getResponse(\"deadline a /by 01/02/2019\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        expOut \u003d \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"[✗] a\\n(by: 01/02/2019)\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"Now you have 1 tasks in the list.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        assertEquals(expOut, actualOut);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        actualOut \u003d javaCake.getResponse(\"reminder\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        expOut \u003d \"~~Upcoming Deadlines!~~\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"1.[✗] a\\n(by: 01/02/2019)\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        assertEquals(expOut, actualOut);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void test3() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        actualOut \u003d javaCake.getResponse(\"deadline a b /by 03-01-2019\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        expOut \u003d \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"[✗] a b\\n(by: 03-01-2019)\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"Now you have 1 tasks in the list.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        assertEquals(expOut, actualOut);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        actualOut \u003d javaCake.getResponse(\"reminder\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        expOut \u003d \"~~Upcoming Deadlines!~~\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"1.[✗] a b\\n(by: 03-01-2019)\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        assertEquals(expOut, actualOut);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void reminderSortTest() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        actualOut \u003d javaCake.getResponse(\"deadline a /by 02/01/2019\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        actualOut \u003d javaCake.getResponse(\"deadline a /by 01/02/2019\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        actualOut \u003d javaCake.getResponse(\"deadline a b /by 03-01-2019\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        actualOut \u003d javaCake.getResponse(\"reminder\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        expOut \u003d \"~~Upcoming Deadlines!~~\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"1.[✗] a\\n(by: 02/01/2019)\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"2.[✗] a b\\n(by: 03-01-2019)\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"3.[✗] a\\n(by: 01/02/2019)\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        assertEquals(expOut, actualOut);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void testTime() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        actualOut \u003d javaCake.getResponse(\"deadline a /by 01/01/2019 23:59\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        actualOut \u003d javaCake.getResponse(\"deadline a /by 01/01/2019\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        actualOut \u003d javaCake.getResponse(\"deadline a /by 01/01/2019 0001\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        actualOut \u003d javaCake.getResponse(\"reminder\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        expOut \u003d \"~~Upcoming Deadlines!~~\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"1.[✗] a\\n(by: 01/01/2019)\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"2.[✗] a\\n(by: 01/01/2019 0001)\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                + \"3.[✗] a\\n(by: 01/01/2019 23:59)\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        assertEquals(expOut, actualOut);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 106
    }
  },
  {
    "path": "src/test/java/DeadlineSnoozeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.JavaCake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class DeadlineSnoozeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    JavaCake javaCake;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Initialise test files."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            FileUtils.deleteDirectory(new File(\"testPath\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        javaCake \u003d new JavaCake(\"testPath\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Deletes test files."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void free() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            FileUtils.deleteDirectory(new File(\"testPath\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void posTest1() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 42
    }
  },
  {
    "path": "src/test/java/EditNoteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class EditNoteTest {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 2
    }
  },
  {
    "path": "src/test/java/JavaCakeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class JavaCakeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        new ListCommandTest();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2,2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 2,
      "-": 13
    }
  },
  {
    "path": "src/test/java/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void testListCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String line1 \u003d \"Here are the 4 subtopics available!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String line2 \u003d \"1. Java Basics\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String line3 \u003d \"2. Object-Oriented Programming\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String line4 \u003d \"3. Extensions\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        String line5 \u003d \"4. Overall Test\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        String line6 \u003d \"Key in the index to learn more about the topic or do the quiz!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(line1).append(\"\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(line2).append(\"\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(line3).append(\"\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(line4).append(\"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(line5).append(\"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(line6).append(\"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String expectedOutput \u003d sb.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Logic logic \u003d Logic.getInstance();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            StorageManager sm \u003d new StorageManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ListCommand lc \u003d new ListCommand(\"list\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            String actualOutput \u003d lc.execute(logic, ui, sm);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            assertEquals(expectedOutput.trim(), actualOutput.trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (CakeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 38,
      "RusdiHaizim": 3,
      "kishore03109": 2
    }
  },
  {
    "path": "src/test/java/LogicTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class LogicTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private Logic logic \u003d Logic.getInstance();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    static void init() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    static void delete() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    void testGoToParentFileMethod() throws CakeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assertThrows(CakeException.class, () -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            logic.gotoParentFilePath(\"/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assertThrows(CakeException.class, () -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            logic.gotoParentFilePath(\"///\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assertThrows(CakeException.class, () -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            logic.gotoParentFilePath(\"startingPath/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String startingPath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String expectedOutput;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String actualOutput;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        startingPath \u003d \"data/resources/hi\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        expectedOutput \u003d \"data/resources\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        actualOutput \u003d logic.gotoParentFilePath(startingPath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        startingPath \u003d \"data/resources/hi.txt\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        expectedOutput \u003d \"data/resources\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        actualOutput \u003d logic.gotoParentFilePath(startingPath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 55
    }
  },
  {
    "path": "src/test/java/QuestionListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import javacake.JavaCake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.QuestionDifficulty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.QuestionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.QuestionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.QuizSession;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import static javacake.quiz.QuestionList.MAX_QUESTIONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import static javacake.quiz.QuizSession.TotalMaxQuestions;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class QuestionListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private static JavaCake javacake;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    //@BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    //public void"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    // TODO this test is dummied out until a reliable unit test can be written."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void initializeBasicQuizTest() throws CakeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        QuestionList test \u003d new QuestionList(QuestionType.BASIC);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        //check if there are the correct number of test questions"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        assertEquals(test.getQuestionList().size(), MAX_QUESTIONS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        // check if there are any duplicate questions"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        Set\u003cQuestion\u003e set \u003d new HashSet\u003c\u003e(test.getQuestionList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        assertEquals(set.size(), test.getQuestionList().size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        String h \u003d \"head hurts\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        assertEquals(h.length(), 10);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 2,
      "kishore03109": 10,
      "claysmilesoil": 30
    }
  },
  {
    "path": "src/test/java/QuizSessionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import javacake.JavaCake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import javacake.quiz.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import javacake.quiz.QuestionDifficulty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import javacake.quiz.QuestionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import javacake.quiz.QuestionType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import javacake.quiz.QuizSession;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "public class QuizSessionTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private static JavaCake javacake;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private String response;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private String[] topics;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * In case it is the user\u0027s first time, name will be just set as list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    static void setName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        javacake \u003d new JavaCake();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        javacake.getResponse(\"list\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    void init() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        response \u003d javacake.getResponse(\"list\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        topics \u003d response.split(\"\\\\r?\\\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    void levelsOfDifficulity() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        for (int i \u003d 1; i \u003c topics.length; i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (topics[i].contains(\"Test\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String quizResponse \u003d javacake.getResponse(\"goto \" + i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String expectedResponse \u003d \"Here are the 3 subtopics available!\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                        + \"1. Easy Quiz\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                        + \"2. Medium Quiz\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                        + \"3. Hard Quiz\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                        + \"Key in the index to learn more about the topic or do the quiz!\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                assertEquals(expectedResponse, quizResponse);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * This test checks if quiz session works for both illegal characters and"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * options that are not valid for the particular quiz."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    void invalidInput() throws CakeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        for (int i \u003d 1; i \u003c topics.length; i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (topics[i].contains(\"Test\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                response \u003d javacake.getResponse(\"goto \" + i + \".1\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        QuizSession quizSession \u003d new QuizSession(QuestionType.ALL, QuestionDifficulty.EASY, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        response \u003d quizSession.getQuestion(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        String[] illegal  \u003d {\"/\", \"?\", \"\u003c\", \":\", \",\",  \"*\", \"|\", \"%d\"};"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        String expectedError \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        for (int j \u003d 0; j \u003c illegal.length; j++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            response \u003d javacake.getResponse(illegal[j]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            assertEquals(response, expectedError);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        for (int i \u003d 0; i \u003c QuizSession.MAX_QUESTIONS; i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            response \u003d quizSession.getQuestion(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            //for checking number of options//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            int numOfOptions \u003d 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            while (response.contains(\"(\" + numOfOptions + \")\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                numOfOptions++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            response \u003d javacake.getResponse(Integer.toString(numOfOptions));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            assertEquals(response, expectedError);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * To test for duplicate questions within a singular quiz session"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    void testForDuplicates() throws CakeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        for (int i \u003d 1; i \u003c topics.length; i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (topics[i].contains(\"Test\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                response \u003d javacake.getResponse(\"goto \" + i + \".1\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        QuizSession quizSession \u003d new QuizSession(QuestionType.ALL, QuestionDifficulty.EASY, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        //check if there are the correct number of test questions"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        QuestionList testQuesions \u003d quizSession.getQuestionList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        int expectedNumOfQns \u003d testQuesions.getQuestionList().size();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        assertEquals(expectedNumOfQns, QuizSession.MAX_QUESTIONS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        // check if there are any duplicate questions"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        Set\u003cQuestion\u003e set \u003d new HashSet\u003c\u003e(testQuesions.getQuestionList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        assertEquals(set.size(), testQuesions.getQuestionList().size());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kishore03109": 109
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.CakeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    File profileFile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    File storageFile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Initialise test files."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        profileFile \u003d new File(\"testProfile\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        storageFile \u003d new File(\"testStorage\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Deletes test files."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            FileUtils.deleteDirectory(profileFile);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            FileUtils.deleteDirectory(storageFile);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void newUserUsername() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Profile profile;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            profile \u003d new Profile(profileFile.getPath());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            assertEquals(\"NEW_USER_!@#\", profile.getUsername());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (CakeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void newUserScore() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Profile profile;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            profile \u003d new Profile(profileFile.getPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            assertEquals(0, profile.getOverallContentMarks(0));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            assertEquals(0, profile.getOverallContentMarks(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            assertEquals(0, profile.getOverallContentMarks(2));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            assertEquals(0, profile.getOverallContentMarks(3));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            assertEquals(0, profile.getTotalProgress());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (CakeException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void newStorage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Storage storage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            storage \u003d new Storage(storageFile.getPath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            assertEquals(new ArrayList\u003cTask\u003e(), storage.getData());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            assertEquals(0, Storage.getInternalDataSize());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (CakeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 4,
      "RusdiHaizim": 71,
      "kishore03109": 4
    }
  }
]
