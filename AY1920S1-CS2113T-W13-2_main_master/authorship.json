[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    configFile \u003d file(\"config/checkstyle/checkstyle.xml\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    archiveBaseName \u003d \"JavaCake\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    archiveVersion \u003d \"1.2.1\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "//jar {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "//    manifest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "//        attributes \u0027Main-Class\u0027: \u0027javacake.Launcher\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "//    from {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "//        configurations.runTimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "//}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    //mainClassName \u003d \"javacake.Duke\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    mainClassName \u003d \"javacake.Launcher\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    //compile files(\"${System.properties[\u0027java.home\u0027]}/../lib/tools.jar\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.6\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    compile group: \u0027org.fxmisc.richtext\u0027, name: \u0027richtextfx\u0027, version: \u00270.10.2\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    // https://mvnrepository.com/artifact/commons-io/commons-io"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    compile group: \u0027commons-io\u0027, name: \u0027commons-io\u0027, version: \u00272.6\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        exceptionFormat \u003d \u0027full\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 9,
      "RusdiHaizim": 35,
      "-": 40
    }
  },
  {
    "path": "src/main/java/javacake/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class Duke  {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static Logic logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static boolean isCliMode \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static StorageManager storageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    //    public static Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    //    public static Profile profile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static boolean isFirstTimeUser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String userName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static int userProgress \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static Logger logger \u003d Logger.getLogger(\"JavaCake\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Constructor for main class to initialise the settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logger.log(Level.INFO, \"Starting Duke Constructor!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            logic \u003d Logic.getInstance();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            storageManager \u003d new StorageManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //            storage \u003d new Storage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //            profile \u003d new Profile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            userProgress \u003d storageManager.profile.getTotalProgress();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            userName \u003d storageManager.profile.getUsername();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            // Default username when creating new profile"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            checkIfNewUser(\"NEW_USER_!@#\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            logger.log(Level.WARNING, \"Profile set-up failed.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void checkIfNewUser(String defaultUsername) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (userName.equals(defaultUsername)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            isFirstTimeUser \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            isFirstTimeUser \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * CLI method to overwrite username if initially default"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * and print the required welcome messages."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void initialiseWelcomeCliMode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        ui.showMessage(Ui.showWelcomeMsgPhaseA(isFirstTimeUser));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (isFirstTimeUser) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            userName \u003d ui.readCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            loadCake();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //To overwrite \"NEW_USER_!@# with new inputted username if needed"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (isFirstTimeUser) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                storageManager.profile.overwriteName(userName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                logger.log(Level.WARNING, \"Profile overwrite failed.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        ui.showMessage(Ui.showWelcomeMsgPhaseB(isFirstTimeUser, userName, userProgress));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Method to load cake ASCII."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void loadCake() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ui.showMessage(Ui.getTextFile(new BufferedReader("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    new FileReader(\"src/main/resources/content/cake.txt\"))));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (DukeException | FileNotFoundException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            logger.log(Level.WARNING, \"Failed to load cake.txt!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Run the rest of the code here: CLI MODE."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void runAsCli() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        initialiseWelcomeCliMode();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showMessage(c.execute(logic, ui, storageManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Public Method to get String response: GUI MODE."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logger.log(Level.INFO, \"Getting response from input...\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (isCliMode) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            isCliMode \u003d false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return c.execute(logic, ui, storageManager);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Public Method to get type of mode being run."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return true if is CLI mode"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static boolean isCliMode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return isCliMode;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Program Start."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        new Duke().runAsCli();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 81,
      "RusdiHaizim": 67,
      "kishore03109": 1
    }
  },
  {
    "path": "src/main/java/javacake/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 13
    }
  },
  {
    "path": "src/main/java/javacake/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import edu.emory.mathcs.backport.java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.security.CodeSource;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.zip.ZipEntry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.zip.ZipInputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String defaultFilePath \u003d \"content/MainList\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static String currentFilePath \u003d \"content/MainList\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private List\u003cString\u003e listOfFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static boolean isDirectory \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private int numOfFiles \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Private constructor to ensure exactly one logic object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private Logic() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static final Logic INSTANCE \u003d new Logic();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Using Singleton pattern to ensure exactly one logic object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return The only instance of logic object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static Logic getInstance() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return INSTANCE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Returns the starting file path to application content."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return starting file path to application content."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String getDefaultFilePath() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return defaultFilePath;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Stores all files in the currentFilePath into listOfFiles."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void loadFiles() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String[] tempListFiles \u003d currentFilePath.split(\"/\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        int currFileSlashCounter \u003d tempListFiles.length;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        listOfFiles.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            CodeSource src \u003d Logic.class.getProtectionDomain().getCodeSource();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            boolean isJarMode \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (src !\u003d null) { //jar"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                URL jar \u003d src.getLocation();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ZipInputStream zip \u003d new ZipInputStream(jar.openStream());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                while (true) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    ZipEntry e \u003d zip.getNextEntry();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    if (e \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        isJarMode \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    String name \u003d e.getName();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    //System.out.println(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    if (name.startsWith(currentFilePath)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        String[] listingFiles \u003d name.split(\"/\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        if (listingFiles.length \u003d\u003d currFileSlashCounter + 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                            System.out.println(name + \" \u003d\u003d \" + currFileSlashCounter);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                            listOfFiles.add(listingFiles[currFileSlashCounter]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                            Collections.sort(listOfFiles);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                            numOfFiles \u003d listOfFiles.size();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (!isJarMode) { //non-jar"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                InputStream inputStream \u003d ClassLoader.getSystemClassLoader().getResourceAsStream(currentFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                BufferedReader br \u003d new BufferedReader(new InputStreamReader(inputStream));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                String currentLine;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                while ((currentLine \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    //System.out.println(currentLine);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    listOfFiles.add(currentLine);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                Collections.sort(listOfFiles);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                numOfFiles \u003d listOfFiles.size();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                br.close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (NullPointerException | IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(\"Content not found!\" + \"\\nPls key \u0027back\u0027 or \u0027list\u0027 to view previous content!\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public int getNumOfFiles() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        return numOfFiles;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Method is only invoked when List command is called."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void setDefaultFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        currentFilePath \u003d defaultFilePath;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public String getFullFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        return currentFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Method is invoked when GoTo command is called."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Based on the index, return the particular filePath."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param index Index of the new path found in filePathQueries."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return the particular filePath based on the input index."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String gotoFilePath(int index) throws DukeException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return listOfFiles.get(index);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(e.getMessage() + \"\\n Pls key \u0027back\u0027 or \u0027list\u0027 to view previous content\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Update the currentFilePath by concatenating the updatedPath."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * updatedPath is given by gotoFilePath method."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param updatedPath particular path to be updated into currentFilePath."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void updateFilePath(String updatedPath) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        currentFilePath +\u003d (\"/\" + updatedPath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if file in currentFilePath is a directory or file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Returns once if it is a directory."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Returns twice if it is a file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Used for BackCommand."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void backToPreviousPath() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (!currentFilePath.equals(defaultFilePath)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (!currentFilePath.contains(\".txt\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                currentFilePath \u003d gotoParentFilePath(currentFilePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                currentFilePath \u003d gotoParentFilePath(gotoParentFilePath(currentFilePath));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Creates a file path to parent directory by"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * removing child file or directory name from filePath."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param filePath input file path to be reduced."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return file path to parent directory relative to initial file path."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String gotoParentFilePath(String filePath) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] filesCapture \u003d filePath.split(\"/\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        StringBuilder reducedFilePath \u003d new StringBuilder();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        for (int i \u003d 0; i \u003c filesCapture.length - 1; i++) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            reducedFilePath.append(filesCapture[i]).append(\"/\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String finalTrim \u003d reducedFilePath.toString();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        finalTrim \u003d finalTrim.substring(0, finalTrim.length() - 1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return finalTrim;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Displays the all directories found in currentFilePath."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String displayDirectories() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        sb.append(\"Here are the \").append(listOfFiles.size()).append(\" subtopics available!\\n\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        for (String queries : listOfFiles) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sb.append(queries).append(\"\\n\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(\"Key in the index to learn more about the topic!\").append(\"\\n\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Reads the content in content text file."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException When the text file in currentFilePath is not found."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String readQuery() throws DukeException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            InputStream inputStream \u003d ClassLoader.getSystemClassLoader().getResourceAsStream(currentFilePath);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new InputStreamReader(inputStream));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String sentenceRead;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            while ((sentenceRead \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                sb.append(sentenceRead).append(\"\\n\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            throw new DukeException(\"Unable to read text file\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks current directory contains directory or text files."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return true if current directory contains directory."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public boolean containsDirectory() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (isDirectory) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Calls insertQueries method to instantiate new file paths."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if new file path accesses a directory or file."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * If directory, display all the file names within the directory."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Else read the content of the text file."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of formatted file names or text file content."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException when file or directory is not found."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String processQueries() throws DukeException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        insertQueries();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (isDirectory) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return displayDirectories();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return readQuery();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Clears all file paths in filePathQueries."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Load all files in currentFilePath."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Update isDirectory if current directory contains directories."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Adds new list of file names in filePathQueries to be processed."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void insertQueries() throws DukeException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        clearQueries();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        loadFiles();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        for (String listOfFile : listOfFiles) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (listOfFile.contains(\".txt\")) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                isDirectory \u003d false;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                isDirectory \u003d true;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Clears all entries in listOfFiles."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void clearQueries() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        listOfFiles.clear();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 184,
      "RusdiHaizim": 68,
      "kishore03109": 15
    }
  },
  {
    "path": "src/main/java/javacake/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.concurrent.Service;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static String savedDataPath \u003d \"data/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setStage(stage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stage.getIcons().add(new Image(this.getClass().getResourceAsStream(\"/images/app_icon.jpg\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stage.setTitle(\"JavaCake\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 29,
      "RusdiHaizim": 12
    }
  },
  {
    "path": "src/main/java/javacake/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.ChangeColorCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.BackCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.CreateNoteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.EditNoteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.GoToCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.ListNoteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.OverviewCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.ReminderCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.ResetCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.ScoreCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.notes.NoteList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ui.MainWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Allows the user input to be parsed before running \u0027execute\u0027."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand String inputted by user, which needs to be parsed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              to identify the intent"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return a subclass of the Command Class along"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *         with their respective intent"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Shows error when unknown command is inputted"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static Command parse(String inputCommand) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] buffer \u003d inputCommand.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String input \u003d buffer[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        helper(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (input.equals(\"exit\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (input.equals(\"back\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return new BackCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (input.equals(\"help\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return new HelpCommand(inputCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"score\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return new ScoreCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"reset\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return new ResetCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (input.equals(\"goto\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (inputCommand.length() \u003c\u003d 4) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                throw new DukeException(\"Please specify index number in \u0027goto\u0027 command!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            return new GoToCommand(inputCommand.substring(5));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (input.equals(\"overview\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return new OverviewCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (input.equals(\"createnote\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return new CreateNoteCommand(inputCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (input.equals(\"editnote\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return new EditNoteCommand(inputCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (input.equals(\"listnote\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return new ListNoteCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return new AddCommand(inputCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"reminder\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return new ReminderCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"change\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            MainWindow.isChanged \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return new ChangeColorCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * Method to help handle small typo made by user."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * Types of typo handled are:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * 1) if user types one alphabet wrongly, eg. trre instead of tree."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * 2) if user accidentally types extra or less letter, eg. treee or tre instead of tree."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private static void helper(String input) throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        String[] commands \u003d {\"exit\", \"list\", \"back\", \"help\", \"score\", \"reset\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                             \"goto\", \"overview\", \"deadline\", \"editnote\", \"createnote\"};"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        for (int i \u003d 0; i \u003c commands.length; i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            boolean isTypo \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            String command \u003d commands[i];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            int length \u003d command.length();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (length \u003d\u003d input.length()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                int similarity \u003d 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                for (int j \u003d 0; j \u003c length; j++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    if (input.charAt(j) \u003d\u003d command.charAt(j)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                        similarity++;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                if (similarity + 1 \u003d\u003d length) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    isTypo \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            boolean isOneLetterApart \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (command.length() \u003d\u003d input.length() + 1 || command.length() \u003d\u003d input.length() - 1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                isOneLetterApart \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (!command.equals(input) \u0026\u0026 isOneLetterApart) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                if (command.contains(input) || input.contains(command)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    isTypo \u003d true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (isTypo) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                throw new DukeException(\"Sorry, but do you mean this : \" + command);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 26,
      "RusdiHaizim": 44,
      "claysmilesoil": 2,
      "kishore03109": 46
    }
  },
  {
    "path": "src/main/java/javacake/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Constructor for Adding of commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param str Input string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public AddCommand(String str) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.DEADLINE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Execute addition of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Shows error when deletion is not possible"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String output \u003d TaskList.runDeadline(storageManager.storage.currentTaskData.getData(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                input, TaskList.TaskState.NOT_DONE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Storage.generateFolder(new File(\"data/tasks/\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        storageManager.storage.write(storageManager.storage.currentTaskData.getData());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        /*switch (type) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ui.showMessage(Parser.runTodo(progressStack.getData(), input, Parser.TaskState.NOT_DONE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ui.showMessage(Parser.runDeadline(progressStack.getData(), input, Parser.TaskState.NOT_DONE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ui.showMessage(Parser.runEvent(progressStack.getData(), input, Parser.TaskState.NOT_DONE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        case DAILY:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ui.showMessage(Parser.runRecurring(progressStack.getData(), input, Parser.TaskState.NOT_DONE, \"daily\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        case WEEKLY:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ui.showMessage(Parser.runRecurring(progressStack.getData(), input, Parser.TaskState.NOT_DONE, \"weekly\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        case MONTHLY:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ui.showMessage(Parser.runRecurring(progressStack.getData(), input, Parser.TaskState.NOT_DONE, \"monthly\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"     [Unknown COMMAND TYPE]\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 17,
      "RusdiHaizim": 46,
      "claysmilesoil": 6
    }
  },
  {
    "path": "src/main/java/javacake/commands/BackCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class BackCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public BackCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.BACK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Execute going back to previous index."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Error thrown when unable to close file reader"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logic.backToPreviousPath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logic.insertQueries();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (logic.containsDirectory()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return (logic.displayDirectories());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            logic.updateFilePath(logic.gotoFilePath(0));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return (logic.readQuery());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 18,
      "RusdiHaizim": 16
    }
  },
  {
    "path": "src/main/java/javacake/commands/ChangeColorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class ChangeColorCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"Changed color mode!\\nType \u0027list\u0027 for more commands\\nType \u0027help\u0027 for command info\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 1,
      "RusdiHaizim": 13
    }
  },
  {
    "path": "src/main/java/javacake/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected CmdType type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Types of commands that are possible."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public enum CmdType {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        EXIT, LIST, FIND, DONE, DELETE, TODO, DEADLINE, REMIND, VIEWSCH,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        EDIT, BACK, GOTO, QUIZ, HELP, TREE, CREATENOTE, EDITNOTE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public abstract String execute(Logic logic, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throws DukeException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to get the type of command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Type of command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CmdType type() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to get the input inside the command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing user input in command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String input() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to check whether command is of type exit."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if type is exit, false otherwise"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.type \u003d\u003d CmdType.EXIT;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 8,
      "RusdiHaizim": 6,
      "-": 36
    }
  },
  {
    "path": "src/main/java/javacake/commands/CreateNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class CreateNoteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String defaultFileName \u003d \"Notes\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String userGivenFileName \u003d \"Notes\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static int defaultFileNameCounter \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String defaultDirectoryPath \u003d \"data/notes/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static final char[] ILLEGAL_CHARACTERS \u003d { \u0027/\u0027, \u0027\\n\u0027, \u0027\\r\u0027, \u0027\\t\u0027,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        \u0027\\0\u0027, \u0027\\f\u0027, \u0027`\u0027, \u0027?\u0027, \u0027*\u0027, \u0027\\\\\u0027, \u0027\u003c\u0027, \u0027\u003e\u0027, \u0027|\u0027, \u0027\\\"\u0027, \u0027:\u0027, \u0027.\u0027, \u0027,\u0027};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Constructor for CreateNoteCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Input Command from the user to create note."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException If the input command is invalid."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public CreateNoteCommand(String inputCommand) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        type \u003d CmdType.CREATENOTE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        //File file \u003d new File(defaultDirectoryPath + defaultFileName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        Storage.generateFolder(new File(\"data/notes/\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        processCreateNoteCommand(inputCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * If inputCommand has no parameter, command will create a file based on auto-generated file name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Auto-generation is done by checking if file containing the defaultFileName exists."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * If it exists, number starting from \u00271\u0027 will be concatenated to the defaultFileName."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * If inputCommand has a parameter, command checks if specified file name is valid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Creates file if specified file name is valid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Input Command from the user to create note."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException If the input command is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void processCreateNoteCommand(String inputCommand) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] wordsInInputCommand \u003d inputCommand.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (createNoteCommandHasSpecifiedFileName(inputCommand)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (!containsIllegals(wordsInInputCommand[1])) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                userGivenFileName \u003d wordsInInputCommand[1];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                throw new DukeException(\"Invalid file name: Illegal character in file name detected!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (validCommandWithNoSpecifiedFileName(inputCommand)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            while (checkNotesFileExist(defaultDirectoryPath + userGivenFileName + \".txt\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                generateNewDefaultFileName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(\"Invalid command: To write notes, \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    + \"type \u0027createnote\u0027 followed by desired (optional) filename.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if CreateNoteCommand has a specified file name."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Input Command from the user to create note."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if CreateNoteCommand has a specified file name."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean createNoteCommandHasSpecifiedFileName(String inputCommand) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] wordsInInputCommand \u003d inputCommand.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (wordsInInputCommand.length \u003d\u003d 2 \u0026\u0026 wordsInInputCommand[0].equals(\"createnote\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if CreateNoteCommand with no parameter is valid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Input Command from the user to create note."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if CreateNoteCommand with no parameter is valid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean validCommandWithNoSpecifiedFileName(String inputCommand) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] wordsInInputCommand \u003d inputCommand.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (wordsInInputCommand.length \u003d\u003d 1 \u0026\u0026 wordsInInputCommand[0].equals(\"createnote\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if the input file name contains any illegal characters."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputFileName Specified file name by user."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if file name does not contains illegal characters."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean containsIllegals(String inputFileName) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        for (char illegalChar : ILLEGAL_CHARACTERS) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (inputFileName.indexOf(illegalChar) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Generates file name for user."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Generated by concatenating number to defaultFileName."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void generateNewDefaultFileName() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        userGivenFileName \u003d defaultFileName + defaultFileNameCounter;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        defaultFileNameCounter++;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if file name already exists."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * If file name does not exist, create note for user."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return Message when note is created successfully."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException If file does not exists."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sb.append(userGivenFileName).append(\".txt\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String formattedFileName \u003d sb.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sb.insert(0, defaultDirectoryPath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String newFilePath \u003d sb.toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            //System.out.println(newFilePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (checkNotesFileExist(newFilePath)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                throw new DukeException(\"File already exists, please type \u0027editnote \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        + formattedFileName + \"\u0027 to edit the file instead\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else  {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                File file \u003d new File(newFilePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                if (!file.createNewFile()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    throw new DukeException(\"File \u0027\" + formattedFileName + \"\u0027 was not created! Pls try again!\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                return \"File \u0027\" + formattedFileName + \"\u0027has been created successfully!\\n\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if file specified in file path exists."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param filePath Path to the file to be created."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if file already exists."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean checkNotesFileExist(String filePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        File tempFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return tempFile.exists();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 151,
      "RusdiHaizim": 4
    }
  },
  {
    "path": "src/main/java/javacake/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(String str) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        type \u003d CmdType.DELETE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Execute deletion of task in tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException Shows error when deletion is not possible"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d input.substring(7);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        /*try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            int num \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            --num;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isWithinData \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            for (int i \u003d 0; i \u003c progressStack.size(); ++i) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                if (i \u003d\u003d num) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    String stringBuilder \u003d \"Noted. I\u0027ve removed this task: \" + \"\\n      \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                            + progressStack.get(i).getFullString() + \"\\nNow you have \" + (progressStack.size() - 1)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \" tasks in the list.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    progressStack.remove(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    ui.showMessage(stringBuilder);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    isWithinData \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!isWithinData) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"Task number is out of bounds [Delete]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Task number is invalid! [Delete]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 13,
      "RusdiHaizim": 5,
      "-": 33
    }
  },
  {
    "path": "src/main/java/javacake/commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoneCommand(String str) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        type \u003d CmdType.DONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Execute checking of task in tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException Shows error when task number is invalid"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d input.substring(5);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            int num \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            --num;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isInsideData \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            /*for (int i \u003d 0; i \u003c progressStack.size(); ++i) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                if (i \u003d\u003d num) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    if (progressStack.get(i).isDone()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        ui.showMessage(progressStack.get(i).toString().substring(3) + \" is already done!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                        isInsideData \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    progressStack.get(i).markAsDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    ui.showMessage(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    ui.showMessage(\"    [✗] \" + progressStack.get(i).toString().substring(3));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    isInsideData \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!isInsideData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showError(\"Task number is out of bounds! [Done]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Not a valid Task Number!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 14,
      "RusdiHaizim": 5,
      "-": 35
    }
  },
  {
    "path": "src/main/java/javacake/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kishore03109"
        },
        "content": " * EDIT commands should be of the following format:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kishore03109"
        },
        "content": " * edit TASKINDEX  NEWDATE."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kishore03109"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public EditCommand(String str) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        type \u003d CmdType.EDIT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        input \u003d input.substring(5);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            int num \u003d Integer.parseInt(input.substring(0,1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            --num;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            boolean isWithinData \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            /*for (int i \u003d 0; i \u003c progressStack.size(); ++i) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                if (i \u003d\u003d num) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    progressStack.get(i).changeDate(input.substring(2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    String stringBuilder \u003d \"Noted. I\u0027ve rescheduled this task: \" + \"\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                            + progressStack.get(i).getFullString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    ui.showMessage(stringBuilder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    isWithinData \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }*/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (!isWithinData) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                throw new DukeException(\"Task number is out of bounds [Edit]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            throw new DukeException(\"Task number is invalid! [Edit]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 10,
      "RusdiHaizim": 4,
      "kishore03109": 35
    }
  },
  {
    "path": "src/main/java/javacake/commands/EditNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class EditNoteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String defaultDirectoryPath \u003d \"data/notes/\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String nameOfEditFile;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String currentFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String headingMessage \u003d \"Write your notes below!\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            + \"To save edited content, type \u0027/save\u0027 and enter!\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String endingMessage \u003d \"Edited file is saved!\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Constructor for EditNoteCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if command has two parameters - \"editnote\" and \"name of file to be edited\"."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if \"name of file to be edited\" exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * If former checks passed, update nameOfEditFile and currentFilePath variables."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Else inform user to either provide valid file name or valid EditNoteCommand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param inputCommand Input command from the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException if invalid command or invalid file name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public EditNoteCommand(String inputCommand) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        Duke.logger.log(Level.INFO, \"Processing EditNoteCommand: \" + inputCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        type \u003d CmdType.EDITNOTE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String[] wordsInInputCommand \u003d inputCommand.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (wordsInInputCommand.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (fileExist(wordsInInputCommand[1])) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                nameOfEditFile \u003d wordsInInputCommand[1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                createCurrentFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                Duke.logger.log(Level.INFO, wordsInInputCommand[1] + \" contains illegal file name.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                throw new DukeException(\"Pls enter a valid file name! Type \u0027listnote\u0027 to view available notes!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Duke.logger.log(Level.INFO, inputCommand + \" invalid EditNoteCommand.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(\"Pls enter a valid editnote command:\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    + \" \u0027editnote - [name of the file you wish you edit]\u0027\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if name of the file exists in directory path."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param fileName Name of the file to be checked and edited."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if the file exists in directory path, false otherwise."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean fileExist(String fileName) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        File file \u003d new File(defaultDirectoryPath + fileName + \".txt\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        Duke.logger.log(Level.INFO, \"Checking if file: \" + fileName + \" exist.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Duke.logger.log(Level.INFO, fileName + \" exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        Duke.logger.log(Level.INFO, fileName + \" does not exist.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Updates currentFilePath with file path to the file to be edited."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void createCurrentFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        currentFilePath \u003d defaultDirectoryPath + nameOfEditFile + \".txt\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if file in currentFilePath is empty by checking its size."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param currentFilePath file path to the current file to be edited."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return true if the file is empty, false otherwise."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static boolean checkFileIsEmpty(String currentFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        File file \u003d new File(currentFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return file.length() \u003d\u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Read content stored in text file to be edited."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of the content stored in the text file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException if the file does not exist."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String displayContentInFile() throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            File file \u003d new File(currentFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                sb.append(line).append(\"\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * For CLI only."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Read input from user and write into specified note file."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * If \u0027/save\u0027 is called, file will be saved."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException File does not exist."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void readAndSaveNewContent() throws DukeException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        BufferedWriter bw;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            bw \u003d new BufferedWriter(new FileWriter(new File(currentFilePath)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String lineRead;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            while (!(lineRead \u003d ui.readCommand()).equals(\"/save\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                bw.write(lineRead);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Executes the EditNoteCommand accordingly depends on CLI or GUI."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * If CLI, use ui and readAndSaveNewContent method to generate message for user."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * If GUI, return !@#_EDIT_NOTE to notify MainWindow class to call GUI methods."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return endingMessage if CLI is used, else return !@#_EDIT_NOTE to request MainWindow class to handle."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException File does not exist."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (Duke.isCliMode()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (checkFileIsEmpty(currentFilePath)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                ui.showMessage(\"Write your notes below!\\n\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                ui.showMessage(\"To save edited content, type \u0027/save\u0027 and enter!\\n\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                readAndSaveNewContent();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                return endingMessage;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                ui.showMessage(\"Below is your previous saved content! \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        + \"Copy your previous content and edit accordingly\\n\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                ui.showMessage(\"To save edited content, type \u0027/save\u0027 and enter!\\n\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                ui.showMessage(displayContentInFile());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                readAndSaveNewContent();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                return endingMessage;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return \"!@#_EDIT_NOTE\"; // used for GUI"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Informs user if the file to be edited is empty."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * If file is empty, print headingMessage."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Else, print secondHeadingMessage and the content of the edit file."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String containing heading message and content if available."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException if the file does not exists."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static String getHeadingMessage() throws DukeException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (checkFileIsEmpty(currentFilePath)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return headingMessage;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String secondHeadingMessage \u003d \"Below is your previous saved content! \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    + \"Copy your previous content and edit accordingly\\n\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    + \"To save edited content, type \u0027/save\u0027 and enter!\\n\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return secondHeadingMessage + readTextFileContent();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Removes all content of text file before user can edit file."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * EditFileCommand does not append content to file."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException File does not exist."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static void clearTextFileContent() throws DukeException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(currentFilePath);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Read content in the text file to be edited."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of all the content in file to be edited."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException File does not exist."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String readTextFileContent() throws DukeException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(new File(currentFilePath)));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                sb.append(line).append(\"\\n\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Method used for GUI."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Write input content from user into file to be edited."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Read new content in the file to be edited."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param input notes from the user."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return heading message and new content in text file."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException File does not exist."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static String writeSaveGui(String input) throws DukeException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        BufferedWriter bw;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            bw \u003d new BufferedWriter(new FileWriter(new File(currentFilePath), true));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            bw.write(input);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            bw.newLine();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return headingMessage + readTextFileContent();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Generates formatted message when the file is saved successfully."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of message when file is saved."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static String successSaveMessage() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return nameOfEditFile + \".txt : \" + endingMessage;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 247,
      "RusdiHaizim": 4
    }
  },
  {
    "path": "src/main/java/javacake/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.EXIT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Executes exiting the program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 7,
      "RusdiHaizim": 18
    }
  },
  {
    "path": "src/main/java/javacake/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String str) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        type \u003d CmdType.FIND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes finding tasks corresponding to the keyword in \u0027input\u0027."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException Shows error when unable to access list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d input.substring(5);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        /*if (progressStack.size() \u003e 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isInside \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isStarting \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            for (int i \u003d 0; i \u003c progressStack.size(); ++i) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                if (progressStack.get(i).toString().contains(input)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (isStarting) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        isStarting \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        ui.showMessage(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    int temp \u003d i + 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    ui.showMessage(temp + \". \" + progressStack.get(i).getFullString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    isInside \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!isInside) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showError(\"Keyword not in List\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showError(\"Empty List!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 12,
      "RusdiHaizim": 5,
      "-": 32
    }
  },
  {
    "path": "src/main/java/javacake/commands/GoToCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import java.util.Queue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class GoToCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private Queue\u003cString\u003e indexQueue \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * constructor for goto command. Contains a queue of index in which user wants to navigate into."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * @param inputCommand Parsed goto command by user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public GoToCommand(String inputCommand) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        if (inputCommand.matches(\"\\\\d+\")) { //check if input is numeric"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            indexQueue.add(inputCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            String[] buffer \u003d inputCommand.split(\"\\\\.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            for (int i \u003d 0; i \u003c buffer.length; i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                indexQueue.add(buffer[i]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Execute jumping to given index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Error thrown when unable to close reader"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        int intIndex \u003d Integer.parseInt(indexQueue.poll()) - 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logic.updateFilePath(logic.gotoFilePath(intIndex));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String filePath \u003d logic.getFullFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (filePath.contains(\"Quiz\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (!filePath.substring(filePath.length() - 4).equals(\"Quiz\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                throw new DukeException(\"Sorry, please type \u0027back\u0027 or \u0027list\u0027 instead.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (filePath.contains(\"1. Java Basics\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (Duke.isCliMode()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    return new QuizCommand(Question.QuestionType.BASIC, Duke.isCliMode())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                            .execute(logic, ui, storageManager);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    QuizCommand.setProfile(storageManager.profile);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    logic.insertQueries();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    QuizCommand.logic \u003d logic;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    return \"!@#_QUIZ_1\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else if (filePath.contains(\"2. Object-Oriented Programming\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (Duke.isCliMode()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    return new QuizCommand(Question.QuestionType.OOP, Duke.isCliMode())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                            .execute(logic, ui, storageManager);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    QuizCommand.setProfile(storageManager.profile);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    logic.insertQueries();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    QuizCommand.logic \u003d logic;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    return \"!@#_QUIZ_2\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else if (filePath.contains(\"3. Extensions\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (Duke.isCliMode()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    return new QuizCommand(Question.QuestionType.EXTENSIONS, Duke.isCliMode())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                            .execute(logic, ui, storageManager);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    QuizCommand.setProfile(storageManager.profile);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    logic.insertQueries();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    QuizCommand.logic \u003d logic;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    return \"!@#_QUIZ_3\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                if (Duke.isCliMode()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    return new QuizCommand(Question.QuestionType.ALL, Duke.isCliMode())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                            .execute(logic, ui, storageManager);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    QuizCommand.setProfile(storageManager.profile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    logic.insertQueries();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    QuizCommand.logic \u003d logic;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    return \"!@#_QUIZ_4\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logic.insertQueries();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (logic.containsDirectory()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (indexQueue.size() !\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return execute(logic, ui, storageManager);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return (logic.displayDirectories());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            logic.updateFilePath(logic.gotoFilePath(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (indexQueue.size() !\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return execute(logic, ui, storageManager);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return (logic.readQuery());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 43,
      "RusdiHaizim": 35,
      "claysmilesoil": 1,
      "kishore03109": 30
    }
  },
  {
    "path": "src/main/java/javacake/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public HelpCommand(String str) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.HELP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Execute S.O.S."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Error thrown when unable to close reader"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (input.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return mainHelp();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"help back\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return backHelp();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"help exit\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return exitHelp();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"help goto\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return gotoHelp();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"help help\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return helpHelp();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"help list\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return listHelp();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"help score\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return scoreHelp();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"No such command found. Try again.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String mainHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Here is the list of available commands:\\n\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"back\").append(\"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"exit\").append(\"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"goto \u0027X\u0027 [X \u003d {1,2,..}]\").append(\"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"help\").append(\"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"list\").append(\"\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"score\").append(\"\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"\\nType ~help \u0027COMMAND_NAME\u0027~ to learn more in-depth!\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String backHelp() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"back\").append(\"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to jump back to previous state after calling \u0027goto X\u0027\").append(\"\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String exitHelp() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"exit\").append(\"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to exit from the program\").append(\"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String gotoHelp() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"goto \u0027X\u0027 [X \u003d {1,2,..}]\").append(\"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to jump to next index of contents displayed after calling \u0027list\u0027\").append(\"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String helpHelp() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"help\").append(\"\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"I am trying to help you!!!\").append(\"\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String listHelp() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"list\").append(\"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to display table-of-contents\").append(\"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String scoreHelp() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"score\").append(\"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to get your current overall score for JavaCake!\").append(\"\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 7,
      "RusdiHaizim": 93
    }
  },
  {
    "path": "src/main/java/javacake/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.LIST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Execute the listing of current tasks on the Ui."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logic.setDefaultFilePath();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return (logic.processQueries());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 7,
      "RusdiHaizim": 19
    }
  },
  {
    "path": "src/main/java/javacake/commands/ListNoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.notes.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.notes.NoteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class ListNoteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ArrayList\u003cNote\u003e notesArchive;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Prints out the names of all the notes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Notes can be stored beforehand or created when program is running using CreateNoteCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of the file names of the notes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException If file does not exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        notesArchive \u003d new NoteList().compileNotes();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(\"You have \" + notesArchive.size() + \" note(s) available!\").append(\"\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        for (Note n : notesArchive) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sb.append(Integer.toString(index) + \". \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sb.append(n.getName()).append(\"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 34,
      "RusdiHaizim": 5
    }
  },
  {
    "path": "src/main/java/javacake/commands/OverviewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.net.URLDecoder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.security.CodeSource;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.zip.ZipEntry;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.zip.ZipFile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.zip.ZipInputStream;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class OverviewCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String currentFilePath \u003d \"content/MainList\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static int expectedForwardSlash \u003d 3;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static int indentations \u003d 5;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Constructor for MegaListCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public OverviewCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        type \u003d CmdType.TREE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Executing MegaListCommand prints the entire directory tree of content files."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Set to defaultFilePath and insertQueries to enable link to GoToCommand."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Walk function recursively finds files that are directory and insert into result list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return formatted directory of content."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException when file is not found."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logic.setDefaultFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logic.insertQueries();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(\"Here is the lesson directory!\").append(\"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        List\u003cString\u003e collectionOfNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            CodeSource src \u003d Logic.class.getProtectionDomain().getCodeSource();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (runningFromJar()) { //jar"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                URL jar \u003d src.getLocation();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                ZipInputStream zip \u003d new ZipInputStream(jar.openStream());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                while (true) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    ZipEntry e \u003d zip.getNextEntry();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    if (e \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    String name \u003d e.getName();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    if (name.startsWith(currentFilePath)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        collectionOfNames.add(name);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                List\u003cString\u003e result \u003d processFileNames(collectionOfNames);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                sb.append(String.join(\"\\n\", result)).append(\"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                sb.append(getEndingMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    Stream\u003cPath\u003e walk \u003d Files.walk(Paths.get(\"src/main/resources/content/MainList\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    List\u003cString\u003e result \u003d walk.filter(Files::isDirectory)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                            .map(x -\u003e x.toString()).collect(Collectors.toList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    result \u003d processFileNamesIfNotJar(result);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    sb.append(String.join(\"\\n\", result)).append(\"\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    sb.append(getEndingMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Method used to format the directory names."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Based on the number of \u0027\\\u0027, prepend a multiple of 5 of spaces."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Remove first directory name as it is misleading."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param listOfFilesNames contains file names generated from file walk."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return formatted list of file names ready to be displayed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private List\u003cString\u003e processFileNames(List\u003cString\u003e listOfFilesNames) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        List\u003cString\u003e processedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        for (String filesNames : listOfFilesNames) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String[] individualPath \u003d filesNames.split(\"/\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (!(individualPath[individualPath.length - 1]).contains(\".txt\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                int numberOfSpaces \u003d individualPath.length - expectedForwardSlash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                sb.append(\" \".repeat(Math.max(0, numberOfSpaces) * indentations));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                sb.append(individualPath[individualPath.length - 1]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                processedList.add(sb.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        processedList.remove(0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return processedList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Method used to format the directory names."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Based on the number of \u0027\\\u0027, prepend a multiple of 5 of spaces."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Remove first directory name as it is misleading."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param listOfFilesNames contains file names generated from file walk."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return formatted list of file names ready to be displayed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private List\u003cString\u003e processFileNamesIfNotJar(List\u003cString\u003e listOfFilesNames) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        List\u003cString\u003e processedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        for (String filesNames : listOfFilesNames) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String[] individualPath \u003d filesNames.split(\"\\\\\\\\\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            int numberOfSpaces \u003d individualPath.length - 6;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sb.append(\" \".repeat(Math.max(0, numberOfSpaces) * 5));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sb.append(individualPath[individualPath.length - 1]);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            processedList.add(sb.toString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        processedList.remove(0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return processedList;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks if the program is running in a JAR file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return True if the program is running in a JAR file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static boolean runningFromJar() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String jarFilePath \u003d new File(OverviewCommand.class"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    .getProtectionDomain()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    .getCodeSource()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    .getLocation()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    .getPath())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    .toString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            jarFilePath \u003d URLDecoder.decode(jarFilePath, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            try (ZipFile zipFile \u003d new ZipFile(jarFilePath)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                ZipEntry zipEntry \u003d zipFile.getEntry(\"META-INF/MANIFEST.MF\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                return zipEntry !\u003d null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Displays ending message to improve user interface."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String of ending message."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String getEndingMessage() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(\"Type \u0027goto [index]\u0027 to access the topics you are interested in!\").append(\"\\n\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(\"E.g. \u0027goto 1.2\u0027 will bring you to 1. Java Basics -\u003e 2. Read\").append(\"\\n\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 170,
      "RusdiHaizim": 5
    }
  },
  {
    "path": "src/main/java/javacake/commands/QuizCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.TopBar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class QuizCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static final int MAX_QUESTIONS \u003d 5;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    //private QuestionList questionList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public ArrayList\u003cQuestion\u003e chosenQuestions;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public ArrayList\u003cQuestion\u003e questionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public String filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Question.QuestionType qnType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Question prevQuestion;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public int questionCounter \u003d MAX_QUESTIONS - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int currScore \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static Profile profile;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ScoreGrade scoreGrade;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    int totalNumOfQns \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static Logic logic \u003d Logic.getInstance();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public enum ScoreGrade {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        BAD, OKAY, GOOD"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * QuizCommand constructor for topic-based quiz."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param questionType the topic of the quiz."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public QuizCommand(Question.QuestionType questionType, Boolean isCli) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        type \u003d CmdType.QUIZ;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        chosenQuestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        qnType \u003d questionType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        if (!isCli) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            this.filePath \u003d logic.getFullFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(this.filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            runGui();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static void setProfile(Profile profile) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        QuizCommand.profile \u003d profile;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * Method to get all questions in the given directory."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public void getQuestions() throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d totalNumOfQns; i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String fileContentPath \u003d filePath + \"/Qn\" + i + \".txt\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                InputStream inputStream \u003d ClassLoader.getSystemClassLoader().getResourceAsStream(fileContentPath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                BufferedReader reader \u003d new BufferedReader(new InputStreamReader(inputStream));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String sentenceRead;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                while ((sentenceRead \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    stringBuilder.append(sentenceRead).append(\"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                reader.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String[] questions \u003d stringBuilder.toString().substring(0,stringBuilder.length() - 1).split(\"\\\\|\\\\s*\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                this.questionList.add(new Question(questions[0], questions[1]));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                throw new DukeException(\"File not found!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * Randomly selects MAX_QUESTIONS number of questions of the specified topic from the list of all questions.."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public void pickQuestions() throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        ArrayList\u003cQuestion\u003e tempList \u003d questionList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        ArrayList\u003cInteger\u003e chosenNumbers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_QUESTIONS; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            int randomNum;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                randomNum \u003d rand.nextInt(tempList.size());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } while (chosenNumbers.contains(randomNum)); // prevents repeat questions"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            chosenNumbers.add(randomNum);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                chosenQuestions.add(tempList.get(randomNum));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                throw new DukeException(\"Something went wrong when loading the quiz: index out of bounds.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Executes the quiz."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @throws DukeException Error thrown when there is a problem with score calculation."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        logic.insertQueries();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        assert !logic.containsDirectory();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        this.filePath \u003d logic.getFullFilePath();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        totalNumOfQns \u003d logic.getNumOfFiles();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        getQuestions();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        pickQuestions();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_QUESTIONS; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            Question question \u003d chosenQuestions.get(i);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            ui.displayQuiz(question.getQuestion(), i + 1, MAX_QUESTIONS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            String userAnswer \u003d ui.readCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            chosenQuestions.get(i).setUserAnswer(userAnswer);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            if (question.isAnswerCorrect(userAnswer)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                currScore++;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        if (currScore \u003e MAX_QUESTIONS) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            throw new DukeException(\"Something went wrong when calculating the score:\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                    + \"Calculated score is greater than maximum possible score.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        overwriteOldScore(currScore, profile);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        ui.displayResults(currScore, MAX_QUESTIONS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        String nextCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        if (nextCommand.equals(\"review\")) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return new ReviewCommand(chosenQuestions).execute(logic, ui, storageManager);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            Command newCommand \u003d Parser.parse(nextCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return newCommand.execute(logic, ui, storageManager);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * Method to execute but for GUI."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public void runGui() throws DukeException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        totalNumOfQns \u003d logic.getNumOfFiles();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        getQuestions();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        pickQuestions();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to overwrite the old score of user,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * if it\u0027s less than the current score."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param score new score of user"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param profile profile object of user"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException error if question type is undefined"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void overwriteOldScore(int score, Profile profile) throws DukeException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        int topicIdx;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        switch (qnType) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case BASIC:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            topicIdx \u003d 0;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        case OOP:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            topicIdx \u003d 1;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case EXTENSIONS:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            topicIdx \u003d 2;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            topicIdx \u003d 3;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"Topic Idx out of bounds!\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (score \u003e profile.getContentMarks(topicIdx)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            profile.setMarks(topicIdx, score);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (!Duke.isCliMode()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                switch (topicIdx) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                case 0:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    Duke.logger.log(Level.INFO, score + \" YEET\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    TopBar.progValueA \u003d (double) score / MAX_QUESTIONS;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    TopBar.progValueB \u003d (double) score / MAX_QUESTIONS;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                case 2:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    TopBar.progValueC \u003d (double) score / MAX_QUESTIONS;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                case 3:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    TopBar.progValueD \u003d (double) score / MAX_QUESTIONS;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                TopBar.progValueT \u003d (double) profile.getTotalProgress() / (MAX_QUESTIONS * 4);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get the next Question."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return the string containing the next question"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public String getNextQuestion() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        prevQuestion \u003d chosenQuestions.get(questionCounter);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        questionCounter--;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return prevQuestion.getQuestion();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to check if answer is correct."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * If it is, then update the score."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param input the answer inputted by the user"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * @throws DukeException error thrown if user inputs wrong type of answer."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public void checkAnswer(String input) throws DukeException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        if (!isNumeric(input)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            throw new DukeException(\"Please input answers in the form of integer\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (prevQuestion.isAnswerCorrect(input)) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            currScore++;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private static boolean isNumeric(String input) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            int integer \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        } catch (NumberFormatException | NullPointerException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get the score of the quiz."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String containing what Cake said about the quiz."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException error thrown if failed to overwrite score."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String getQuizScore() throws DukeException {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"This is your score:\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        stringBuilder.append(\"    \").append(currScore).append(\" / \").append(MAX_QUESTIONS).append(\"\\n\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        if ((double)currScore / MAX_QUESTIONS \u003c\u003d 0.5) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(\"Aw, that\u0027s too bad! Try revising the topics and try again. Don\u0027t give up!\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            scoreGrade \u003d ScoreGrade.BAD;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        } else if ((double)currScore / MAX_QUESTIONS !\u003d 1.0) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(\"Almost there! Clarify some of your doubts and try again.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            scoreGrade \u003d ScoreGrade.OKAY;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(\"Congrats! Full marks, you\u0027re amazing!\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            scoreGrade \u003d ScoreGrade.GOOD;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        stringBuilder.append(\"\\nType \\\"back\\\" to go back to the table of contents.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        overwriteOldScore(currScore, profile);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 41,
      "RusdiHaizim": 93,
      "claysmilesoil": 41,
      "kishore03109": 98
    }
  },
  {
    "path": "src/main/java/javacake/commands/ReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public ReminderCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.REMIND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        ArrayList\u003cTask\u003e deadlineList \u003d storageManager.storage.getData();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        /*for (Task task : logic.getData()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (task.getTaskType() \u003d\u003d Task.TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                deadlineList.add(task);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        sortTasksByDate(deadlineList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        int idx \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (deadlineList.size() \u003e 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //ui.showMessage(\"Here are the upcoming Deadlines:\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(\"~~Upcoming Deadlines!~~\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            for (Task task : deadlineList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                stringBuilder.append(idx++).append(\".\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                stringBuilder.append(task.getFullString()).append(\"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                //ui.showMessage(stringBuilder.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //ui.showError(\"You have no deadlines as of now.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(\"You have no deadlines as of now.\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static void sortTasksByDate(ArrayList\u003cTask\u003e scheduleList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        scheduleList.sort((o1, o2) -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (o1.getDateTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else if (o2.getDateTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (o1.getDateTime().before(o2.getDateTime())) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else if (o1.getDateTime().after(o2.getDateTime())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 6,
      "RusdiHaizim": 52
    }
  },
  {
    "path": "src/main/java/javacake/commands/ResetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class ResetCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return \"Confirm reset and deletion of current Profile?\\nType \u0027yes\u0027 to confirm\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                + \"Type anything else to cancel\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 14,
      "RusdiHaizim": 2
    }
  },
  {
    "path": "src/main/java/javacake/commands/ReviewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.Question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class ReviewCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private ArrayList\u003cQuestion\u003e answeredQuestions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private boolean isExitReview \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * ReviewCommand constructor to load the list of questions to review."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param chosenQuestions list of questions from a quiz session. userAnswer in all questions must not be null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public ReviewCommand(ArrayList\u003cQuestion\u003e chosenQuestions) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        answeredQuestions \u003d chosenQuestions;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Executes the review of a quiz after a quiz is completed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @throws DukeException This method does not throw this exception."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        while (!isExitReview) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                Question question \u003d answeredQuestions.get(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                ui.displayReview(question, index + 1, answeredQuestions.size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                String next \u003d ui.readCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                if (next.trim().equals(\"back\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                    isExitReview \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                    index \u003d Integer.parseInt(next) - 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                ui.showError(\"Invalid index! Range of question: 1 - \" + answeredQuestions.size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                index \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                ui.showError(\"That isn\u0027t a number! Try again.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return new BackCommand().execute(logic, ui, storageManager);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 1,
      "RusdiHaizim": 6,
      "claysmilesoil": 53
    }
  },
  {
    "path": "src/main/java/javacake/commands/ScoreCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class ScoreCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    //3 different grades: BAD, OKAY, GOOD"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int questionGrades \u003d 3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    //4 different quizzes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int questionTypes \u003d 4;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int totalQuestionQuantum \u003d questionGrades * questionTypes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public ScoreCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Executes showing quiz score."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param logic TaskList containing current tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storageManager storage container"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return Ui.getQuizResults(storageManager.profile.getTotalProgress());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get quiz score."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param progress the user\u0027s overall quiz score"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String with quiz score message"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String getQuizResults(int progress) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        str.append(\"Here\u0027s your quiz progress so far :D\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        for (int i \u003d 0; i \u003c totalQuestionQuantum; ++i) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (i \u003c progress) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                str.append(\"#\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                str.append(\"-\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        progress \u003d progress * 100 / totalQuestionQuantum;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (progress \u003d\u003d 99) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            progress \u003d 100;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        str.append(\" \").append(progress).append(\"%\").append(\"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return str.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 4,
      "RusdiHaizim": 49
    }
  },
  {
    "path": "src/main/java/javacake/commands/ViewScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewScheduleCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewScheduleCommand(String str) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        type \u003d CmdType.VIEWSCH;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(Logic logic, Ui ui, StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (input.length() \u003d\u003d 12) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! The description of a viewschedule cannot be empty.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d input.substring(13);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Date currDate \u003d getDate(input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar calendar \u003d GregorianCalendar.getInstance();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.setTime(currDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        int currDay \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        int currMonth \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        int currYear \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e scheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        /*for (Task task : progressStack.getData()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.getTaskType() \u003d\u003d Task.TaskType.EVENT || task.getTaskType() \u003d\u003d Task.TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                calendar.setTime(task.getDateTime());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                int taskDay \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                int taskMonth \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                int taskYear \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                if (taskYear \u003d\u003d currYear \u0026\u0026 taskMonth \u003d\u003d currMonth \u0026\u0026 taskDay \u003d\u003d currDay) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    scheduleList.add(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        sortTasksByDate(scheduleList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String outputDate \u003d new SimpleDateFormat(\"dd MMM yyyy\").format(currDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (scheduleList.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showMessage(\"No tasks on \" + outputDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showMessage(\"Here are your tasks for \" + outputDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : scheduleList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                String output \u003d counter + \". \" + task.getFullString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showMessage(output);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static void sortTasksByDate(ArrayList\u003cTask\u003e scheduleList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        scheduleList.sort((o1, o2) -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            if (o1.getDateTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (o2.getDateTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (o1.getDateTime().before(o2.getDateTime())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (o1.getDateTime().after(o2.getDateTime())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date getDate(String input) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cDateGroup\u003e groups \u003d parser.parse(input);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            date \u003d groups.get(0).getDates().get(0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"   Date cannot be parsed: \" + input);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 7,
      "RusdiHaizim": 6,
      "-": 80
    }
  },
  {
    "path": "src/main/java/javacake/exceptions/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for customised Exception class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message The error message thrown by other methods"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/javacake/notes/Note.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public Note(String name) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 14
    }
  },
  {
    "path": "src/main/java/javacake/notes/NoteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class NoteList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ArrayList\u003cNote\u003e al \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Using Depth-First-Search to find all text files."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * In current directory, the text files are notes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return ArrayList storing all the notes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException If text file does not exist."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ArrayList\u003cNote\u003e compileNotes() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Stream\u003cPath\u003e walk \u003d Files.walk(Paths.get(\"data/notes/\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            List\u003cString\u003e result \u003d walk.filter(Files::isRegularFile)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    .map(x -\u003e x.toString()).collect(Collectors.toList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            for (String resultName : result) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                String processedName \u003d processFileNames(resultName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                al.add(new Note(processedName));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (NullPointerException | IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(\"Content not found!\" + \"\\nPls key \u0027back\u0027 or \u0027list\u0027 to view previous content!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return al;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Format the names to only display the last partition of file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param resultName File paths that are not processed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return String containing the last partition of file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException If index of array does not exist."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String processFileNames(String resultName) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String[] partitionsInFilePath \u003d resultName.split(\"\\\\\\\\\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return partitionsInFilePath[partitionsInFilePath.length - 1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 55
    }
  },
  {
    "path": "src/main/java/javacake/quiz/BasicQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class BasicQuestion extends Question {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    QuestionType type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public BasicQuestion(String question, String answer) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        super(question, answer);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        type \u003d QuestionType.BASIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claysmilesoil": 10
    }
  },
  {
    "path": "src/main/java/javacake/quiz/ExtensionQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class ExtensionQuestion extends Question {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    QuestionType type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public ExtensionQuestion(String question, String answer) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        super(question, answer);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        type \u003d QuestionType.EXTENSIONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claysmilesoil": 10
    }
  },
  {
    "path": "src/main/java/javacake/quiz/OopQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class OopQuestion extends Question {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    QuestionType type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public OopQuestion(String question, String answer) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        super(question, answer);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        type \u003d QuestionType.OOP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claysmilesoil": 10
    }
  },
  {
    "path": "src/main/java/javacake/quiz/Question.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private String userAnswer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public enum QuestionType {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        BASIC, OOP, EXTENSIONS, ALL"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public Question(String question, String answer) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public void setUserAnswer(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        userAnswer \u003d userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public String getUserAnswer() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return userAnswer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * Checks if user\u0027s answer to the question is correct."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param input user\u0027s inputted answer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @return true if input matches answer, false otherwise."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public boolean isAnswerCorrect(String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        return (input.trim().equals(answer));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 1,
      "claysmilesoil": 38,
      "kishore03109": 2
    }
  },
  {
    "path": "src/main/java/javacake/quiz/QuestionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class QuestionList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private ArrayList\u003cQuestion\u003e chosenQuestions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int totalNumOfBasicQns \u003d 15;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int totalNumOfOopQns \u003d 5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int totalNumOfUsefulExtensionQns \u003d 5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /** The maximum number of questions in one session of a quiz. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public static final int MAX_QUESTIONS \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private File dir \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public QuestionList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        chosenQuestions \u003d new ArrayList\u003c\u003e(MAX_QUESTIONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * Updates the current number of basic questions in the hardcoded file path and returns all the questions stored."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * @return ArrayList of all the basic questions available."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private ArrayList\u003cBasicQuestion\u003e initBasicList() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //            dir \u003d new File(getClass().getResource(\"/content/MainList\").toURI());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        } catch (URISyntaxException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //            throw new DukeException(\"Unable to load file directory\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        String filePath \u003d \"1. Java Basics/4. Quiz\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        File folder \u003d new File(dir, filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        System.out.println(folder.getPath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        for (int i \u003d 0; i \u003c listOfFiles.length; i ++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //            if (listOfFiles[i] !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //                TOTALNUMOFBASICQNS++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        ArrayList\u003cBasicQuestion\u003e basicQuestionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d totalNumOfBasicQns; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                String fileContentPath \u003d \"/content/MainList/1. Java Basics/4. Quiz/Qn\" + i + \".txt\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                InputStream in \u003d getClass().getResourceAsStream(fileContentPath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                //System.out.println(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                BufferedReader bufferedReader \u003d new BufferedReader(new InputStreamReader(in));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String currentLine;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String qns \u003d new String();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                while ((currentLine \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    qns \u003d qns + currentLine + \"\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                qns \u003d qns.substring(0,qns.length() - 1); // to remove the last appended new line character"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String[] questions \u003d qns.split(\"\\\\|\\\\s*\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                basicQuestionList.add(new BasicQuestion(questions[0], questions[1]));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                throw new DukeException(\"File not found!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return basicQuestionList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * Updates the current number of oop questions in the hardcoded file path and returns all the questions stored."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * @return ArrayList of all the oop questions available."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private ArrayList\u003cOopQuestion\u003e initOopList() throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //            dir \u003d new File(getClass().getResource(\"/content/MainList\").toURI());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        } catch (URISyntaxException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //            throw new DukeException(\"Unable to load file directory\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        String filePath \u003d \"2. Object-Oriented Programming/5. Quiz\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        File folder \u003d new File(dir, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        for (int i \u003d 0; i \u003c listOfFiles.length; i ++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //            if (listOfFiles[i] !\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //                TOTALNUMOFOOPQNS++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        ArrayList\u003cOopQuestion\u003e oopQuestionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d totalNumOfOopQns; i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                String fileContentPath \u003d \"/content/MainList/2. Object-Oriented Programming/5. Quiz/Qn\" + i + \".txt\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                InputStream in \u003d getClass().getResourceAsStream(fileContentPath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                BufferedReader bufferedReader \u003d new BufferedReader(new InputStreamReader(in));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String currentline;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String qns \u003d new String();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                while ((currentline \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    qns \u003d qns + currentline + \"\\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                qns \u003d qns.substring(0,qns.length() - 1); // to remove the last appended new line character"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String[] questions \u003d qns.split(\"\\\\|\\\\s*\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                oopQuestionList.add(new OopQuestion(questions[0], questions[1]));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                throw new DukeException(\"File not found!\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return oopQuestionList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Updates the current number of extension questions in the hardcoded file path"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * and returns all the questions stored."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * @return ArrayList of all the extension questions available."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private ArrayList\u003cExtensionQuestion\u003e initExtensionList() throws DukeException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //            dir \u003d new File(getClass().getResource(\"/content/MainList\").toURI());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        } catch (URISyntaxException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //            throw new DukeException(\"Unable to load file directory\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        String filePath \u003d \"3. Extensions/4. Quiz\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        File folder \u003d new File(dir, filePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        for (int i \u003d 0; i \u003c listOfFiles.length; i ++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //            if (listOfFiles[i] !\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //                TOTALNUMOFUSEFULEXTENSIONQNS++;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        ArrayList\u003cExtensionQuestion\u003e extensionQuestionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d totalNumOfUsefulExtensionQns; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                String fileContentPath \u003d \"/content/MainList/3. Extensions/4. Quiz/Qn\" + i + \".txt\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                InputStream in \u003d getClass().getResourceAsStream(fileContentPath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                BufferedReader bufferedReader \u003d new BufferedReader(new InputStreamReader(in));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String currentLine; "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String qns \u003d new String();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                while ((currentLine \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    qns \u003d qns + currentLine + \"\\n\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                qns \u003d qns.substring(0,qns.length() - 1); // to remove the last appended new line character"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String[] questions \u003d qns.split(\"\\\\|\\\\s*\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                extensionQuestionList.add(new ExtensionQuestion(questions[0], questions[1]));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                throw new DukeException(\"File not found!\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return extensionQuestionList;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Randomly selects MAX_QUESTIONS number of questions from the list of all questions."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @return ArrayList of Question of size MAX_QUESTIONS."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public ArrayList\u003cQuestion\u003e pickQuestions() throws DukeException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        ArrayList\u003cQuestion\u003e allQuestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        allQuestions.addAll(initBasicList());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        allQuestions.addAll(initOopList());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        allQuestions.addAll(initExtensionList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        assert (allQuestions.size() \u003e\u003d MAX_QUESTIONS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        ArrayList\u003cInteger\u003e chosenNumbers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_QUESTIONS; i++) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            int randomNum;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                randomNum \u003d rand.nextInt(allQuestions.size());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } while (chosenNumbers.contains(randomNum)); // prevents repeat questions"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            chosenNumbers.add(randomNum);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                chosenQuestions.add(allQuestions.get(randomNum));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                throw new DukeException(\"Something went wrong when loading the quiz: index out of bounds.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return chosenQuestions;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Randomly selects MAX_QUESTIONS number of questions of the specified topic from the list of all questions."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param type QuestionType of questions to be selected."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @return ArrayList of Question of specified topic of size MAX_QUESTIONS."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public ArrayList\u003cQuestion\u003e pickQuestions(Question.QuestionType type) throws DukeException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        ArrayList\u003cQuestion\u003e tempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        case BASIC:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            assert (initBasicList().size() \u003e\u003d MAX_QUESTIONS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            tempList.addAll(initBasicList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        case OOP:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            assert (initOopList().size() \u003e\u003d MAX_QUESTIONS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            tempList.addAll(initOopList());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        case EXTENSIONS:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            assert (initExtensionList().size() \u003e\u003d MAX_QUESTIONS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            tempList.addAll(initExtensionList());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            tempList.addAll(initBasicList());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            tempList.addAll(initOopList());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            tempList.addAll(initExtensionList());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            assert (tempList.size() \u003e\u003d MAX_QUESTIONS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        ArrayList\u003cInteger\u003e chosenNumbers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_QUESTIONS; i++) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            int randomNum;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                randomNum \u003d rand.nextInt(tempList.size());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } while (chosenNumbers.contains(randomNum)); // prevents repeat questions"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            chosenNumbers.add(randomNum);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                chosenQuestions.add(tempList.get(randomNum));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                throw new DukeException(\"Something went wrong when loading the quiz: index out of bounds.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return chosenQuestions;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 71,
      "claysmilesoil": 103,
      "kishore03109": 59
    }
  },
  {
    "path": "src/main/java/javacake/storage/Profile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class Profile {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static String filepath \u003d \"data/save/savefile.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ArrayList\u003cInteger\u003e topicsDone \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public Profile() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this(\"data/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Constructor for profile."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param filename String of filepath"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException when unable to create profile"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public Profile(String filename) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            File file \u003d new File(\"data/save/savefile.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            Duke.logger.log(Level.INFO,\"Filepath: \" + filepath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (!file.getParentFile().getParentFile().exists()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    file.getParentFile().getParentFile().mkdir();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    file.getParentFile().mkdir();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    file.createNewFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    initialiseUser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    System.out.println(\"A\" + file.getParentFile().getParentFile().getPath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else if (!file.getParentFile().exists()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    file.getParentFile().mkdir();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    file.createNewFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    initialiseUser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    System.out.println(\"B\" + file.getParentFile().getPath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else if (!file.exists()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    file.createNewFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    initialiseUser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    System.out.println(\"C\" + file.getPath());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    Duke.logger.log(Level.INFO, filepath + \" is found!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                System.out.println(\"before reader\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                throw new DukeException(\"Failed to create new file\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(filepath));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            int count \u003d -1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (count \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    username \u003d line;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    topicsDone.add(Integer.parseInt(line));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ++count;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(\"after reader\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"Failed to close reader\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to hard reset profile."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static void resetProfile() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(\"deleting: \" + file.getPath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to overwrite Username."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param oldname old username"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException when unable to write progress"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void overwriteName(String oldname) throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        username \u003d oldname;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        writeProgress();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to set topic score."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param contentIdx idx of content"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException when unable to write progress"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void setMarks(int contentIdx, int marks) throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        topicsDone.set(contentIdx, marks);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        writeProgress();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get topic score."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param contentIdx idx of content"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return score of the specified topic"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public int getContentMarks(int contentIdx) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return topicsDone.get(contentIdx);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get total progress."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return total progress status"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public int getTotalProgress() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        for (int i : topicsDone) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            count +\u003d i;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void initialiseUser() throws DukeException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        username \u003d \"NEW_USER_!@#\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            PrintWriter out \u003d new PrintWriter(filepath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.println(username);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            for (int i \u003d 0; i \u003c 4; ++i) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                out.println(\"0\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"Cannot initialise file\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void writeProgress() throws DukeException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            PrintWriter out \u003d new PrintWriter(filepath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.println(username);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            for (int i : topicsDone) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                out.println(\"\" + i);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"Cannot initialise file\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 2,
      "RusdiHaizim": 156
    }
  },
  {
    "path": "src/main/java/javacake/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.notes.Note;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import org.apache.commons.io.FileUtils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private int stringBuffer \u003d 7;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static ArrayList\u003cTask\u003e tempTaskData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static ArrayList\u003cNote\u003e noteCollection \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static TaskList currentTaskData;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static String defaultFilePath \u003d \"data/\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private TaskType dataType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public enum TaskType {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        TODO, DEADLINE, TODO_DAILY, TODO_WEEKLY, TODO_MONTHLY"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Constructor for storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public Storage() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this.currentTaskData \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        //Initialise new deadline file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            File tasksFile \u003d new File(\"data/tasks/deadline.txt\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            File notesFile \u003d new File(\"data/notes/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            filepath \u003d tasksFile.getPath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Duke.logger.log(Level.INFO,\"Filepath: \" + filepath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            generateFolder(notesFile);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (!tasksFile.getParentFile().getParentFile().exists()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                tasksFile.getParentFile().getParentFile().mkdir();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                tasksFile.getParentFile().mkdir();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                tasksFile.createNewFile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                System.out.println(\"A\" + tasksFile.getParentFile().getParentFile().getPath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else if (!tasksFile.getParentFile().exists()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                tasksFile.getParentFile().mkdir();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                tasksFile.createNewFile();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                System.out.println(\"B\" + tasksFile.getParentFile().getPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else if (!tasksFile.exists()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                tasksFile.createNewFile();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                System.out.println(\"C\" + tasksFile.getPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                Duke.logger.log(Level.INFO, filepath + \" is found!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Duke.logger.log(Level.WARNING, \"Unable to create deadline file\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(\"Failed to create storage.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(filepath));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                StringTokenizer stringTokenizer \u003d new StringTokenizer(line, \"|\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                int count \u003d 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                StringBuilder finalOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                String currStr;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                boolean isChecked \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                while (stringTokenizer.hasMoreTokens()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    currStr \u003d stringTokenizer.nextToken();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    if (count \u003d\u003d 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        if (currStr.equals(\"D\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                            finalOutput \u003d new StringBuilder(\"deadline \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                            this.dataType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    } else if (count \u003d\u003d 2 \u0026\u0026 currStr.equals(\"✓\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        isChecked \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    } else if (count \u003d\u003d 3) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        finalOutput.append(currStr);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    } else if (count \u003d\u003d 4) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        if (this.dataType \u003d\u003d TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                            finalOutput.append(\" /by \").append(currStr);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                if (!isChecked) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    TaskList.runDeadline(tempTaskData, finalOutput.toString(), TaskList.TaskState.NOT_DONE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    this.currentTaskData.add(tempTaskData.get(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    tempTaskData.clear();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    TaskList.runDeadline(tempTaskData, finalOutput.toString(), TaskList.TaskState.DONE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    this.currentTaskData.add(tempTaskData.get(0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    tempTaskData.clear();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Duke.logger.log(Level.WARNING, \"Unable to find deadline file\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(\"Failed to create storage.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        //Initialise new notes directory"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to hard reset profile."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static void resetStorage() throws DukeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            FileUtils.deleteDirectory(new File(defaultFilePath));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            tempTaskData.clear();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            currentTaskData.getData().clear();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"Unable to reset Storage\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Generates starting folder when program starts."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param sampleFile File that is auto-generated when program starts."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException If file does not exist."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static void generateFolder(File sampleFile) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (!sampleFile.getParentFile().exists()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sampleFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            sampleFile.mkdirs();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (!sampleFile.exists()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            sampleFile.mkdirs();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Initialises the \u0027data\u0027 based on previous data"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * from filepath."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param filepath The storage path of the saved data"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException Exception when file is not found"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public Storage(String filepath) throws DukeException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Loads the currently initialised ArrayList of Tasks."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return ArrayList of Tasks that has been initialised"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return tempTaskData;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Writes current taskList onto the save file."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param tasks ArrayList of Tasks needing to be written"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     *              onto the save file"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @throws DukeException when no file is found"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void write(ArrayList\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            PrintWriter out \u003d new PrintWriter(filepath);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            for (Task task : tempTaskData) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                out.println(doInternalWrite(task));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                out.println(doInternalWrite(task));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(\"No file found\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String doInternalWrite(Task task) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String st1;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        st1 \u003d task.toString().substring(1, 2);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String st4 \u003d null;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        //Appends extra task details for all task types excent \u0027Todo\u0027"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (st1.equals(\"D\") || st1.equals(\"E\") || st1.equals(\"d\") || st1.equals(\"m\") || st1.equals(\"w\")) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            st4 \u003d task.getExtra();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String st2;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        st2 \u003d task.getStatusIcon();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String st3;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        st3 \u003d task.toString().substring(3);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (st4 !\u003d null \u0026\u0026 st3.contains(st4)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            st3 \u003d st3.replace(st4, \"\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            //STRING_BUFFER removes the \" (by: )\" / \" (at: )\" from st3"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            st3 \u003d st3.substring(0, st3.length() - stringBuffer);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        str.append(st1);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        str.append(\"|\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        str.append(st2);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        str.append(\"|\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        str.append(st3);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (st4 !\u003d null) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            str.append(\"|\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            str.append(st4);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return str.toString();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Method to get size of internal data."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return size of internal data"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static int getInternalDataSize() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return tempTaskData.size();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public ArrayList\u003cTask\u003e getData() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return this.currentTaskData.getData();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 188,
      "RusdiHaizim": 35
    }
  },
  {
    "path": "src/main/java/javacake/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public Storage storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public Profile profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public StorageManager() throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this.profile \u003d new Profile();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 13
    }
  },
  {
    "path": "src/main/java/javacake/storage/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.RecurringTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ArrayList\u003cTask\u003e data;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public enum TaskState {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        NOT_DONE, DONE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Initialises data from current taskList being passed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param taskList the existing taskList loaded from save file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        data \u003d new ArrayList\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Creates a new arrayList for the taskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this.data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get the Task from index \u0027position\u0027."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param position Index of task in taskList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return Task at index \u0027position\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Shows error when bounds are exceeded"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public Task get(int position) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (position \u003e\u003d data.size() || position \u003c 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"Out of bounds of data!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return data.get(position);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to remove the Task from index \u0027position\u0027."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param position Index of task in taskList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Shows error when bounds are exceeded"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void remove(int position) throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (position \u003e\u003d data.size() || position \u003c 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"Task is not within list size!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        data.remove(position);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get the current size of data."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return Size of current data"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return data.size();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get the taskList."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return ArrayList of current tasks"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public ArrayList\u003cTask\u003e getData() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this.data.add(task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Creates a new \u0027toBeDone\u0027 task, before adding it to current list,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * then returning the output by Duke."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param data ArrayList of Tasks that\u0027s currently being stored"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param input Command input by user"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param state The type of output needed:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              0 : Needs to return a string"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              1 : Returns null string with unchecked task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              2 : Returns null string with checked task"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String which highlights what Duke processed"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String runTodo(ArrayList\u003cTask\u003e data, String input, TaskList.TaskState state) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d input.substring(5);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Task tempTask \u003d new ToDo(input);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return getString(data, state, tempTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Creates a new \u0027Deadline\u0027 task, before adding it to current list,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * then returning the output by Duke."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param data ArrayList of Tasks that\u0027s currently being stored"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param input Command input by user"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param state The type of output needed:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              0 : Needs to return a string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              1 : Returns null string with unchecked task"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              2 : Returns null string with checked task"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String which highlights what Duke processed"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String runDeadline(ArrayList\u003cTask\u003e data, String input, TaskState state) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (input.length() \u003d\u003d 8) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"[!] No task description\\nPlease input:\\n\u0027deadline TASK /by TASK_DATE\u0027\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d input.substring(9);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        int startOfBy \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (startOfBy \u003c\u003d 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"[!] No task description\\nPlease input:\\n\u0027deadline TASK /by TASK_DATE\u0027\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (input.charAt(startOfBy - 1) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"[!] Please leave space!\\nPlease input:\\n\u0027deadline TASK /by TASK_DATE\u0027\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String tt1 \u003d input.substring(0, startOfBy - 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (startOfBy + 4 \u003e\u003d input.length()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"[!] No date parameter!\\nPlease input:\\n\u0027deadline TASK /by TASK_DATE\u0027\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String tt2 \u003d input.substring(startOfBy + 4);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Task tempTask \u003d new Deadline(tt1, tt2);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return getString(data, state, tempTask);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to run recurring tasks."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param data ArrayList of Tasks that\u0027s currently being stored"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param input Command input by user"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param state The type of output needed:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              0 : Needs to return a string"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              1 : Returns null string with unchecked task"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              2 : Returns null string with checked task"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param freq daily, weekly or monthly"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String which highlights what Duke processed"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Shows error when cannot parse date"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String runRecurring(ArrayList\u003cTask\u003e data, String input,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                                      TaskList.TaskState state, String freq) throws DukeException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d input.substring(5).trim();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String tt1;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String tt2;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        int token;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        token \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        tt1 \u003d input.substring(0, token - 1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (freq.equals(\"daily\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            tt2 \u003d input.substring(token + 7);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (freq.equals(\"weekly\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            tt2 \u003d input.substring(token + 8);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            tt2 \u003d input.substring(token + 9);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        // parse date here"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Date startDate \u003d parseDate(tt2);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Task tempTask \u003d new RecurringTask(tt1, startDate, freq);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return getString(data, state, tempTask);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to return parsed Date."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param tt2 String to be parsed into Date"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return Date parsed from the string"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException If date cannot be parsed"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static Date parseDate(String tt2) throws DukeException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            com.joestelmach.natty.Parser parser \u003d new com.joestelmach.natty.Parser();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            List\u003cDateGroup\u003e groups \u003d parser.parse(tt2);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return groups.get(0).getDates().get(0);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"[!] Date cannot be parsed: \" + tt2);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static String getString(ArrayList\u003cTask\u003e data, TaskList.TaskState state, Task tempTask) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (state \u003d\u003d TaskList.TaskState.DONE) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            tempTask.markAsDone();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        data.add(tempTask);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Got it. I\u0027ve added this task: \").append(\"\\n   \");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(tempTask.getFullString()).append(\"\\n\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Now you have \")"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                .append(data.size() + Storage.getInternalDataSize()).append(\" tasks in the list.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 195
    }
  },
  {
    "path": "src/main/java/javacake/tasks/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date dateNow;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialises the description of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing description"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *                    of the task inputted by user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param by The details of when task is to be done"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline(String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        taskType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cDateGroup\u003e groups \u003d parser.parse(by);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            dateNow \u003d groups.get(0).getDates().get(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"[!] Date cannot be parsed: \" + by);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the task type in [] format and"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * its description."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing type and description"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[D]\" + description + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFullString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[D][\" + getStatusIcon() + \"] \" + description + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to get date of task if possible."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing the date of Task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateNow;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to get details of extra details"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * concerning the task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing details of when task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         is to be done by"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getExtra() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public void changeDate(String newDate) { "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        this.by \u003d newDate; "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 4,
      "-": 65,
      "kishore03109": 4
    }
  },
  {
    "path": "src/main/java/javacake/tasks/RecurringTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class RecurringTask extends ToDo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Frequency frequency;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String freq;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public enum Frequency {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        DAILY, WEEKLY, MONTHLY"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for recurring tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Task description"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDateTime Starting date of task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param frequency daily, weekly or monthly"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public RecurringTask(String description, Date startDateTime, String frequency) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.date \u003d startDateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            setFrequency(frequency);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            //e.getMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        //update date if it is past current date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        while (date.before(currentDate)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            unmark();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            c.setTime(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (this.frequency) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            case DAILY:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                c.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            case WEEKLY:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                c.add(Calendar.WEEK_OF_YEAR, 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            case MONTHLY:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                c.add(Calendar.MONTH, 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            date \u003d c.getTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setFrequency(String freq) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (freq) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"daily\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            this.frequency \u003d Frequency.DAILY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            this.freq \u003d \"d\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"weekly\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            this.frequency \u003d Frequency.WEEKLY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            this.freq \u003d \"w\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"monthly\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            this.frequency \u003d Frequency.MONTHLY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            this.freq \u003d \"m\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Please enter a frequency: daily, weekly or monthly\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"[\" + freq + \"]\" + description);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFullString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"[R][\" + freq + \"]\" + \"[\" + getStatusIcon() + \"] \" + description + \" (at: \" + date + \")\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getExtra() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.date.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to get frequency."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Frequency type"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Frequency getFrequency() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.frequency;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 2,
      "-": 100
    }
  },
  {
    "path": "src/main/java/javacake/tasks/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public enum TaskType {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        TODO, DEADLINE"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialises description of task and sets it to !isDone."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *                    of the task inputted by user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the status icon based on \u0027isDone\u0027."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing the status icon"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"✓\" : \"✗\"); //return tick or X symbols"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to check whether task is done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true when task is done, false otherwise"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFullString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to mark task as done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void unmark() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract Date getDateTime();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String getExtra();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public abstract void changeDate(String newDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 2,
      "-": 61,
      "kishore03109": 2
    }
  },
  {
    "path": "src/main/java/javacake/tasks/ToDo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialises the description of the task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing description"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     *                    of the task inputted by user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the task type in [] format and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * its description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing type and description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T]\" + description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFullString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T][\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * No extra in this task type."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Null String"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getExtra() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * No date in this task type."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Null String"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * Empty method as Event does not have date."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * @param newDate New scheduled date for task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public void changeDate(String newDate) { "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 1,
      "-": 48,
      "kishore03109": 8
    }
  },
  {
    "path": "src/main/java/javacake/ui/AvatarScreen.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.Animation;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class AvatarScreen extends VBox {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ImageView avatarImage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public enum AvatarMode {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        HAPPY, SAD, POUT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Image avatarHappy1 \u003d new Image(this.getClass().getResourceAsStream(\"/images/avatar/hapop.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Image avatarHappy2 \u003d new Image(this.getClass().getResourceAsStream(\"/images/avatar/hapclos.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Image avatarSad1 \u003d new Image(this.getClass().getResourceAsStream(\"/images/avatar/cryop.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Image avatarSad2 \u003d new Image(this.getClass().getResourceAsStream(\"/images/avatar/cryclos.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Image avatarPout1 \u003d new Image(this.getClass().getResourceAsStream(\"/images/avatar/poutop.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Image avatarPout2 \u003d new Image(this.getClass().getResourceAsStream(\"/images/avatar/poutclos.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    List\u003cImage\u003e images \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int imageIndex \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int timeFrame \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static AvatarMode avatarMode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void initialiseList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        images.add(avatarSad2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        images.add(avatarSad1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        images.add(avatarHappy2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        images.add(avatarHappy1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        images.add(avatarPout2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        images.add(avatarPout1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Constructor for setting Avatar\u0027s face."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param type Type of face Avatar makes"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public AvatarScreen(AvatarMode type) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/AvatarScreen.fxml\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        initialiseList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        avatarMode \u003d type;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        setStyleLoop();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to set Avatar."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param type Type of face Avatar makes"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return AvatarScreen object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static AvatarScreen setAvatar(AvatarMode type) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return new AvatarScreen(type);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void setStyleLoop() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Timeline timeline \u003d new Timeline(new KeyFrame(Duration.millis(200), ev -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (avatarMode \u003d\u003d AvatarMode.HAPPY) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (timeFrame % 16 \u003c\u003d 14) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    avatarImage.setImage(images.get(3));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    avatarImage.setImage(images.get(2));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else if (avatarMode \u003d\u003d AvatarMode.SAD) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (timeFrame % 16 \u003c\u003d 14) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    avatarImage.setImage(images.get(1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    avatarImage.setImage(images.get(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (timeFrame % 16 \u003c\u003d 14) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    avatarImage.setImage(images.get(5));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    avatarImage.setImage(images.get(4));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            timeFrame \u003d (timeFrame + 1) % 16;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 101
    }
  },
  {
    "path": "src/main/java/javacake/ui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.Animation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static boolean isSet \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static boolean isScrollingText \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String displayText \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private char[] charList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int charCount \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Timeline textTimeline;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String deadlineTextBase \u003d \"Deadlines:\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to create dialogbox with image."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param text text to display from Cake"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param img Image of Cake"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this.setPrefWidth(675);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        setStyleLoop();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        displayText \u003d text;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        charList \u003d displayText.toCharArray();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        dialog.setText(displayText.substring(0, 1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        setScrollText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to create dialogbox without image."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param text text to display from Cake"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private DialogBox(String text) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        this.setPrefWidth(282);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        dialog.setPrefWidth(280);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        setStyleLoop();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        displayText \u003d text;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        charList \u003d displayText.toCharArray();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        setScrollText();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        dialog.setText(displayText.substring(0, 1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void setScrollText() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        textTimeline \u003d new Timeline(new KeyFrame(Duration.millis(10), ev -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (isScrollingText) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (charCount !\u003d charList.length) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    charCount++;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    dialog.setText(displayText.substring(0, charCount));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                dialog.setText(displayText);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        textTimeline.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        textTimeline.play();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void setStyleLoop() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (MainWindow.isLightMode) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            this.setStyle(\"-fx-background-color: #EE8EC7;\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    + \" -fx-background-radius: 20;\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    + \" -fx-border-color: white;\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    + \" -fx-border-radius: 20;\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            dialog.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            this.setStyle(\"-fx-background-color: #CCC;\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    + \" -fx-background-radius: 20;\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    + \" -fx-border-color: grey;\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    + \" -fx-border-radius: 20;\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            dialog.setStyle(\"-fx-text-fill: black\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Timeline timeline \u003d new Timeline(new KeyFrame(Duration.millis(50), ev -\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (charCount \u003d\u003d charList.length) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                textTimeline.stop();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (MainWindow.isLightMode) { //change to light mode"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                //if (isSet) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                this.setStyle(\"-fx-background-color: #EE8EC7;\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + \" -fx-background-radius: 20;\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + \" -fx-border-color: white;\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + \" -fx-border-radius: 20;\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                dialog.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                isSet \u003d false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                //}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (!MainWindow.isLightMode) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                //if (!isSet) { //change to dark mode"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                this.setStyle(\"-fx-background-color: #CCC;\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + \" -fx-background-radius: 20;\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + \" -fx-border-color: grey;\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        + \" -fx-border-radius: 20;\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                dialog.setStyle(\"-fx-text-fill: black\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                isSet \u003d false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                //}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to obtain DialogBox."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param text text to display from Cake"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param img Image of Cake"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return a DialogBox containing both of them"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to obtain DialogBox."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param text text to display from Cake"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param img Image of Cake"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return a DialogBox containing both of them"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get TaskDialog."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param text text to display from Cake"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return a DialogBox containing text"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static DialogBox getTaskDialog(String text) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return new DialogBox(text);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 58,
      "RusdiHaizim": 133
    }
  },
  {
    "path": "src/main/java/javacake/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.EditNoteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.QuizCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.quiz.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.Animation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.concurrent.atomic.AtomicBoolean;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.concurrent.atomic.AtomicLong;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Button sendButton \u003d new Button();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private HBox topBar;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private VBox avatarScreen;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private VBox avatarDialog;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ScrollPane taskScreen;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private VBox taskContainer;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ScrollPane noteScreen;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private VBox noteContainer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Button themeModeButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static boolean isLightMode \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static boolean isChanged \u003d false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static boolean doneDialog \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/padoru.png\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private QuizCommand quizCommand;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private boolean isQuiz \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private boolean isStarting \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private boolean isTryingReset \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private boolean isWritingNote \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private boolean isExit \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String input \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String response \u003d \"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Initialise the Main Window launched."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void initialize()  throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        taskScreen.vvalueProperty().bind(taskContainer.heightProperty());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        noteScreen.vvalueProperty().bind(noteContainer.heightProperty());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        avatarScreen.getChildren().add(AvatarScreen.setAvatar(AvatarScreen.AvatarMode.HAPPY));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        topBar.getChildren().add(new TopBar());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        TopBar.setUpProgressBars();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (duke.isFirstTimeUser) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            response \u003d Ui.showWelcomeMsgPhaseA(duke.isFirstTimeUser);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            showContentContainer();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            response \u003d Ui.showWelcomeMsgPhaseA(duke.isFirstTimeUser)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    + Ui.showWelcomeMsgPhaseB(duke.isFirstTimeUser, duke.userName, duke.userProgress);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            showContentContainer();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        setAvatarDialogLoop();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        showListNotesBox();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        showRemindersBox();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        playGuiModeLoop();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void setStage(Stage stage) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        primaryStage \u003d stage;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //CHECKSTYLE:OFF"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            input \u003d userInput.getText();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            // get input first, don\u0027t get response first..."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            Duke.logger.log(Level.INFO, \"INPUT: \" + input);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            DialogBox.isScrollingText \u003d true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            AvatarScreen.avatarMode \u003d AvatarScreen.AvatarMode.HAPPY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (input.contains(\"exit\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                System.out.println(\"EXIT\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                Duke.logger.log(Level.INFO, \"EXITING PROGRAM!\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                // find out if exit condition"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                isExit \u003d true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else if (input.contains(\"listnote\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                Duke.logger.log(Level.INFO, \"`listnote` command\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                showListNotesBox();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else if (input.contains(\"createnote\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                Duke.logger.log(Level.INFO, \"`createnote` command\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                showContentContainer();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                showListNotesBox();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else if (isStarting \u0026\u0026 duke.isFirstTimeUser) { //set up new username"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                System.out.println(\"start and first\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                Duke.logger.log(Level.INFO, \"New user initialising...\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                handleStartAndFirstTime();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else if (isTryingReset) { //confirmation of reset"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                Duke.logger.log(Level.INFO, \"isTryingReset...\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                System.out.println(\"resetting time\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                handleResetConfirmation();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else if (isWritingNote) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                Duke.logger.log(Level.INFO, \"isWritingNote...\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                DialogBox.isScrollingText \u003d false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                if (input.equals(\"/save\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    isWritingNote \u003d false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    response \u003d EditNoteCommand.successSaveMessage();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    response \u003d EditNoteCommand.writeSaveGui(input);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                showContentContainer();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                Duke.logger.log(Level.INFO, \"executing normal(else) mode!\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (isDeadlineRelated()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    //handles \"deadline\" and \"reminder\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    Duke.logger.log(Level.INFO, \"deadline setting\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else if (isFirstQuiz()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    Duke.logger.log(Level.INFO, \"First Quiz Incoming!\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else if (isFirstResetRequest()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    Duke.logger.log(Level.INFO, \"Reset command executed!\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                } else if (!isQuiz || isStarting) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    //default start: finding of response"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    isStarting \u003d false;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    Duke.logger.log(Level.INFO, \"Response: \" + response);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    //response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    if (response.contains(\"!@#_EDIT_NOTE\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        Duke.logger.log(Level.INFO, \"Editing note initialise!\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        isWritingNote \u003d true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        response \u003d EditNoteCommand.getHeadingMessage();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        DialogBox.isScrollingText \u003d false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        showContentContainer();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        EditNoteCommand.clearTextFileContent();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        Duke.logger.log(Level.INFO, \"Normal commands mode!\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        System.out.println(\"starting BUT not firsttime\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        showContentContainer();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else if (isQuiz) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    //Must be quizCommand: checking of answers"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    Duke.logger.log(Level.INFO, \"Quiz Mode!\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    System.out.println(\"quiz answer checking\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    DialogBox.isScrollingText \u003d false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    handleGuiQuiz();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    showContentContainer();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                //System.out.println(\"End-\u003eNext\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            response \u003d e.getMessage();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            showContentContainer();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            Duke.logger.log(Level.WARNING, e.getMessage());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //CHECKSTYLE:ON"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void handleGuiMode() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (isLightMode) { //switches to Dark theme"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            isLightMode \u003d false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            this.setStyle(\"-fx-background-color: black\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            sendButton.setStyle(\"-fx-background-color: #333; -fx-border-color: black;\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            themeModeButton.setStyle(\"-fx-background-color: #333; -fx-border-color: black;\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            topBar.setStyle(\"-fx-background-color: #BBB; -fx-border-color: grey;\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            userInput.setStyle(\"-fx-background-color: #9999; -fx-background-radius: 10;\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            dialogContainer.setStyle(\"-fx-background-color: grey;\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            avatarScreen.setStyle(\"-fx-background-color: grey;\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            taskContainer.setStyle(\"-fx-background-color: grey;\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            noteContainer.setStyle(\"-fx-background-color: grey;\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            avatarDialog.setStyle(\"-fx-background-color: grey;\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else { //switches to Light theme"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            isLightMode \u003d true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            this.setStyle(\"-fx-background-color: white\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            sendButton.setStyle(\"-fx-background-color: #FF9EC7; -fx-border-color: white;\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            themeModeButton.setStyle(\"-fx-background-color: #FF9EC7; -fx-border-color: white;\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            topBar.setStyle(\"-fx-background-color: #EE8EC7; -fx-border-color: white;\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            userInput.setStyle(\"-fx-background-color: #EE8EC7;\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    + \" -fx-background-radius: 10;\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            dialogContainer.setStyle(\"-fx-background-color: pink;\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            avatarScreen.setStyle(\"-fx-background-color: #FEE;\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            taskContainer.setStyle(\"-fx-background-color: pink;\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            noteContainer.setStyle(\"-fx-background-color: pink;\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            avatarDialog.setStyle(\"-fx-background-color: #FEE;\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String getFirstQn(String cmdMode) throws DukeException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        switch (cmdMode) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case \"!@#_QUIZ_1\":"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            quizCommand \u003d new QuizCommand(Question.QuestionType.BASIC, false);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case \"!@#_QUIZ_2\":"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            quizCommand \u003d new QuizCommand(Question.QuestionType.OOP, false);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case \"!@#_QUIZ_3\":"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            quizCommand \u003d new QuizCommand(Question.QuestionType.EXTENSIONS, false);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case \"!@#_QUIZ_4\":"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            quizCommand \u003d new QuizCommand(Question.QuestionType.ALL, false);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        return quizCommand.getNextQuestion();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        showContentContainer();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        PauseTransition pause \u003d new PauseTransition(Duration.seconds(2));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        pause.setOnFinished(e -\u003e primaryStage.hide());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        pause.play();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void handleStartAndFirstTime() throws DukeException {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        duke.userName \u003d input;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        duke.storageManager.profile.overwriteName(duke.userName);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        response \u003d Ui.showWelcomeMsgPhaseB(duke.isFirstTimeUser, duke.userName, duke.userProgress);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        showContentContainer();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        isStarting \u003d false;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void handleResetConfirmation() throws DukeException {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (input.equals(\"yes\")) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //resets"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            duke.storageManager.profile.resetProfile();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            duke.storageManager.storage.resetStorage();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            duke \u003d new Duke();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //            duke.profile \u003d new Profile();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            duke.userProgress \u003d duke.storageManager.profile.getTotalProgress();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            duke.userName \u003d duke.storageManager.profile.getUsername();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            duke.isFirstTimeUser \u003d true;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            showRemindersBox();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            response \u003d \"Reset confirmed!\\nPlease type in new username:\\n\";"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            TopBar.resetProgress();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            isStarting \u003d true;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            Duke.logger.log(Level.INFO, \"Reset Confirmed!\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            response \u003d \"Reset cancelled.\\nType \u0027list\u0027 to get list of available commands.\";"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            Duke.logger.log(Level.INFO, \"Reset Rejected!\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        showContentContainer();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        isTryingReset \u003d false;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void handleGuiQuiz() throws DukeException {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        quizCommand.checkAnswer(input);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (quizCommand.questionCounter \u003e\u003d 0) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            response \u003d quizCommand.getNextQuestion();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            isQuiz \u003d false;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            DialogBox.isScrollingText \u003d true;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            response \u003d quizCommand.getQuizScore();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            doneDialog \u003d true;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (quizCommand.scoreGrade \u003d\u003d QuizCommand.ScoreGrade.BAD) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                AvatarScreen.avatarMode \u003d AvatarScreen.AvatarMode.POUT;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else if (quizCommand.scoreGrade \u003d\u003d QuizCommand.ScoreGrade.OKAY) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                AvatarScreen.avatarMode \u003d AvatarScreen.AvatarMode.SAD;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void showContentContainer() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        dialogContainer.getChildren().clear();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void showTaskContainer() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        taskContainer.getChildren().clear();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        taskContainer.getChildren().add("
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                DialogBox.getTaskDialog(response));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void showNoteContainer() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        noteContainer.getChildren().clear();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        noteContainer.getChildren().add("
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                DialogBox.getTaskDialog(response));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void playGuiModeLoop() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Timeline timeline \u003d new Timeline(new KeyFrame(Duration.millis(50), ev -\u003e {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (isLightMode \u0026\u0026 isChanged) { //change to dark mode"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                handleGuiMode();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                isChanged \u003d false;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (!isLightMode \u0026\u0026 isChanged) { //change to light mode"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                handleGuiMode();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                isChanged \u003d false;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private boolean isDeadlineRelated() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (input.length() \u003e\u003d 8 \u0026\u0026 input.substring(0, 8).equals(\"deadline\")) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(response);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (!response.contains(\"[!]\")) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                response \u003d duke.getResponse(\"reminder\");"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                System.out.println(response);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                //CHECKSTYLE:OFF"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                response \u003d response.replaceAll(\"✓\", \"\\u2713\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                response \u003d response.replaceAll(\"✗\", \"\\u2717\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                //CHECKSTYLE:ON"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                showTaskContainer();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                Duke.logger.log(Level.INFO, \"Adding deadlines setting\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                response +\u003d \"\\nType \u0027reminder\u0027 to view deadlines\";"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                showTaskContainer();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                Duke.logger.log(Level.WARNING, \"Deadline is not properly parsed!\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"reminder\")) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            response \u003d \"Reminders are shown over there! \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e\u003e\u003e\\n\";"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            showContentContainer();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            showRemindersBox();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            Duke.logger.log(Level.INFO, \"Reminder setting\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private boolean isFirstQuiz() throws DukeException {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (response.contains(\"!@#_QUIZ\")) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //checks for first execution of quizCommand"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            isQuiz \u003d true;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            Duke.logger.log(Level.INFO, \"isFirstQuiz(): \" + response);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            response \u003d getFirstQn(response);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            DialogBox.isScrollingText \u003d false;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            showContentContainer();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private boolean isFirstResetRequest() {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (response.contains(\"Confirm reset\")) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //checks if resetCommand was executed"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            Duke.logger.log(Level.INFO, \"isFirstResetRequest(): Awaiting confirmation of reset\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            isTryingReset \u003d true;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            showContentContainer();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void showListNotesBox() throws DukeException {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        response \u003d Ui.showNoteList(duke.storageManager);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        showNoteContainer();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void showRemindersBox() {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        response \u003d Ui.showDeadlineReminder(duke.storageManager);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //CHECKSTYLE:OFF"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        response \u003d response.replaceAll(\"✓\", \"\\u2713\");"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        response \u003d response.replaceAll(\"✗\", \"\\u2717\");"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //CHECKSTYLE:ON"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        showTaskContainer();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void setAvatarDialogLoop() {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        ArrayList\u003cString\u003e listToSay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        setList(listToSay);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        avatarDialog.getChildren().add("
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                DialogBox.getTaskDialog(listToSay.get(0)));"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        AtomicLong counterTicks \u003d new AtomicLong();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        AtomicBoolean isSet \u003d new AtomicBoolean();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Timeline timeline \u003d new Timeline(new KeyFrame(Duration.millis(200), ev -\u003e {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (counterTicks.get() \u003e 30 \u0026\u0026 !isExit) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                avatarDialog.getChildren().clear();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                avatarDialog.getChildren().add("
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        DialogBox.getTaskDialog(listToSay.get(rand.nextInt(listToSay.size()))));"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                counterTicks.set(0);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else if (isExit \u0026\u0026 !isSet.get()) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                avatarDialog.getChildren().clear();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                avatarDialog.getChildren().add("
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        DialogBox.getTaskDialog(\"NoooOOOOO!!\\nDon\u0027t leeeeave meee\\n:( :( :(\"));"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                isSet.set(true);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            counterTicks.getAndIncrement();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void setList(ArrayList\u003cString\u003e list) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        list.add(\"Hi, Welcome to JavaCake!\\nWant sum cake?\\nAll you have to do is get 100%!\");"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        list.add(\"WELL DONE!!!\\nYou rekt that cake!\\n\");"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        list.add(\"soooOOOOO CLOOSEEE!\\nYou can do better next time!\");"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //        list.add(\"Baaakaaa!\\nYou obviously can do better than that...\");"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        list.add(\"I LOVE BIG CAKES AND I CANNOT LIE!\");"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        list.add(\"the cake...\\n     is a LIE!\");"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        list.add(\"Your momma so fat...\\nshe segfaulted on JavaCake\");"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        list.add(\"CAAAAAAAAAaaaaakkkke!\");"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        list.add(\"Want to know a secret?\\nYour waifu does not love you!\");"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        list.add(\"I LOVE BIG CAKES\\nAND I CANNOT LIE!\");"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        list.add(\"the cake...\\n     is a LIE!\");"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        list.add(\"Your momma so fat...\\nshe segfaulted on JavaCake\");"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        list.add(\"CAAAAAAAAAaaaaakkkke!\");"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        list.add(\"Want to know a secret?\\nYour waifu does not love you!\");"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 67,
      "RusdiHaizim": 378,
      "kishore03109": 8
    }
  },
  {
    "path": "src/main/java/javacake/ui/TopBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Main;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import javacake.commands.QuizCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.Animation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.concurrent.Service;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.control.ProgressIndicator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class TopBar extends HBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ImageView cakeLeft;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Label quizA;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Label quizB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Label quizC;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Label quizD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ImageView cakeRight;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ProgressBar progressA \u003d new ProgressBar();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static double progValueA \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ProgressBar progressB \u003d new ProgressBar();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static double progValueB \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ProgressBar progressC \u003d new ProgressBar();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static double progValueC \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ProgressBar progressD \u003d new ProgressBar();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static double progValueD \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ProgressIndicator progressTotal \u003d new ProgressIndicator();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static double progValueT \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Image cakeTiltLeft \u003d new Image(this.getClass().getResourceAsStream(\"/images/cake_left.png\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Image cakeTiltRight \u003d new Image(this.getClass().getResourceAsStream(\"/images/cake_right.png\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Image cakeOriginal \u003d new Image(this.getClass().getResourceAsStream(\"/images/cake.png\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int cakeCounter \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private boolean isSet \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Constructor for title bar."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public TopBar() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/TopBar.fxml\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        setAnimation();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        setStyleLoop();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to set TopBar."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return TopBar object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static TopBar setTitle() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return new TopBar();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void setStyleLoop() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Timeline timeline \u003d new Timeline(new KeyFrame(Duration.millis(50), ev -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (MainWindow.isLightMode) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (!isSet) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    progressTotal.getStylesheets().remove("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                            getClass().getResource(\"/css/progDark.css\").toExternalForm());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    title.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    quizA.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    quizB.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    quizC.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    quizD.setStyle(\"-fx-text-fill: white\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    isSet \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (isSet) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    progressTotal.getStylesheets().add("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                            getClass().getResource(\"/css/progDark.css\").toExternalForm());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    title.setStyle(\"-fx-text-fill: black\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    quizA.setStyle(\"-fx-text-fill: black\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    quizB.setStyle(\"-fx-text-fill: black\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    quizC.setStyle(\"-fx-text-fill: black\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    quizD.setStyle(\"-fx-text-fill: black\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    isSet \u003d false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void setAnimation() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Timeline timeline \u003d new Timeline(new KeyFrame(Duration.seconds(0.3), ev -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (cakeCounter % 4 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                cakeLeft.setImage(cakeTiltLeft);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                cakeRight.setImage(cakeTiltRight);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else if (cakeCounter % 4 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                cakeLeft.setImage(cakeOriginal);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                cakeRight.setImage(cakeOriginal);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else if (cakeCounter % 4 \u003d\u003d 2) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                cakeLeft.setImage(cakeTiltRight);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                cakeRight.setImage(cakeTiltLeft);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                cakeLeft.setImage(cakeOriginal);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                cakeRight.setImage(cakeOriginal);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            progressA.setProgress(progValueA);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            progressB.setProgress(progValueB);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            progressC.setProgress(progValueC);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            progressD.setProgress(progValueD);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            progressTotal.setProgress(progValueT);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            cakeCounter++;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.setCycleCount(Animation.INDEFINITE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to reset progress."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static void resetProgress() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        progValueA \u003d 0;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        progValueB \u003d 0;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        progValueC \u003d 0;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        progValueD \u003d 0;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        progValueT \u003d 0;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to set up progressBars."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static void setUpProgressBars() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        TopBar.progValueA \u003d (double) Duke.storageManager.profile.getContentMarks(0)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                / QuizCommand.MAX_QUESTIONS;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        TopBar.progValueB \u003d (double) Duke.storageManager.profile.getContentMarks(1)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                / QuizCommand.MAX_QUESTIONS;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        TopBar.progValueC \u003d (double) Duke.storageManager.profile.getContentMarks(2)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                / QuizCommand.MAX_QUESTIONS;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        TopBar.progValueD \u003d (double) Duke.storageManager.profile.getContentMarks(3)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                / QuizCommand.MAX_QUESTIONS;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        TopBar.progValueT \u003d (double) Duke.storageManager.profile.getTotalProgress()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                / (QuizCommand.MAX_QUESTIONS * 4);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 168,
      "kishore03109": 1
    }
  },
  {
    "path": "src/main/java/javacake/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.ListNoteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import javacake.commands.QuizCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.ReminderCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.Question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static String cake \u003d \"cake\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static String border \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Constructor for Ui."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to obtain Welcome Message Part 1."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param isFirstTime boolean to check if first time"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String containing first part of welcome message for GUI"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String showWelcomeMsgPhaseA(boolean isFirstTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder strA \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        strA.append(\"\\nWelcome to JavaCake! \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        strA.append(\"where learning Java can be a Piece of Cake!\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (isFirstTime) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(\"\\nI see this is your first time here! \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(\"What name would you like to be called?\\n\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return strA.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to obtain Welcome Message Part 2."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param isFirstTime boolean to check if first time"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param userName username"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param progress progress of user"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String containing first part of welcome message for GUI"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String showWelcomeMsgPhaseB(boolean isFirstTime, String userName, int progress) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder strA \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (isFirstTime) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(\"\\nWelcome to JavaCake, \").append(userName).append(\"! \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(\"Now let\u0027s help you get started with Java! :3\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(helpMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(\"Hello \").append(userName).append(\"!\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(getQuizResults(progress));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(\"\\nWhat do you want to do today?\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(helpMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return strA.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String showDeadlineReminder(StorageManager storageManager) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return new ReminderCommand().execute(Logic.getInstance(), new Ui(), storageManager);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String showNoteList(StorageManager storageManager) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return new ListNoteCommand().execute(Logic.getInstance(), new Ui(), storageManager);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Prints a new border to separate messages by Ui."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        System.out.println(border);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Prints help message to assist user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String helpMessage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return \"\\nType \u0027list\u0027 to view main topics\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                + \"Type \u0027overview\u0027 to view all content\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                + \"Type \u0027help\u0027 to view all commands available\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                + \"Type \u0027exit\u0027 to rage quit\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to read command inputted by user."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String containing input by user"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Shows error when trying to load the save file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        System.out.println(\"No saved files detected.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Displays the error message on the Ui."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param e String containing the error message"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void showError(String e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        System.out.println(e);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Displays the message on the Ui."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param m String containing the message"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void showMessage(String m) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        System.out.print(m);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to display text from file."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param reader BufferedReader to read in text from file"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Error thrown when unable to close reader"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void displayTextFile(BufferedReader reader) throws DukeException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String lineBuffer;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            while ((lineBuffer \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                System.out.println(lineBuffer);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(\"File not found!\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get text from file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param reader BufferedReader to read in text from file"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Error thrown when unable to close reader"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String getTextFile(BufferedReader reader) throws DukeException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String lineBuffer;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            while ((lineBuffer \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                output +\u003d lineBuffer;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"File not found!\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Displays the quiz question."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param question the question to be shown to the user."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param index the current question the user is on."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param maxQuestions the maximum number of questions in the quiz session."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public void displayQuiz(String question, int index, int maxQuestions) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(index + \"/\" + maxQuestions);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(question);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Displays the results of a quiz."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param score the user\u0027s score in that quiz."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param maxScore the maximum score possible in that quiz."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public void displayResults(int score, int maxScore) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"This is your score:\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"    \" + score + \" / \" + maxScore);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        if ((double)score / maxScore \u003c\u003d 0.5) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            System.out.println(\"Aw, that\u0027s too bad! Try revising the topics and try again. Don\u0027t give up!\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } else if ((double)score / maxScore !\u003d 1.0) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            System.out.println(\"Almost there! Clarify some of your doubts and try again.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            System.out.println(\"Congrats! Full marks, you\u0027re amazing!\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"Type \\\"review\\\" to review your answers.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"Type \\\"back\\\" to go back to the table of contents.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get quiz score."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param progress the user\u0027s overall quiz score"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String with quiz score message"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String getQuizResults(int progress) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        str.append(\"Here\u0027s your quiz progress so far :D\\n\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        for (int i \u003d 0; i \u003c 4 * QuizCommand.MAX_QUESTIONS; ++i) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (i \u003c progress) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                str.append(\"#\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                str.append(\"-\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        progress \u003d progress * 100 / (4 * QuizCommand.MAX_QUESTIONS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (progress \u003d\u003d 99) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            progress \u003d 100;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        str.append(\" \").append(progress).append(\"%\\n\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return  str.toString();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Displays a question, along with the user\u0027s answer and the correct answer."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param question the question to display. User\u0027s answer must not be null."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param index the current question the user is on."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param maxQuestions the maximum number of questions in the quiz session."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public void displayReview(Question question, int index, int maxQuestions) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"Enter a number to go to that question. Type \\\"back\\\" to go back to table of contents.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        displayQuiz(question.getQuestion(), index, maxQuestions);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"Your answer: \" + question.getUserAnswer());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"Correct answer: \" + question.getAnswer());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 27,
      "RusdiHaizim": 152,
      "kishore03109": 3,
      "claysmilesoil": 47
    }
  },
  {
    "path": "src/main/resources/css/progDark.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-indicator {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-progress-color: black;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-indicator .percentage {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 7
    }
  },
  {
    "path": "src/main/resources/css/progLight.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-indicator {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-progress-color: black;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-indicator .percentage {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-fill: #ffffffff;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 7
    }
  },
  {
    "path": "src/main/resources/css/progressIndicator.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-indicator {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-progress-color: black;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-indicator .percentage {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-fill: #ffffff ;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 7
    }
  },
  {
    "path": "src/main/resources/css/progressbarA.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-length: 60;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-escape: true;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-flip: true;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-animation-time: 2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar \u003e .bar {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: 3 3 4 3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-padding: 0.75em;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar:indeterminate \u003e .bar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: linear-gradient(to left, transparent, -fx-accent);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar \u003e .track {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: 0, 0 0 1 0, 1 1 2 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 4, 3, 2; /* 10, 9, 8 */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 21
    }
  },
  {
    "path": "src/main/resources/css/progressbarB.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-length: 60;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-escape: true;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-flip: true;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-animation-time: 2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar \u003e .bar {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: 3 3 4 3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-padding: 0.75em;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar:indeterminate \u003e .bar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: linear-gradient(to left, transparent, -fx-accent);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar \u003e .track {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: 0, 0 0 1 0, 1 1 2 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 4, 3, 2; /* 10, 9, 8 */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 21
    }
  },
  {
    "path": "src/main/resources/css/progressbarC.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-length: 60;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-escape: true;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-flip: true;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-animation-time: 2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar \u003e .bar {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: 3 3 4 3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-padding: 0.75em;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar:indeterminate \u003e .bar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: linear-gradient(to left, transparent, -fx-accent);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar \u003e .track {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: 0, 0 0 1 0, 1 1 2 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 4, 3, 2; /* 10, 9, 8 */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 21
    }
  },
  {
    "path": "src/main/resources/css/progressbarD.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-length: 60;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-escape: true;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-flip: true;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-indeterminate-bar-animation-time: 2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar \u003e .bar {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: purple;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: 3 3 4 3;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-padding: 0.75em;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar:indeterminate \u003e .bar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: linear-gradient(to left, transparent, -fx-accent);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".progress-bar \u003e .track {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: -fx-shadow-highlight-color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: 0, 0 0 1 0, 1 1 2 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 4, 3, 2; /* 10, 9, 8 */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 21
    }
  },
  {
    "path": "src/main/resources/css/textfield.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".text-input {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-highlight-fill: derive(-fx-control-inner-background,-20%);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-highlight-text-fill: -fx-text-inner-color;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-prompt-text-fill: derive(-fx-control-inner-background,-30%);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: 0, 1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 3, 2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-cursor: text;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-padding: 0.333333em 0.583em 0.333333em 0.583em; /* 4 7 4 7 */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".text-input:focused {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-highlight-fill: -fx-accent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-highlight-text-fill: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            -fx-focus-color,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            -fx-control-inner-background,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            -fx-faint-focus-color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-insets: -0.2, 1, -1.4, 3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 3, 2, 4, 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-prompt-text-fill: transparent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 21
    }
  },
  {
    "path": "src/main/resources/view/AvatarScreen.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003cfx:root fillWidth\u003d\"false\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"150.0\" prefWidth\u003d\"285.0\" type\u003d\"VBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cImageView fx:id\u003d\"avatarImage\" fitHeight\u003d\"150.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cInsets left\u003d\"70.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cImage url\u003d\"@../images/avatar/hapop.png\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/image\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 21
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"680.0\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-background-color: #EE8EC7; -fx-background-radius: 20; -fx-border-color: white; -fx-border-radius: 20;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"20.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"69.0\" fitWidth\u003d\"69.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 12,
      "RusdiHaizim": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"810.0\" prefWidth\u003d\"1000.0\" style\u003d\"-fx-background-color: black;\" stylesheets\u003d\"/view/style.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"javacake.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"555.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"40.0\" prefWidth\u003d\"700.0\" style\u003d\"-fx-background-color: #EE8EC7; -fx-background-radius: 10;\" stylesheets\u003d\"@../css/textfield.css\" AnchorPane.bottomAnchor\u003d\"5.0\" AnchorPane.leftAnchor\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    \u003cButton id\u003d\"button-dark\" fx:id\u003d\"sendButton\" layoutY\u003d\"559.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"30.0\" prefWidth\u003d\"55.0\" style\u003d\"-fx-background-color: #FF9EC7; -fx-border-color: white;\" text\u003d\"Send\" textFill\u003d\"WHITE\" AnchorPane.bottomAnchor\u003d\"10.0\" AnchorPane.leftAnchor\u003d\"645.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cFont name\u003d\"Baskerville Old Face\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"660.0\" prefWidth\u003d\"700.0\" style\u003d\"-fx-background-color: black;\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"50.0\" AnchorPane.leftAnchor\u003d\"5.0\" AnchorPane.topAnchor\u003d\"105.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"660.0\" prefWidth\u003d\"685.0\" style\u003d\"-fx-background-color: pink;\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"3.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003c/padding\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"taskScreen\" prefHeight\u003d\"298.0\" prefWidth\u003d\"287.0\" style\u003d\"-fx-background-color: black;\" AnchorPane.bottomAnchor\u003d\"500.0\" AnchorPane.leftAnchor\u003d\"708.0\" AnchorPane.topAnchor\u003d\"105.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cVBox fx:id\u003d\"taskContainer\" prefHeight\u003d\"202.0\" prefWidth\u003d\"283.0\" style\u003d\"-fx-background-color: pink;\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003c/padding\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"noteScreen\" layoutX\u003d\"708.0\" layoutY\u003d\"312.0\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"205.0\" prefWidth\u003d\"287.0\" style\u003d\"-fx-background-color: black;\" AnchorPane.bottomAnchor\u003d\"294.0\" AnchorPane.leftAnchor\u003d\"708.0\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cVBox fx:id\u003d\"noteContainer\" prefHeight\u003d\"202.0\" prefWidth\u003d\"283.0\" style\u003d\"-fx-background-color: pink;\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                  \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "               \u003c/padding\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cHBox fx:id\u003d\"topBar\" prefHeight\u003d\"90.0\" prefWidth\u003d\"990.0\" style\u003d\"-fx-background-color: #EE8EC7;\" AnchorPane.leftAnchor\u003d\"5.0\" AnchorPane.topAnchor\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cButton fx:id\u003d\"themeModeButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleGuiMode\" prefHeight\u003d\"30.0\" prefWidth\u003d\"105.0\" style\u003d\"-fx-background-color: #FF9EC7; -fx-border-color: white;\" text\u003d\"Switch Mode\" textFill\u003d\"WHITE\" AnchorPane.bottomAnchor\u003d\"260.0\" AnchorPane.rightAnchor\u003d\"95.0\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cFont name\u003d\"Baskerville Old Face\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003c/Button\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cVBox fx:id\u003d\"avatarScreen\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"150.0\" prefWidth\u003d\"285.0\" style\u003d\"-fx-background-color: #FEE;\" AnchorPane.bottomAnchor\u003d\"95.0\" AnchorPane.rightAnchor\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cVBox fx:id\u003d\"avatarDialog\" prefHeight\u003d\"95.0\" prefWidth\u003d\"285.0\" style\u003d\"-fx-background-color: #FEE;\" AnchorPane.bottomAnchor\u003d\"5.0\" AnchorPane.rightAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 14,
      "RusdiHaizim": 42
    }
  },
  {
    "path": "src/main/resources/view/TopBar.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.control.ProgressIndicator?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" type\u003d\"HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cImageView fx:id\u003d\"cakeLeft\" fitHeight\u003d\"80.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cImage url\u003d\"@../images/cake.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cLabel fx:id\u003d\"title\" prefHeight\u003d\"76.0\" prefWidth\u003d\"206.0\" text\u003d\"JavaCake\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cFont name\u003d\"French Script MT\" size\u003d\"59.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cImageView fx:id\u003d\"cakeRight\" fitHeight\u003d\"80.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cImage url\u003d\"@../images/cake.png\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cInsets left\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cProgressBar fx:id\u003d\"progressA\" layoutX\u003d\"40.0\" layoutY\u003d\"37.0\" prefHeight\u003d\"20.0\" prefWidth\u003d\"60.0\" progress\u003d\"0.0\" stylesheets\u003d\"@../css/progressbarA.css\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cProgressBar fx:id\u003d\"progressB\" layoutX\u003d\"120.0\" layoutY\u003d\"37.0\" prefHeight\u003d\"20.0\" prefWidth\u003d\"60.0\" progress\u003d\"0.0\" stylesheets\u003d\"@../css/progressbarB.css\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cProgressBar fx:id\u003d\"progressC\" layoutX\u003d\"200.0\" layoutY\u003d\"37.0\" prefHeight\u003d\"20.0\" prefWidth\u003d\"60.0\" progress\u003d\"0.0\" stylesheets\u003d\"@../css/progressbarC.css\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cProgressBar fx:id\u003d\"progressD\" layoutX\u003d\"280.0\" layoutY\u003d\"37.0\" prefHeight\u003d\"20.0\" prefWidth\u003d\"60.0\" progress\u003d\"0.0\" stylesheets\u003d\"@../css/progressbarD.css\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cLabel fx:id\u003d\"quizA\" layoutX\u003d\"52.0\" layoutY\u003d\"20.0\" text\u003d\"Quiz 1\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cLabel fx:id\u003d\"quizB\" layoutX\u003d\"133.0\" layoutY\u003d\"20.0\" text\u003d\"Quiz 2\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cLabel fx:id\u003d\"quizC\" layoutX\u003d\"213.0\" layoutY\u003d\"20.0\" text\u003d\"Quiz 3\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cProgressIndicator fx:id\u003d\"progressTotal\" layoutX\u003d\"370.0\" layoutY\u003d\"12.0\" minHeight\u003d\"75.0\" minWidth\u003d\"75.0\" prefHeight\u003d\"70.0\" prefWidth\u003d\"69.0\" progress\u003d\"0.0\" stylesheets\u003d\"@../css/progressIndicator.css\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            \u003cLabel fx:id\u003d\"quizD\" layoutX\u003d\"286.0\" layoutY\u003d\"20.0\" text\u003d\"Quiz ALL\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 59
    }
  },
  {
    "path": "src/main/resources/view/style.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".lightHBox {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: #EE8EC7;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".lightTextField {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: #EE8EC7;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".lightScrollPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".lightVBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".lightLabel {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".buttonL {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: #FFF;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ".text-field:focused {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    -fx-background-color: -fx-focus-color, -fx-background ;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 29
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        new ListCommandTest();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(2,2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 1,
      "-": 14
    }
  },
  {
    "path": "src/test/java/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Logic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.storage.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void testListCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String line1 \u003d \"Here are the 4 subtopics available!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String line2 \u003d \"1. Java Basics\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String line3 \u003d \"2. Object-Oriented Programming\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String line4 \u003d \"3. Extensions\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String line5 \u003d \"4. Overall Quiz\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String line6 \u003d \"Key in the index to learn more about the topic!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(line1).append(\"\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(line2).append(\"\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(line3).append(\"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(line4).append(\"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(line5).append(\"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        sb.append(line6).append(\"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String expectedOutput \u003d sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Logic logic \u003d Logic.getInstance();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            StorageManager sm \u003d new StorageManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ListCommand lc \u003d new ListCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            String actualOutput \u003d lc.execute(logic, ui, sm);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            assertEquals(expectedOutput.trim(), actualOutput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 41,
      "RusdiHaizim": 3
    }
  },
  {
    "path": "src/test/java/QuestionListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.exceptions.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.BasicQuestion;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.QuestionList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import static javacake.commands.QuizCommand.MAX_QUESTIONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class QuestionListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public void initializeBasicQuizTest() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        QuestionList test \u003d new QuestionList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        ArrayList\u003cQuestion\u003e testQuestions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        testQuestions \u003d test.pickQuestions(Question.QuestionType.BASIC);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        // check if there are the correct number and type of test questions"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        assertEquals(testQuestions.size(), MAX_QUESTIONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        for (Question qn : testQuestions) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            assertEquals(qn.getClass(), BasicQuestion.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        // check if there are any duplicate questions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        Set\u003cQuestion\u003e set \u003d new HashSet\u003c\u003e(testQuestions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        assertEquals(set.size(), testQuestions.size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 1,
      "claysmilesoil": 29,
      "kishore03109": 1
    }
  }
]
