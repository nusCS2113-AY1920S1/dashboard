[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    mainClassName \u003d \"javacake.Duke\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    //mainClassName \u003d \"javacake.Launcher\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //compile files(\"${System.properties[\u0027java.home\u0027]}/../lib/tools.jar\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.6\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 8,
      "RusdiHaizim": 2,
      "-": 42
    }
  },
  {
    "path": "src/main/java/javacake/ContentFormat.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": " * Provides the template for an object that reads in text content from file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public abstract class ContentFormat {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private String getContent() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        StringBuilder toDisplay \u003d new StringBuilder();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        BufferedReader reader;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            reader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            throw new DukeException(\"File does not exist!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            while (reader.readLine() !\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                toDisplay.append(reader.readLine()).append(\"\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            throw new DukeException(\"Error reading from file!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return toDisplay.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claysmilesoil": 37
    }
  },
  {
    "path": "src/main/java/javacake/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to obtain DialogBox."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param text text to display from Cake"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param img Image of Cake"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return a DialogBox containing both of them"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to obtain DialogBox."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param text text to display from Cake"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param img Image of Cake"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return a DialogBox containing both of them"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 61,
      "RusdiHaizim": 12
    }
  },
  {
    "path": "src/main/java/javacake/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.QuizCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.quiz.Question;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class Duke  {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static boolean isCliMode \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static String savedDataPath \u003d \"data/saved_data.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static ProgressStack progressStack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static Profile profile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static boolean isFirstTimeUser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String userName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static int userProgress \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Constructor for main class to initialise the settings."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        progressStack \u003d new ProgressStack();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            //tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            profile \u003d new Profile(\"data/save/savefile.txt\", ui);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            userProgress \u003d profile.getTotalProgress();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            userName \u003d profile.getUsername();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            // Default username when creating new profile"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (userName.equals(\"NEW_USER_!@#\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                isFirstTimeUser \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                isFirstTimeUser \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Run the rest of the code here. CLI MODE."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            userName \u003d ui.showWelcome(isFirstTimeUser, userName, userProgress);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        //To overwrite \"NEW_USER_!@# with new inputted username if needed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (isFirstTimeUser) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                profile.overwriteName(userName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showMessage(c.execute(progressStack, ui, storage, profile));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                //System.out.println(\"Current progress is \" + progressStack.checkProgress());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Program Start."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        new Duke(savedDataPath).run();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * GUI MODE."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (isCliMode) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            isCliMode \u003d false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return c.execute(progressStack, ui, storage, profile);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static boolean isCliMode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return isCliMode;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 19,
      "RusdiHaizim": 88,
      "kishore03109": 1
    }
  },
  {
    "path": "src/main/java/javacake/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for customised Exception class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message The error message thrown by other methods"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/javacake/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 13
    }
  },
  {
    "path": "src/main/java/javacake/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private static String savedDataPath \u003d \"data/saved_data.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private Duke duke \u003d new Duke(savedDataPath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stage.getIcons().add(new Image(this.getClass().getResourceAsStream(\"/images/imgay.jpg\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 31,
      "RusdiHaizim": 3
    }
  },
  {
    "path": "src/main/java/javacake/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.QuizCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.quiz.Question;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private boolean isQuiz \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private QuizCommand quizCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private boolean isStarting \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Initialise the Main Window launched."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (duke.isFirstTimeUser) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    DialogBox.getDukeDialog(Ui.showWelcomeMsgA(duke.isFirstTimeUser), dukeImage)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    DialogBox.getDukeDialog("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                            Ui.showWelcomeMsgA(duke.isFirstTimeUser)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                                    + Ui.showWelcomeMsgB(duke.isFirstTimeUser, duke.userName, duke.userProgress),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                            dukeImage)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (isStarting) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (duke.isFirstTimeUser) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                            DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                            DialogBox.getDukeDialog(Ui.showWelcomeMsgB("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                                    duke.isFirstTimeUser, duke.userName, duke.userProgress), dukeImage)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    duke.userName \u003d input;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    duke.profile.overwriteName(duke.userName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    userInput.clear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                isStarting \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                System.out.println(input);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                String response \u003d \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (!isQuiz) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    quizCommand.checkAnswer(input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    if (quizCommand.chosenQuestions.size() \u003e 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        response \u003d quizCommand.getQuestion();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        isQuiz \u003d false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        response \u003d quizCommand.getQuizScore();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (response.contains(\"!@#_QUIZ\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    isQuiz \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    response \u003d getFirstQn(response);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                );"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                userInput.clear();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    DialogBox.getDukeDialog(e.getMessage(), dukeImage)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            );"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String getFirstQn(String cmdMode) throws DukeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        switch (cmdMode) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case \"!@#_QUIZ_1\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            quizCommand \u003d new QuizCommand(Question.QuestionType.BASIC);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case \"!@#_QUIZ_2\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            quizCommand \u003d new QuizCommand(Question.QuestionType.OOP);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case \"!@#_QUIZ_3\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            quizCommand \u003d new QuizCommand(Question.QuestionType.EXTENSIONS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case \"!@#_QUIZ_4\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            quizCommand \u003d new QuizCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return quizCommand.getQuestion();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 52,
      "RusdiHaizim": 79
    }
  },
  {
    "path": "src/main/java/javacake/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.BackCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.GoToCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.commands.ScoreCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.RecurringTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public enum TaskState {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        NOT_DONE, DONE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Allows the user input to be parsed before running \u0027execute\u0027."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param input String inputted by user, which needs to be parsed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              to identify the intent"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return a subclass of the Command Class along"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *         with their respective intent"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Shows error when unknown command is inputted"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (input.equals(\"exit\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (input.equals(\"back\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return new BackCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.length() \u003e\u003d 4 \u0026\u0026 input.substring(0,4).equals(\"help\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return new HelpCommand(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"score\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return new ScoreCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (input.length() \u003e 4 \u0026\u0026 input.substring(0,4).equals(\"goto\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return new GoToCommand(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static String getString(ArrayList\u003cTask\u003e data, TaskState state, Task tempTask) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (state \u003d\u003d TaskState.DONE) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            tempTask.markAsDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        data.add(tempTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Got it. I\u0027ve added this task: \").append(\"\\n   \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(tempTask.getFullString()).append(\"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Now you have \").append(data.size()).append(\" tasks in the list.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Creates a new \u0027toBeDone\u0027 task, before adding it to current list,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * then returning the output by Duke."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param data ArrayList of Tasks that\u0027s currently being stored"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param input Command input by user"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param state The type of output needed:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              0 : Needs to return a string"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              1 : Returns null string with unchecked task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              2 : Returns null string with checked task"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String which highlights what Duke processed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String runTodo(ArrayList\u003cTask\u003e data, String input, TaskState state) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d input.substring(5);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Task tempTask \u003d new ToDo(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return getString(data, state, tempTask);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Creates a new \u0027Deadline\u0027 task, before adding it to current list,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * then returning the output by Duke."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param data ArrayList of Tasks that\u0027s currently being stored"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param input Command input by user"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param state The type of output needed:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              0 : Needs to return a string"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              1 : Returns null string with unchecked task"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              2 : Returns null string with checked task"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String which highlights what Duke processed"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String runDeadline(ArrayList\u003cTask\u003e data, String input, TaskState state) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d input.substring(9);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        int startOfBy \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (startOfBy \u003c\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"No task description\\nPlease input \u0027deadline TASK /by TASK_DATE\u0027\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (input.charAt(startOfBy - 1) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"Please leave space!\\nPlease input \u0027deadline TASK /by TASK_DATE\u0027\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String tt1 \u003d input.substring(0, startOfBy - 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (startOfBy + 4 \u003e\u003d input.length()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"No date parameter!\\nPlease input \u0027deadline TASK /by TASK_DATE\u0027\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String tt2 \u003d input.substring(startOfBy + 4);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Task tempTask \u003d new Deadline(tt1, tt2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return getString(data, state, tempTask);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to run recurring tasks."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param data ArrayList of Tasks that\u0027s currently being stored"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param input Command input by user"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param state The type of output needed:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              0 : Needs to return a string"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              1 : Returns null string with unchecked task"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     *              2 : Returns null string with checked task"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param freq daily, weekly or monthly"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String which highlights what Duke processed"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Shows error when cannot parse date"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String runRecurring(ArrayList\u003cTask\u003e data, String input,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                                      TaskState state, String freq) throws DukeException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        input \u003d input.substring(5).trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String tt1;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String tt2;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        int token;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        token \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        tt1 \u003d input.substring(0, token - 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        if (freq.equals(\"daily\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            tt2 \u003d input.substring(token + 7);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } else if (freq.equals(\"weekly\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            tt2 \u003d input.substring(token + 8);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            tt2 \u003d input.substring(token + 9);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        // parse date here"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        Date startDate \u003d parseDate(tt2);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        Task tempTask \u003d new RecurringTask(tt1, startDate, freq);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return getString(data, state, tempTask);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to return parsed Date."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param tt2 String to be parsed into Date"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return Date parsed from the string"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException If date cannot be parsed"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public static Date parseDate(String tt2) throws DukeException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            com.joestelmach.natty.Parser parser \u003d new com.joestelmach.natty.Parser();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            List\u003cDateGroup\u003e groups \u003d parser.parse(tt2);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            return groups.get(0).getDates().get(0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            throw new DukeException(\"   Date cannot be parsed: \" + tt2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 9,
      "RusdiHaizim": 121,
      "claysmilesoil": 30,
      "kishore03109": 1
    }
  },
  {
    "path": "src/main/java/javacake/Profile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class Profile {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private ArrayList\u003cInteger\u003e topicsDone \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Constructor for profile."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param filename String of filepath"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException when unable to create profile"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public Profile(String filename, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        filepath \u003d filename;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (!file.exists()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    file.getParentFile().getParentFile().mkdir();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    file.getParentFile().mkdir();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    file.createNewFile();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    initialiseUser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                throw new DukeException(\"Failed to create new file\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(filepath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            int count \u003d -1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                //ui.showMessage(line);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (count \u003d\u003d -1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    username \u003d line;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    topicsDone.add(Integer.parseInt(line));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                ++count;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"Failed to close reader\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void initialiseUser() throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        username \u003d \"NEW_USER_!@#\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            PrintWriter out \u003d new PrintWriter(filepath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.println(username);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            for (int i \u003d 0; i \u003c 4; ++i) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                out.println(\"0\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"Cannot initialise file\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private void writeProgress() throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            PrintWriter out \u003d new PrintWriter(filepath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.println(username);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            for (int i : topicsDone) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                out.println(\"\" + i);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"Cannot initialise file\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to overwrite Username."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param oldname old username"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException when unable to write progress"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void overwriteName(String oldname) throws DukeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        username \u003d oldname;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        writeProgress();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to set topic score."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param contentIdx idx of content"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException when unable to write progress"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void setMarks(int contentIdx, int marks) throws DukeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        topicsDone.set(contentIdx, marks);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        writeProgress();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get topic score."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param contentIdx idx of content"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return score of the specified topic"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public int getContentMarks(int contentIdx) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return topicsDone.get(contentIdx);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get total progress."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return total progress status"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public int getTotalProgress() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        for (int i : topicsDone) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            count +\u003d i;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 128
    }
  },
  {
    "path": "src/main/java/javacake/ProgressStack.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class ProgressStack {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private Stack\u003cInteger\u003e currentProgress \u003d new Stack\u003cInteger\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ProgressStack() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Forces the progress to MainList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void forceToMainList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (checkProgress() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            currentProgress.push(1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            // only push progress when current screen is at main screen."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            while (checkProgress() \u003e 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                forceClearProgress();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                // when list command is entered, progress is automatically cleared to main list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                // checkProgress stack size is forced to 1."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Goes to List Index 1."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void mainListToListIndex1() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (checkProgress() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            currentProgress.push(1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Goes to List Index 2."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void mainListToListIndex2() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (checkProgress() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            currentProgress.push(2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Goes to List Index 3."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void mainListToListIndex3() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (checkProgress() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            currentProgress.push(3);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Goes to Main List."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void listIndexToMainList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (checkProgress() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            currentProgress.pop();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Goes to Sub List Index 1."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public void listIndexToSubList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (checkProgress() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            currentProgress.push(1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Clears progress from the stack."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void forceClearProgress() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        currentProgress.pop();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks the current location in the programme stack."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return the size of the stack which indicates the location."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public int checkProgress() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return currentProgress.size();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Checks for the specific branch in the programme stack."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Each number indicates a branch based on the index of the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return the number of the branch or the index of a particular list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public int checkProgressState() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return currentProgress.peek();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Used only for BACK command."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * To check for the previous state stored in the stack."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @return the number of the branch or the index of a particular list"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     *         in the previous state."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public int checkPreviousState() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        clearCurrentState();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        return checkProgressState();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Used only for BACK command."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * To clear the current state of the stack."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void clearCurrentState() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        currentProgress.pop();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 77,
      "RusdiHaizim": 39,
      "kishore03109": 1
    }
  },
  {
    "path": "src/main/java/javacake/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private int stringBuffer \u003d 7;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cTask\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskType dataType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public enum TaskType {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        TODO, DEADLINE, TODO_DAILY, TODO_WEEKLY, TODO_MONTHLY"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialises the \u0027data\u0027 based on previous data"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * from filepath."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filepath The storage path of the saved data"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException Exception when file is not found"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage(String filepath) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!file.getParentFile().exists()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    file.getParentFile().mkdir();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"Failed to create new file\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(new FileReader(filepath));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                StringTokenizer stringTokenizer \u003d new StringTokenizer(line, \"|\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                int count \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                StringBuilder finalOutput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                String currStr;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                boolean isChecked \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                while (stringTokenizer.hasMoreTokens()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    currStr \u003d stringTokenizer.nextToken();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (count \u003d\u003d 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                        switch (currStr) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                        case \"T\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                            finalOutput \u003d new StringBuilder(\"todo \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                            this.dataType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                        case \"D\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                            finalOutput \u003d new StringBuilder(\"deadline \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                            this.dataType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                        case \"d\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                            finalOutput \u003d new StringBuilder(\"todo \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                            this.dataType \u003d TaskType.TODO_DAILY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                        case \"w\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                            finalOutput \u003d new StringBuilder(\"todo \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                            this.dataType \u003d TaskType.TODO_WEEKLY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                        case \"m\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                            finalOutput \u003d new StringBuilder((\"todo \"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                            this.dataType \u003d TaskType.TODO_MONTHLY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else if (count \u003d\u003d 2 \u0026\u0026 currStr.equals(\"✓\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                        isChecked \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else if (count \u003d\u003d 3) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                        finalOutput.append(currStr);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else if (count \u003d\u003d 4) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                        switch (this.dataType) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        case DEADLINE:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                            finalOutput.append(\" /by \").append(currStr);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                        case TODO_DAILY:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                            finalOutput.append(\" /daily \").append(currStr);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                        case TODO_WEEKLY:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                            finalOutput.append(\" /weekly \").append(currStr);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                        case TODO_MONTHLY:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                            finalOutput.append(\" /monthly \").append(currStr);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                    count++;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                switch (this.dataType) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                case TODO:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!isChecked) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                        Parser.runTodo(data, finalOutput.toString(), Parser.TaskState.NOT_DONE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                        Parser.runTodo(data, finalOutput.toString(), Parser.TaskState.DONE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                case DEADLINE:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!isChecked) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                        Parser.runDeadline(data, finalOutput.toString(), Parser.TaskState.NOT_DONE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                        Parser.runDeadline(data, finalOutput.toString(), Parser.TaskState.DONE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                case TODO_DAILY:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!isChecked) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                        Parser.runRecurring(data, finalOutput.toString(), Parser.TaskState.NOT_DONE, \"daily\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                        Parser.runRecurring(data, finalOutput.toString(), Parser.TaskState.DONE, \"daily\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                case TODO_WEEKLY:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!isChecked) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                        Parser.runRecurring(data, finalOutput.toString(), Parser.TaskState.NOT_DONE, \"weekly\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                        Parser.runRecurring(data, finalOutput.toString(), Parser.TaskState.DONE, \"weekly\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                case TODO_MONTHLY:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!isChecked) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                        Parser.runRecurring(data, finalOutput.toString(), Parser.TaskState.NOT_DONE, \"monthly\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                        Parser.runRecurring(data, finalOutput.toString(), Parser.TaskState.DONE, \"monthly\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Failed to close reader\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the currently initialised ArrayList of Tasks."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArrayList of Tasks that has been initialised"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes current taskList onto the save file."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks ArrayList of Tasks needing to be written"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     *              onto the save file"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException when no file is found"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void write(ArrayList\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            PrintWriter out \u003d new PrintWriter(filepath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                String st1;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                st1 \u003d task.toString().substring(1, 2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                String st4 \u003d null;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                //Appends extra task details for all task types excent \u0027Todo\u0027"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                if (st1.equals(\"D\") || st1.equals(\"E\") || st1.equals(\"d\") || st1.equals(\"m\") || st1.equals(\"w\")) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                    st4 \u003d task.getExtra();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                String st2;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                st2 \u003d task.getStatusIcon();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                String st3;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                st3 \u003d task.toString().substring(3);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                if (st4 !\u003d null \u0026\u0026 st3.contains(st4)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    st3 \u003d st3.replace(st4, \"\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    //STRING_BUFFER removes the \" (by: )\" / \" (at: )\" from st3"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                    st3 \u003d st3.substring(0, st3.length() - stringBuffer);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                str.append(st1);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                str.append(\"|\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                str.append(st2);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                str.append(\"|\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                str.append(st3);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                if (st4 !\u003d null) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                    str.append(\"|\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                    str.append(st4);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                out.println(str.toString());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"No file found\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 3,
      "-": 195
    }
  },
  {
    "path": "src/main/java/javacake/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cTask\u003e data;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialises data from current taskList being passed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param taskList the existing taskList loaded from save file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        data \u003d new ArrayList\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new arrayList for the taskList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to get the Task from index \u0027position\u0027."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param position Index of task in taskList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Task at index \u0027position\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException Shows error when bounds are exceeded"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task get(int position) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (position \u003e\u003d data.size() || position \u003c 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Out of bounds of data!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return data.get(position);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to remove the Task from index \u0027position\u0027."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param position Index of task in taskList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException Shows error when bounds are exceeded"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(int position) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (position \u003e\u003d data.size() || position \u003c 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Task is not within list size!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        data.remove(position);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to get the current size of data."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Size of current data"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return data.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to get the taskList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArrayList of current tasks"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e getData() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 2,
      "-": 63
    }
  },
  {
    "path": "src/main/java/javacake/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static String cake \u003d \"cake\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static String border \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Constructor for Ui."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * The message that pops up when first starting the program."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param isFirstTime true for first time users"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param userName The name of the user using JavaCake"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param progress The progress of the user in viewing the whole content"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String containing username"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String showWelcome(boolean isFirstTime, String userName, int progress) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder welcomePhaseA \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        welcomePhaseA.append(border).append(\"\\nWelcome to JavaCake! \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        welcomePhaseA.append(\"where learning Java can be a Piece of Cake!\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            welcomePhaseA.append(getTextFile(new BufferedReader("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    new FileReader(\"content/cake.txt\"))));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"Unable to Load Cake\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        System.out.println(welcomePhaseA.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (isFirstTime) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            welcomePhaseA \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            welcomePhaseA.append(\"I see this is your first time here! \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            welcomePhaseA.append(\"What name would you like to be called?\\n\").append(border);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            System.out.println(welcomePhaseA.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            userName \u003d readCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder welcomePhaseB \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (isFirstTime) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            welcomePhaseB.append(border);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            welcomePhaseB.append(\"\\nWelcome to JavaCake, \").append(userName).append(\"! \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            welcomePhaseB.append(\"Now let\u0027s help you get started with Java! :3\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            welcomePhaseB.append(helpMessage()).append(border);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            welcomePhaseB.append(\"Hello \").append(userName).append(\"!\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            welcomePhaseB.append(getQuizResults(progress));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            welcomePhaseB.append(\"\\nWhat do you want to do today?\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            welcomePhaseB.append(helpMessage()).append(border);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        System.out.println(welcomePhaseB.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return userName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to obtain Welcome Message Part 1."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param isFirstTime boolean to check if first time"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String containing first part of welcome message for GUI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String showWelcomeMsgA(boolean isFirstTime) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder strA \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        strA.append(\"\\nWelcome to JavaCake! \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        strA.append(\"where learning Java can be a Piece of Cake!\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (isFirstTime) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(\"\\nI see this is your first time here! \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(\"What name would you like to be called?\\n\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return strA.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to obtain Welcome Message Part 2."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param isFirstTime boolean to check if first time"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param userName username"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param progress progress of user"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String containing first part of welcome message for GUI"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String showWelcomeMsgB(boolean isFirstTime, String userName, int progress) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder strA \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (isFirstTime) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(\"\\nWelcome to JavaCake, \").append(userName).append(\"! \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(\"Now let\u0027s help you get started with Java! :3\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(helpMessage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(\"Hello \").append(userName).append(\"!\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(getQuizResults(progress));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(\"\\nWhat do you want to do today?\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            strA.append(helpMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return strA.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Prints a new border to separate messages by Ui."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        System.out.println(border);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Prints help message to assist user."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String helpMessage() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\\nType \u0027list\u0027 to view main topics\\n\" + \"Type \u0027exit\u0027 to rage quit\\n\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to read command inputted by user."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String containing input by user"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Shows error when trying to load the save file."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        System.out.println(\"No saved files detected.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Displays the error message on the Ui."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param e String containing the error message"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void showError(String e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        System.out.println(e);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Displays the message on the Ui."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param m String containing the message"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void showMessage(String m) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        System.out.print(m);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to display text from file."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param reader BufferedReader to read in text from file"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Error thrown when unable to close reader"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public void displayTextFile(BufferedReader reader) throws DukeException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String lineBuffer;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            while ((lineBuffer \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                System.out.println(lineBuffer);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(\"File not found!\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get text from file."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param reader BufferedReader to read in text from file"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Error thrown when unable to close reader"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String getTextFile(BufferedReader reader) throws DukeException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String lineBuffer;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            while ((lineBuffer \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                output +\u003d lineBuffer;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"File not found!\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Displays the quiz question."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param question the question to be shown to the user."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param index the current question the user is on."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param maxQuestions the maximum number of questions in the quiz session."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public void displayQuiz(String question, int index, int maxQuestions) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(index + \"/\" + maxQuestions);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(question);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Displays the results of a quiz."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param score the user\u0027s score in that quiz."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param maxScore the maximum score possible in that quiz."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public void displayResults(int score, int maxScore) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"This is your score:\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"    \" + score + \" / \" + maxScore);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        if ((double)score / maxScore \u003c\u003d 0.5) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            System.out.println(\"Aw, that\u0027s too bad! Try revising the topics and try again. Don\u0027t give up!\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } else if ((double)score / maxScore !\u003d 1.0) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            System.out.println(\"Almost there! Clarify some of your doubts and try again.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            System.out.println(\"Congrats! Full marks, you\u0027re amazing!\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        System.out.println(\"Type \\\"back\\\" to go back to the table of contents.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get quiz score."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param progress the user\u0027s overall quiz score"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String with quiz score message"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static String getQuizResults(int progress) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        str.append(\"Here\u0027s your quiz progress so far :D\\n\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; ++i) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (i \u003c progress) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                str.append(\"#\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                str.append(\"-\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        progress \u003d progress * 100 / 12;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (progress \u003d\u003d 99) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            progress \u003d 100;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        str.append(\" \").append(progress).append(\"%\\n\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return  str.toString();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 20,
      "RusdiHaizim": 191,
      "claysmilesoil": 31
    }
  },
  {
    "path": "src/main/java/javacake/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ProgressStack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Constructor for Adding of commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param cmdType Type of command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param str Input string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Throws exception when empty task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public AddCommand(CmdType cmdType, String str) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (cmdType \u003d\u003d CmdType.TODO) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (input.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                throw new DukeException(\"     ☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (cmdType \u003d\u003d CmdType.DEADLINE) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (input.length() \u003d\u003d 8) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                throw new DukeException(\"     ☹ OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        type \u003d cmdType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Execute addition of tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param progressStack TaskList containing current tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storage Storage needed to write the updated data"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Shows error when deletion is not possible"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(ProgressStack progressStack, Ui ui, Storage storage, Profile profile) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        /*switch (type) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ui.showMessage(Parser.runTodo(progressStack.getData(), input, Parser.TaskState.NOT_DONE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ui.showMessage(Parser.runDeadline(progressStack.getData(), input, Parser.TaskState.NOT_DONE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ui.showMessage(Parser.runEvent(progressStack.getData(), input, Parser.TaskState.NOT_DONE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        case DAILY:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ui.showMessage(Parser.runRecurring(progressStack.getData(), input, Parser.TaskState.NOT_DONE, \"daily\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        case WEEKLY:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ui.showMessage(Parser.runRecurring(progressStack.getData(), input, Parser.TaskState.NOT_DONE, \"weekly\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        case MONTHLY:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ui.showMessage(Parser.runRecurring(progressStack.getData(), input, Parser.TaskState.NOT_DONE, \"monthly\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"     [Unknown COMMAND TYPE]\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 15,
      "RusdiHaizim": 48,
      "claysmilesoil": 7
    }
  },
  {
    "path": "src/main/java/javacake/commands/BackCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ProgressStack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class BackCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public BackCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.BACK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Execute going back to previous index."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param progressStack TaskList containing current tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storage Storage needed to write the updated data"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param profile Profile of the user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Error thrown when unable to close file reader"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(ProgressStack progressStack, Ui ui, Storage storage, Profile profile) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if (progressStack.checkProgress() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            progressStack.listIndexToMainList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return listCommand.execute(progressStack, ui, storage, profile);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } else if (progressStack.checkProgress() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return listCommand.execute(progressStack, ui, storage, profile);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        } else if (progressStack.checkProgress() \u003d\u003d 3) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            int previousState \u003d progressStack.checkPreviousState();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (previousState \u003d\u003d 3) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                progressStack.clearCurrentState();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                GoToCommand goToCommand \u003d new GoToCommand(\"goto 3\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return goToCommand.execute(progressStack, ui, storage, profile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } else if (previousState \u003d\u003d 2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                progressStack.clearCurrentState();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                GoToCommand goToCommand \u003d new GoToCommand(\"goto 2\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return goToCommand.execute(progressStack, ui, storage, profile);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } else if (previousState \u003d\u003d 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                progressStack.clearCurrentState();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                GoToCommand goToCommand \u003d new GoToCommand(\"goto 1\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return goToCommand.execute(progressStack, ui, storage, profile);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"ErrorAtBackCommand\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 18,
      "RusdiHaizim": 23,
      "kishore03109": 15
    }
  },
  {
    "path": "src/main/java/javacake/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ProgressStack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    protected CmdType type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Types of commands that are possible."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public enum CmdType {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        EXIT, LIST, FIND, DONE, DELETE, TODO, DEADLINE, REMIND, VIEWSCH,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        EDIT, BACK, GOTO, QUIZ, HELP"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public abstract String execute(ProgressStack progressStack, Ui ui, Storage storage, Profile profile)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throws DukeException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to get the type of command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Type of command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CmdType type() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to get the input inside the command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing user input in command"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String input() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to check whether command is of type exit."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if type is exit, false otherwise"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.type \u003d\u003d CmdType.EXIT;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 1,
      "RusdiHaizim": 12,
      "-": 36
    }
  },
  {
    "path": "src/main/java/javacake/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ProgressStack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(String str) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        type \u003d CmdType.DELETE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Execute deletion of task in tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param progressStack TaskList containing current tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage needed to write the updated data"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException Shows error when deletion is not possible"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(ProgressStack progressStack, Ui ui, Storage storage, Profile profile) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d input.substring(7);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        /*try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            int num \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            --num;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isWithinData \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            for (int i \u003d 0; i \u003c progressStack.size(); ++i) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                if (i \u003d\u003d num) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    String stringBuilder \u003d \"Noted. I\u0027ve removed this task: \" + \"\\n      \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                            + progressStack.get(i).getFullString() + \"\\nNow you have \" + (progressStack.size() - 1)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \" tasks in the list.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    progressStack.remove(i);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    ui.showMessage(stringBuilder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    isWithinData \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!isWithinData) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DukeException(\"Task number is out of bounds [Delete]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Task number is invalid! [Delete]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 7,
      "RusdiHaizim": 8,
      "-": 34
    }
  },
  {
    "path": "src/main/java/javacake/commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ProgressStack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoneCommand(String str) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        type \u003d CmdType.DONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Execute checking of task in tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param progressStack TaskList containing current tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage needed to write the updated data"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException Shows error when task number is invalid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(ProgressStack progressStack, Ui ui, Storage storage, Profile profile) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d input.substring(5);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            int num \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            --num;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isInsideData \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            /*for (int i \u003d 0; i \u003c progressStack.size(); ++i) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                if (i \u003d\u003d num) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    if (progressStack.get(i).isDone()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        ui.showMessage(progressStack.get(i).toString().substring(3) + \" is already done!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        isInsideData \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    progressStack.get(i).markAsDone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    ui.showMessage(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    ui.showMessage(\"    [✓] \" + progressStack.get(i).toString().substring(3));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    isInsideData \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }*/"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!isInsideData) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showError(\"Task number is out of bounds! [Done]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Not a valid Task Number!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 8,
      "RusdiHaizim": 8,
      "-": 36
    }
  },
  {
    "path": "src/main/java/javacake/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ProgressStack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kishore03109"
        },
        "content": " * EDIT commands should be of the following format:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kishore03109"
        },
        "content": " * edit TASKINDEX  NEWDATE."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kishore03109"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public EditCommand(String str) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        type \u003d CmdType.EDIT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(ProgressStack progressStack, Ui ui, Storage storage, Profile profile) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        input \u003d input.substring(5);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            int num \u003d Integer.parseInt(input.substring(0,1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            --num;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            boolean isWithinData \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            /*for (int i \u003d 0; i \u003c progressStack.size(); ++i) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                if (i \u003d\u003d num) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    progressStack.get(i).changeDate(input.substring(2));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    String stringBuilder \u003d \"Noted. I\u0027ve rescheduled this task: \" + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                            + progressStack.get(i).getFullString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    storage.write(progressStack.getData());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    ui.showMessage(stringBuilder);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    isWithinData \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }*/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            if (!isWithinData) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                throw new DukeException(\"Task number is out of bounds [Edit]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            throw new DukeException(\"Task number is invalid! [Edit]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 5,
      "RusdiHaizim": 8,
      "kishore03109": 35
    }
  },
  {
    "path": "src/main/java/javacake/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ProgressStack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.EXIT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Executes exiting the program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param progressStack TaskList containing current tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storage Storage needed to write the updated data"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param profile Profile of the user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(ProgressStack progressStack, Ui ui, Storage storage, Profile profile) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\\nBye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 1,
      "RusdiHaizim": 23
    }
  },
  {
    "path": "src/main/java/javacake/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ProgressStack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String str) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        type \u003d CmdType.FIND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes finding tasks corresponding to the keyword in \u0027input\u0027."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param progressStack TaskList containing current tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param storage Storage needed to write the updated data"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException Shows error when unable to access list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(ProgressStack progressStack, Ui ui, Storage storage, Profile profile) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d input.substring(5);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        /*if (progressStack.size() \u003e 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isInside \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isStarting \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            for (int i \u003d 0; i \u003c progressStack.size(); ++i) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                if (progressStack.get(i).toString().contains(input)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (isStarting) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        isStarting \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        ui.showMessage(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    int temp \u003d i + 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                    ui.showMessage(temp + \". \" + progressStack.get(i).getFullString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    isInside \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!isInside) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showError(\"Keyword not in List\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showError(\"Empty List!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 6,
      "RusdiHaizim": 8,
      "-": 33
    }
  },
  {
    "path": "src/main/java/javacake/commands/GoToCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ProgressStack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.Question;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import javacake.topics.ListIndex1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import javacake.topics.ListIndex2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.topics.ListIndex3;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class GoToCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to go to next index."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param inputCommand String inputted by user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public GoToCommand(String inputCommand) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.GOTO;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String[] buffer \u003d inputCommand.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        index \u003d buffer[1];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Execute jumping to given index."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param progressStack TaskList containing current tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storage Storage needed to write the updated data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param profile Profile of the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Error thrown when unable to close reader"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(ProgressStack progressStack, Ui ui, Storage storage, Profile profile) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            if (progressStack.checkProgress() \u003d\u003d 1 \u0026\u0026 index.equals(\"1\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                progressStack.mainListToListIndex1();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return new ListIndex1().printList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else if (progressStack.checkProgress() \u003d\u003d 1 \u0026\u0026 index.equals(\"2\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                progressStack.mainListToListIndex2();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return new ListIndex2().printList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else if (progressStack.checkProgress() \u003d\u003d 1 \u0026\u0026 index.equals(\"3\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                progressStack.mainListToListIndex3();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return new ListIndex3().printList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } else if (progressStack.checkProgress() \u003d\u003d 1 \u0026\u0026 index.equals(\"4\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (Duke.isCliMode()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    return new QuizCommand(Question.QuestionType.ALL).execute(progressStack, ui, storage, profile);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    QuizCommand.setProfile(profile);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    return \"!@#_QUIZ_4\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } else if (progressStack.checkProgress() \u003d\u003d 2 \u0026\u0026 index.equals(\"1.1\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                progressStack.listIndexToSubList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return getTextFile(new BufferedReader("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        new FileReader(\"content/MainList/ListIndex1/javabasics/Print.txt\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } else if (progressStack.checkProgress() \u003d\u003d 2 \u0026\u0026 index.equals(\"1.2\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                progressStack.listIndexToSubList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return getTextFile(new BufferedReader("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        new FileReader(\"content/MainList/ListIndex1/javabasics/Read.txt\")));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } else if (progressStack.checkProgress() \u003d\u003d 2 \u0026\u0026 index.equals(\"1.3\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                progressStack.listIndexToSubList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return getTextFile(new BufferedReader("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        new FileReader(\"content/MainList/ListIndex1/javabasics/ClassesandObjects.txt\")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } else if (progressStack.checkProgress() \u003d\u003d 2 \u0026\u0026 index.equals(\"1.4\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (Duke.isCliMode()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    return new QuizCommand(Question.QuestionType.BASIC).execute(progressStack, ui, storage, profile);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    QuizCommand.setProfile(profile);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    return \"!@#_QUIZ_1\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } else if (progressStack.checkProgress() \u003d\u003d 2 \u0026\u0026 index.equals(\"2.1\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                progressStack.listIndexToSubList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return getTextFile(new BufferedReader("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        new FileReader(\"content/MainList/ListIndex2/oop/Abstraction.txt\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } else if (progressStack.checkProgress() \u003d\u003d 2 \u0026\u0026 index.equals(\"2.2\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                progressStack.listIndexToSubList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return getTextFile(new BufferedReader("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        new FileReader(\"content/MainList/ListIndex2/oop/Encapsulation.txt\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } else if (progressStack.checkProgress() \u003d\u003d 2 \u0026\u0026 index.equals(\"2.3\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                progressStack.listIndexToSubList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return getTextFile(new BufferedReader("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        new FileReader(\"content/MainList/ListIndex2/oop/Inheritance.txt\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } else if (progressStack.checkProgress() \u003d\u003d 2 \u0026\u0026 index.equals(\"2.4\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                progressStack.listIndexToSubList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return getTextFile(new BufferedReader("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                        new FileReader(\"content/MainList/ListIndex2/content/oop/Polymorphism.txt\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } else if (progressStack.checkProgress() \u003d\u003d 2 \u0026\u0026 index.equals(\"2.5\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (Duke.isCliMode()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    return new QuizCommand(Question.QuestionType.OOP).execute(progressStack, ui, storage, profile);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    QuizCommand.setProfile(profile);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    return \"!@#_QUIZ_2\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } else if (progressStack.checkProgress() \u003d\u003d 2 \u0026\u0026 index.equals(\"3.1\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                progressStack.listIndexToSubList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return getTextFile(new BufferedReader("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        new FileReader(\"content/MainList/ListIndex3/Enumerations/Enumerations.txt\")));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } else if (progressStack.checkProgress() \u003d\u003d 2 \u0026\u0026 index.equals(\"3.2\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                progressStack.listIndexToSubList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return getTextFile(new BufferedReader("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        new FileReader(\"content/MainList/ListIndex3/Varargs/Varargs.txt\")));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } else if (progressStack.checkProgress() \u003d\u003d 2 \u0026\u0026 index.equals(\"3.3\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                progressStack.listIndexToSubList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                return getTextFile(new BufferedReader("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                        new FileReader(\"content/MainList/ListIndex3/Exceptions/Exceptions.txt\")));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } else if (progressStack.checkProgress() \u003d\u003d 2 \u0026\u0026 index.equals(\"3.4\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                if (Duke.isCliMode()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    return new QuizCommand(Question.QuestionType.EXTENSIONS)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                            .execute(progressStack, ui, storage, profile);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    QuizCommand.setProfile(profile);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                    return \"!@#_QUIZ_3\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "                throw new DukeException(\"Please enter a valid index!\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(\"File does not exists\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get text from file."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param reader BufferedReader to read in text from file"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Error thrown when unable to close reader"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String getTextFile(BufferedReader reader) throws DukeException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String lineBuffer;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            while ((lineBuffer \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                output +\u003d lineBuffer;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"File not found!\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 34,
      "RusdiHaizim": 86,
      "claysmilesoil": 5,
      "kishore03109": 22
    }
  },
  {
    "path": "src/main/java/javacake/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ProgressStack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public HelpCommand(String str) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.HELP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Execute S.O.S."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param progressStack TaskList containing current tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storage Storage needed to write the updated data"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param profile Profile of the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException Error thrown when unable to close reader"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(ProgressStack progressStack, Ui ui, Storage storage, Profile profile) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (input.length() \u003d\u003d 4) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return mainHelp();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"help back\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return backHelp();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"help exit\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return exitHelp();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"help goto\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return gotoHelp();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"help help\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return helpHelp();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"help list\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return listHelp();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if (input.equals(\"help score\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            return scoreHelp();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"No such command found. Try again.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String mainHelp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Here is the list of available commands:\\n\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"back\").append(\"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"exit\").append(\"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"goto \u0027X\u0027 [X \u003d {1,2,..}]\").append(\"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"help\").append(\"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"list\").append(\"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"score\").append(\"\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"\\nType ~help \u0027COMMAND_NAME\u0027~ to learn more in-depth!\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String backHelp() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"back\").append(\"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to jump back to previous state after calling \u0027goto X\u0027\").append(\"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String exitHelp() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"exit\").append(\"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to exit from the program\").append(\"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String gotoHelp() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"goto \u0027X\u0027 [X \u003d {1,2,..}]\").append(\"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to jump to next index of contents displayed after calling \u0027list\u0027\").append(\"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String helpHelp() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"help\").append(\"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"I am trying to help you!!!\").append(\"\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String listHelp() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"list\").append(\"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to display table-of-contents\").append(\"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String scoreHelp() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"- \").append(\"score\").append(\"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Command to get your current overall score for JavaCake!\").append(\"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 99
    }
  },
  {
    "path": "src/main/java/javacake/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ProgressStack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Profile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.topics.MainList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        type \u003d CmdType.LIST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Execute the listing of current tasks on the Ui."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * @param progressStack TaskList containing current tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storage Storage needed to write the updated data"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param profile Profile of the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(ProgressStack progressStack, Ui ui, Storage storage, Profile profile) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        MainList ml \u003d new MainList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        output \u003d ml.printList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        progressStack.forceToMainList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 4,
      "RusdiHaizim": 26
    }
  },
  {
    "path": "src/main/java/javacake/commands/QuizCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.ProgressStack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.Question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.QuestionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class QuizCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private QuestionList questionList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public ArrayList\u003cQuestion\u003e chosenQuestions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Question.QuestionType qnType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private Question prevQuestion;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private int currScore \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private static Profile profile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * QuizCommand constructor for overall quiz."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public QuizCommand() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        type \u003d CmdType.QUIZ;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        questionList \u003d new QuestionList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        chosenQuestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        qnType \u003d Question.QuestionType.ALL;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        chosenQuestions \u003d questionList.pickQuestions();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * QuizCommand constructor for topic-based quiz."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param questionType the topic of the quiz."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public QuizCommand(Question.QuestionType questionType) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        type \u003d CmdType.QUIZ;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        questionList \u003d new QuestionList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        chosenQuestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        qnType \u003d questionType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        chosenQuestions \u003d questionList.pickQuestions(questionType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static void setProfile(Profile profile) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        QuizCommand.profile \u003d profile;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Executes the quiz."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param progressStack how far the program is currently in in the table of contents."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param ui the UI responsible for inputs and outputs of the program."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param storage Storage to write updated data."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param profile Profile of the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @throws DukeException Error thrown when there is a problem with score calculation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(ProgressStack progressStack, Ui ui, Storage storage, Profile profile) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        for (int i \u003d 0; i \u003c QuestionList.MAX_QUESTIONS; i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            Question question \u003d chosenQuestions.get(i);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            ui.displayQuiz(question.getQuestion(), i + 1, QuestionList.MAX_QUESTIONS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            String userAnswer \u003d ui.readCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            if (question.isAnswerCorrect(userAnswer)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                currScore++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (currScore \u003e QuestionList.MAX_QUESTIONS) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            throw new DukeException(\"Something went wrong when calculating the score:\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                    + \"Calculated score is greater than maximum possible score.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        overwriteOldScore(currScore, profile);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        ui.displayResults(currScore, QuestionList.MAX_QUESTIONS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to overwrite the old score of user,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * if it\u0027s less than the current score."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param score new score of user"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param profile profile object of user"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException error if question type is undefined"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void overwriteOldScore(int score, Profile profile) throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        int topicIdx;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        switch (qnType) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case OOP:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            topicIdx \u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case BASIC:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            topicIdx \u003d 1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case EXTENSIONS:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            topicIdx \u003d 2;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            topicIdx \u003d 3;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            throw new DukeException(\"Topic Idx out of bounds!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (score \u003e profile.getContentMarks(topicIdx)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (score \u003c 0.5 * QuestionList.MAX_QUESTIONS) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                profile.setMarks(topicIdx, 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else if (score \u003e\u003d 0.5 \u0026\u0026 score \u003c QuestionList.MAX_QUESTIONS) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                profile.setMarks(topicIdx, 2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                profile.setMarks(topicIdx, 3);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get the next Question."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return the string containing the next question"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        prevQuestion \u003d chosenQuestions.get(chosenQuestions.size() - 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        chosenQuestions.remove(chosenQuestions.size() - 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return prevQuestion.getQuestion();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to check if answer is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * If it is, then update the score."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param input the answer inputted by the user"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public void checkAnswer(String input) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (prevQuestion.isAnswerCorrect(input)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            currScore++;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get the score of the quiz."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String containing what Cake said about the quiz."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException error thrown if failed to overwrite score."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String getQuizScore() throws DukeException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"This is your score:\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"    \").append(currScore).append(\" / \").append(QuestionList.MAX_QUESTIONS).append(\"\\n\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if ((double)currScore / QuestionList.MAX_QUESTIONS \u003c\u003d 0.5) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(\"Aw, that\u0027s too bad! Try revising the topics and try again. Don\u0027t give up!\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else if ((double)currScore / QuestionList.MAX_QUESTIONS !\u003d 1.0) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(\"Almost there! Clarify some of your doubts and try again.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(\"Congrats! Full marks, you\u0027re amazing!\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Type \\\"back\\\" to go back to the table of contents.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        overwriteOldScore(currScore, profile);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 100,
      "claysmilesoil": 60
    }
  },
  {
    "path": "src/main/java/javacake/commands/ReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ProgressStack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReminderCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        type \u003d CmdType.REMIND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(ProgressStack progressStack, Ui ui, Storage storage, Profile profile) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e deadlineList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        /*for (Task task : progressStack.getData()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.getTaskType() \u003d\u003d Task.TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                deadlineList.add(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ViewScheduleCommand.sortTasksByDate(deadlineList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        int idx \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (deadlineList.size() \u003e 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showMessage(\"Here are the upcoming Deadlines:\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : deadlineList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                stringBuilder.append(idx++).append(\".\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                stringBuilder.append(task.getFullString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showMessage(stringBuilder.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showError(\"Empty List!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 2,
      "RusdiHaizim": 8,
      "-": 29
    }
  },
  {
    "path": "src/main/java/javacake/commands/ScoreCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Profile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ProgressStack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "public class ScoreCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public ScoreCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Executes showing quiz score."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param progressStack TaskList containing current tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param ui the Ui responsible for outputting messages"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param storage Storage needed to write the updated data"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param profile Profile of the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(ProgressStack progressStack, Ui ui, Storage storage, Profile profile) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return Ui.getQuizResults(profile.getTotalProgress());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to get quiz score."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @param progress the user\u0027s overall quiz score"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String with quiz score message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    private String getQuizResults(int progress) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        str.append(\"Here\u0027s your quiz progress so far :D\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; ++i) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            if (i \u003c progress) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                str.append(\"#\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "                str.append(\"-\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        progress \u003d progress * 100 / 12;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        if (progress \u003d\u003d 99) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            progress \u003d 100;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        str.append(\" \").append(progress).append(\"%\").append(\"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return str.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 50
    }
  },
  {
    "path": "src/main/java/javacake/commands/ViewScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.ProgressStack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewScheduleCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewScheduleCommand(String str) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        type \u003d CmdType.VIEWSCH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d str;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String execute(ProgressStack progressStack, Ui ui, Storage storage, Profile profile) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (input.length() \u003d\u003d 12) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"     ☹ OOPS!!! The description of a viewschedule cannot be empty.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d input.substring(13);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Date currDate \u003d getDate(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar calendar \u003d GregorianCalendar.getInstance();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.setTime(currDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        int currDay \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        int currMonth \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        int currYear \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e scheduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        /*for (Task task : progressStack.getData()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.getTaskType() \u003d\u003d Task.TaskType.EVENT || task.getTaskType() \u003d\u003d Task.TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                calendar.setTime(task.getDateTime());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                int taskDay \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                int taskMonth \u003d calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                int taskYear \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                if (taskYear \u003d\u003d currYear \u0026\u0026 taskMonth \u003d\u003d currMonth \u0026\u0026 taskDay \u003d\u003d currDay) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    scheduleList.add(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        sortTasksByDate(scheduleList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String outputDate \u003d new SimpleDateFormat(\"dd MMM yyyy\").format(currDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (scheduleList.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showMessage(\"No tasks on \" + outputDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showMessage(\"Here are your tasks for \" + outputDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : scheduleList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                String output \u003d counter + \". \" + task.getFullString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showMessage(output);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    static void sortTasksByDate(ArrayList\u003cTask\u003e scheduleList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        scheduleList.sort((o1, o2) -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            if (o1.getDateTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (o2.getDateTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            if (o1.getDateTime().before(o2.getDateTime())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (o1.getDateTime().after(o2.getDateTime())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date getDate(String input) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cDateGroup\u003e groups \u003d parser.parse(input);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            date \u003d groups.get(0).getDates().get(0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"   Date cannot be parsed: \" + input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 2,
      "RusdiHaizim": 9,
      "-": 81
    }
  },
  {
    "path": "src/main/java/javacake/quiz/BasicQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class BasicQuestion extends Question {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    QuestionType type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public BasicQuestion(String question, String answer) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        super(question, answer);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        type \u003d QuestionType.BASIC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claysmilesoil": 10
    }
  },
  {
    "path": "src/main/java/javacake/quiz/ExtensionQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class ExtensionQuestion extends Question {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    QuestionType type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public ExtensionQuestion(String question, String answer) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        super(question, answer);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        type \u003d QuestionType.EXTENSIONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claysmilesoil": 10
    }
  },
  {
    "path": "src/main/java/javacake/quiz/OopQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class OopQuestion extends Question {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    QuestionType type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public OopQuestion(String question, String answer) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        super(question, answer);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        type \u003d QuestionType.OOP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claysmilesoil": 10
    }
  },
  {
    "path": "src/main/java/javacake/quiz/Question.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private String answer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public enum QuestionType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        BASIC, OOP, EXTENSIONS, ALL"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public Question(String question, String answer) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * Checks if user\u0027s answer to the question is correct."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param input user\u0027s inputted answer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @return true if input matches answer, false otherwise."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public boolean isAnswerCorrect(String input) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        return (input.trim().equals(answer));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 1,
      "claysmilesoil": 29,
      "kishore03109": 2
    }
  },
  {
    "path": "src/main/java/javacake/quiz/QuestionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "package javacake.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class QuestionList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    private ArrayList\u003cQuestion\u003e chosenQuestions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /** The maximum number of questions in one session of a quiz. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public static final int MAX_QUESTIONS \u003d 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private static final int TOTALNUMOFBASICQNS \u003d 15;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private static final int TOTALNUMOFOOPQNS \u003d 3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private static final int TOTALNUMOFUSEFULEXTENSIONQNS \u003d 3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public QuestionList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        chosenQuestions \u003d new ArrayList\u003c\u003e(MAX_QUESTIONS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private ArrayList\u003cBasicQuestion\u003e initBasicList() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        ArrayList\u003cBasicQuestion\u003e basicQuestionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d TOTALNUMOFBASICQNS; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String filePath \u003d \"content/MainList/ListIndex1/javabasics/Quiz/Qn\" + i + \".txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String currentLine;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String qns \u003d new String();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                while ((currentLine \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    qns \u003d qns + currentLine + \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                qns \u003d qns.substring(0,qns.length() - 1); // to remove the last appended new line character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String[] questions \u003d qns.split(\"\\\\|\\\\s*\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                basicQuestionList.add(new BasicQuestion(questions[0], questions[1]));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                throw new DukeException(\"File not found!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return basicQuestionList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private ArrayList\u003cOopQuestion\u003e initOopList() throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        ArrayList\u003cOopQuestion\u003e oopQuestionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d TOTALNUMOFOOPQNS; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String filePath \u003d \"content/MainList/ListIndex2/oop/Quiz/Qn\" + i + \".txt\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String currentline;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String qns \u003d new String();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                while ((currentline \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    qns \u003d qns + currentline + \"\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                qns \u003d qns.substring(0,qns.length() - 1); // to remove the last appended new line character"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String[] questions \u003d qns.split(\"\\\\|\\\\s*\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                oopQuestionList.add(new OopQuestion(questions[0], questions[1]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                throw new DukeException(\"File not found!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return oopQuestionList;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    private ArrayList\u003cExtensionQuestion\u003e initExtensionList() throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        ArrayList\u003cExtensionQuestion\u003e extensionQuestionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d TOTALNUMOFUSEFULEXTENSIONQNS; i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String filePath \u003d \"content/MainList/ListIndex2/oop/Quiz/Qn\" + i + \".txt\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String currentLine; "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String qns \u003d new String();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                while ((currentLine \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                    qns \u003d qns + currentLine + \"\\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                qns \u003d qns.substring(0,qns.length() - 1); // to remove the last appended new line character"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                String[] questions \u003d qns.split(\"\\\\|\\\\s*\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                extensionQuestionList.add(new ExtensionQuestion(questions[0], questions[1]));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "                throw new DukeException(\"File not found!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return extensionQuestionList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Randomly selects MAX_QUESTIONS number of questions from the list of all questions."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @return ArrayList of Question of size MAX_QUESTIONS."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public ArrayList\u003cQuestion\u003e pickQuestions() throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        ArrayList\u003cQuestion\u003e allQuestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        allQuestions.addAll(initBasicList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        allQuestions.addAll(initOopList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        allQuestions.addAll(initExtensionList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        assert (allQuestions.size() \u003e\u003d MAX_QUESTIONS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        ArrayList\u003cInteger\u003e chosenNumbers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_QUESTIONS; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            int randomNum;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                randomNum \u003d rand.nextInt(allQuestions.size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } while (chosenNumbers.contains(randomNum)); // prevents repeat questions"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            chosenNumbers.add(randomNum);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                chosenQuestions.add(allQuestions.get(randomNum));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                throw new DukeException(\"Something went wrong when loading the quiz: index out of bounds.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return chosenQuestions;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * Randomly selects MAX_QUESTIONS number of questions of the specified topic from the list of all questions."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @param type QuestionType of questions to be selected."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     * @return ArrayList of Question of specified topic of size MAX_QUESTIONS."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public ArrayList\u003cQuestion\u003e pickQuestions(Question.QuestionType type) throws DukeException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        ArrayList\u003cQuestion\u003e tempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        case BASIC:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            assert (initBasicList().size() \u003e\u003d MAX_QUESTIONS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            tempList.addAll(initBasicList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        case OOP:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            assert (initOopList().size() \u003e\u003d MAX_QUESTIONS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            tempList.addAll(initOopList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        case EXTENSIONS:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            assert (initExtensionList().size() \u003e\u003d MAX_QUESTIONS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            tempList.addAll(initExtensionList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            tempList.addAll(initBasicList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            tempList.addAll(initOopList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            tempList.addAll(initExtensionList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            assert (tempList.size() \u003e\u003d MAX_QUESTIONS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        ArrayList\u003cInteger\u003e chosenNumbers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_QUESTIONS; i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            int randomNum;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            do {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                randomNum \u003d rand.nextInt(tempList.size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } while (chosenNumbers.contains(randomNum)); // prevents repeat questions"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            chosenNumbers.add(randomNum);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                chosenQuestions.add(tempList.get(randomNum));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "                throw new DukeException(\"Something went wrong when loading the quiz: index out of bounds.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        return chosenQuestions;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 1,
      "claysmilesoil": 107,
      "kishore03109": 59
    }
  },
  {
    "path": "src/main/java/javacake/tasks/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date dateNow;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialises the description of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing description"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *                    of the task inputted by user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param by The details of when task is to be done"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline(String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        taskType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cDateGroup\u003e groups \u003d parser.parse(by);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            dateNow \u003d groups.get(0).getDates().get(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"   Date cannot be parsed: \" + by);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the task type in [] format and"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * its description."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing type and description"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[D]\" + description + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFullString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[D][\" + getStatusIcon() + \"] \" + description + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to get date of task if possible."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing the date of Task"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return dateNow;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to get details of extra details"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * concerning the task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing details of when task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         is to be done by"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getExtra() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public void changeDate(String newDate) { "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        this.by \u003d newDate; "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 3,
      "-": 66,
      "kishore03109": 4
    }
  },
  {
    "path": "src/main/java/javacake/tasks/RecurringTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "import javacake.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class RecurringTask extends ToDo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Frequency frequency;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String freq;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public enum Frequency {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        DAILY, WEEKLY, MONTHLY"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for recurring tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Task description"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param startDateTime Starting date of task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param frequency daily, weekly or monthly"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public RecurringTask(String description, Date startDateTime, String frequency) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.date \u003d startDateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            setFrequency(frequency);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            //e.getMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        //update date if it is past current date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        while (date.before(currentDate)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            unmark();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            c.setTime(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (this.frequency) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            case DAILY:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                c.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            case WEEKLY:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                c.add(Calendar.WEEK_OF_YEAR, 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            case MONTHLY:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                c.add(Calendar.MONTH, 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            date \u003d c.getTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setFrequency(String freq) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (freq) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"daily\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            this.frequency \u003d Frequency.DAILY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            this.freq \u003d \"d\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"weekly\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            this.frequency \u003d Frequency.WEEKLY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            this.freq \u003d \"w\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"monthly\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            this.frequency \u003d Frequency.MONTHLY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            this.freq \u003d \"m\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Please enter a frequency: daily, weekly or monthly\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"[\" + freq + \"]\" + description);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFullString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"[R][\" + freq + \"]\" + \"[\" + getStatusIcon() + \"] \" + description + \" (at: \" + date + \")\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getExtra() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.date.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to get frequency."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Frequency type"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Frequency getFrequency() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.frequency;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 2,
      "-": 100
    }
  },
  {
    "path": "src/main/java/javacake/tasks/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    protected TaskType taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public enum TaskType {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        TODO, DEADLINE"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialises description of task and sets it to !isDone."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *                    of the task inputted by user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the status icon based on \u0027isDone\u0027."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing the status icon"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"✓\" : \"✗\"); //return tick or X symbols"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to check whether task is done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true when task is done, false otherwise"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFullString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method to mark task as done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void unmark() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract Date getDateTime();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String getExtra();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public abstract void changeDate(String newDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 2,
      "-": 61,
      "kishore03109": 2
    }
  },
  {
    "path": "src/main/java/javacake/tasks/ToDo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "package javacake.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialises the description of the task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing description"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     *                    of the task inputted by user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the task type in [] format and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * its description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing type and description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T]\" + description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFullString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T][\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * No extra in this task type."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Null String"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getExtra() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * No date in this task type."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Null String"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * Empty method as Event does not have date."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     * @param newDate New scheduled date for task."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public void changeDate(String newDate) { "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 1,
      "-": 48,
      "kishore03109": 8
    }
  },
  {
    "path": "src/main/java/javacake/topics/ListFormat.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.topics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public abstract class ListFormat {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ArrayList\u003cString\u003e al;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Prints all the strings in the ArrayList al."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public abstract String printList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 12,
      "RusdiHaizim": 2
    }
  },
  {
    "path": "src/main/java/javacake/topics/ListIndex1.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "package javacake.topics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "public class ListIndex1 extends ListFormat {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public ArrayList\u003cString\u003e listIndex1SubList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * List at index 1."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public ListIndex1() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        listIndex1SubList.add(\"Print\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        listIndex1SubList.add(\"Read\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        listIndex1SubList.add(\"Classes and Objects\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        listIndex1SubList.add(\"Quiz\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to print the contents of the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String printList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        int indexCount \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Here are the \").append(listIndex1SubList.size()).append(\" subtopics available.\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        for (String topicsInMainList : listIndex1SubList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(\"1.\").append(indexCount).append(\". \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(topicsInMainList).append(\"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            indexCount++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Key in the index to learn more about the topic!\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 14,
      "kishore03109": 19,
      "claysmilesoil": 1
    }
  },
  {
    "path": "src/main/java/javacake/topics/ListIndex2.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "package javacake.topics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "public class ListIndex2 extends ListFormat {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public ArrayList\u003cString\u003e listIndex2SubList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kishore03109"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * List at Index 2."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    public ListIndex2() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        listIndex2SubList.add(\"Inheritance\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        listIndex2SubList.add(\"Encapsulation\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        listIndex2SubList.add(\"Abstration\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        listIndex2SubList.add(\"Polymorphism\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        listIndex2SubList.add(\"Quiz\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to print the contents of the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String printList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        int indexCount \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Here are the \").append(listIndex2SubList.size()).append(\" subtopics available.\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        for (String topicsInMainList : listIndex2SubList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(\"2.\").append(indexCount).append(\". \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(topicsInMainList).append(\"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "            indexCount++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Key in the index to learn more about the topic!\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kishore03109"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "RusdiHaizim": 14,
      "kishore03109": 20,
      "claysmilesoil": 1
    }
  },
  {
    "path": "src/main/java/javacake/topics/ListIndex3.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.topics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class ListIndex3 extends ListFormat {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ArrayList\u003cString\u003e listIndex3SubList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * List at Index 3."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ListIndex3() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        listIndex3SubList.add(\"Enumerations\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        listIndex3SubList.add(\"Varargs\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        listIndex3SubList.add(\"Exceptions\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        listIndex3SubList.add(\"Quiz\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Method to print the contents of the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String printList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        int indexCount \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Here are the \").append(listIndex3SubList.size()).append(\" subtopics available.\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        for (String topicsInMainList : listIndex3SubList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(\"3.\").append(indexCount).append(\". \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(topicsInMainList).append(\"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            indexCount++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Key in the index to learn more about the topic!\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 19,
      "RusdiHaizim": 14,
      "claysmilesoil": 1
    }
  },
  {
    "path": "src/main/java/javacake/topics/MainList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.topics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class MainList extends ListFormat {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public ArrayList\u003cString\u003e mainContentList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Adds the available content in the main list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public MainList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        mainContentList.add(\"Java Basics\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        mainContentList.add(\"OOP concepts\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        mainContentList.add(\"Useful Extensions\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        mainContentList.add(\"Overall Quiz\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     * Prints the available content in the main list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    public String printList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        int indexCount \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Here are the \").append(mainContentList.size()).append(\" topics available.\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        for (String topicsInMainList : mainContentList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(indexCount).append(\". \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "            stringBuilder.append(topicsInMainList).append(\"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            indexCount++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        stringBuilder.append(\"Key in the index to learn more about the topic!\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 26,
      "RusdiHaizim": 7,
      "claysmilesoil": 1
    }
  },
  {
    "path": "src/main/java/javacake/topics/TopicProgress.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "package javacake.topics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import javacake.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "import java.nio.Buffer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "public class TopicProgress {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public enum TopicDifficulty {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    private String compileResult(BufferedReader br, String bufferResult) throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        if ((br.readLine()).equals(\"0\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return \"0\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return \"1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * Blank method."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @return String containing content of content."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     * @throws DukeException error when error todo"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    public String viewSubTopic1Result() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        String bufferResult \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(\"content/Result/ListIndex1/javabasics/EasyQuiz.txt\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            bufferResult +\u003d compileResult(br, bufferResult);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            System.out.println(bufferResult);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            br \u003d new BufferedReader(new FileReader(\"content/Result/ListIndex1/javabasics/MediumQuiz.txt\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            bufferResult +\u003d compileResult(br, bufferResult);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            System.out.println(bufferResult);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            br \u003d new BufferedReader(new FileReader(\"content/Result/ListIndex1/javabasics/HardQuiz.txt\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            bufferResult +\u003d compileResult(br, bufferResult);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            System.out.println(bufferResult);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            return bufferResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 42,
      "RusdiHaizim": 6
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"javacake.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RusdiHaizim"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"Infinity\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GlenWong97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "GlenWong97": 18,
      "RusdiHaizim": 1
    }
  },
  {
    "path": "src/test/java/QuestionListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.BasicQuestion;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import javacake.quiz.QuestionList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import static javacake.quiz.QuestionList.MAX_QUESTIONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "public class QuestionListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    public void initializeBasicQuizTest() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        QuestionList test \u003d new QuestionList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        ArrayList\u003cQuestion\u003e testQuestions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        testQuestions \u003d test.pickQuestions(Question.QuestionType.BASIC);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        // check if there are the correct number and type of test questions"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        assertEquals(testQuestions.size(), MAX_QUESTIONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        for (Question qn : testQuestions) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "            assertEquals(qn.getClass(), BasicQuestion.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        // check if there are any duplicate questions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        Set\u003cQuestion\u003e set \u003d new HashSet\u003c\u003e(testQuestions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "        assertEquals(set.size(), testQuestions.size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claysmilesoil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claysmilesoil": 31
    }
  }
]
