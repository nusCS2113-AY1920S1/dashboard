[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "test {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "jacoco {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    toolVersion \u003d \"0.8.4\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    reportsDir \u003d file(\"$buildDir/customJacocoReportDir\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    mainClassName \u003d \"compal.Main\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"COMPal\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"1.1\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LTPZ": 1,
      "SholihinK": 21,
      "jaedonkey": 1,
      "-": 42
    }
  },
  {
    "path": "src/main/java/compal/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.ui.UiManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.ui.UiUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " * Initializes GUI."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Constructs a new Main object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Main() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        UiUtil uiUtil \u003d new UiUtil();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.ui \u003d new UiManager(uiUtil);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Initializes and sets up the GUI."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param primaryStage The stage for GUI."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 5,
      "SholihinK": 22,
      "jaedonkey": 11
    }
  },
  {
    "path": "src/main/java/compal/commons/CompalUtils.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "package compal.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class CompalUtils {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Converts a date string to a Date object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param dateStr The date string to be converted."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return The date string in the form of a Date object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @author Yue Jun Yi, yueyeah"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static Date stringToDate(String dateStr) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date date \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            date \u003d format.parse(dateStr);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Converts a Date object to a date string. Correct type for creating a Task object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param date The date in the form of a Date object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return The date in the form of a String object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @author Yue Jun Yi, yueyeah"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static String dateToString(Date date) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return format.format(date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 37
    }
  },
  {
    "path": "src/main/java/compal/commons/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND \u003d \"Error: Unknown command input detected!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_EMPTY_INPUT \u003d \"Empty Input: Empty input detected!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_MISSING_INPUTS \u003d \"Error: Missing input detected\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_RANGE \u003d \"RangeError: Invalid range detected for execution of command!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMATTING \u003d \"DateFormattingError: Date format input is invalid! \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"Please make sure is dd/mm/yyyy format.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_YEAR \u003d \"YearRangeError: You can only put input \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"schedule of the current year onwards!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String MESSAGE_INVALID_MINUTE \u003d \"MinuteRangeError: You can only input \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        + \"a value between 0 and 59 inclusive!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_NUMBER \u003d \"TaskNumberError: You can only input \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        + \"a valid task number!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK \u003d \"TaskError: You can only input a task with a future due date!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME_RANGE \u003d \"TimeRangeError: End time is before start time!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_INVALID_REP_RANGE \u003d \"RepRangeError: The number of reps of a Recurring Task\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \" has to be greater than 1. Please use event command if your Task does not recur more than once.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_MISSING_DESC \u003d \"DescError: Description field cannot be empty.\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \" Please enter a description\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_MISSING_HOUR \u003d \"Empty Hour Error: Required hour input!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_MISSING_MIN \u003d \"Empty Min Error: Required minute input!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_MISSING_DATE \u003d \"Empty Date Error: Required date input!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_MISSING_TIME \u003d \"MissingTimeError: Time field cannot be empty.\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \" Please enter a valid time.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String MESSAGE_MISSING_PRIORITY \u003d \"MissingPriorityError: Priority \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"field cannot be empty.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_MISSING_REP \u003d \"MissingRepError: Rep field cannot be empty.\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"Please enter a valid number of repetitions greater than 1.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_MISSING_EDATE \u003d \"MissingEndDateError: End date cannot be empty. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"Please enter a valid end date for your semester.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_MISSING_REP_EDATE_ARG \u003d \"ArgumentError: Missing /rep and /edate\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_MISSING_DATE_ARG \u003d \"ArgumentError: Missing /date\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_MISSING_START_TIME_ARG \u003d \"ArgumentError: Missing /start\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_MISSING_END_TIME_ARG \u003d \"ArgumentError: Missing /end\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_MISSING_HOUR_ARG \u003d \"ArgumentError: Missing /hour\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_MISSING_MIN_ARG \u003d \"ArgumentError: Missing /min\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String MESSAGE_MISSING_PRIORITY_ARG \u003d \"ArgumentError: Missing /priority\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String MESSAGE_MISSING_NUM \u003d \"Empty number error: Required command number input!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String MESSAGE_MISSING_SEARCH \u003d \"Empty search content error: Required search content input!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String MESSAGE_INVALID_HELP_INPUT \u003d \"Invalid input for help function\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_MISSING_COMMAND_ARG \u003d \"ArgumentError: Missing argument detected!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_MISSING_EDATE_ARG \u003d \"ArgumentError: Missing /edate\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INIT_REMINDER \u003d \"view-reminder\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"DateError: You can only input current or future date!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_ID \u003d \"TaskIDError: No such task found\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public static final String MESSAGE_INVALID_PRIORITY \u003d \"No such priority level\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static Date currentDate \u003d java.util.Calendar.getInstance().getTime();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_TIME_INPUT \u003d \"DateTimeError: You can only add \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"task after current date and time:\\n\" + currentDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 3,
      "Catherinetan99": 7,
      "SholihinK": 38,
      "jaedonkey": 2,
      "yueyeah": 9
    }
  },
  {
    "path": "src/main/java/compal/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.ParserManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.storage.TaskStorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.ui.UiUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * The LogicManager Class handles the logic of Wallet."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class LogicManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final String BYE_TOKEN \u003d \"bye.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private final UiUtil uiUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ParserManager parserManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private TaskStorageManager taskStorageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Construct logic manager class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public LogicManager() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.parserManager \u003d new ParserManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        this.taskStorageManager \u003d new TaskStorageManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.uiUtil \u003d new UiUtil();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrList \u003d new ArrayList\u003c\u003e(taskStorageManager.loadData());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskList.setArrList(taskArrList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Passes user input to parserManager to be processed. parserManager returns suitable"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * command object to carry out the user\u0027s aim."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public void logicExecute(String fullCommand) throws CommandException, ParserException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        uiUtil.clearPrimary();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Command command \u003d parserManager.processCmd(fullCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        CommandResult cmdResult \u003d command.commandExecute(taskList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        uiUtil.printg(cmdResult.feedbackToUser);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        //save to file if required"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (cmdResult.requireSaving) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskStorageManager.saveData(taskList.getArrList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (cmdResult.feedbackToUser.equals(BYE_TOKEN)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 2,
      "SholihinK": 57,
      "jaedonkey": 6
    }
  },
  {
    "path": "src/main/java/compal/logic/command/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public CommandResult commandExecute(TaskList task) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return new CommandResult(\"bye.\", true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 11,
      "jaedonkey": 1
    }
  },
  {
    "path": "src/main/java/compal/logic/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * CONSTANTS."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int DEFAULT_WEEK_INTERVAL \u003d 7;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param task {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public abstract CommandResult commandExecute(TaskList task) throws CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Increases date by week, to assign event slots for each week."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param initialDate The date to increment"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Final date one week later than initialDate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @author Yue Jun Yi, yueyeah"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public Date incrementDateByWeek(Date initialDate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        calendar.setTime(initialDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        calendar.add(Calendar.DATE, DEFAULT_WEEK_INTERVAL);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date finalDate \u003d calendar.getTime();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return finalDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 14,
      "yueyeah": 25
    }
  },
  {
    "path": "src/main/java/compal/logic/command/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public final boolean requireSaving;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Return command results."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param feedbackToUser the string feedback"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param requireSaving  if command require saving"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean requireSaving) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.requireSaving \u003d requireSaving;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 25
    }
  },
  {
    "path": "src/main/java/compal/logic/command/DeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.CompalUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LTPZ"
        },
        "content": " * Add a deadline type task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LTPZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final String MESSAGE_GREETING \u003d \"The following tasks were added: \\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cString\u003e startDateList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    private Task.Priority priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String finalDateString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * This is the constructor."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * @param description   description of deadline."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * @param priority      priority of deadline."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param startDateList date of deadline."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * @param endTime       end time of deadline."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public DeadlineCommand(String description, Task.Priority priority, ArrayList\u003cString\u003e startDateList,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                           String endTime, String finalDateString) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.startDateList \u003d startDateList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.finalDateString \u003d finalDateString;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String finalList \u003d MESSAGE_GREETING;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Date finalDate \u003d CompalUtils.stringToDate(finalDateString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (String startDateString : startDateList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Date startDate \u003d CompalUtils.stringToDate(startDateString);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            while (!startDate.after(finalDate)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                startDateString \u003d CompalUtils.dateToString(startDate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                Deadline indivDeadline \u003d new Deadline(description, priority, startDateString, endTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                taskList.addTask(indivDeadline);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                finalList +\u003d indivDeadline.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                startDate \u003d incrementDateByWeek(startDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return new CommandResult(finalList, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 31,
      "SholihinK": 25,
      "jaedonkey": 1
    }
  },
  {
    "path": "src/main/java/compal/logic/command/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Mark a task as done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String COMMAND_PREFIX \u003d \"Noted. I have mark the below task as done: \\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String COMMAND_ALR_DONE \u003d \"Task to be mark done is already marked as done! \\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int taskID;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public DoneCommand(int taskID) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskID \u003d taskID;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Task task \u003d taskList.getTaskById(taskID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Boolean isDone \u003d task.getisDone();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (!isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return new CommandResult(COMMAND_PREFIX.concat(task.toString()), true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return new CommandResult(COMMAND_ALR_DONE.concat(task.toString()), false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 31,
      "jaedonkey": 1
    }
  },
  {
    "path": "src/main/java/compal/logic/command/EventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.commons.CompalUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final String MESSAGE_GREETING \u003d \"The following tasks were added: \\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private ArrayList\u003cString\u003e startDateList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private Task.Priority priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private String finalDateString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Constructor for the Event Command object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param description     Description of the event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param startDateList   List of dates when the event will start"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param priority        Priority assigned to the event"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param startTime       Start time of the event"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param endTime         End time of the event"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param finalDateString Final possible date that the event will occur"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public EventCommand(String description, ArrayList\u003cString\u003e startDateList, Task.Priority priority, String startTime,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        String endTime, String finalDateString) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.startDateList \u003d startDateList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.finalDateString \u003d finalDateString;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String finalList \u003d MESSAGE_GREETING;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date finalDate \u003d CompalUtils.stringToDate(finalDateString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        for (String startDateString : startDateList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Date startDate \u003d CompalUtils.stringToDate(startDateString);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            while (!startDate.after(finalDate)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                startDateString \u003d CompalUtils.dateToString(startDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                Event indivEvent \u003d new Event(description, priority, startDateString, startTime, endTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                taskList.addTask(indivEvent);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                finalList +\u003d indivEvent.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                startDate \u003d incrementDateByWeek(startDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return new CommandResult(finalList, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 3,
      "jaedonkey": 1,
      "yueyeah": 56
    }
  },
  {
    "path": "src/main/java/compal/logic/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private String keyWord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public FindCommand(String keyWord) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        this.keyWord \u003d keyWord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        if (taskList.getArrList().isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return new CommandResult(\"You have no tasks at the moment!\",false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        Boolean isEmpty \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        for (Task task : taskList.getArrList()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (task.getDescription().toUpperCase().contains(keyWord.toUpperCase())) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                if (isEmpty) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                    sb.append(\"Your search result for the keyword \\\" + searchTerm + \\\": \\\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                    isEmpty \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                sb.append(task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return new CommandResult(\"No result found for \" + keyWord,false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return new CommandResult(sb.toString(),false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaedonkey": 41
    }
  },
  {
    "path": "src/main/java/compal/logic/command/SetReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "public class SetReminderCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String MESSAGE_INVALID_INPUT \u003d \"Error: Invalid input!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String COMMAND_PREFIX \u003d \"Noted. I have changed the reminder status of this task.\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int taskID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public SetReminderCommand(int taskID, String status) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        this.taskID \u003d taskID;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Task task \u003d taskList.getTaskById(taskID);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        boolean state;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (\"Y\".equals(status)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            state \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } else if (\"N\".equals(status)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            state \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_INPUT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        task.setHasReminder(state);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return new CommandResult(COMMAND_PREFIX.concat(task.toString()), true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 30,
      "SholihinK": 3
    }
  },
  {
    "path": "src/main/java/compal/logic/command/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.ui.CalenderUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * View the task in day,week or month format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final String MESSAGE_UNABLE_TO_EXECUTE \u003d \"Unable to execute command!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String[] viewargs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private CalenderUtil calenderUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String viewType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String dateInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Generate constructor for viewCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param viewType  the view Type"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param dateInput the date of input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public ViewCommand(String viewType, String dateInput) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.viewType \u003d viewType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.dateInput \u003d dateInput;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.type \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        calenderUtil \u003d new CalenderUtil();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * override."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param typeToShow the type to be display only"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public ViewCommand(String viewType, String dateInput, String typeToShow) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.viewType \u003d viewType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.dateInput \u003d dateInput;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (\"deadline\".equals(typeToShow)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            this.type \u003d \"D\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (\"event\".equals(typeToShow)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            this.type \u003d \"E\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        calenderUtil \u003d new CalenderUtil();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        ArrayList\u003cTask\u003e currList \u003d taskList.getArrList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String[] dateParts \u003d dateInput.split(\"/\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int month \u003d Integer.parseInt(dateParts[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int year \u003d Integer.parseInt(dateParts[2]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String finalList \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        switch (viewType) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case \"month\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            finalList \u003d displayMonthView(month, year, currList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case \"week\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            finalList \u003d displayWeekView(dateInput, currList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case \"day\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            finalList \u003d finalList + (\"Your daily schedule for \" + dateInput + \" :\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            finalList \u003d finalList + displayDayView(dateInput, currList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            calenderUtil.dateViewRefresh(dateInput);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return new CommandResult(finalList, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * return all task for a given month."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param givenMonth the month input by user."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param givenYear  the year input by user."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param currList   the curr taskList of task."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return stringo output"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String displayMonthView(int givenMonth, int givenYear, ArrayList\u003cTask\u003e currList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String[] months \u003d {\"\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int[] days \u003d {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder monthlyTask \u003d new StringBuilder(\"Your monthly schedule for \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + months[givenMonth] + \" \" + givenYear + \" :\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d days[givenMonth]; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (i \u003c 9) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                monthlyTask.append(displayDayView(\"0\" + i + \"/\" + givenMonth + \"/\" + givenYear, currList));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                monthlyTask.append(displayDayView(i + \"/\" + givenMonth + \"/\" + givenYear, currList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return monthlyTask.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * return all task for a given week."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param dateInput the date of task input."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param currList  the curr taskList of task."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return string output"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String displayWeekView(String dateInput, ArrayList\u003cTask\u003e currList) throws CommandException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Date week;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            week \u003d dateFormat.parse(dateInput);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new CommandException(MESSAGE_UNABLE_TO_EXECUTE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        cal.setTime(week);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int daysInWeek \u003d 7;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String[] dates \u003d new String[daysInWeek];"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder[] dailyTask \u003d new StringBuilder[daysInWeek];"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (int i \u003d 0; i \u003c daysInWeek; i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            dates[i] \u003d dateFormat.format(cal.getTime());//Date of Monday of current week"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            dailyTask[i] \u003d new StringBuilder();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            cal.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        cal.setTime(week);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder weeklyTask \u003d new StringBuilder(\"Your weekly schedule from \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + dates[0] + \" to \" + dates[6] + \" :\\n\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (int i \u003d 0; i \u003c daysInWeek; i++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            dailyTask[i].append(displayDayView(dates[i], currList));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            weeklyTask.append(dailyTask[i]);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return weeklyTask.toString();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * return all task for a given day."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param dateInput the date of task input."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param currList  the curr taskList of task."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return string output"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String displayDayView(String dateInput, ArrayList\u003cTask\u003e currList) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder allTask \u003d new StringBuilder();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task t : currList) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (!\"\".equals(type) \u0026\u0026 !t.getSymbol().equals(type)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (t.getStringDate().equals(dateInput)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                allTask.append(getAsStringView(t));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (allTask.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            allTask.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String header \u003d \"\\n\" + \"_\".repeat(65) + \"\\n\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \" \".repeat((100)) + dateInput + \"\\n\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return header + allTask.toString();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String getAsStringView(Task t) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder taskDetails \u003d new StringBuilder();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String rightArrow \u003d \"\\u2192\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        boolean isDone \u003d t.getisDone();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String status;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            status \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            status \u003d \"\\u274C\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String startTime \u003d t.getStringStartTime();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String endTime \u003d t.getStringEndTime();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (\"-\".equals(startTime)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskDetails.append(\"  Due: \").append(endTime)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskDetails.append(\"  Time: \").append(startTime)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                .append(\" \").append(rightArrow)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                .append(\" \").append(endTime)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int taskId \u003d t.getId();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Task.Priority priority \u003d t.getPriority();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskDetails"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            .append(\"  [Task ID:\").append(taskId).append(\"] \")"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            .append(\"[Priority:\").append(priority).append(\"]\\n\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String taskSymbol \u003d t.getSymbol();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String taskDescription \u003d t.getDescription();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskDetails.append(\"  [\").append(taskSymbol).append(\"] \")"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            .append(\"[\").append(status).append(\"] \")"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            .append(taskDescription).append(\"\\n\\n\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return taskDetails.toString();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 238,
      "jaedonkey": 1
    }
  },
  {
    "path": "src/main/java/compal/logic/command/ViewReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "public class ViewReminderCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Comparator\u003cTask\u003e compareByDateTime \u003d Comparator.comparing(Task::getDate);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        ArrayList\u003cTask\u003e currList \u003d taskList.getArrList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        currList.sort(compareByDateTime);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String taskReminders \u003d getTaskReminders(currList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return new CommandResult(taskReminders, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Returns task reminders."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param currList List of tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return String of tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private String getTaskReminders(ArrayList\u003cTask\u003e currList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        StringBuilder taskReminder \u003d new StringBuilder(\"Here are your tasks:\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date currentDate \u003d Calendar.getInstance().getTime();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.setTime(currentDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.add(Calendar.DATE, 7);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date dateAfter \u003d calendar.getTime();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.setTime(currentDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date dateToday \u003d calendar.getTime();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        for (Task task : currList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (!task.gethasReminder() \u0026\u0026 ((task.getEndTime().after(dateToday)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                \u0026\u0026 task.getEndTime().before(dateAfter)) || task.gethasReminder())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                String taskString \u003d task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                taskReminder.append(taskString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return taskReminder.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 51,
      "SholihinK": 1,
      "jaedonkey": 1
    }
  },
  {
    "path": "src/main/java/compal/logic/command/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.ui.UiUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * This static inner class is the custom exception class extending Exception"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * that overwrites toString() for returning custom exception messages."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * It is thrown when command is unknown or when there are invalid arguments."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private UiUtil uiUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public CommandException(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        uiUtil \u003d new UiUtil();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        uiUtil.printg(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 26
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/CommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.commons.CompalUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public interface CommandParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * TOKENS FOR PARSING BELOW."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    String TOKEN_TASK_ID \u003d \"/id\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    String TOKEN_STATUS \u003d \"/s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    String TOKEN_SLASH \u003d \"/\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    String TOKEN_END_TIME \u003d \"/end\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String TOKEN_DATE \u003d \"/date\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String TOKEN_PRIORITY \u003d \"/priority\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String TOKEN_START_TIME \u003d \"/start\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String TOKEN_FINAL_DATE \u003d \"/final-date\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    char TOKEN_SLASH_CHAR \u003d \u0027/\u0027;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    String TOKEN_TYPE \u003d \"/type\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String EMPTY_INPUT_STRING \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    int DEFAULT_WEEK_NUMBER_OF_DAYS \u003d 7;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * ERROR MESSAGES BELOW."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    String MESSAGE_MISSING_TOKEN \u003d \"Error: Missing token!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    String MESSAGE_MISSING_INPUT \u003d \"Error: Missing input!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    String MESSAGE_INVALID_DATE_FORMAT \u003d \"Invalid Date input!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String MESSAGE_MISSING_DATE_ARG \u003d \"ArgumentError: Missing /date\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String MESSAGE_EXCESSIVE_DATES \u003d \"Too many dates! Please limit to less than 7.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String MESSAGE_MISSING_START_TIME_ARG \u003d \"ArgumentError: Missing /start\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String MESSAGE_MISSING_END_TIME_ARG \u003d \"ArgumentError: Missing /end\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String MESSAGE_MISSING_FINAL_DATE_ARG \u003d \"ArgumentError: Missing /final-date\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    String MESSAGE_INVALID_TYPE \u003d \"Error: The type does not exist!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Method specification for different command parsers to parse user input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return a suitable Command object that will carry out the user\u0027s intention."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws ParserException Invalid input, varies for each command parser."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    Command parseCommand(String restOfInput) throws ParserException;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * GETTERS FOR TOKENS BELOW"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Returns the type of task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return type"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @throws ParserException if the token (/task) is missing or task type"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *                         does not exist."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    default String getType(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (restOfInput.contains(TOKEN_TYPE)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_TYPE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String typeStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Scanner scanner \u003d new Scanner(typeStartInput);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String typeInput \u003d scanner.next();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Set\u003cString\u003e taskTypes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskTypes.add(\"deadline\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskTypes.add(\"event\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (taskTypes.contains(typeInput)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                return typeInput;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_TYPE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_TOKEN);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Returns the task ID in the String input."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return taskID"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @throws ParserException if the token (/id) or id number is missing"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default int getTokenTaskID(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (restOfInput.contains(TOKEN_TASK_ID)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_TASK_ID);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String taskIdStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Scanner scanner \u003d new Scanner(taskIdStartInput);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            int taskId \u003d Integer.parseInt(scanner.next());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return taskId;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_TOKEN);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Returns the reminder status in the String input."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return reminder status"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @throws ParserException if the token (/s) or reminder status is missing"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default String getTokenStatus(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (restOfInput.contains(TOKEN_STATUS)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_STATUS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String statusStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Scanner scanner \u003d new Scanner(statusStartInput);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String statusField \u003d scanner.next();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return statusField;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_TOKEN);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Parses through user input for description field, and returns the description if present."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Description without date and time."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws ParserException If description field is missing, if there are no tokens present."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default String getTokenDescription(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (!restOfInput.contains(TOKEN_SLASH)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_TOKEN);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int splitPoint \u003d restOfInput.indexOf(TOKEN_SLASH);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String desc \u003d restOfInput.substring(0, splitPoint).trim();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (desc.matches(EMPTY_INPUT_STRING)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return desc;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * Returns a date string if specified in the task."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * @param restOfInput Input description after initial command word."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * @return Date in the form of a string."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * @throws ParserException If date field is empty, date or date format is invalid,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     *                         date token (/date) is missing."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default ArrayList\u003cString\u003e getTokenDate(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (restOfInput.contains(TOKEN_DATE)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_DATE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String dateStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Scanner scanner \u003d new Scanner(dateStartInput);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            ArrayList\u003cString\u003e startDateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int dateCount \u003d 0;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                String eachDateString \u003d scanner.next();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                if (eachDateString.charAt(0) \u003d\u003d TOKEN_SLASH_CHAR) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                dateCount++;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                if (dateCount \u003d\u003d DEFAULT_WEEK_NUMBER_OF_DAYS) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    throw new ParserException(MESSAGE_EXCESSIVE_DATES);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                if (isDateValid(eachDateString)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    startDateList.add(eachDateString);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    throw new ParserException(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return startDateList;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_DATE_ARG);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Parses through user input for priority token, and returns the enum priority if present."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Task.Priority enum"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws ParserException if the priority is not given after the priority token"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default Task.Priority getTokenPriority(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Task.Priority priorityField;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (restOfInput.contains(TOKEN_PRIORITY)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_PRIORITY);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String priorityStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Scanner scanner \u003d new Scanner(priorityStartInput);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String commandPriority \u003d scanner.next();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            priorityField \u003d Task.Priority.valueOf(commandPriority.toLowerCase());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            priorityField \u003d Task.Priority.low;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return priorityField;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Parses through user input for /start token and return the start time."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Start time in the form of a String"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws ParserException if start time is not entered after the /start token, or /start token is missing"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @author: Yue Jun Yi, yueyeah"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default String getTokenStartTime(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (restOfInput.contains(TOKEN_START_TIME)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_START_TIME);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String startTimeStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Scanner scanner \u003d new Scanner(startTimeStartInput);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String startTimeField \u003d scanner.next();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return startTimeField;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_START_TIME_ARG);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Parses through user input for /end token and return the end time."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return End time in the form of a String"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws ParserException if end time is not entered after the /end token, or /end token is missing"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default String getTokenEndTime(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (restOfInput.contains(TOKEN_END_TIME)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_END_TIME);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String endTimeStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Scanner scanner \u003d new Scanner(endTimeStartInput);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String endTimeField \u003d scanner.next();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return endTimeField;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_END_TIME_ARG);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Parses through the user input for /final-date token and return the final date of iteration of events/deadline."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * The presence of the /final-date token must be checked first in the specialised"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * command parser calling this method."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Final date of iteration in the form of a String"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws ParserException if final date is not entered after the /final-date token"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @author Yue Jun Yi, yueyeah"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default String getTokenFinalDate(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int startPoint \u003d restOfInput.indexOf(TOKEN_FINAL_DATE);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String finalDateStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Scanner scanner \u003d new Scanner(finalDateStartInput);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        scanner.next();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String finalDateField \u003d scanner.next();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (isDateValid(finalDateField)) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return finalDateField;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * MISCELLANEOUS METHODS BELOW"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Checks if input date and time is after current date time."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param inputDate The date of input"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param inputTime the time of input"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return True or false depending if the date and time is after or before."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default boolean isValidDateAndTime(String inputDate, String inputTime) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date inputDateFormat \u003d CompalUtils.stringToDate(inputDate);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        c.setTime(inputDateFormat);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        c.set(Calendar.HOUR_OF_DAY, Integer.parseInt(inputTime.substring(0, 2)));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        c.set(Calendar.MINUTE, Integer.parseInt(inputTime.substring(2, 4)));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date inputDateAndTime \u003d c.getTime();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date currentDate \u003d Calendar.getInstance().getTime();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        c.setTime(currentDate);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date currDateAndTime \u003d c.getTime();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return inputDateAndTime.after(currDateAndTime);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Check if the date input is of valid format."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param date the string of the date input"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    default boolean isDateValid(String date) throws ParserException {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        final String DATE_FORMAT \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            DateFormat df \u003d new SimpleDateFormat(DATE_FORMAT);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            df.setLenient(false);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            df.parse(date);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Check if the user input contains the token."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param token       The token to be checked"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return True if the token exists in the user input, False if not."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default boolean hasToken(String restOfInput, String token) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return (restOfInput.contains(token));"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 12,
      "Catherinetan99": 40,
      "SholihinK": 70,
      "yueyeah": 234,
      "-": 6
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/DeadlineCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.logic.command.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "public class DeadlineCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        ArrayList\u003cString\u003e startDateList \u003d getTokenDate(restOfInput);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Task.Priority priority \u003d getTokenPriority(restOfInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String endTime \u003d getTokenEndTime(restOfInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String description \u003d getTokenDescription(restOfInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String finalDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (hasToken(restOfInput, TOKEN_FINAL_DATE)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            finalDate \u003d getTokenFinalDate(restOfInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int lastStartDateIndex \u003d startDateList.size() - 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            finalDate \u003d startDateList.get(lastStartDateIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return new DeadlineCommand(description, priority, startDateList, endTime, finalDate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 14,
      "yueyeah": 13
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/DoneParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Parses input arguments and creates a new DoneCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class DoneParser implements CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int taskID \u003d getTokenTaskID(restOfInput);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return new DoneCommand(taskID);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 15,
      "yueyeah": 2
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/EventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.EventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class EventCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        ArrayList\u003cString\u003e startDateList \u003d getTokenDate(restOfInput);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Task.Priority priority \u003d getTokenPriority(restOfInput);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String startTime \u003d getTokenStartTime(restOfInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String endTime \u003d getTokenEndTime(restOfInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String description \u003d getTokenDescription(restOfInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String finalDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (hasToken(restOfInput, TOKEN_FINAL_DATE)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            finalDate \u003d getTokenFinalDate(restOfInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int lastStartDateIndex \u003d startDateList.size() - 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            finalDate \u003d startDateList.get(lastStartDateIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return new EventCommand(description, startDateList, priority, startTime, endTime, finalDate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 27
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.logic.command.FindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public class FindCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public Command parseCommand(String input) throws ParserException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return new FindCommand(input);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaedonkey": 16
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/ParserManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " * Deals with user inputs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class ParserManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    //***Class Properties/Variables***---------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_EXIT \u003d \"bye\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_CLEAR \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_RECUR_TASK \u003d \"recurtask\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_SET_REMINDER \u003d \"set-reminder\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String CMD_VIEW_REMINDER \u003d \"view-reminder\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_LECT \u003d \"lect\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_TUT \u003d \"tut\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_SECT \u003d \"sect\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_LAB \u003d \"lab\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String CMD_FIND_FREE_SLOT \u003d \"findfreeslot\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public static final String CMD_EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND \u003d \"Error: Unknown command input detected!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Processes command input by user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Based on the command input by user, it instantiates different command classes"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * and executes the respective methods implemented."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param userInput Entire user string input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @throws ParserException If command input is unknown or user input is empty."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public Command processCmd(String userInput) throws ParserException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String[] args \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String commandWord \u003d args[0];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String restOfInput \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (args.length !\u003d 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            restOfInput \u003d args[1];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case CMD_EXIT:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case CMD_VIEW:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return new ViewCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        case CMD_SET_REMINDER:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return new SetReminderParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        case CMD_VIEW_REMINDER:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return new ViewReminderParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case CMD_DEADLINE:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            return new DeadlineCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case CMD_DONE:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return new DoneParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case CMD_FIND:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return new FindCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case CMD_EVENT:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return new EventCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            //suppose to return helpCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LTPZ": 18,
      "Catherinetan99": 13,
      "SholihinK": 22,
      "jaedonkey": 2,
      "yueyeah": 2,
      "-": 20
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/SetReminderParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.SetReminderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "public class SetReminderParser implements CommandParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int taskID \u003d getTokenTaskID(restOfInput);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String status \u003d getTokenStatus(restOfInput);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return new SetReminderCommand(taskID, status);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 12,
      "yueyeah": 3
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/ViewCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.CompalUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.ViewCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class ViewCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAM \u003d \"Invalid parameter for view command.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_MISSING_DATE_INPUT \u003d \"Error: Missing date input\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * and returns an ViewCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput parameter of the input string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String[] viewArgs \u003d restOfInput.trim().split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String emptyString \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String viewType \u003d viewArgs[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (emptyString.equals(viewType)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_TOKEN);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        switch (viewType) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case \"month\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case \"week\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case \"day\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String finalDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (!restOfInput.contains(\"/date\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                Calendar currentDay \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                finalDate \u003d CompalUtils.dateToString(currentDay.getTime());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                ArrayList\u003cString\u003e startDateList \u003d getTokenDate(restOfInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int lastStartDateIndex \u003d startDateList.size() - 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                finalDate \u003d startDateList.get(lastStartDateIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (viewArgs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                return new ViewCommand(viewType, finalDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else if (viewArgs.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (restOfInput.contains(\"/type\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    String type \u003d getType(restOfInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    return new ViewCommand(viewType, finalDate, type);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    return new ViewCommand(viewType, finalDate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else if (viewArgs.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                String type \u003d getType(restOfInput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                return new ViewCommand(viewType, finalDate, type);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 68,
      "yueyeah": 3
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/ViewReminderParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.ViewReminderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "public class ViewReminderParser implements CommandParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return new ViewReminderCommand();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 12,
      "yueyeah": 1
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/exceptions/ParserException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.ui.UiUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * This static inner class is the custom exception class extending Exception"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * that overwrites toString() for returning custom exception messages."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * It is thrown when command is unknown or when there are invalid arguments."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class ParserException extends Exception {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private UiUtil uiUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public ParserException(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        uiUtil \u003d new UiUtil();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        uiUtil.printg(\"Parsing Exception:\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        uiUtil.printg(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 32
    }
  },
  {
    "path": "src/main/java/compal/model/tasks/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " * Represents assignment task type with a due date."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Constructs Deadline object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param description Description of deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param priority    priority level of task type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param date        Due date of deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param endTime     End time of deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Deadline(String description, Priority priority, String date, String endTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        super(description, priority);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        super.symbol \u003d \"D\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        super.setDate(date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        super.setEndTime(endTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 7,
      "SholihinK": 9,
      "jaedonkey": 5,
      "yueyeah": 1
    }
  },
  {
    "path": "src/main/java/compal/model/tasks/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " * Represents event task type with a starting date and time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Constructs Event object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param date        Starting date of event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param startTime   Starting time of event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param priority    priority level of task type"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param endTime     End time of deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Event(String description, Priority priority, String date, String startTime, String endTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        super(description, priority);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        super.symbol \u003d \"E\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        super.setDate(date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        super.setStartTime(startTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        super.setEndTime(endTime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 9,
      "SholihinK": 11,
      "jaedonkey": 3,
      "yueyeah": 1
    }
  },
  {
    "path": "src/main/java/compal/model/tasks/RecurringTask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " * Represents recurring task type with date and time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class RecurringTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String SYMBOL_RECURTASK \u003d \"RT\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Constructs RecurringTask object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param description Description of recurring task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param date        Starting date of recurring task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param startTime   Starting time of recurring task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param priority    priority level of task type"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param endTime     End time of deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public RecurringTask(String description, Priority priority, String date,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                         String startTime, String endTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        super(description, priority);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        super.setDate(date);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        super.setStartTime(startTime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        super.setEndTime(endTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        super.setSymbol(SYMBOL_RECURTASK);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 5,
      "SholihinK": 7,
      "yueyeah": 14
    }
  },
  {
    "path": "src/main/java/compal/model/tasks/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " * Represents task with description, status and reminder."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //***Class Properties/Variables***---------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    protected String symbol;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private Date date;   //For now, we only process dates in the format dd/mm/yyyy hhmm. See TaskList class for details"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Date startTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Date endTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private boolean hasReminder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private long priorityScore;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Constructs Task object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param description Description."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    protected Task(String description, Priority priority) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        hasReminder \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets priority status (HIGH, MEDIUM, LOW) of task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Priority status of task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Sets priority of task as HIGH, MEDIUM or LOW."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param priority Priority of task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Gets/returns task id."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Sets task id."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void setId(int id) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets status icon (tick or cross) of task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Status icon (tick or cross) of task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets status icon (tick or cross) of task in String."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @return Status icon (tick or cross) of task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public String getStringisDone() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return (isDone ? \"true\" : \"false\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets status icon (tick or cross) of task in Boolean."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Status icon (tick or cross) of task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public Boolean getisDone() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return (isDone);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets status icon (tick or cross) of task."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Status icon (tick or cross) of task."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public Boolean gethasReminder() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return (hasReminder);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Gets status icon (tick or cross) of task."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @return Status icon (tick or cross) of task."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public String getStringhasReminder() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return (hasReminder ? \"true\" : \"false\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets symbol of task."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Symbol of task."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String getSymbol() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Sets symbol of task to be symbolInput."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param symbolInput The symbol for the task."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public void setSymbol(String symbolInput) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        symbol \u003d symbolInput;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets date of task in date format."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Date of task."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        /*Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.setTime(this.date);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.HOUR_OF_DAY, 23);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.MINUTE, 59);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.date \u003d calendar.getTime();*/"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Formats dateInput then sets date as dateInput."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param dateInput Input date of task."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void setDate(String dateInput) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Date date \u003d null;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            date \u003d format.parse(dateInput);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets date of task in string."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Date of task."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String getStringDate() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String stringDate \u003d formatter.format(this.date);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return stringDate;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets durationHour of task."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Hour duration of task."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets hasReminder of task."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @return whether the task has reminder. If task has reminder, return true. Else false."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public boolean hasReminder() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return hasReminder;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Gets start time of task in date format."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Time of task."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Date getStartTime() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Formats start timeInput then sets time as timeInput."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param timeInput Input time of task."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void setStartTime(String timeInput) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Date time \u003d null;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            time \u003d format.parse(timeInput);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.startTime \u003d time;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Gets start time of task in string."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Time of task."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String getStringStartTime() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (this.startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return formatter.format(this.startTime);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets description of task."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Description of task."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Sets the description of task."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void setDescription(String newDescription) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.description \u003d newDescription;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Gets priorityScore."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @return priority score"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public long getPriorityScore() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return priorityScore;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Sets isDone as true."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Sets HasReminder."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public void setHasReminder(Boolean status) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        this.hasReminder \u003d status;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Returns the task as a formatted string."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * This function standardizes the displayed task format."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Task as a formatted string."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int strCase \u003d 0;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (getStartTime() \u003d\u003d null \u0026\u0026 getEndTime() !\u003d null) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            strCase \u003d 1;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        switch (strCase) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return \"\\n\" + \"[\" + getSymbol() + \"]\" + \"[\" + getStatusIcon() + \"] \" + getDescription()"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                + \" \\nTask ID:\" + getId()"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                + \" \\nDate: \" + getStringDate() + \" \\nEnd Time: \" + getStringEndTime()"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                + \" \\nPriority: \" + getPriority() + \"\\n***************\";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return \"\\n\" + \"[\" + getSymbol() + \"]\" + \"[\" + getStatusIcon() + \"] \" + getDescription()"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                + \" \\nTask ID:\" + getId()"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                + \" \\nDate: \" + getStringDate() + \" \\nStart Time: \" + getStringStartTime()"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                + \" \\nEnd Time: \" + getStringEndTime() + \" \\nPriority: \" + getPriority()"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                + \"\\n***************\";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Gets all the details of the task as a string, for saving into the text file."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @return saveString"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @author jaedonkey"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public String getAllDetailsAsString() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        StringBuilder list \u003d new StringBuilder();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(getId());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(getSymbol());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(getDescription());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        list.append(getStringisDone());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(getPriority().toString());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(getStringDate());"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        list.append(getStringStartTime());"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        list.append(getStringEndTime());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        list.append(getStringhasReminder());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return list.toString();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Calculates the priority of the task based on the user defined priority (high/med/low) as well as"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * the time remaining until the date set for the task."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @author jaedonkey"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @deprecated not in use for now"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Deprecated"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void calculateAndSetPriorityScore() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        long score;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        switch (priority) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        case high:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            score \u003d 100;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        case medium:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            score \u003d 50;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        case low:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            score \u003d 20;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            score \u003d 0;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        Date d \u003d new Date();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        long diff \u003d d.getTime() - this.date.getTime();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        long diffHours \u003d diff / (60 * 60 * 1000);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        //System.out.println(\"Task:LOG: Difference is \" + diffHours);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        score +\u003d diffHours;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.priorityScore \u003d score;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Gets the end time for the task."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @return date end time"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Date getEndTime() {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String endTime \u003d getStringEndTime();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        int hour \u003d Integer.parseInt(endTime.substring(0, 2));"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        int min \u003d Integer.parseInt(endTime.substring(2, 4));"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.HOUR, hour);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.MINUTE, min);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return calendar.getTime();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Formats end timeInput then sets end time as timeInput."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param timeInput Input time of task."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void setEndTime(String timeInput) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Date time \u003d null;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            time \u003d format.parse(timeInput);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.endTime \u003d time;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Gets end time of task in string."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return Time of task."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String getStringEndTime() {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (this.endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return formatter.format(this.endTime);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Create string of date and start time."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return string object of date and start time."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String getStringDateAndStartTime() {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return getStringDate() + \" \" + getStringStartTime();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Create a string of date and end time."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return string object of date and end time."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String getStringDateAndEndTime() {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return getStringDate() + \" \" + getStringEndTime();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Create a date object of date and start time."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return date object of formatted time."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Date getDateObgDateAndStartTime() {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Date date \u003d sdf.parse(getStringDateAndStartTime());"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Create a date object of date and end time."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return date object of formatted time."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Date getDateObgDateAndEndTime() {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Date date \u003d sdf.parse(getStringDateAndEndTime());"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public enum Priority {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        high, medium, low"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 125,
      "SholihinK": 209,
      "jaedonkey": 118,
      "yueyeah": 17
    }
  },
  {
    "path": "src/main/java/compal/model/tasks/TaskIdManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "package compal.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.util.BitSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public class TaskIdManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private BitSet idBitSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    TaskIdManager() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        BitSet bs \u003d readIdBitSet();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        if (bs !\u003d null) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            idBitSet \u003d (BitSet) readIdBitSet().clone();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            System.out.println(\"TaskList:LOG: No saved idbitset found\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            idBitSet \u003d new BitSet(1_000_000); //bitset of 1,000,000 bits (hard limit of no. of tasks)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Synchronizes all edits made to the user file to the serial file holding the bitmap."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param tl tasklist holding the arraylist of tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void synchronizeTaskIds(TaskList tl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        idBitSet.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        for (Task t:tl.getArrList()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            idBitSet.set(t.getId());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Assigns an ID to the task passed into it."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param t task to be assigned an id"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void generateAndSetId(Task t) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        int taskID;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        for (int i \u003d 0; i \u003c 1000000; i++) { //search for an unused task ID"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (!idBitSet.get(i)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                idBitSet.set(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                taskID \u003d i;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                t.setId(taskID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                System.out.println(\"Task assigned id of \" + taskID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                writeIdBitSet();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        //if reached this point means bitmap full"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Writes(saves) the current id bitset to file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void writeIdBitSet() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            ObjectOutputStream oos \u003d new ObjectOutputStream(new FileOutputStream(\"serial\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            oos.writeObject(idBitSet);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void clearId(int id) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        idBitSet.clear(id);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Reads in the saved idbitset as an object and returns it."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @return saved idbitset"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @author Jaedonkey"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public BitSet readIdBitSet() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        BitSet bs \u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            ObjectInputStream ois \u003d new ObjectInputStream(new FileInputStream(\"serial\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            bs \u003d (BitSet) ois.readObject();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return bs;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaedonkey": 101
    }
  },
  {
    "path": "src/main/java/compal/model/tasks/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.BitSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e arrlist;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private TaskIdManager taskIdManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Constructs TaskList object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        taskIdManager \u003d new TaskIdManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public ArrayList\u003cTask\u003e getArrList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return this.arrlist;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Sets the arrlist to arrlist. Called after loading data from file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param arrlist arraylist to set the arrlist"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void setArrList(ArrayList\u003cTask\u003e arrlist) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.arrlist \u003d arrlist;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        //make sure any user edits are brought over to the binary file as well"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        taskIdManager.synchronizeTaskIds(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //-----------------------\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //***FUNCTIONS FOR ADDING TASKS***----------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //-----------------------------------------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Handles the adding of the tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * It tests for the task type, then parses it according to the correct syntax."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Used in parser.processCommands."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param task Task to be added to the list of tasks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        //generate unique ID for task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        taskIdManager.generateAndSetId(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        arrlist.add(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        sortTask(arrlist);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Returns a task that has an id value of id."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Task getTaskById(int id) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        //search for task with id of id"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        for (Task t : arrlist) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (t.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                return t;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        throw null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Removes a task that has an id value of id."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Task removeTaskById(int id) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        //search for task with id of id"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        for (Task t : arrlist) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (t.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                arrlist.remove(t);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        throw null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Remove a task from the arrayList."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void removeTaskByIndex(int index) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        arrlist.remove(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Clears the current id for future tasks to use (used in deletion of tasks)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param id task id"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void unsetId(int id) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        taskIdManager.clearId(id);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        System.out.println(\"TaskList:LOG:\" + id + \" unset\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public ArrayList\u003cTask\u003e returnTaskList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return this.arrlist;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Sorts all the tasks in arrlist by date."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param arrlist sorted"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public void sortTask(ArrayList\u003cTask\u003e arrlist) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        boolean sorted \u003d false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        int arraySize \u003d arrlist.size();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        while (!sorted) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            sorted \u003d true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            for (int i \u003d 0; i \u003c arraySize - 1; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                Date task1Date \u003d arrlist.get(i).getDate();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                Date task2Date \u003d arrlist.get(i + 1).getDate();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                if (task1Date.after(task2Date)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    Task temp \u003d arrlist.get(i);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    arrlist.set(i, arrlist.get(i + 1));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    arrlist.set(i + 1, temp);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    sorted \u003d false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                if (task1Date.equals(task2Date)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    Date task1StartTime \u003d arrlist.get(i).getStartTime();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    Date taskStart2Time \u003d arrlist.get(i + 1).getStartTime();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    Date task1EndTime \u003d arrlist.get(i).getEndTime();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    Date task2EndTime \u003d arrlist.get(i + 1).getEndTime();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    /*if (task1StartTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        task1StartTime \u003d arrlist.get(i).getEndTime();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    if (taskStart2Time \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        taskStart2Time \u003d arrlist.get(i + 1).getEndTime();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    }*/"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    if ((task1StartTime \u003d\u003d null \u0026\u0026 taskStart2Time \u003d\u003d null)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        || (task1StartTime \u003d\u003d null \u0026\u0026 taskStart2Time !\u003d null)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        || (task1StartTime !\u003d null \u0026\u0026 taskStart2Time \u003d\u003d null)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        if (task1EndTime.after(task2EndTime)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                            Task temp \u003d arrlist.get(i);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                            arrlist.set(i, arrlist.get(i + 1));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                            arrlist.set(i + 1, temp);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                            sorted \u003d false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    } else if (task1StartTime !\u003d null \u0026\u0026 task1StartTime !\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        if (task1StartTime.after(taskStart2Time)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                            Task temp \u003d arrlist.get(i);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                            arrlist.set(i, arrlist.get(i + 1));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                            arrlist.set(i + 1, temp);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                            sorted \u003d false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        } else if (task1StartTime.equals(taskStart2Time) \u0026\u0026 task1EndTime.after(task1EndTime)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                            Task temp \u003d arrlist.get(i);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                            arrlist.set(i, arrlist.get(i + 1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                            arrlist.set(i + 1, temp);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                            sorted \u003d false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 35,
      "SholihinK": 75,
      "jaedonkey": 63,
      "yueyeah": 1
    }
  },
  {
    "path": "src/main/java/compal/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public interface Storage\u003cT\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    String saveFilePath \u003d null;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    T loadData();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void saveData(T arrlist);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 4,
      "-": 10
    }
  },
  {
    "path": "src/main/java/compal/storage/StorageParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Interface for parsing storage data."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * @author jaedonkey"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public interface StorageParser\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    T parseData(String[] parts);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 11
    }
  },
  {
    "path": "src/main/java/compal/storage/TaskStorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Represents file used to store COMPal."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class TaskStorageManager implements Storage\u003cArrayList\u003cTask\u003e\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_ERROR_MK_FILE \u003d \"Error when trying to creating file.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String DEFAULT_STORAGE \u003d \"./tasks.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskStorageParser tsp;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Prints message of storage initialized."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public TaskStorageManager() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        createFile();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        tsp \u003d new TaskStorageParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Creates the directory for storing data if it does not exist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void createFile() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        File file \u003d new File(DEFAULT_STORAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } catch (IOException se) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                System.out.println(MESSAGE_ERROR_MK_FILE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Creates and loads task objects based on save text file into arraylist, then returns the arraylist."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return ArrayList of stored item found in file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @author jaedonkey"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public ArrayList\u003cTask\u003e loadData() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        ArrayList\u003cTask\u003e tempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            File f \u003d new File(DEFAULT_STORAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String st;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            while ((st \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                Task t;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                String[] parts \u003d st.split(\"_\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                //check if it is a valid task read"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (parts.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                t \u003d tsp.parseData(parts);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                //set tasks completion and reminder status"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (parts[3].equals(\"true\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    t.markAsDone();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (parts[8].equals(\"true\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    t.setHasReminder(true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                //set task id"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                t.setId(Integer.parseInt(parts[0]));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                //add created task to list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                tempList.add(t);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return tempList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Saves ArrayList of tasks into file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param tasks ArrayList of task stored."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @author jaedonkey"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void saveData(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        /*Comparator\u003cTask\u003e compareByDateTime \u003d Comparator.comparing(Task::getDate)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                .thenComparing(Task::getStringStartTime)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                .thenComparing(Task::getStringEndTime)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                .thenComparing(Task::getPriority);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        ArrayList\u003cTask\u003e currList \u003d tasks;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        currList.sort(compareByDateTime);*/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            sb.append(t.getAllDetailsAsString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            File f \u003d new File(DEFAULT_STORAGE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(f);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            pw.printf(\"%s\\n\", sb);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            System.out.println(\"Storage:WARNING: Save-file not found. Will generate new one.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 2,
      "Catherinetan99": 1,
      "SholihinK": 126
    }
  },
  {
    "path": "src/main/java/compal/storage/TaskStorageParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.RecurringTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Returns Task object based on parts of data stored in the string array."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * @author jaedonkey"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class TaskStorageParser implements StorageParser\u003cTask\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final String SYMBOL_RECUR \u003d \"RT\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final String SYMBOL_DEADLINE \u003d \"D\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final String SYMBOL_EVENT \u003d \"E\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Task parseData(String[] parts) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        switch (parts[1]) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case SYMBOL_DEADLINE:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return new Deadline(parts[2], stringToPriority(parts[4]), parts[5], parts[7]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case SYMBOL_RECUR:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return new RecurringTask(parts[2], stringToPriority(parts[4]), parts[5], parts[6], parts[7]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case SYMBOL_EVENT:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return new Event(parts[2], stringToPriority(parts[4]), parts[5], parts[6], parts[7]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            System.out.println(\"Storage:LOG: Could not parse text. Returning what we managed to parse.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Returns Priority from a String describing the priority level."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param priority task priority string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return Priority enum"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private Task.Priority stringToPriority(String priority) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return Task.Priority.valueOf(priority.toLowerCase());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 46,
      "jaedonkey": 1
    }
  },
  {
    "path": "src/main/java/compal/storage/UserStorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class UserStorageManager implements Storage\u003cString\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String DEFAULT_USER_STORAGE \u003d \"./prefs.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public UserStorageManager() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        createFile();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Creates the directory for storing data if it does not exist."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void createFile() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        File file \u003d new File(DEFAULT_USER_STORAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } catch (IOException se) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                System.out.println(DEFAULT_USER_STORAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Returns the user\u0027s name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return String user\u0027s name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String loadData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        File f \u003d new File(DEFAULT_USER_STORAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(f));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return br.readLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Saves the user\u0027s name."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param toSave user\u0027s name"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void saveData(String toSave) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            File f \u003d new File(DEFAULT_USER_STORAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(f);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            pw.printf(\"%s\\n\", toSave);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            System.out.println(\"Storage:WARNING: Save-file not found. Will generate new one.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 66
    }
  },
  {
    "path": "src/main/java/compal/ui/CalenderUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class CalenderUtil {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public TabPane tabWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Constructor for Calender Util."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public CalenderUtil() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.tabWindow \u003d compal.ui.UiUtil.tabWindow;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Refresh view date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param dateToStore date to view of daily calender"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void dateViewRefresh(String dateToStore) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        DailyCalUi dc \u003d new DailyCalUi();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        tabWindow.getTabs().remove(1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Tab dailyTab \u003d new Tab();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        dailyTab.setText(\"Daily View: \" + dateToStore);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        dailyTab.setContent(dc.init(dateToStore));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        tabWindow.getTabs().add(1, dailyTab);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 32
    }
  },
  {
    "path": "src/main/java/compal/ui/DailyCalUi.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.storage.TaskStorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.Group;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.shape.Line;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Create a timetable drawing onto DailyView scroll-pane within tab-pane."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "class DailyCalUi {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskStorageManager taskStorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String dateToDisplay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private boolean[][] canStore \u003d new boolean[25][5];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ScrollPane sp \u003d new ScrollPane();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Group groupRoot \u003d new Group();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Line[] horizontalLines \u003d new Line[50];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Line[] verticalLines \u003d new Line[50];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Text[] timeAM \u003d new Text[50];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Text[] timePM \u003d new Text[50];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int[] clockTime \u003d {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double colOneXLayout \u003d 25;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double colOneYLayout \u003d -25;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int horizontalLineCounter \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double horizontalYLayout \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double horizontalXLayout \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double[][] storedXAxis \u003d new double[25][5];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double[][] storedYAxis \u003d new double[25][5];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int startTime \u003d 8;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int endTime \u003d 19;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e tempOriginalList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e dailyCalArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    DailyCalUi() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskStorageManager \u003d new TaskStorageManager();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Initializer function set canStore array to true state."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static void setTrue(boolean[][] array) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (boolean[] row : array) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Arrays.fill(row, true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Initializer function to create final gui timetable."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return scrollPane final object state"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    ScrollPane init(String givenDate) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        tempOriginalList \u003d taskStorageManager.loadData();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        setTrue(canStore);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        dateToDisplay \u003d givenDate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        createDailyArrayList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        sp \u003d buildTimeTable();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return sp;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Create an array list of type task of that specific day."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Sorted by priority scoring and then time.."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Only display non-deadline events."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void createDailyArrayList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Comparator\u003cTask\u003e compareByStartTime \u003d Comparator.comparingLong(Task::getPriorityScore).reversed();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task t : tempOriginalList) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (t.getStringDate().equals(dateToDisplay)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (t.getSymbol().equals(\"D\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                t.calculateAndSetPriorityScore();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                dailyCalArrayList.add(t);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        dailyCalArrayList.sort(compareByStartTime);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Call the require functions to create final state of timetable."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return scrollPane final object state"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ScrollPane buildTimeTable() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        setTime();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        genDateSLot();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        genTimeSlot();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (int i \u003d startTime; i \u003c endTime; i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            drawScheduleSquare(i);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        sp.setContent(groupRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return sp;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Check through the daily taskList to check if there\u0027s any event that starts before 8am or ends after 7pm"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * If there is, set startTime or EndTime to the detected time."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void setTime() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task task : dailyCalArrayList) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int tempStartTime \u003d Integer.parseInt(task.getStringStartTime().substring(0, 2));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (tempStartTime \u003c startTime) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                startTime \u003d tempStartTime;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int tempEndTime \u003d Integer.parseInt(task.getStringEndTime().substring(0, 2));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (tempEndTime \u003e endTime) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                endTime \u003d tempEndTime;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Generate the date to the displayed on top left column."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void genDateSLot() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Text date \u003d new Text();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        date.setText(dateToDisplay);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        date.setY(colOneYLayout);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        date.setX(colOneXLayout);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        colOneYLayout +\u003d 50;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        groupRoot.getChildren().add(date);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Caller function to generate all horizontal and vertical lines"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * for each time slot for daily View."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void genTimeSlot() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (int i \u003d 0; i \u003c clockTime.length; i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            makeASlot(i);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        makeHorizontalLines(horizontalLineCounter++);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        makeHeaderVerticalLines();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Caller function to generate a slot for each time range and fill the slot."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * With the logic below"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * 1. Generate only the the detected time range."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * 2. If time is AM or PM, display the time as e.g. 09:00 AM."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * 3. Draw the square for that slot."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * 4. If that time has an event, draw the square for the total event."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void makeASlot(int i) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int temp \u003d horizontalLineCounter;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (clockTime[i] \u003c startTime || clockTime[i] \u003e endTime) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (clockTime[i] \u003c 12) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            makeTimeAM(i);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            for (int x \u003d temp; x \u003c temp + 2; x++) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                makeHorizontalLines(x);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (x \u003d\u003d temp) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    storeScheduleAxis(clockTime[i]);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                horizontalLineCounter++;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            makeTimePM(i);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            for (int x \u003d temp; x \u003c temp + 2; x++) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                makeHorizontalLines(x);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (x \u003d\u003d temp) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    storeScheduleAxis(clockTime[i]);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                horizontalLineCounter++;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Create title for schedule depending on type of task Type."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return Final title to be display for each block on GUI"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String createTitle(Task task) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String blockTitle \u003d \"\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (task.getSymbol().equals(\"LECT\")) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            blockTitle \u003d \"[Lecture]\\n\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (task.getSymbol().equals(\"TUT\")) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            blockTitle \u003d \"[Tutorial]\\n\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (task.getSymbol().equals(\"SECT\")) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            blockTitle \u003d \"[Sectional]\\n\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (task.getSymbol().equals(\"LAB\")) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            blockTitle \u003d \"[Lab]\\n\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (task.getSymbol().equals(\"RT\")) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            blockTitle \u003d \"[Event]\\n\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (task.getSymbol().equals(\"E\")) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            blockTitle \u003d \"[Event]\\n\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (task.getPriority().equals(Task.Priority.high)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            blockTitle +\u003d \"[Priority: High]\\n\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (task.getPriority().equals(Task.Priority.medium)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            blockTitle +\u003d \"[Priority: Medium]\\n\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            blockTitle +\u003d \"[Priority: Low]\\n\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        blockTitle +\u003d task.getDescription();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return blockTitle;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Create a square block of schedule depending on the duration of the event."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void drawScheduleSquare(int currentTime) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int eventCounter \u003d 0;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int hourInMin \u003d 60;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        double pixelBlock \u003d 100;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task task : dailyCalArrayList) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (eventCounter \u003c 5 \u0026\u0026 Integer.parseInt(task.getStringStartTime().substring(0, 2)) \u003d\u003d currentTime) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int startHour \u003d Integer.parseInt(task.getStringStartTime().substring(0, 2));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int startMin \u003d Integer.parseInt(task.getStringStartTime().substring(2, 4));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int endHour \u003d Integer.parseInt(task.getStringEndTime().substring(0, 2));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int endMin \u003d Integer.parseInt(task.getStringEndTime().substring(2, 4));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int totalHour;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int totalMin;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (endMin \u003e\u003d startMin) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalMin \u003d endMin - startMin;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalHour \u003d endHour - startHour;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    endHour--;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalMin \u003d endMin + hourInMin - startMin;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalHour \u003d endHour - startHour;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (totalHour \u003d\u003d 0 \u0026\u0026 totalMin \u003d\u003d 0) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                //Drawing a Rectangle"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                double heightY \u003d 1.7;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                double heightYMin \u003d heightY * totalMin;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                double heightYHour \u003d pixelBlock * totalHour;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                Rectangle rectangle \u003d new Rectangle(pixelBlock, heightYHour + heightYMin);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                rectangle.setFill(colorFill(task));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                rectangle.setStroke(Color.BLACK);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                final StackPane stack \u003d new StackPane();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                final Text text \u003d new Text(createTitle(task));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                text.setFont(Font.font(\"Georgia Italic\", 12));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                text.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                stack.getChildren().addAll(rectangle, text);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                while (storedXAxis[currentTime][eventCounter] \u003d\u003d 0) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    eventCounter++;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                stack.setLayoutX(storedXAxis[currentTime][eventCounter]);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                stack.setLayoutY(storedYAxis[currentTime][eventCounter]);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                groupRoot.getChildren().add(stack);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                eventCounter++;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Set color of rectangle to depending on the scenario below."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Color colorFill(Task t) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (t.getisDone().equals(\"true\")) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.DARKSEAGREEN;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getSymbol().equals(\"LECT\")) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.GOLDENROD;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getSymbol().equals(\"TUT\")) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.DEEPPINK;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getSymbol().equals(\"SECT\")) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.VIOLET;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getSymbol().equals(\"LAB\")) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.INDIANRED;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getSymbol().equals(\"RT\")) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.LEMONCHIFFON;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getSymbol().equals(\"E\")) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.CADETBLUE;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return Color.BLUE;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Store schedule axis of current time."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void storeScheduleAxis(int currentTime) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int eventCounter \u003d 0;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        double pixelBlock \u003d 100.00;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int hourInMin \u003d 60;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task task : dailyCalArrayList) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (Integer.parseInt(task.getStringStartTime().substring(0, 2)) \u003d\u003d currentTime \u0026\u0026 eventCounter \u003c 5) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int startHour \u003d Integer.parseInt(task.getStringStartTime().substring(0, 2));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int startMin \u003d Integer.parseInt(task.getStringStartTime().substring(2, 4));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int endHour \u003d Integer.parseInt(task.getStringEndTime().substring(0, 2));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int endMin \u003d Integer.parseInt(task.getStringEndTime().substring(2, 4));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int totalHour;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int totalMin;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (endMin \u003e\u003d startMin) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalMin \u003d endMin - startMin;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalHour \u003d endHour - startHour;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    endHour--;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalMin \u003d endMin + hourInMin - startMin;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalHour \u003d endHour - startHour;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (totalHour \u003d\u003d 0 \u0026\u0026 totalMin \u003d\u003d 0) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                double pxPerMin \u003d (pixelBlock / (double) hourInMin);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                double downPX \u003d pxPerMin * startMin;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                while (!canStore[currentTime][eventCounter]) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    eventCounter++;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (canStore[currentTime][eventCounter]) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    double layoutX \u003d getEventLayoutX(eventCounter);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    storedXAxis[currentTime][eventCounter] \u003d layoutX;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    storedYAxis[currentTime][eventCounter] \u003d horizontalYLayout + downPX - 50;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    int futureEndTime \u003d Integer.parseInt(task.getStringEndTime().substring(0, 2));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    for (int futureTime \u003d currentTime; futureTime \u003c futureEndTime; futureTime++) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        canStore[futureTime][eventCounter] \u003d false;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                eventCounter +\u003d 1;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Get coordinates depending on which event it\u0027s being slotted into."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return integer coordinates of X-axis."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int getEventLayoutX(int eventCounter) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        switch (eventCounter) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return 200;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return 300;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return 400;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return 500;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return 100;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Set text to be displayed as AM."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param time of the event."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void makeTimeAM(int time) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timeAM[time] \u003d new Text();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String toStore \u003d clockTime[time] + \":00 am\";"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timeAM[time].setText(toStore);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timeAM[time].setY(colOneYLayout);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timeAM[time].setX(colOneXLayout);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        colOneYLayout +\u003d 100;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        groupRoot.getChildren().add(timeAM[time]);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Set text to be displayed as PM."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param time of the event."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void makeTimePM(int time) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timePM[time] \u003d new Text();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String toStore \u003d clockTime[time] + \":00 PM\";"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timePM[time].setText(toStore);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timePM[time].setY(colOneYLayout);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timePM[time].setX(colOneXLayout);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        colOneYLayout +\u003d 100;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        groupRoot.getChildren().add(timePM[time]);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Call function to draw horizontal Lines."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void makeHorizontalLines(int i) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        drawHorizontalLines(i);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Draw horizontal Lines."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void drawHorizontalLines(int i) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i] \u003d new Line();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i].setStartX(0);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i].setStartY(0);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i].setEndX(600);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i].setEndY(0);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i].setLayoutX(horizontalXLayout);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i].setLayoutY(horizontalYLayout);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalXLayout +\u003d 0;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalYLayout +\u003d 50;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        groupRoot.getChildren().add(horizontalLines[i]);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Draw vertical Lines."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void makeHeaderVerticalLines() {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0] \u003d new Line();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0].setStartX(0);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0].setStartY(0);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0].setEndX(0);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0].setEndY(horizontalYLayout);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        double verticalXLayout \u003d 100;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0].setLayoutX(verticalXLayout);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        double verticalYLayout \u003d 0;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0].setLayoutY(verticalYLayout);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        groupRoot.getChildren().add(verticalLines[0]);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 446
    }
  },
  {
    "path": "src/main/java/compal/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.LogicManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " * Handles GUI."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " * This is a JavaFXML Controller class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    //Class Properties/Variables"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_EMPTY_INPUT \u003d \"Empty Input: Empty input detected!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private LogicManager logicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Main window constructor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public MainWindow() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.logicManager \u003d new LogicManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Handles user input by sending it to the parser."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Called by the enter button inside MainWindow.fxml."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private void handleUserInput() throws ParserException, CommandException, ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        String cmd \u003d userInput.getText();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (cmd.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new ParserException(MESSAGE_EMPTY_INPUT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(cmd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 7,
      "SholihinK": 18,
      "jaedonkey": 22
    }
  },
  {
    "path": "src/main/java/compal/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * API of UI components."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void start(Stage stage);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 2,
      "SholihinK": 10,
      "jaedonkey": 1
    }
  },
  {
    "path": "src/main/java/compal/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private UiUtil uiUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public UiManager(UiUtil uiUtil) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.uiUtil \u003d uiUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            fxmlLoader.setLocation(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            TabPane tabReference \u003d (TabPane) ap.getChildren().get(2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            uiUtil.setTabWindow(tabReference);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            //Create MainWindow Pane"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            VBox root \u003d new VBox();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            ScrollPane mainPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            mainPane.setContent(root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Tab mainTab \u003d new Tab();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            mainTab.setText(\"Main Window\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            mainTab.setContent(mainPane);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            tabReference.getTabs().add(0, mainTab);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            //Create DailyCalUI Pane"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            DailyCalUi dc \u003d new DailyCalUi();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String datePattern \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String stringTodayDate \u003d new SimpleDateFormat(datePattern).format(new Date());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            ScrollPane dailyPane \u003d dc.init(stringTodayDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Tab dailyTab \u003d new Tab();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            dailyTab.setText(\"Daily View: \" + stringTodayDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            dailyTab.setContent(dailyPane);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            tabReference.getTabs().add(1, dailyTab);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            uiUtil.setMainWindow(mainPane);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Scene s1 \u003d new Scene(ap);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            primaryStage.setScene(s1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            primaryStage.setTitle(\"ComPAL\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            primaryStage.setOpacity(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            primaryStage.getIcons().add(new Image(new FileInputStream(new File(\"./icon.png\"))));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Label date \u003d (Label) ap.getChildren().get(4);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Date d \u003d new Date();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            date.setText(\"Today\u0027s Date:\" + formatter.format(d));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            primaryStage.show();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 83
    }
  },
  {
    "path": "src/main/java/compal/ui/UiUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.text.FontPosture;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Represents userinterface."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class UiUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static ScrollPane mainWindow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static TabPane tabWindow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void setMainWindow(ScrollPane mainWindow) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        UiUtil.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void setTabWindow(TabPane tabWindow) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        UiUtil.tabWindow \u003d tabWindow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Converts the object into string form using toString()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * and prints it onto the GUI\u0027s primary display box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param text Input object received to be print on gui. Any object type can be used, as long as"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *             it has a \u0027toString()\u0027 function defined."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void printg(Object text) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        VBox vbox \u003d (VBox) mainWindow.getContent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        vbox.getChildren().addAll(getDialogLabel(text.toString()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Overloaded version of printg which allows you to customize style of text."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * e.g usage; printg(\"hello world!\", \"verdana\", 12, Color.RED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param text Input object received to be print on gui. Any object type can be used, as long as"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *             it has a \u0027toString()\u0027 function defined."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void printg(Object text, String font, int size, Color color) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        VBox vbox \u003d (VBox) mainWindow.getContent();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        vbox.getChildren().addAll(getDialogLabel(text.toString(), font, size, color));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Returns a label (node) with the text as text."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param text Dialog text label received."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return Label (Node) with the text as text."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Label label \u003d new Label(text);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        label.setFont(Font.font(\"verdana\", FontWeight.LIGHT, FontPosture.REGULAR, 15));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        label.setWrapText(true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Returns a label (node) with the input text, font, fontsize and color."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Used when function is overloaded."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param text  Dialog text label received."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param font  Font of text."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param size  Fontsize of text."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param color Color of text."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return Label (Node) with the text as text."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Label getDialogLabel(String text, String font, int size, Color color) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Label label \u003d new Label(text);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        label.setFont(Font.font(font, FontWeight.LIGHT, FontPosture.REGULAR, size));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        label.setTextFill(color);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        label.setWrapText(true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Clears the display viewport on the GUI."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Parser calls this function when it receives a \u0027clear\u0027 command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void clearPrimary() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        VBox vbox \u003d (VBox) mainWindow.getContent();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        vbox.getChildren().clear();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SholihinK": 95
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "         maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "         prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Cursor?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.effect.Bloom?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "\u003c?import javafx.scene.effect.Glow?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"517.0\" prefWidth\u003d\"670.0\" style\u003d\"-fx-background-color: #a3cde3;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"compal.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"103.0\" layoutY\u003d\"63.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"547.0\" promptText\u003d\"Enter command here...\" style\u003d\"-fx-background-radius: 10 10 10 10;\" AnchorPane.rightAnchor\u003d\"19.799999999999955\" AnchorPane.topAnchor\u003d\"63.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"14.0\" layoutY\u003d\"64.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" opacity\u003d\"0.9\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #cedae0; -fx-border-color: #cedae0; -fx-border-radius: 10 10 10 10;\" text\u003d\"Enter\" AnchorPane.leftAnchor\u003d\"14.0\" AnchorPane.topAnchor\u003d\"64.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                \u003cGlow level\u003d\"0.46\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cTabPane layoutX\u003d\"17.0\" layoutY\u003d\"136.0\" prefHeight\u003d\"352.0\" prefWidth\u003d\"634.0\" tabClosingPolicy\u003d\"UNAVAILABLE\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cLabel layoutX\u003d\"14.0\" layoutY\u003d\"118.0\" text\u003d\"Terminal\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cLabel fx:id\u003d\"date\" layoutX\u003d\"289.0\" layoutY\u003d\"118.0\" text\u003d\"Label\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cText fill\u003d\"WHITE\" layoutX\u003d\"256.0\" layoutY\u003d\"42.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"COMPal\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                \u003cFont size\u003d\"26.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        \u003c/Text\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ceffect\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cBloom threshold\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/effect\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccursor\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cCursor fx:constant\u003d\"OPEN_HAND\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/cursor\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 10,
      "jaedonkey": 9,
      "-": 18
    }
  },
  {
    "path": "src/test/java/compal/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Asserts that the parsing of user input by  parserManager is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * equals to expectedCommand ."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    static void assertParseSuccess(CommandParser commandParser, String userInput,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                                   CommandResult expectedCommand, TaskList taskList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            CommandResult command \u003d commandParser.parseCommand(userInput).commandExecute(taskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            assertEquals(expectedCommand.feedbackToUser, command.feedbackToUser);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (ParserException | CommandException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new IllegalArgumentException(e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Asserts that the parsing of user input by parser is unsuccessful and the error message"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * equals to the errorMessage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    static void assertParseFailure(CommandParser parserManager, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            parserManager.parseCommand(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 2,
      "SholihinK": 38
    }
  },
  {
    "path": "src/test/java/compal/logic/parser/DoneParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.storage.TaskStorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParser.MESSAGE_MISSING_INPUT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParser.MESSAGE_MISSING_TOKEN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.model.tasks.Task.Priority.high;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "class DoneParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private DoneParser parser \u003d new DoneParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        TaskStorageManager taskStorageManager \u003d new TaskStorageManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        //ArrayList\u003cTask\u003e taskArrList \u003d new ArrayList\u003c\u003e(taskStorageManager.loadData());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        //taskList.setArrList(taskArrList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_invalidToken_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseFailure(parser, \"-1\", MESSAGE_MISSING_TOKEN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_validToken_EmptyInput_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseFailure(parser, \"/id\", MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_validTokenAndID() throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskList.addTask(new Deadline(\"CS2113T Assignment\", high, \"20/10/2019\", \"1700\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskList.addTask(new Deadline(\"CS2113T Assignment\", high, \"20/10/2019\", \"1700\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int id \u003d taskList.getArrList().get(0).getId();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseSuccess(parser, \"/id \" + id, new DoneCommand(id).commandExecute(taskList), taskList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 54
    }
  },
  {
    "path": "src/test/java/compal/logic/parser/ViewCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.ViewCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.storage.TaskStorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParser.MESSAGE_INVALID_DATE_FORMAT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParser.MESSAGE_MISSING_INPUT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParser.MESSAGE_MISSING_TOKEN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.ViewCommandParser.MESSAGE_INVALID_PARAM;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "class ViewCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        TaskStorageManager taskStorageManager \u003d new TaskStorageManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrList \u003d new ArrayList\u003c\u003e(taskStorageManager.loadData());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskList.setArrList(taskArrList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_invalidDate_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseFailure(parser, \"day /date 30/02/2019\", MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_invalidParam_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseFailure(parser, \"years /date 29/02/2020\", MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseFailure(parser, \"months /date 29/02/2020\", MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_missingDate_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseFailure(parser, \"day /date\", MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_missingToken_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_MISSING_TOKEN);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_CorrectDate_success() throws ParserException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        boolean execute \u003d parser.isDateValid(\"10/10/2010\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertEquals(execute, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_executeView_success() throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String cmdParam \u003d \"week /date 23/10/2019\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseSuccess(parser, cmdParam,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            new ViewCommand(\"week\",\"23/10/2019\").commandExecute(taskList), taskList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 68
    }
  }
]
